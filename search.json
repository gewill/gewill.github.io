[{"title":"7. Closures, Extensions, Protocols, Delegation, and ScrollView - 笔记","url":"/2016/06/21/7-Closures-Extensions-Protocols-Delegation-and-ScrollView-Notes/","content":"<p>[weak self] 比[unowned self]更安全。</p>\n<p> 拓展：分割代码快，更简洁，不要滥用</p>\n<p> 协议：是一个更简洁表达API的方式。是一种类型： 协议用在属性&#x2F;方法的参数或返回值中。</p>\n<p> 下面是协议的一个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveTo</span>(<span class=\"params\">p</span>: <span class=\"type\">CGPoint</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>: <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">moveTo</span>(<span class=\"params\">p</span>: <span class=\"type\">CGPoint</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Car move to <span class=\"subst\">\\(p)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">changeOil</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;changeOil&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Shape</span>: <span class=\"title class_\">Moveable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveTo</span>(<span class=\"params\">p</span>: <span class=\"type\">CGPoint</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Shape move to <span class=\"subst\">\\(p)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;draw&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> prius: <span class=\"type\">Car</span> <span class=\"operator\">=</span> <span class=\"type\">Car</span>(name: <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> square: <span class=\"type\">Shape</span> <span class=\"operator\">=</span> <span class=\"type\">Shape</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thingToMove: <span class=\"type\">Moveable</span> <span class=\"operator\">=</span> prius</span><br><span class=\"line\">thingToMove.moveTo(<span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">var</span> find: <span class=\"type\">Car</span> <span class=\"operator\">=</span> prius</span><br><span class=\"line\">find.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 协议可以作为一个类型，来存储实现该协议的变量，但是不能直接调用后者的非协议的方法和属性</span></span><br><span class=\"line\"><span class=\"comment\">//thingToMove.changeOil()</span></span><br><span class=\"line\">thingToMove <span class=\"operator\">=</span> square</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> thingsToMove: [<span class=\"type\">Moveable</span>] <span class=\"operator\">=</span> [prius, square]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">slide</span>(<span class=\"params\">var</span> <span class=\"params\">slider</span>: <span class=\"type\">Moveable</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> positionToSlideTo <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">88</span>, y: <span class=\"number\">88</span>)</span><br><span class=\"line\">    slider.moveTo(positionToSlideTo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">slide(prius)</span><br><span class=\"line\">slide(square)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">Slippery</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Car</span>: <span class=\"title class_\">Slippery</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> speed: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">slipAndSlide</span>(<span class=\"params\">x</span>: <span class=\"keyword\">protocol</span><span class=\"operator\">&lt;</span><span class=\"type\">Slippery</span>, <span class=\"type\">Moveable</span><span class=\"operator\">&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;slipAndSlide&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">slipAndSlide(prius)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Hexo NexT 添加霞鹜文楷字体","url":"/2022/12/12/Add-LXGW-WenKai-Font-to-hexo-theme-next/","content":"<p>添加 <code>source/_data/head.njk</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/lxgw-wenkai-webfont@1.6.0/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>_config.next.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span> <span class=\"string\">source/_data/head.njk</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">font:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">https://fonts.googleapis.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font options:</span></span><br><span class=\"line\">  <span class=\"comment\"># `external: true` will load this font family from `host` above.</span></span><br><span class=\"line\">  <span class=\"comment\"># `family: Times New Roman`. Without any quotes.</span></span><br><span class=\"line\">  <span class=\"comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class=\"line\">  <span class=\"attr\">global:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">&quot;LXGW WenKai&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for site title (.site-title).</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class=\"line\">  <span class=\"attr\">headings:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for posts (.post-body).</span></span><br><span class=\"line\">  <span class=\"attr\">posts:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class=\"line\">  <span class=\"attr\">codes:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">&quot;LXGW WenKai Mono, Source Code Pro&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成✅</p>\n"},{"title":"AVFoundation Camera Swift","url":"/2016/04/22/AVFoundation-Camera-Swift/","content":"<p>AVCam-iOSUsingAVFoundationtoCaptureImagesandMovies:<br><a href=\"https://github.com/robovm/apple-ios-samples/tree/master/AVCam-iOSUsingAVFoundationtoCaptureImagesandMovies\">https://github.com/robovm/apple-ios-samples/tree/master/AVCam-iOSUsingAVFoundationtoCaptureImagesandMovies</a></p>\n<p>参考 Apple 的 Objective-C 转化为 Swift 版本。过程中学了不少知识，因没办法 copy-paste，都必须理解相关知识点才行。KVO 、Notification 和多线程等，注释也十分详细。唯一不舒服的就是AVFoundation API 本身没有对 Swift 优化，<a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html\">Swift KVO</a> 也是一个坑。</p>\n<p>源码：</p>\n<p><a href=\"https://github.com/gewill/test-projects/tree/master/test%20AVCam\">https://github.com/gewill/test-projects/tree/master/test%20AVCam</a></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  JLXCameraViewController.swift</span></span><br><span class=\"line\"><span class=\"comment\">//  test AVCam</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will on 4/15/16.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> AVFoundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> Photos</span><br><span class=\"line\"><span class=\"keyword\">import</span> AssetsLibrary</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">JLXCameraViewControllerDelegate</span>: <span class=\"title class_\">NSObjectProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">cameraViewController</span>(<span class=\"params\">vc</span>: <span class=\"type\">JLXCameraViewController</span>, <span class=\"params\">didFinishCaptureVideoUrl</span> <span class=\"params\">url</span>: <span class=\"type\">NSURL</span>!)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">cameraViewControllerDidCancel</span>(<span class=\"params\">vc</span>: <span class=\"type\">JLXCameraViewController</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">JLXAVCamSetupResult</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Success</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">CameraNotAuthorized</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">SessionConfiguratonFailed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> <span class=\"type\">SessionRunningContext</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JLXCameraViewController</span>: <span class=\"title class_\">UIViewController</span>, <span class=\"title class_\">AVCaptureFileOutputRecordingDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> previewView: <span class=\"type\">JLXPreviewView</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> cameraUnavailableLabel: <span class=\"type\">UILabel</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> resumeButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> flashButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> changeCameraButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> cancelButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> durationLabel: <span class=\"type\">UILabel</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">var</span> recordButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> delegate: <span class=\"type\">JLXCameraViewControllerDelegate</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Session management</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Communicate with the session and other session objects on this queue.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sessionQueue <span class=\"operator\">=</span> dispatch_queue_create(<span class=\"string\">&quot;session queue&quot;</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> <span class=\"keyword\">var</span> session: <span class=\"type\">AVCaptureSession</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> videoDeviceInput: <span class=\"type\">AVCaptureDeviceInput</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> movieFileOutput: <span class=\"type\">AVCaptureMovieFileOutput</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Utilities</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> setupResult: <span class=\"type\">JLXAVCamSetupResult</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sessionRunning: <span class=\"type\">Bool</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> backgroundRecordingId: <span class=\"type\">UIBackgroundTaskIdentifier</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> durationTimer: <span class=\"type\">NSTimer</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seconds: <span class=\"type\">Int</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isRecording <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - life cycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setupUI()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setupSession()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">setupUI</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Disable UI. The UI is enabled if and only if the session starts running.</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.changeCameraButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.flashButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.resumeButton.setTitle(<span class=\"string\">&quot;Tap to resume&quot;</span>, forState: .<span class=\"type\">Normal</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cameraUnavailableLabel.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Camera Unavailable&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cameraUnavailableLabel.hidden <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tapGesture <span class=\"operator\">=</span> <span class=\"type\">UITapGestureRecognizer</span>(target: <span class=\"keyword\">self</span>, action: <span class=\"keyword\">#selector</span>(<span class=\"type\">JLXCameraViewController</span>.focusAndExposeTap(<span class=\"keyword\">_</span>:)))</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.previewView.addGestureRecognizer(tapGesture)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">setupAuthorization</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check video authorization status. Video access is required and audio access is optional.</span></span><br><span class=\"line\">        <span class=\"comment\">// If audio access is denied, audio is not recorded during movie recording.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"type\">AVCaptureDevice</span>.authorizationStatusForMediaType(<span class=\"type\">AVMediaTypeVideo</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">AVAuthorizationStatus</span>.<span class=\"type\">NotDetermined</span>:</span><br><span class=\"line\">            dispatch_suspend(<span class=\"keyword\">self</span>.sessionQueue)</span><br><span class=\"line\">            <span class=\"type\">AVCaptureDevice</span>.requestAccessForMediaType(<span class=\"type\">AVMediaTypeVideo</span>, completionHandler: &#123; (granted) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> granted <span class=\"operator\">==</span> <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">CameraNotAuthorized</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dispatch_resume(<span class=\"keyword\">self</span>.sessionQueue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">AVAuthorizationStatus</span>.<span class=\"type\">Authorized</span>:</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">Success</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">CameraNotAuthorized</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Setup the capture session.</span></span><br><span class=\"line\">    <span class=\"comment\">// In general it is not safe to mutate an AVCaptureSession or any of its inputs, outputs, or connections from multiple threads at the same time.</span></span><br><span class=\"line\">    <span class=\"comment\">// Why not do all of this on the main queue?</span></span><br><span class=\"line\">    <span class=\"comment\">// Because -[AVCaptureSession startRunning] is a blocking call which can take a long time. We dispatch session setup to the sessionQueue</span></span><br><span class=\"line\">    <span class=\"comment\">// so that the main queue isn&#x27;t blocked, which keeps the UI responsive.</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">setupSession</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create the AVCaptureSession.</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.session <span class=\"operator\">=</span> <span class=\"type\">AVCaptureSession</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Setup the preview view.</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.previewView.setSession(<span class=\"keyword\">self</span>.session)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">Success</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setupAuthorization()</span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">!=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">Success</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.backgroundRecordingId <span class=\"operator\">=</span> <span class=\"type\">UIBackgroundTaskInvalid</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> videoDevice: <span class=\"type\">AVCaptureDevice</span> <span class=\"operator\">=</span> <span class=\"type\">JLXCameraViewController</span>.deviceWithMediaType(<span class=\"type\">AVMediaTypeVideo</span>, preferringPosition: <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Back</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> videoDeviceInput: <span class=\"type\">AVCaptureDeviceInput</span>?</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                videoDeviceInput <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">AVCaptureDeviceInput</span>.<span class=\"keyword\">init</span>(device: videoDevice)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not create video device input: <span class=\"subst\">\\(error.debugDescription)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.beginConfiguration()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.session.canAddInput(videoDeviceInput) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.session.addInput(videoDeviceInput)</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.videoDeviceInput <span class=\"operator\">=</span> videoDeviceInput</span><br><span class=\"line\"></span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Why are we dispatching this to the main queue?</span></span><br><span class=\"line\">                    <span class=\"comment\">// Because AVCaptureVideoPreviewLayer is the backing layer for AAPLPreviewView and UIView</span></span><br><span class=\"line\">                    <span class=\"comment\">// can only be manipulated on the main thread.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Note: As an exception to the above rule, it is not necessary to serialize video orientation changes</span></span><br><span class=\"line\">                    <span class=\"comment\">// on the AVCaptureVideoPreviewLayer’s connection with other session manipulation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Use the status bar orientation as the initial video orientation. Subsequent orientation changes are handled by</span></span><br><span class=\"line\">                    <span class=\"comment\">// -[viewWillTransitionToSize:withTransitionCoordinator:].</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> orientation <span class=\"operator\">=</span> <span class=\"type\">AVCaptureVideoOrientation</span>.<span class=\"type\">LandscapeRight</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> previewLayer <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.previewView.layer <span class=\"keyword\">as!</span> <span class=\"type\">AVCaptureVideoPreviewLayer</span></span><br><span class=\"line\">                    previewLayer.connection.videoOrientation <span class=\"operator\">=</span> orientation</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not add video device input to the session&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">SessionConfiguratonFailed</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> - test failed</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> audioDevice <span class=\"operator\">=</span> <span class=\"type\">AVCaptureDevice</span>.defaultDeviceWithMediaType(<span class=\"type\">AVMediaTypeAudio</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> audioDeviceInput: <span class=\"type\">AVCaptureDeviceInput</span>?</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                audioDeviceInput <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">AVCaptureDeviceInput</span>.<span class=\"keyword\">init</span>(device: audioDevice)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not create audio device input: <span class=\"subst\">\\(error.debugDescription.debugDescription)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> movieFileOutput <span class=\"operator\">=</span> <span class=\"type\">AVCaptureMovieFileOutput</span>()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.session.canAddOutput(movieFileOutput) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.session.addOutput(movieFileOutput)</span><br><span class=\"line\">                <span class=\"keyword\">let</span> connection <span class=\"operator\">=</span> movieFileOutput.connectionWithMediaType(<span class=\"type\">AVMediaTypeVideo</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> connection.supportsVideoStabilization &#123;</span><br><span class=\"line\">                        connection.preferredVideoStabilizationMode <span class=\"operator\">=</span> .<span class=\"type\">Auto</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    connection.enablesVideoStabilizationWhenAvailable <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> connection.supportsVideoOrientation &#123;</span><br><span class=\"line\">                    connection.videoOrientation <span class=\"operator\">=</span> <span class=\"type\">AVCaptureVideoOrientation</span>.<span class=\"type\">LandscapeRight</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.movieFileOutput <span class=\"operator\">=</span> movieFileOutput</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not add movie file output to the session&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">=</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">SessionConfiguratonFailed</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.commitConfiguration()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">didReceiveMemoryWarning</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.didReceiveMemoryWarning()</span><br><span class=\"line\">        <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewWillAppear</span>(<span class=\"params\">animated</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewWillAppear(animated)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// response setupResult</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.setupResult &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> result &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> .<span class=\"type\">Success</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// Only setup observers and start the session running if setup succeeded.</span></span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.addObservers()</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.session.startRunning()</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.sessionRunning <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.session.running</span><br><span class=\"line\">                <span class=\"keyword\">case</span> .<span class=\"type\">CameraNotAuthorized</span>:</span><br><span class=\"line\">                    dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> title <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle().localizedInfoDictionary<span class=\"operator\">!</span>[<span class=\"string\">&quot;CFBundleName&quot;</span>] <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> message <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;AVCam doesn&#x27;t have permission to use the camera, please change privacy settings&quot;</span>, <span class=\"string\">&quot;Alert message when the user has denied access to the camera&quot;</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> cancelText <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;OK&quot;</span>, <span class=\"string\">&quot;Alert OK button&quot;</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> settingsText <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;Settings&quot;</span>, <span class=\"string\">&quot;Alert button to open Settings&quot;</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> alertController <span class=\"operator\">=</span> <span class=\"type\">UIAlertController</span>(title: title, message: message, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> cancelAction <span class=\"operator\">=</span> <span class=\"type\">UIAlertAction</span>(title: cancelText, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                            alertController.addAction(cancelAction)</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> settingsAction <span class=\"operator\">=</span> <span class=\"type\">UIAlertAction</span>(title: settingsText, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: &#123; (action) <span class=\"keyword\">in</span></span><br><span class=\"line\">                                <span class=\"type\">UIApplication</span>.sharedApplication().openURL(<span class=\"type\">NSURL</span>(string: <span class=\"type\">UIApplicationOpenSettingsURLString</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                            alertController.addAction(settingsAction)</span><br><span class=\"line\">                            <span class=\"keyword\">self</span>.presentViewController(alertController, animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">let</span> alert <span class=\"operator\">=</span> <span class=\"type\">UIAlertView</span>(title: title, message: message, delegate: <span class=\"literal\">nil</span>, cancelButtonTitle: cancelText, otherButtonTitles: settingsText)</span><br><span class=\"line\">                            alert.show()</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> .<span class=\"type\">SessionConfiguratonFailed</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> title <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle().localizedInfoDictionary<span class=\"operator\">!</span>[<span class=\"string\">&quot;CFBundleName&quot;</span>] <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> message <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;Unable to capture media&quot;</span>, <span class=\"string\">&quot;Alert message when something goes wrong during capture session configuration&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> cancelText <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;OK&quot;</span>, <span class=\"string\">&quot;Alert OK button&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> alertController <span class=\"operator\">=</span> <span class=\"type\">UIAlertController</span>(title: title, message: message, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> cancelAction <span class=\"operator\">=</span> <span class=\"type\">UIAlertAction</span>(title: cancelText, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                        alertController.addAction(cancelAction)</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.presentViewController(alertController, animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> alert <span class=\"operator\">=</span> <span class=\"type\">UIAlertView</span>(title: title, message: message, delegate: <span class=\"literal\">nil</span>, cancelButtonTitle: cancelText)</span><br><span class=\"line\">                        alert.show()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidDisappear</span>(<span class=\"params\">animated</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.setupResult <span class=\"operator\">==</span> <span class=\"type\">JLXAVCamSetupResult</span>.<span class=\"type\">Success</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.session.stopRunning()</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.removeObservers()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidDisappear(animated)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - Orientation</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">supportedInterfaceOrientations</span>() -&gt; <span class=\"type\">UIInterfaceOrientationMask</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">UIInterfaceOrientationMask</span>.<span class=\"type\">LandscapeRight</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - KVO and Notifications</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addObservers</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.session.addObserver(<span class=\"keyword\">self</span>, forKeyPath: <span class=\"string\">&quot;running&quot;</span>, options: <span class=\"type\">NSKeyValueObservingOptions</span>.<span class=\"type\">New</span>, context: <span class=\"operator\">&amp;</span><span class=\"type\">SessionRunningContext</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(subjectAreaDidChange(<span class=\"keyword\">_</span>:)), name: <span class=\"type\">AVCaptureDeviceSubjectAreaDidChangeNotification</span>, object: <span class=\"keyword\">self</span>.videoDeviceInput.device)</span><br><span class=\"line\">        <span class=\"comment\">// A session can only run when the app is full screen. It will be interrupted</span></span><br><span class=\"line\">        <span class=\"comment\">// in a multi-app layout, introduced in iOS 9,</span></span><br><span class=\"line\">        <span class=\"comment\">// see also the documentation of AVCaptureSessionInterruptionReason. Add</span></span><br><span class=\"line\">        <span class=\"comment\">// observers to handle these session interruptions</span></span><br><span class=\"line\">        <span class=\"comment\">// and show a preview is paused message. See the documentation of</span></span><br><span class=\"line\">        <span class=\"comment\">// AVCaptureSessionWasInterruptedNotification for other</span></span><br><span class=\"line\">        <span class=\"comment\">// interruption reasons.</span></span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(sessionWatInterruptedEnded(<span class=\"keyword\">_</span>:)), name: <span class=\"type\">AVCaptureSessionWasInterruptedNotification</span>, object: <span class=\"keyword\">self</span>.session)</span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(sessionWatInterruptedEnded(<span class=\"keyword\">_</span>:)), name: <span class=\"type\">AVCaptureSessionInterruptionEndedNotification</span>, object: <span class=\"keyword\">self</span>.session)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">removeObservers</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.session.removeObserver(<span class=\"keyword\">self</span>, forKeyPath: <span class=\"string\">&quot;running&quot;</span>, context: <span class=\"operator\">&amp;</span><span class=\"type\">SessionRunningContext</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">observeValueForKeyPath</span>(<span class=\"params\">keyPath</span>: <span class=\"type\">String</span>?, <span class=\"params\">ofObject</span> <span class=\"params\">object</span>: <span class=\"type\">AnyObject</span>?, <span class=\"params\">change</span>: [<span class=\"params\">String</span>: <span class=\"type\">AnyObject</span>]<span class=\"operator\">?</span>, <span class=\"params\">context</span>: <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Void</span>&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> context <span class=\"operator\">==</span> <span class=\"operator\">&amp;</span><span class=\"type\">SessionRunningContext</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> isSessionRunning <span class=\"operator\">=</span> change<span class=\"operator\">?</span>[<span class=\"type\">NSKeyValueChangeNewKey</span>]<span class=\"operator\">?</span>.boolValue <span class=\"keyword\">where</span></span><br><span class=\"line\">            isSessionRunning <span class=\"operator\">==</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Only enable the ability to change camera if the device has more than</span></span><br><span class=\"line\">                    <span class=\"comment\">// one camera.</span></span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.changeCameraButton.enabled <span class=\"operator\">=</span> isSessionRunning <span class=\"operator\">&amp;&amp;</span> (<span class=\"type\">AVCaptureDevice</span>.devicesWithMediaType(<span class=\"type\">AVMediaTypeVideo</span>).count <span class=\"operator\">&gt;</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> isSessionRunning</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">subjectAreaDidChange</span>(<span class=\"params\">notification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> devicePoiont <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">0.5</span>, y: <span class=\"number\">0.5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.focusWithMode(<span class=\"type\">AVCaptureFocusMode</span>.<span class=\"type\">ContinuousAutoFocus</span>, exposureWithMode: <span class=\"type\">AVCaptureExposureMode</span>.<span class=\"type\">ContinuousAutoExposure</span>, atDevicePoint: devicePoiont, monitorSubjectAreaChange: <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">sessionRuntimeError</span>(<span class=\"params\">notification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Automatically try to restart the session running if media services were</span></span><br><span class=\"line\">        <span class=\"comment\">// reset and the last start running succeeded.</span></span><br><span class=\"line\">        <span class=\"comment\">// Otherwise, enable the user to try to resume the session running.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> notification.userInfo<span class=\"operator\">?</span>[<span class=\"type\">AVCaptureSessionErrorKey</span>] <span class=\"keyword\">where</span></span><br><span class=\"line\">        error.code <span class=\"operator\">==</span> <span class=\"type\">AVError</span>.<span class=\"type\">MediaServicesWereReset</span>.rawValue &#123;</span><br><span class=\"line\">            dispatch_async(<span class=\"keyword\">self</span>.sessionQueue, &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.sessionRunning <span class=\"operator\">==</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.session.startRunning()</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.sessionRunning <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.session.running</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dispatch_async(dispatch_get_main_queue(), &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">sessionWasInterrupted</span>(<span class=\"params\">notification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// In some scenarios we want to enable the user to resume the session running.</span></span><br><span class=\"line\">        <span class=\"comment\">// For example, if music playback is initiated via control center while using AVCam,</span></span><br><span class=\"line\">        <span class=\"comment\">// then the user can let AVCam resume the session running, which will stop music playback.</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that stopping music playback in control center will not automatically resume the session running.</span></span><br><span class=\"line\">        <span class=\"comment\">// Also note that it is not always possible to resume, see -[resumeInterruptedSession:].</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> showResumeButton <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// In iOS 9 and later, the userInfo dictionary contains information on why the</span></span><br><span class=\"line\">        <span class=\"comment\">// session was interrupted.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">9.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> reason <span class=\"operator\">=</span> notification.userInfo<span class=\"operator\">?</span>[<span class=\"type\">AVCaptureSessionInterruptionReasonKey</span>] <span class=\"keyword\">where</span> reason <span class=\"keyword\">is</span> <span class=\"type\">Int</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reason <span class=\"keyword\">as!</span> <span class=\"type\">Int</span>) <span class=\"operator\">==</span> <span class=\"type\">AVCaptureSessionInterruptionReason</span>.<span class=\"type\">AudioDeviceInUseByAnotherClient</span>.rawValue <span class=\"operator\">||</span> (reason <span class=\"keyword\">as!</span> <span class=\"type\">Int</span>) <span class=\"operator\">==</span> <span class=\"type\">AVCaptureSessionInterruptionReason</span>.<span class=\"type\">VideoDeviceInUseByAnotherClient</span>.rawValue &#123;</span><br><span class=\"line\">                    showResumeButton <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (reason <span class=\"keyword\">as!</span> <span class=\"type\">Int</span>) <span class=\"operator\">==</span> <span class=\"type\">AVCaptureSessionInterruptionReason</span>.<span class=\"type\">VideoDeviceNotAvailableWithMultipleForegroundApps</span>.rawValue &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Simply fade-in a label to inform the user that the camera is</span></span><br><span class=\"line\">                    <span class=\"comment\">// unavailable.</span></span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.cameraUnavailableLabel.hidden <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.cameraUnavailableLabel.alpha <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">                    <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.cameraUnavailableLabel.alpha <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Capture session was interrupted&quot;</span>)</span><br><span class=\"line\">            showResumeButton <span class=\"operator\">=</span> <span class=\"type\">UIApplication</span>.sharedApplication().applicationState <span class=\"operator\">==</span> <span class=\"type\">UIApplicationState</span>.<span class=\"type\">Inactive</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> showResumeButton &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Simply fade-in a button to enable the user to try to resume the session</span></span><br><span class=\"line\">            <span class=\"comment\">// running.</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.resumeButton.alpha <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.resumeButton.alpha <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">sessionWatInterruptedEnded</span>(<span class=\"params\">notification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Capture session interruption ended&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// hide buttons with animations</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"operator\">!</span><span class=\"keyword\">self</span>.resumeButton.hidden &#123;</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.resumeButton.alpha <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">                &#125;, completion: &#123; (finished) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"operator\">!</span><span class=\"keyword\">self</span>.cameraUnavailableLabel.hidden &#123;</span><br><span class=\"line\">            <span class=\"type\">UIView</span>.animateWithDuration(<span class=\"number\">0.25</span>, animations: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.cameraUnavailableLabel.alpha <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">                &#125;, completion: &#123; (finished) <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.cameraUnavailableLabel.hidden <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: -  Response Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">resumeButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The session might fail to start running, e.g., if a phone or FaceTime</span></span><br><span class=\"line\">            <span class=\"comment\">// call is still using audio or video.</span></span><br><span class=\"line\">            <span class=\"comment\">// A failure to start the session running will be communicated via a session</span></span><br><span class=\"line\">            <span class=\"comment\">// runtime error notification.</span></span><br><span class=\"line\">            <span class=\"comment\">// To avoid repeatedly failing to start the session running, we only try to</span></span><br><span class=\"line\">            <span class=\"comment\">// restart the session running in the</span></span><br><span class=\"line\">            <span class=\"comment\">// session runtime error handler if we aren&#x27;t trying to resume the session</span></span><br><span class=\"line\">            <span class=\"comment\">// running.</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.startRunning()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer <span class=\"operator\">=</span> <span class=\"type\">NSTimer</span>(timeInterval: <span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(<span class=\"type\">JLXCameraViewController</span>.refreshDurationLabel), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"type\">NSRunLoop</span>.currentRunLoop().addTimer(<span class=\"keyword\">self</span>.durationTimer<span class=\"operator\">!</span>, forMode: <span class=\"type\">NSRunLoopCommonModes</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer<span class=\"operator\">?</span>.fire()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sessionRunning <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.session.running</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"operator\">!</span><span class=\"keyword\">self</span>.session.running &#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> title <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle().localizedInfoDictionary<span class=\"operator\">!</span>[<span class=\"string\">&quot;CFBundleName&quot;</span>] <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> message <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;Unable to resume&quot;</span>, <span class=\"string\">&quot;Alert message when unable to resume the session running&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> cancelText <span class=\"operator\">=</span> <span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;OK&quot;</span>, <span class=\"string\">&quot;Alert OK button&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> alertController <span class=\"operator\">=</span> <span class=\"type\">UIAlertController</span>(title: title, message: message, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> cancelAction <span class=\"operator\">=</span> <span class=\"type\">UIAlertAction</span>(title: cancelText, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Cancel</span>, handler: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                        alertController.addAction(cancelAction)</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.presentViewController(alertController, animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> alert <span class=\"operator\">=</span> <span class=\"type\">UIAlertView</span>(title: title, message: message, delegate: <span class=\"literal\">nil</span>, cancelButtonTitle: cancelText)</span><br><span class=\"line\">                        alert.show()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.resumeButton.hidden <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">recordButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Disable the Camera button until recording finishes, and disable the Record</span></span><br><span class=\"line\">        <span class=\"comment\">// button until recording starts or finishes. See the</span></span><br><span class=\"line\">        <span class=\"comment\">// AVCaptureFileOutputRecordingDelegate methods.</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.changeCameraButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.isRecording <span class=\"operator\">==</span> <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.seconds <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationLabel.text <span class=\"operator\">=</span> secondsToFormatTimeFull(<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.seconds <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer <span class=\"operator\">=</span> <span class=\"type\">NSTimer</span>(timeInterval: <span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(<span class=\"type\">JLXCameraViewController</span>.refreshDurationLabel), userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"type\">NSRunLoop</span>.currentRunLoop().addTimer(<span class=\"keyword\">self</span>.durationTimer<span class=\"operator\">!</span>, forMode: <span class=\"type\">NSRunLoopCommonModes</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.durationTimer<span class=\"operator\">?</span>.fire()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.isRecording <span class=\"operator\">=</span> <span class=\"operator\">!</span>isRecording</span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"operator\">!</span><span class=\"keyword\">self</span>.movieFileOutput.recording <span class=\"operator\">&amp;&amp;</span> <span class=\"type\">UIDevice</span>.currentDevice().multitaskingSupported &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Setup background task. This is needed because the</span></span><br><span class=\"line\">                <span class=\"comment\">// -[captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:]</span></span><br><span class=\"line\">                <span class=\"comment\">// callback is not received until AVCam returns to the foreground unless</span></span><br><span class=\"line\">                <span class=\"comment\">// you request background execution time.</span></span><br><span class=\"line\">                <span class=\"comment\">// This also ensures that there will be time to write the file to the</span></span><br><span class=\"line\">                <span class=\"comment\">// photo library when AVCam is backgrounded.</span></span><br><span class=\"line\">                <span class=\"comment\">// To conclude this background execution, -endBackgroundTask is called</span></span><br><span class=\"line\">                <span class=\"comment\">// in</span></span><br><span class=\"line\">                <span class=\"comment\">// -[captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:]</span></span><br><span class=\"line\">                <span class=\"comment\">// after the recorded file has been saved.</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.backgroundRecordingId <span class=\"operator\">=</span> <span class=\"type\">UIApplication</span>.sharedApplication().beginBackgroundTaskWithExpirationHandler(<span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Turn OFF flash for video recording.</span></span><br><span class=\"line\">                <span class=\"type\">JLXCameraViewController</span>.setFlashMode(<span class=\"type\">AVCaptureFlashMode</span>.<span class=\"type\">Off</span>, forDevice: <span class=\"keyword\">self</span>.videoDeviceInput.device)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Start recording to a temporary file.</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> outputFileName <span class=\"operator\">=</span> <span class=\"type\">NSProcessInfo</span>.processInfo().globallyUniqueString</span><br><span class=\"line\">                <span class=\"keyword\">let</span> outputFileUrl <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>(fileURLWithPath: <span class=\"type\">NSTemporaryDirectory</span>()).<span class=\"type\">URLByAppendingPathComponent</span>(outputFileName).<span class=\"type\">URLByAppendingPathExtension</span>(<span class=\"string\">&quot;mov&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.movieFileOutput.startRecordingToOutputFileURL(outputFileUrl, recordingDelegate: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.movieFileOutput.stopRecording()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">changeCameraButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.changeCameraButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentVideoDivice <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.videoDeviceInput.device</span><br><span class=\"line\">            <span class=\"keyword\">var</span> preferredPosition <span class=\"operator\">=</span> <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Unspecified</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> currentPosition <span class=\"operator\">=</span> currentVideoDivice.position</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> currentPosition &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Front</span>:</span><br><span class=\"line\">                preferredPosition <span class=\"operator\">=</span> <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Back</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Back</span>:</span><br><span class=\"line\">                preferredPosition <span class=\"operator\">=</span> <span class=\"type\">AVCaptureDevicePosition</span>.<span class=\"type\">Front</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> videoDevice <span class=\"operator\">=</span> <span class=\"type\">JLXCameraViewController</span>.deviceWithMediaType(<span class=\"type\">AVMediaTypeVideo</span>, preferringPosition: preferredPosition)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> videoDeviceInput: <span class=\"type\">AVCaptureDeviceInput</span>?</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                videoDeviceInput <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">AVCaptureDeviceInput</span>.<span class=\"keyword\">init</span>(device: videoDevice)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not create video device input: <span class=\"subst\">\\(error.debugDescription)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.beginConfiguration()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Remove the existing device input first, since using the front and back</span></span><br><span class=\"line\">            <span class=\"comment\">// camera simultaneously is not supported.</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.removeInput(<span class=\"keyword\">self</span>.videoDeviceInput)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.session.canAddInput(videoDeviceInput) &#123;</span><br><span class=\"line\">                <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>, name: <span class=\"type\">AVCaptureDeviceSubjectAreaDidChangeNotification</span>, object: currentVideoDivice)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">JLXCameraViewController</span>.setFlashMode(<span class=\"type\">AVCaptureFlashMode</span>.<span class=\"type\">Auto</span>, forDevice: videoDevice)</span><br><span class=\"line\">                <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"keyword\">#selector</span>(<span class=\"type\">JLXCameraViewController</span>.subjectAreaDidChange(<span class=\"keyword\">_</span>:)), name: <span class=\"type\">AVCaptureDeviceSubjectAreaDidChangeNotification</span>, object: videoDevice)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.session.addInput(videoDeviceInput)</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.videoDeviceInput <span class=\"operator\">=</span> videoDeviceInput</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.session.addInput(<span class=\"keyword\">self</span>.videoDeviceInput)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> connection <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.movieFileOutput.connectionWithMediaType(<span class=\"type\">AVMediaTypeVideo</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> connection.supportsVideoStabilization &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                    connection.preferredVideoStabilizationMode <span class=\"operator\">=</span> .<span class=\"type\">Auto</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    connection.enablesVideoStabilizationWhenAvailable <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.session.commitConfiguration()</span><br><span class=\"line\"></span><br><span class=\"line\">            dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.changeCameraButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">focusAndExposeTap</span>(<span class=\"params\">gestureRecognizer</span>: <span class=\"type\">UIGestureRecognizer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> devicePoint <span class=\"operator\">=</span> (<span class=\"keyword\">self</span>.previewView.layer <span class=\"keyword\">as!</span> <span class=\"type\">AVCaptureVideoPreviewLayer</span>).captureDevicePointOfInterestForPoint(gestureRecognizer.locationInView(gestureRecognizer.view))</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.focusWithMode(<span class=\"type\">AVCaptureFocusMode</span>.<span class=\"type\">AutoFocus</span>, exposureWithMode: <span class=\"type\">AVCaptureExposureMode</span>.<span class=\"type\">AutoExpose</span>, atDevicePoint: devicePoint, monitorSubjectAreaChange: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">flashButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> - should deal while changeCameraButton</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">refreshDurationLabel</span>() &#123;</span><br><span class=\"line\">        seconds <span class=\"operator\">=</span> seconds <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.durationLabel.text <span class=\"operator\">=</span> secondsToFormatTimeFull(<span class=\"type\">Double</span>(<span class=\"keyword\">self</span>.seconds))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">cancelButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        delegate<span class=\"operator\">?</span>.cameraViewControllerDidCancel(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.dismissViewControllerAnimated(<span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - File Output Recording Delegate</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">captureOutput</span>(<span class=\"params\">captureOutput</span>: <span class=\"type\">AVCaptureFileOutput</span>!, <span class=\"params\">didStartRecordingToOutputFileAtURL</span> <span class=\"params\">fileURL</span>: <span class=\"type\">NSURL</span>!, <span class=\"params\">fromConnections</span> <span class=\"params\">connections</span>: [<span class=\"type\">AnyObject</span>]<span class=\"operator\">!</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Enable the Record button to let the user stop the recording.</span></span><br><span class=\"line\">        dispatch_async(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.recordButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.recordButton.setTitle(<span class=\"type\">String</span>.localizedStringWithFormat(<span class=\"string\">&quot;Stop&quot;</span>, <span class=\"string\">&quot;Recording button stop title&quot;</span>), forState: .<span class=\"type\">Normal</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">captureOutput</span>(<span class=\"params\">captureOutput</span>: <span class=\"type\">AVCaptureFileOutput</span>!, <span class=\"params\">didFinishRecordingToOutputFileAtURL</span> <span class=\"params\">outputFileURL</span>: <span class=\"type\">NSURL</span>!, <span class=\"params\">fromConnections</span> <span class=\"params\">connections</span>: [<span class=\"type\">AnyObject</span>]<span class=\"operator\">!</span>, <span class=\"params\">error</span>: <span class=\"type\">NSError</span>!) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Note that currentBackgroundRecordingID is used to end the background task</span></span><br><span class=\"line\">        <span class=\"comment\">// associated with this recording.</span></span><br><span class=\"line\">        <span class=\"comment\">// This allows a new recording to be started, associated with a new</span></span><br><span class=\"line\">        <span class=\"comment\">// UIBackgroundTaskIdentifier, once the movie file output&#x27;s isRecording</span></span><br><span class=\"line\">        <span class=\"comment\">// property</span></span><br><span class=\"line\">        <span class=\"comment\">// is back to NO — which happens sometime after this method returns.</span></span><br><span class=\"line\">        <span class=\"comment\">// Note: Since we use a unique file path for each recording, a new recording</span></span><br><span class=\"line\">        <span class=\"comment\">// will not overwrite a recording currently being saved.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.delegate<span class=\"operator\">?</span>.cameraViewController(<span class=\"keyword\">self</span>, didFinishCaptureVideoUrl: outputFileURL)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.dismissViewControllerAnimated(<span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - Device Configuration</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">focusWithMode</span>(<span class=\"params\">focusMode</span>: <span class=\"type\">AVCaptureFocusMode</span>, <span class=\"params\">exposureWithMode</span> <span class=\"params\">exposureMode</span>: <span class=\"type\">AVCaptureExposureMode</span>, <span class=\"params\">atDevicePoint</span> <span class=\"params\">point</span>: <span class=\"type\">CGPoint</span>, <span class=\"params\">monitorSubjectAreaChange</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">        dispatch_async(<span class=\"keyword\">self</span>.sessionQueue) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> device <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.videoDeviceInput.device</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> device.lockForConfiguration()</span><br><span class=\"line\">                <span class=\"comment\">// Setting (focus/exposure)PointOfInterest alone does not initiate a</span></span><br><span class=\"line\">                <span class=\"comment\">// (focus/exposure) operation.</span></span><br><span class=\"line\">                <span class=\"comment\">// Call -set(Focus/Exposure)Mode: to apply the new point of interest.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> device.focusPointOfInterestSupported <span class=\"operator\">&amp;&amp;</span> device.isFocusModeSupported(<span class=\"type\">AVCaptureFocusMode</span>.<span class=\"type\">AutoFocus</span>) &#123;</span><br><span class=\"line\">                    device.focusPointOfInterest <span class=\"operator\">=</span> point</span><br><span class=\"line\">                    device.focusMode <span class=\"operator\">=</span> focusMode</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> device.exposurePointOfInterestSupported <span class=\"operator\">&amp;&amp;</span> device.isExposureModeSupported(<span class=\"type\">AVCaptureExposureMode</span>.<span class=\"type\">AutoExpose</span>) &#123;</span><br><span class=\"line\">                    device.exposurePointOfInterest <span class=\"operator\">=</span> point</span><br><span class=\"line\">                    device.exposureMode <span class=\"operator\">=</span> exposureMode</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                device.subjectAreaChangeMonitoringEnabled <span class=\"operator\">=</span> monitorSubjectAreaChange</span><br><span class=\"line\"></span><br><span class=\"line\">                device.unlockForConfiguration()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot; <span class=\"subst\">\\(error.debugDescription)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">func</span> <span class=\"title class_\">setFlashMode</span>(<span class=\"title class_\">flashMode</span>: <span class=\"title class_\">AVCaptureFlashMode</span>, <span class=\"title class_\">forDevice</span> <span class=\"title class_\">device</span>: <span class=\"title class_\">AVCaptureDevice</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> device.hasFlash <span class=\"operator\">&amp;&amp;</span> device.isFlashModeSupported(flashMode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> device.lockForConfiguration()</span><br><span class=\"line\">                device.flashMode <span class=\"operator\">=</span> flashMode</span><br><span class=\"line\">                device.unlockForConfiguration()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Could not lock device for configuration: <span class=\"subst\">\\(error.debugDescription)</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">func</span> <span class=\"title class_\">deviceWithMediaType</span>(<span class=\"title class_\">mediaType</span>: <span class=\"title class_\">String</span>, <span class=\"title class_\">preferringPosition</span> <span class=\"title class_\">position</span>: <span class=\"title class_\">AVCaptureDevicePosition</span>) -&gt; <span class=\"title class_\">AVCaptureDevice</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> devices <span class=\"operator\">=</span> <span class=\"type\">AVCaptureDevice</span>.devicesWithMediaType(mediaType) <span class=\"keyword\">as!</span>[<span class=\"type\">AVCaptureDevice</span>!]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> captureDevice <span class=\"operator\">=</span> devices.first</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> device <span class=\"keyword\">in</span> devices &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> device.position <span class=\"operator\">==</span> position &#123;</span><br><span class=\"line\">                captureDevice <span class=\"operator\">=</span> device</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> captureDevice<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"AVFoundation Programming Guide - Export","url":"/2016/05/03/AVFoundation-Programming-Guide-Export/","content":"<h1 id=\"Export\"><a href=\"#Export\" class=\"headerlink\" title=\"Export\"></a>Export</h1><p>To read and write audiovisual assets, you must use the export APIs provided by the AVFoundation framework. The AVAssetExportSession class provides an interface for simple exporting needs, such as modifying the file format or trimming the length of an asset (see Trimming and Transcoding a Movie). For more in-depth exporting needs, use the AVAssetReader and AVAssetWriter classes.</p>\n<p>Use an AVAssetReader when you want to perform an operation on the contents of an asset. For example, you might read the audio track of an asset to produce a visual representation of the waveform. To produce an asset from media such as sample buffers or still images, use an AVAssetWriter object.</p>\n<blockquote>\n<p>Note: The asset reader and writer classes are not intended to be used for real-time processing. In fact, an asset reader cannot even be used for reading from a real-time source like an HTTP live stream. However, if you are using an asset writer with a real-time data source, such as an AVCaptureOutput object, set the expectsMediaDataInRealTime property of your asset writer’s inputs to YES. Setting this property to YES for a non-real-time data source will result in your files not being interleaved properly.</p>\n</blockquote>\n<h2 id=\"1-Reading-an-Asset\"><a href=\"#1-Reading-an-Asset\" class=\"headerlink\" title=\"1. Reading an Asset\"></a>1. Reading an Asset</h2><p>Each AVAssetReader object can be associated only with a single asset at a time, but this asset may contain multiple tracks. For this reason, you must assign concrete subclasses of the AVAssetReaderOutput class to your asset reader before you begin reading in order to configure how the media data is read. There are three concrete subclasses of the AVAssetReaderOutput base class that you can use for your asset reading needs: AVAssetReaderTrackOutput, AVAssetReaderAudioMixOutput, and AVAssetReaderVideoCompositionOutput.</p>\n<h3 id=\"1-1-Creating-the-Asset-Reader\"><a href=\"#1-1-Creating-the-Asset-Reader\" class=\"headerlink\" title=\"1.1. Creating the Asset Reader\"></a>1.1. Creating the Asset Reader</h3><p>All you need to initialize an AVAssetReader object is the asset that you want to read.</p>\n<p>直接初始化即可，是一个可失败的构造器，注意检查是否成功。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *outError;</span><br><span class=\"line\"><span class=\"built_in\">AVAsset</span> *someAsset = &lt;#<span class=\"built_in\">AVAsset</span> that you want to read#&gt;;</span><br><span class=\"line\"><span class=\"built_in\">AVAssetReader</span> *assetReader = [<span class=\"built_in\">AVAssetReader</span> assetReaderWithAsset:someAsset error:&amp;outError];</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success = (assetReader != <span class=\"literal\">nil</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: Always check that the asset reader returned to you is non-nil to ensure that the asset reader was initialized successfully. Otherwise, the error parameter (outError in the previous example) will contain the relevant error information.</p>\n</blockquote>\n<h3 id=\"1-2-Setting-Up-the-Asset-Reader-Outputs\"><a href=\"#1-2-Setting-Up-the-Asset-Reader-Outputs\" class=\"headerlink\" title=\"1.2. Setting Up the Asset Reader Outputs\"></a>1.2. Setting Up the Asset Reader Outputs</h3><p>After you have created your asset reader, set up at least one output to receive the media data being read. When setting up your outputs, be sure to set the alwaysCopiesSampleData property to NO. In this way, you reap the benefits of performance improvements. In all of the examples within this chapter, this property could and should be set to NO.</p>\n<p>alwaysCopiesSampleData 设置 NO，来获取性能的提升。</p>\n<p>If you want only to read media data from one or more tracks and potentially convert that data to a different format, use the AVAssetReaderTrackOutput class, using a single track output object for each AVAssetTrack object that you want to read from your asset. To decompress an audio track to Linear PCM with an asset reader, you set up your track output as follows:</p>\n<p>设置 track output</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVAsset</span> *localAsset = assetReader.asset;</span><br><span class=\"line\"><span class=\"comment\">// Get the audio track to read.</span></span><br><span class=\"line\"><span class=\"built_in\">AVAssetTrack</span> *audioTrack = [[localAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>] objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// Decompression settings for Linear PCM</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *decompressionAudioSettings = @&#123; <span class=\"built_in\">AVFormatIDKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kAudioFormatLinearPCM] &#125;;</span><br><span class=\"line\"><span class=\"comment\">// Create the output with the audio track and decompression settings.</span></span><br><span class=\"line\"><span class=\"built_in\">AVAssetReaderOutput</span> *trackOutput = [<span class=\"built_in\">AVAssetReaderTrackOutput</span> assetReaderTrackOutputWithTrack:audioTrack outputSettings:decompressionAudioSettings];</span><br><span class=\"line\"><span class=\"comment\">// Add the output to the reader if possible.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([assetReader canAddOutput:trackOutput])</span><br><span class=\"line\">    [assetReader addOutput:trackOutput];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: To read the media data from a specific asset track in the format in which it was stored, pass nil to the outputSettings parameter.</p>\n</blockquote>\n<p>You use the AVAssetReaderAudioMixOutput and AVAssetReaderVideoCompositionOutput classes to read media data that has been mixed or composited together using an AVAudioMix object or AVVideoComposition object, respectively. Typically, these outputs are used when your asset reader is reading from an AVComposition object.</p>\n<p>With a single audio mix output, you can read multiple audio tracks from your asset that have been mixed together using an AVAudioMix object. To specify how the audio tracks are mixed, assign the mix to the AVAssetReaderAudioMixOutput object after initialization. The following code displays how to create an audio mix output with all of the audio tracks from your asset, decompress the audio tracks to Linear PCM, and assign an audio mix object to the output. For details on how to configure an audio mix, see Editing.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVAudioMix</span> *audioMix = &lt;#An <span class=\"built_in\">AVAudioMix</span> that specifies how the audio tracks from the <span class=\"built_in\">AVAsset</span> are mixed#&gt;;</span><br><span class=\"line\"><span class=\"comment\">// Assumes that assetReader was initialized with an AVComposition object.</span></span><br><span class=\"line\"><span class=\"built_in\">AVComposition</span> *composition = (<span class=\"built_in\">AVComposition</span> *)assetReader.asset;</span><br><span class=\"line\"><span class=\"comment\">// Get the audio tracks to read.</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *audioTracks = [composition tracksWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>];</span><br><span class=\"line\"><span class=\"comment\">// Get the decompression settings for Linear PCM.</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *decompressionAudioSettings = @&#123; <span class=\"built_in\">AVFormatIDKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kAudioFormatLinearPCM] &#125;;</span><br><span class=\"line\"><span class=\"comment\">// Create the audio mix output with the audio tracks and decompression setttings.</span></span><br><span class=\"line\"><span class=\"built_in\">AVAssetReaderOutput</span> *audioMixOutput = [<span class=\"built_in\">AVAssetReaderAudioMixOutput</span> assetReaderAudioMixOutputWithAudioTracks:audioTracks audioSettings:decompressionAudioSettings];</span><br><span class=\"line\"><span class=\"comment\">// Associate the audio mix used to mix the audio tracks being read with the output.</span></span><br><span class=\"line\">audioMixOutput.audioMix = audioMix;</span><br><span class=\"line\"><span class=\"comment\">// Add the output to the reader if possible.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([assetReader canAddOutput:audioMixOutput])</span><br><span class=\"line\">    [assetReader addOutput:audioMixOutput];</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: Passing nil for the audioSettings parameter tells the asset reader to return samples in a convenient uncompressed format. The same is true for the AVAssetReaderVideoCompositionOutput class.</p>\n</blockquote>\n<p>The video composition output behaves in much the same way: You can read multiple video tracks from your asset that have been composited together using an AVVideoComposition object. To read the media data from multiple composited video tracks and decompress it to ARGB, set up your output as follows:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVVideoComposition</span> *videoComposition = &lt;#An <span class=\"built_in\">AVVideoComposition</span> that specifies how the video tracks from the <span class=\"built_in\">AVAsset</span> are composited#&gt;;</span><br><span class=\"line\"><span class=\"comment\">// Assumes assetReader was initialized with an AVComposition.</span></span><br><span class=\"line\"><span class=\"built_in\">AVComposition</span> *composition = (<span class=\"built_in\">AVComposition</span> *)assetReader.asset;</span><br><span class=\"line\"><span class=\"comment\">// Get the video tracks to read.</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *videoTracks = [composition tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>];</span><br><span class=\"line\"><span class=\"comment\">// Decompression settings for ARGB.</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *decompressionVideoSettings = @&#123; (<span class=\"type\">id</span>)kCVPixelBufferPixelFormatTypeKey : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kCVPixelFormatType_32ARGB], (<span class=\"type\">id</span>)kCVPixelBufferIOSurfacePropertiesKey : [<span class=\"built_in\">NSDictionary</span> dictionary] &#125;;</span><br><span class=\"line\"><span class=\"comment\">// Create the video composition output with the video tracks and decompression setttings.</span></span><br><span class=\"line\"><span class=\"built_in\">AVAssetReaderOutput</span> *videoCompositionOutput = [<span class=\"built_in\">AVAssetReaderVideoCompositionOutput</span> assetReaderVideoCompositionOutputWithVideoTracks:videoTracks videoSettings:decompressionVideoSettings];</span><br><span class=\"line\"><span class=\"comment\">// Associate the video composition used to composite the video tracks being read with the output.</span></span><br><span class=\"line\">videoCompositionOutput.videoComposition = videoComposition;</span><br><span class=\"line\"><span class=\"comment\">// Add the output to the reader if possible.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([assetReader canAddOutput:videoCompositionOutput])</span><br><span class=\"line\">    [assetReader addOutput:videoCompositionOutput];</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-Reading-the-Asset’s-Media-Data\"><a href=\"#1-3-Reading-the-Asset’s-Media-Data\" class=\"headerlink\" title=\"1.3. Reading the Asset’s Media Data\"></a>1.3. Reading the Asset’s Media Data</h3><p>To start reading after setting up all of the outputs you need, call the startReading method on your asset reader. Next, retrieve the media data individually from each output using the copyNextSampleBuffer method. To start up an asset reader with a single output and read all of its media samples, do the following:</p>\n<p>使用 copyNextSampleBuffer 方法获取 CMSampleBufferRef：一个抽象类，封装了零或多个媒体类型的小样。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start the asset reader up.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetReader startReading];</span><br><span class=\"line\"><span class=\"type\">BOOL</span> done = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!done)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Copy the next sample buffer from the reader output.</span></span><br><span class=\"line\">  <span class=\"built_in\">CMSampleBufferRef</span> sampleBuffer = [<span class=\"keyword\">self</span>.assetReaderOutput copyNextSampleBuffer];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sampleBuffer)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something with sampleBuffer here.</span></span><br><span class=\"line\">    <span class=\"built_in\">CFRelease</span>(sampleBuffer);</span><br><span class=\"line\">    sampleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Find out why the asset reader output couldn&#x27;t copy another sample buffer.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetReader.status == <span class=\"built_in\">AVAssetReaderStatusFailed</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">NSError</span> *failureError = <span class=\"keyword\">self</span>.assetReader.error;</span><br><span class=\"line\">      <span class=\"comment\">// Handle the error here.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// The asset reader output has read all of its samples.</span></span><br><span class=\"line\">      done = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Writing-an-Asset\"><a href=\"#2-Writing-an-Asset\" class=\"headerlink\" title=\"2. Writing an Asset\"></a>2. Writing an Asset</h2><p>The AVAssetWriter class to write media data from multiple sources to a single file of a specified file format. You don’t need to associate your asset writer object with a specific asset, but you must use a separate asset writer for each output file that you want to create. Because an asset writer can write media data from multiple sources, you must create an AVAssetWriterInput object for each individual track that you want to write to the output file. Each AVAssetWriterInput object expects to receive data in the form of CMSampleBufferRef objects, but if you want to append CVPixelBufferRef objects to your asset writer input, use the AVAssetWriterInputPixelBufferAdaptor class.</p>\n<blockquote>\n<p>CVPixelBufferRef: A reference to a Core Video pixel buffer object. The pixel buffer stores an image in main memory.</p>\n</blockquote>\n<h3 id=\"2-1-Creating-the-Asset-Writer\"><a href=\"#2-1-Creating-the-Asset-Writer\" class=\"headerlink\" title=\"2.1. Creating the Asset Writer\"></a>2.1. Creating the Asset Writer</h3><p>To create an asset writer, specify the URL for the output file and the desired file type. The following code displays how to initialize an asset writer to create a QuickTime movie:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSError</span> *outError;</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *outputURL = &lt;#<span class=\"built_in\">NSURL</span> object representing the URL where you want to save the video#&gt;;</span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriter</span> *assetWriter = [<span class=\"built_in\">AVAssetWriter</span> assetWriterWithURL:outputURL</span><br><span class=\"line\">                                                      fileType:<span class=\"built_in\">AVFileTypeQuickTimeMovie</span></span><br><span class=\"line\">                                                         error:&amp;outError];</span><br><span class=\"line\"><span class=\"type\">BOOL</span> success = (assetWriter != <span class=\"literal\">nil</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-Setting-Up-the-Asset-Writer-Inputs\"><a href=\"#2-2-Setting-Up-the-Asset-Writer-Inputs\" class=\"headerlink\" title=\"2.2. Setting Up the Asset Writer Inputs\"></a>2.2. Setting Up the Asset Writer Inputs</h3><p>For your asset writer to be able to write media data, you must set up at least one asset writer input. For example, if your source of media data is already vending media samples as CMSampleBufferRef objects, just use the AVAssetWriterInput class. To set up an asset writer input that compresses audio media data to 128 kbps AAC and connect it to your asset writer, do the following:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Configure the channel layout as stereo.</span></span><br><span class=\"line\">AudioChannelLayout stereoChannelLayout = &#123;</span><br><span class=\"line\">    .mChannelLayoutTag = kAudioChannelLayoutTag_Stereo,</span><br><span class=\"line\">    .mChannelBitmap = <span class=\"number\">0</span>,</span><br><span class=\"line\">    .mNumberChannelDescriptions = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Convert the channel layout object to an NSData object.</span></span><br><span class=\"line\"><span class=\"built_in\">NSData</span> *channelLayoutAsData = [<span class=\"built_in\">NSData</span> dataWithBytes:&amp;stereoChannelLayout length:offsetof(AudioChannelLayout, mChannelDescriptions)];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Get the compression settings for 128 kbps AAC.</span></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *compressionAudioSettings = @&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AVFormatIDKey</span>         : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kAudioFormatMPEG4AAC],</span><br><span class=\"line\">    <span class=\"built_in\">AVEncoderBitRateKey</span>   : [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">128000</span>],</span><br><span class=\"line\">    <span class=\"built_in\">AVSampleRateKey</span>       : [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">44100</span>],</span><br><span class=\"line\">    <span class=\"built_in\">AVChannelLayoutKey</span>    : channelLayoutAsData,</span><br><span class=\"line\">    <span class=\"built_in\">AVNumberOfChannelsKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInteger:<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the asset writer input with the compression settings and specify the media type as audio.</span></span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriterInput</span> *assetWriterInput = [<span class=\"built_in\">AVAssetWriterInput</span> assetWriterInputWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span> outputSettings:compressionAudioSettings];</span><br><span class=\"line\"><span class=\"comment\">// Add the input to the writer if possible.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([assetWriter canAddInput:assetWriterInput])</span><br><span class=\"line\">    [assetWriter addInput:assetWriterInput];</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: If you want the media data to be written in the format in which it was stored, pass nil in the outputSettings parameter. Pass nil only if the asset writer was initialized with a fileType of AVFileTypeQuickTimeMovie.</p>\n</blockquote>\n<p>Your asset writer input can optionally include some metadata or specify a different transform for a particular track using the metadata and transform properties respectively. For an asset writer input whose data source is a video track, you can maintain the video’s original transform in the output file by doing the following:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVAsset</span> *videoAsset = &lt;#<span class=\"built_in\">AVAsset</span> with at least one video track#&gt;;</span><br><span class=\"line\"><span class=\"built_in\">AVAssetTrack</span> *videoAssetTrack = [[videoAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>] objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">assetWriterInput.transform = videoAssetTrack.preferredTransform;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: Set the metadata and transform properties before you begin writing with your asset writer for them to take effect.</p>\n</blockquote>\n<p>When writing media data to the output file, sometimes you may want to allocate pixel buffers. To do so, use the AVAssetWriterInputPixelBufferAdaptor class. For greatest efficiency, instead of adding pixel buffers that were allocated using a separate pool, use the pixel buffer pool provided by the pixel buffer adaptor. The following code creates a pixel buffer object working in the RGB domain that will use CGImage objects to create its pixel buffers.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *pixelBufferAttributes = @&#123;</span><br><span class=\"line\">     kCVPixelBufferCGImageCompatibilityKey : [<span class=\"built_in\">NSNumber</span> numberWithBool:<span class=\"literal\">YES</span>],</span><br><span class=\"line\">     kCVPixelBufferCGBitmapContextCompatibilityKey : [<span class=\"built_in\">NSNumber</span> numberWithBool:<span class=\"literal\">YES</span>],</span><br><span class=\"line\">     kCVPixelBufferPixelFormatTypeKey : [<span class=\"built_in\">NSNumber</span> numberWithInt:kCVPixelFormatType_32ARGB]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriterInputPixelBufferAdaptor</span> *inputPixelBufferAdaptor = [<span class=\"built_in\">AVAssetWriterInputPixelBufferAdaptor</span> assetWriterInputPixelBufferAdaptorWithAssetWriterInput:<span class=\"keyword\">self</span>.assetWriterInput sourcePixelBufferAttributes:pixelBufferAttributes];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Note: All AVAssetWriterInputPixelBufferAdaptor objects must be connected to a single asset writer input. That asset writer input must accept media data of type AVMediaTypeVideo.</p>\n</blockquote>\n<h3 id=\"2-3-Writing-Media-Data\"><a href=\"#2-3-Writing-Media-Data\" class=\"headerlink\" title=\"2.3. Writing Media Data\"></a>2.3. Writing Media Data</h3><p>When you have configured all of the inputs needed for your asset writer, you are ready to begin writing media data. As you did with the asset reader, initiate the writing process with a call to the startWriting method. You then need to start a sample-writing session with a call to the startSessionAtSourceTime: method. All writing done by an asset writer has to occur within one of these sessions and the time range of each session defines the time range of media data included from within the source. For example, if your source is an asset reader that is supplying media data read from an AVAsset object and you don’t want to include media data from the first half of the asset, you would do the following:</p>\n<p>配置完就是开始了：startWriting，和上面的 reader 用法基本一致。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CMTime</span> halfAssetDuration = <span class=\"built_in\">CMTimeMultiplyByFloat64</span>(<span class=\"keyword\">self</span>.asset.duration, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetWriter startSessionAtSourceTime:halfAssetDuration];</span><br><span class=\"line\"><span class=\"comment\">//Implementation continues.</span></span><br></pre></td></tr></table></figure>\n\n<p>Normally, to end a writing session you must call the endSessionAtSourceTime: method. However, if your writing session goes right up to the end of your file, you can end the writing session simply by calling the finishWriting method. To start up an asset writer with a single input and write all of its media data, do the following:</p>\n<p>两种方法都可以结束 writing session：endSessionAtSourceTime 和 finishWriting</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Prepare the asset writer for writing.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetWriter startWriting];</span><br><span class=\"line\"><span class=\"comment\">// Start a sample-writing session.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetWriter startSessionAtSourceTime:kCMTimeZero];</span><br><span class=\"line\"><span class=\"comment\">// Specify the block to execute when the asset writer is ready for media data and the queue to call it on.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetWriterInput requestMediaDataWhenReadyOnQueue:myInputSerialQueue usingBlock:^&#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> ([<span class=\"keyword\">self</span>.assetWriterInput isReadyForMoreMediaData])</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Get the next sample buffer.</span></span><br><span class=\"line\">          <span class=\"built_in\">CMSampleBufferRef</span> nextSampleBuffer = [<span class=\"keyword\">self</span> copyNextSampleBufferToWrite];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (nextSampleBuffer)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If it exists, append the next sample buffer to the output file.</span></span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriterInput appendSampleBuffer:nextSampleBuffer];</span><br><span class=\"line\">               <span class=\"built_in\">CFRelease</span>(nextSampleBuffer);</span><br><span class=\"line\">               nextSampleBuffer = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Assume that lack of a next sample buffer means the sample buffer source is out of samples and mark the input as finished.</span></span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriterInput markAsFinished];</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>The copyNextSampleBufferToWrite method in the code above is simply a stub. The location of this stub is where you would need to insert some logic to return CMSampleBufferRef objects representing the media data that you want to write. One possible source of sample buffers is an asset reader output.</p>\n<p>这里的copyNextSampleBufferToWrite只是一个存根，你有必要在这里进行了一下逻辑上的处理。</p>\n<h2 id=\"3-Reencoding-Assets\"><a href=\"#3-Reencoding-Assets\" class=\"headerlink\" title=\"3. Reencoding Assets\"></a>3. Reencoding Assets</h2><p>重新编码</p>\n<p>You can use an asset reader and asset writer object in tandem to convert an asset from one representation to another. Using these objects, you have more control over the conversion than you do with an AVAssetExportSession object. For example, you can choose which of the tracks you want to be represented in the output file, specify your own output format, or modify the asset during the conversion process. The first step in this process is just to set up your asset reader outputs and asset writer inputs as desired. After your asset reader and writer are fully configured, you start up both of them with calls to the startReading and startWriting methods, respectively. The following code snippet displays how to use a single asset writer input to write media data supplied by a single asset reader output:</p>\n<p>同时使用 asset reader 和 writer 可以用来转换编辑格式。而且比AVAssetExportSession有更多选项可控：指定自己的输出格式、处理中更改 asset。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *serializationQueueDescription = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@ serialization queue&quot;</span>, <span class=\"keyword\">self</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create a serialization queue for reading and writing.</span></span><br><span class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> serializationQueue = dispatch_queue_create([serializationQueueDescription UTF8String], <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Specify the block to execute when the asset writer is ready for media data and the queue to call it on.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.assetWriterInput requestMediaDataWhenReadyOnQueue:serializationQueue usingBlock:^&#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span> ([<span class=\"keyword\">self</span>.assetWriterInput isReadyForMoreMediaData])</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Get the asset reader output&#x27;s next sample buffer.</span></span><br><span class=\"line\">          <span class=\"built_in\">CMSampleBufferRef</span> sampleBuffer = [<span class=\"keyword\">self</span>.assetReaderOutput copyNextSampleBuffer];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sampleBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If it exists, append this sample buffer to the output file.</span></span><br><span class=\"line\">               <span class=\"type\">BOOL</span> success = [<span class=\"keyword\">self</span>.assetWriterInput appendSampleBuffer:sampleBuffer];</span><br><span class=\"line\">               <span class=\"built_in\">CFRelease</span>(sampleBuffer);</span><br><span class=\"line\">               sampleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">               <span class=\"comment\">// Check for errors that may have occurred when appending the new sample buffer.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!success &amp;&amp; <span class=\"keyword\">self</span>.assetWriter.status == <span class=\"built_in\">AVAssetWriterStatusFailed</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">NSError</span> *failureError = <span class=\"keyword\">self</span>.assetWriter.error;</span><br><span class=\"line\">                    <span class=\"comment\">//Handle the error.</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If the next sample buffer doesn&#x27;t exist, find out why the asset reader output couldn&#x27;t vend another one.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetReader.status == <span class=\"built_in\">AVAssetReaderStatusFailed</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">NSError</span> *failureError = <span class=\"keyword\">self</span>.assetReader.error;</span><br><span class=\"line\">                    <span class=\"comment\">//Handle the error here.</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// The asset reader output must have vended all of its samples. Mark the input as finished.</span></span><br><span class=\"line\">                    [<span class=\"keyword\">self</span>.assetWriterInput markAsFinished];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Putting-It-All-Together-Using-an-Asset-Reader-and-Writer-in-Tandem-to-Reencode-an-Asset\"><a href=\"#4-Putting-It-All-Together-Using-an-Asset-Reader-and-Writer-in-Tandem-to-Reencode-an-Asset\" class=\"headerlink\" title=\"4. Putting It All Together: Using an Asset Reader and Writer in Tandem to Reencode an Asset\"></a>4. Putting It All Together: Using an Asset Reader and Writer in Tandem to Reencode an Asset</h2><p>This brief code example illustrates how to use an asset reader and writer to reencode the first video and audio track of an asset into a new file. It shows how to:</p>\n<ul>\n<li>Use serialization queues to handle the asynchronous nature of reading and writing audiovisual data 使用串行队列来调度异步处理读写媒体数据</li>\n<li>Initialize an asset reader and configure two asset reader outputs, one for audio and one for video 初始化 reader 并配置两个输出源</li>\n<li>Initialize an asset writer and configure two asset writer inputs, one for audio and one for video 初始化 writer 并配置两个输出源</li>\n<li>Use an asset reader to asynchronously supply media data to an asset writer through two different output&#x2F;input combinations 使用一个 reader 来异步提供媒体数据给 writer </li>\n<li>Use a dispatch group to be notified of completion of the reencoding process 使用一个 dispatch group 来通知重新编码的进度</li>\n<li>Allow a user to cancel the reencoding process once it has begun 允许用户取消操作</li>\n</ul>\n<blockquote>\n<p>Note: To focus on the most relevant code, this example omits several aspects of a complete application. To use AVFoundation, you are expected to have enough experience with Cocoa to be able to infer the missing pieces.</p>\n</blockquote>\n<h3 id=\"4-1-Handling-the-Initial-Setup\"><a href=\"#4-1-Handling-the-Initial-Setup\" class=\"headerlink\" title=\"4.1. Handling the Initial Setup\"></a>4.1. Handling the Initial Setup</h3><p>Before you create your asset reader and writer and configure their outputs and inputs, you need to handle some initial setup. The first part of this setup involves creating three separate serialization queues to coordinate the reading and writing process.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *serializationQueueDescription = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@ serialization queue&quot;</span>, <span class=\"keyword\">self</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the main serialization queue.</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.mainSerializationQueue = dispatch_queue_create([serializationQueueDescription UTF8String], <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *rwAudioSerializationQueueDescription = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@ rw audio serialization queue&quot;</span>, <span class=\"keyword\">self</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the serialization queue to use for reading and writing the audio data.</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.rwAudioSerializationQueue = dispatch_queue_create([rwAudioSerializationQueueDescription UTF8String], <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *rwVideoSerializationQueueDescription = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@ rw video serialization queue&quot;</span>, <span class=\"keyword\">self</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Create the serialization queue to use for reading and writing the video data.</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.rwVideoSerializationQueue = dispatch_queue_create([rwVideoSerializationQueueDescription UTF8String], <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n\n<p>The main serialization queue is used to coordinate the starting and stopping of the asset reader and writer (perhaps due to cancellation) and the other two serialization queues are used to serialize the reading and writing by each output&#x2F;input combination with a potential cancellation.</p>\n<p>主队列用来定位 reader 和 writer 的开始和结束，另外连个队列用来调度读写的输入输出源的联合体以及潜在的取消操作。</p>\n<p>Now that you have some serialization queues, load the tracks of your asset and begin the reencoding process.</p>\n<p>有了队列，就可以加载 asset 中的 tracks 并开始重新编码的进程了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.asset = &lt;#<span class=\"built_in\">AVAsset</span> that you want to reencode#&gt;;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.cancelled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.outputURL = &lt;#<span class=\"built_in\">NSURL</span> representing desired output URL <span class=\"keyword\">for</span> file generated by asset writer#&gt;;</span><br><span class=\"line\"><span class=\"comment\">// Asynchronously load the tracks of the asset you want to read.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.asset loadValuesAsynchronouslyForKeys:@[<span class=\"string\">@&quot;tracks&quot;</span>] completionHandler:^&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Once the tracks have finished loading, dispatch the work to the main serialization queue.</span></span><br><span class=\"line\">     <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.mainSerializationQueue, ^&#123;</span><br><span class=\"line\">          <span class=\"comment\">// Due to asynchronous nature, check to see if user has already cancelled.</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.cancelled)</span><br><span class=\"line\">               <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          <span class=\"type\">BOOL</span> success = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">          <span class=\"built_in\">NSError</span> *localError = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">          <span class=\"comment\">// Check for success of loading the assets tracks.</span></span><br><span class=\"line\">          success = ([<span class=\"keyword\">self</span>.asset statusOfValueForKey:<span class=\"string\">@&quot;tracks&quot;</span> error:&amp;localError] == <span class=\"built_in\">AVKeyValueStatusLoaded</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If the tracks loaded successfully, make sure that no file exists at the output path for the asset writer.</span></span><br><span class=\"line\">               <span class=\"built_in\">NSFileManager</span> *fm = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">               <span class=\"built_in\">NSString</span> *localOutputPath = [<span class=\"keyword\">self</span>.outputURL path];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ([fm fileExistsAtPath:localOutputPath])</span><br><span class=\"line\">                    success = [fm removeItemAtPath:localOutputPath error:&amp;localError];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">               success = [<span class=\"keyword\">self</span> setupAssetReaderAndAssetWriter:&amp;localError];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">               success = [<span class=\"keyword\">self</span> startAssetReaderAndWriter:&amp;localError];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">               [<span class=\"keyword\">self</span> readingAndWritingDidFinishSuccessfully:success withError:localError];</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>When the track loading process finishes, whether successfully or not, the rest of the work is dispatched to the main serialization queue to ensure that all of this work is serialized with a potential cancellation. Now all that’s left is to implement the cancellation process and the three custom methods at the end of the previous code listing.</p>\n<h3 id=\"4-2-Initializing-the-Asset-Reader-and-Writer\"><a href=\"#4-2-Initializing-the-Asset-Reader-and-Writer\" class=\"headerlink\" title=\"4.2. Initializing the Asset Reader and Writer\"></a>4.2. Initializing the Asset Reader and Writer</h3><p>The custom setupAssetReaderAndAssetWriter: method initializes the reader and writer and configures two output&#x2F;input combinations, one for an audio track and one for a video track. In this example, the audio is decompressed to Linear PCM using the asset reader and compressed back to 128 kbps AAC using the asset writer. The video is decompressed to YUV using the asset reader and compressed to H.264 using the asset writer.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)setupAssetReaderAndAssetWriter:(<span class=\"built_in\">NSError</span> **)outError</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Create and initialize the asset reader.</span></span><br><span class=\"line\">     <span class=\"keyword\">self</span>.assetReader = [[<span class=\"built_in\">AVAssetReader</span> alloc] initWithAsset:<span class=\"keyword\">self</span>.asset error:outError];</span><br><span class=\"line\">     <span class=\"type\">BOOL</span> success = (<span class=\"keyword\">self</span>.assetReader != <span class=\"literal\">nil</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If the asset reader was successfully initialized, do the same for the asset writer.</span></span><br><span class=\"line\">          <span class=\"keyword\">self</span>.assetWriter = [[<span class=\"built_in\">AVAssetWriter</span> alloc] initWithURL:<span class=\"keyword\">self</span>.outputURL fileType:<span class=\"built_in\">AVFileTypeQuickTimeMovie</span> error:outError];</span><br><span class=\"line\">          success = (<span class=\"keyword\">self</span>.assetWriter != <span class=\"literal\">nil</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If the reader and writer were successfully initialized, grab the audio and video asset tracks that will be used.</span></span><br><span class=\"line\">          <span class=\"built_in\">AVAssetTrack</span> *assetAudioTrack = <span class=\"literal\">nil</span>, *assetVideoTrack = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">          <span class=\"built_in\">NSArray</span> *audioTracks = [<span class=\"keyword\">self</span>.asset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ([audioTracks count] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">               assetAudioTrack = [audioTracks objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">          <span class=\"built_in\">NSArray</span> *videoTracks = [<span class=\"keyword\">self</span>.asset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ([videoTracks count] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">               assetVideoTrack = [videoTracks objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"keyword\">if</span> (assetAudioTrack)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If there is an audio track to read, set the decompression settings to Linear PCM and create the asset reader output.</span></span><br><span class=\"line\">               <span class=\"built_in\">NSDictionary</span> *decompressionAudioSettings = @&#123; <span class=\"built_in\">AVFormatIDKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kAudioFormatLinearPCM] &#125;;</span><br><span class=\"line\">               <span class=\"keyword\">self</span>.assetReaderAudioOutput = [<span class=\"built_in\">AVAssetReaderTrackOutput</span> assetReaderTrackOutputWithTrack:assetAudioTrack outputSettings:decompressionAudioSettings];</span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetReader addOutput:<span class=\"keyword\">self</span>.assetReaderAudioOutput];</span><br><span class=\"line\">               <span class=\"comment\">// Then, set the compression settings to 128kbps AAC and create the asset writer input.</span></span><br><span class=\"line\">               AudioChannelLayout stereoChannelLayout = &#123;</span><br><span class=\"line\">                    .mChannelLayoutTag = kAudioChannelLayoutTag_Stereo,</span><br><span class=\"line\">                    .mChannelBitmap = <span class=\"number\">0</span>,</span><br><span class=\"line\">                    .mNumberChannelDescriptions = <span class=\"number\">0</span></span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">               <span class=\"built_in\">NSData</span> *channelLayoutAsData = [<span class=\"built_in\">NSData</span> dataWithBytes:&amp;stereoChannelLayout length:offsetof(AudioChannelLayout, mChannelDescriptions)];</span><br><span class=\"line\">               <span class=\"built_in\">NSDictionary</span> *compressionAudioSettings = @&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">AVFormatIDKey</span>         : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kAudioFormatMPEG4AAC],</span><br><span class=\"line\">                    <span class=\"built_in\">AVEncoderBitRateKey</span>   : [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">128000</span>],</span><br><span class=\"line\">                    <span class=\"built_in\">AVSampleRateKey</span>       : [<span class=\"built_in\">NSNumber</span> numberWithInteger:<span class=\"number\">44100</span>],</span><br><span class=\"line\">                    <span class=\"built_in\">AVChannelLayoutKey</span>    : channelLayoutAsData,</span><br><span class=\"line\">                    <span class=\"built_in\">AVNumberOfChannelsKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInteger:<span class=\"number\">2</span>]</span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">               <span class=\"keyword\">self</span>.assetWriterAudioInput = [<span class=\"built_in\">AVAssetWriterInput</span> assetWriterInputWithMediaType:[assetAudioTrack mediaType] outputSettings:compressionAudioSettings];</span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriter addInput:<span class=\"keyword\">self</span>.assetWriterAudioInput];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"keyword\">if</span> (assetVideoTrack)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If there is a video track to read, set the decompression settings for YUV and create the asset reader output.</span></span><br><span class=\"line\">               <span class=\"built_in\">NSDictionary</span> *decompressionVideoSettings = @&#123;</span><br><span class=\"line\">                    (<span class=\"type\">id</span>)kCVPixelBufferPixelFormatTypeKey     : [<span class=\"built_in\">NSNumber</span> numberWithUnsignedInt:kCVPixelFormatType_422YpCbCr8],</span><br><span class=\"line\">                    (<span class=\"type\">id</span>)kCVPixelBufferIOSurfacePropertiesKey : [<span class=\"built_in\">NSDictionary</span> dictionary]</span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">               <span class=\"keyword\">self</span>.assetReaderVideoOutput = [<span class=\"built_in\">AVAssetReaderTrackOutput</span> assetReaderTrackOutputWithTrack:assetVideoTrack outputSettings:decompressionVideoSettings];</span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetReader addOutput:<span class=\"keyword\">self</span>.assetReaderVideoOutput];</span><br><span class=\"line\">               <span class=\"built_in\">CMFormatDescriptionRef</span> formatDescription = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">               <span class=\"comment\">// Grab the video format descriptions from the video track and grab the first one if it exists.</span></span><br><span class=\"line\">               <span class=\"built_in\">NSArray</span> *videoFormatDescriptions = [assetVideoTrack formatDescriptions];</span><br><span class=\"line\">               <span class=\"keyword\">if</span> ([videoFormatDescriptions count] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    formatDescription = (__bridge <span class=\"built_in\">CMFormatDescriptionRef</span>)[formatDescriptions objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">               <span class=\"built_in\">CGSize</span> trackDimensions = &#123;</span><br><span class=\"line\">                    .width = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">                    .height = <span class=\"number\">0.0</span>,</span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">               <span class=\"comment\">// If the video track had a format description, grab the track dimensions from there. Otherwise, grab them direcly from the track itself.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (formatDescription)</span><br><span class=\"line\">                    trackDimensions = <span class=\"built_in\">CMVideoFormatDescriptionGetPresentationDimensions</span>(formatDescription, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">                    trackDimensions = [assetVideoTrack naturalSize];</span><br><span class=\"line\">               <span class=\"built_in\">NSDictionary</span> *compressionSettings = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">               <span class=\"comment\">// If the video track had a format description, attempt to grab the clean aperture settings and pixel aspect ratio used by the video.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (formatDescription)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">NSDictionary</span> *cleanAperture = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">NSDictionary</span> *pixelAspectRatio = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">CFDictionaryRef</span> cleanApertureFromCMFormatDescription = <span class=\"built_in\">CMFormatDescriptionGetExtension</span>(formatDescription, kCMFormatDescriptionExtension_CleanAperture);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cleanApertureFromCMFormatDescription)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         cleanAperture = @&#123;</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoCleanApertureWidthKey</span>            : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(cleanApertureFromCMFormatDescription, kCMFormatDescriptionKey_CleanApertureWidth),</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoCleanApertureHeightKey</span>           : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(cleanApertureFromCMFormatDescription, kCMFormatDescriptionKey_CleanApertureHeight),</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoCleanApertureHorizontalOffsetKey</span> : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(cleanApertureFromCMFormatDescription, kCMFormatDescriptionKey_CleanApertureHorizontalOffset),</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoCleanApertureVerticalOffsetKey</span>   : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(cleanApertureFromCMFormatDescription, kCMFormatDescriptionKey_CleanApertureVerticalOffset)</span><br><span class=\"line\">                         &#125;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">CFDictionaryRef</span> pixelAspectRatioFromCMFormatDescription = <span class=\"built_in\">CMFormatDescriptionGetExtension</span>(formatDescription, kCMFormatDescriptionExtension_PixelAspectRatio);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pixelAspectRatioFromCMFormatDescription)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         pixelAspectRatio = @&#123;</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoPixelAspectRatioHorizontalSpacingKey</span> : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(pixelAspectRatioFromCMFormatDescription, kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing),</span><br><span class=\"line\">                              <span class=\"built_in\">AVVideoPixelAspectRatioVerticalSpacingKey</span>   : (<span class=\"type\">id</span>)<span class=\"built_in\">CFDictionaryGetValue</span>(pixelAspectRatioFromCMFormatDescription, kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing)</span><br><span class=\"line\">                         &#125;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// Add whichever settings we could grab from the format description to the compression settings dictionary.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cleanAperture || pixelAspectRatio)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         <span class=\"built_in\">NSMutableDictionary</span> *mutableCompressionSettings = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (cleanAperture)</span><br><span class=\"line\">                              [mutableCompressionSettings setObject:cleanAperture forKey:<span class=\"built_in\">AVVideoCleanApertureKey</span>];</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (pixelAspectRatio)</span><br><span class=\"line\">                              [mutableCompressionSettings setObject:pixelAspectRatio forKey:<span class=\"built_in\">AVVideoPixelAspectRatioKey</span>];</span><br><span class=\"line\">                         compressionSettings = mutableCompressionSettings;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">// Create the video settings dictionary for H.264.</span></span><br><span class=\"line\">               <span class=\"built_in\">NSMutableDictionary</span> *videoSettings = (<span class=\"built_in\">NSMutableDictionary</span> *) @&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">AVVideoCodecKey</span>  : <span class=\"built_in\">AVVideoCodecH264</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">AVVideoWidthKey</span>  : [<span class=\"built_in\">NSNumber</span> numberWithDouble:trackDimensions.width],</span><br><span class=\"line\">                    <span class=\"built_in\">AVVideoHeightKey</span> : [<span class=\"built_in\">NSNumber</span> numberWithDouble:trackDimensions.height]</span><br><span class=\"line\">               &#125;;</span><br><span class=\"line\">               <span class=\"comment\">// Put the compression settings into the video settings dictionary if we were able to grab them.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (compressionSettings)</span><br><span class=\"line\">                    [videoSettings setObject:compressionSettings forKey:<span class=\"built_in\">AVVideoCompressionPropertiesKey</span>];</span><br><span class=\"line\">               <span class=\"comment\">// Create the asset writer input and add it to the asset writer.</span></span><br><span class=\"line\">               <span class=\"keyword\">self</span>.assetWriterVideoInput = [<span class=\"built_in\">AVAssetWriterInput</span> assetWriterInputWithMediaType:[videoTrack mediaType] outputSettings:videoSettings];</span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriter addInput:<span class=\"keyword\">self</span>.assetWriterVideoInput];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-Reencoding-the-Asset\"><a href=\"#4-3-Reencoding-the-Asset\" class=\"headerlink\" title=\"4.3. Reencoding the Asset\"></a>4.3. Reencoding the Asset</h3><p>Provided that the asset reader and writer are successfully initialized and configured, the startAssetReaderAndWriter: method described in Handling the Initial Setup is called. This method is where the actual reading and writing of the asset takes place.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">BOOL</span>)startAssetReaderAndWriter:(<span class=\"built_in\">NSError</span> **)outError</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"type\">BOOL</span> success = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">     <span class=\"comment\">// Attempt to start the asset reader.</span></span><br><span class=\"line\">     success = [<span class=\"keyword\">self</span>.assetReader startReading];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">          *outError = [<span class=\"keyword\">self</span>.assetReader error];</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If the reader started successfully, attempt to start the asset writer.</span></span><br><span class=\"line\">          success = [<span class=\"keyword\">self</span>.assetWriter startWriting];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">               *outError = [<span class=\"keyword\">self</span>.assetWriter error];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If the asset reader and writer both started successfully, create the dispatch group where the reencoding will take place and start a sample-writing session.</span></span><br><span class=\"line\">          <span class=\"keyword\">self</span>.dispatchGroup = dispatch_group_create();</span><br><span class=\"line\">          [<span class=\"keyword\">self</span>.assetWriter startSessionAtSourceTime:kCMTimeZero];</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.audioFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.videoFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetWriterAudioInput)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If there is audio to reencode, enter the dispatch group before beginning the work.</span></span><br><span class=\"line\">               dispatch_group_enter(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">               <span class=\"comment\">// Specify the block to execute when the asset writer is ready for audio media data, and specify the queue to call it on.</span></span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriterAudioInput requestMediaDataWhenReadyOnQueue:<span class=\"keyword\">self</span>.rwAudioSerializationQueue usingBlock:^&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Because the block is called asynchronously, check to see whether its task is complete.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.audioFinished)</span><br><span class=\"line\">                         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    <span class=\"type\">BOOL</span> completedOrFailed = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// If the task isn&#x27;t complete yet, make sure that the input is actually ready for more media data.</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> ([<span class=\"keyword\">self</span>.assetWriterAudioInput isReadyForMoreMediaData] &amp;&amp; !completedOrFailed)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         <span class=\"comment\">// Get the next audio sample buffer, and append it to the output file.</span></span><br><span class=\"line\">                         <span class=\"built_in\">CMSampleBufferRef</span> sampleBuffer = [<span class=\"keyword\">self</span>.assetReaderAudioOutput copyNextSampleBuffer];</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (sampleBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              <span class=\"type\">BOOL</span> success = [<span class=\"keyword\">self</span>.assetWriterAudioInput appendSampleBuffer:sampleBuffer];</span><br><span class=\"line\">                              <span class=\"built_in\">CFRelease</span>(sampleBuffer);</span><br><span class=\"line\">                              sampleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                              completedOrFailed = !success;</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                         <span class=\"keyword\">else</span></span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              completedOrFailed = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (completedOrFailed)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         <span class=\"comment\">// Mark the input as finished, but only if we haven&#x27;t already done so, and then leave the dispatch group (since the audio work has finished).</span></span><br><span class=\"line\">                         <span class=\"type\">BOOL</span> oldFinished = <span class=\"keyword\">self</span>.audioFinished;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.audioFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (oldFinished == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              [<span class=\"keyword\">self</span>.assetWriterAudioInput markAsFinished];</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                         dispatch_group_leave(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">               &#125;];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetWriterVideoInput)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If we had video to reencode, enter the dispatch group before beginning the work.</span></span><br><span class=\"line\">               dispatch_group_enter(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">               <span class=\"comment\">// Specify the block to execute when the asset writer is ready for video media data, and specify the queue to call it on.</span></span><br><span class=\"line\">               [<span class=\"keyword\">self</span>.assetWriterVideoInput requestMediaDataWhenReadyOnQueue:<span class=\"keyword\">self</span>.rwVideoSerializationQueue usingBlock:^&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Because the block is called asynchronously, check to see whether its task is complete.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.videoFinished)</span><br><span class=\"line\">                         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    <span class=\"type\">BOOL</span> completedOrFailed = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// If the task isn&#x27;t complete yet, make sure that the input is actually ready for more media data.</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> ([<span class=\"keyword\">self</span>.assetWriterVideoInput isReadyForMoreMediaData] &amp;&amp; !completedOrFailed)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         <span class=\"comment\">// Get the next video sample buffer, and append it to the output file.</span></span><br><span class=\"line\">                         <span class=\"built_in\">CMSampleBufferRef</span> sampleBuffer = [<span class=\"keyword\">self</span>.assetReaderVideoOutput copyNextSampleBuffer];</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (sampleBuffer != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              <span class=\"type\">BOOL</span> success = [<span class=\"keyword\">self</span>.assetWriterVideoInput appendSampleBuffer:sampleBuffer];</span><br><span class=\"line\">                              <span class=\"built_in\">CFRelease</span>(sampleBuffer);</span><br><span class=\"line\">                              sampleBuffer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                              completedOrFailed = !success;</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                         <span class=\"keyword\">else</span></span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              completedOrFailed = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (completedOrFailed)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         <span class=\"comment\">// Mark the input as finished, but only if we haven&#x27;t already done so, and then leave the dispatch group (since the video work has finished).</span></span><br><span class=\"line\">                         <span class=\"type\">BOOL</span> oldFinished = <span class=\"keyword\">self</span>.videoFinished;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.videoFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (oldFinished == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                              [<span class=\"keyword\">self</span>.assetWriterVideoInput markAsFinished];</span><br><span class=\"line\">                         &#125;</span><br><span class=\"line\">                         dispatch_group_leave(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">               &#125;];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// Set up the notification that the dispatch group will send when the audio and video work have both finished.</span></span><br><span class=\"line\">          dispatch_group_notify(<span class=\"keyword\">self</span>.dispatchGroup, <span class=\"keyword\">self</span>.mainSerializationQueue, ^&#123;</span><br><span class=\"line\">               <span class=\"type\">BOOL</span> finalSuccess = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">               <span class=\"built_in\">NSError</span> *finalError = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">               <span class=\"comment\">// Check to see if the work has finished due to cancellation.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.cancelled)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If so, cancel the reader and writer.</span></span><br><span class=\"line\">                    [<span class=\"keyword\">self</span>.assetReader cancelReading];</span><br><span class=\"line\">                    [<span class=\"keyword\">self</span>.assetWriter cancelWriting];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If cancellation didn&#x27;t occur, first make sure that the asset reader didn&#x27;t fail.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.assetReader status] == <span class=\"built_in\">AVAssetReaderStatusFailed</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         finalSuccess = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">                         finalError = [<span class=\"keyword\">self</span>.assetReader error];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// If the asset reader didn&#x27;t fail, attempt to stop the asset writer and check for any errors.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (finalSuccess)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         finalSuccess = [<span class=\"keyword\">self</span>.assetWriter finishWriting];</span><br><span class=\"line\">                         <span class=\"keyword\">if</span> (!finalSuccess)</span><br><span class=\"line\">                              finalError = [<span class=\"keyword\">self</span>.assetWriter error];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">// Call the method to handle completion, and pass in the appropriate parameters to indicate whether reencoding was successful.</span></span><br><span class=\"line\">               [<span class=\"keyword\">self</span> readingAndWritingDidFinishSuccessfully:finalSuccess withError:finalError];</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// Return success here to indicate whether the asset reader and writer were started successfully.</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>During reencoding, the audio and video tracks are asynchronously handled on individual serialization queues to increase the overall performance of the process, but both queues are contained within the same dispatch group. By placing the work for each track within the same dispatch group, the group can send a notification when all of the work is done and the success of the reencoding process can be determined.</p>\n<p>音频和视频 track 在各自队列里异步的处理，又在同一个队列组中，这样方便获取编码 成功的通知。</p>\n<h3 id=\"4-4-Handling-Completion\"><a href=\"#4-4-Handling-Completion\" class=\"headerlink\" title=\"4.4. Handling Completion\"></a>4.4. Handling Completion</h3><p>To handle the completion of the reading and writing process, the readingAndWritingDidFinishSuccessfully: method is called—with parameters indicating whether or not the reencoding completed successfully. If the process didn’t finish successfully, the asset reader and writer are both canceled and any UI related tasks are dispatched to the main queue.</p>\n<p>处理完成时：进度和是否成功。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)readingAndWritingDidFinishSuccessfully:(<span class=\"type\">BOOL</span>)success withError:(<span class=\"built_in\">NSError</span> *)error</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// If the reencoding process failed, we need to cancel the asset reader and writer.</span></span><br><span class=\"line\">          [<span class=\"keyword\">self</span>.assetReader cancelReading];</span><br><span class=\"line\">          [<span class=\"keyword\">self</span>.assetWriter cancelWriting];</span><br><span class=\"line\">          <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">               <span class=\"comment\">// Handle any UI tasks here related to failure.</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Reencoding was successful, reset booleans.</span></span><br><span class=\"line\">          <span class=\"keyword\">self</span>.cancelled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.videoFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">          <span class=\"keyword\">self</span>.audioFinished = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">          <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">               <span class=\"comment\">// Handle any UI tasks here related to success.</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-5-Handling-Cancellation\"><a href=\"#4-5-Handling-Cancellation\" class=\"headerlink\" title=\"4.5. Handling Cancellation\"></a>4.5. Handling Cancellation</h3><p>Using multiple serialization queues, you can allow the user of your app to cancel the reencoding process with ease. On the main serialization queue, messages are asynchronously sent to each of the asset reencoding serialization queues to cancel their reading and writing. When these two serialization queues complete their cancellation, the dispatch group sends a notification to the main serialization queue where the cancelled property is set to YES. You might associate the cancel method from the following code listing with a button on your UI.</p>\n<p>处理取消操作</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)cancel</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Handle cancellation asynchronously, but serialize it with the main queue.</span></span><br><span class=\"line\">     <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.mainSerializationQueue, ^&#123;</span><br><span class=\"line\">          <span class=\"comment\">// If we had audio data to reencode, we need to cancel the audio work.</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetWriterAudioInput)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Handle cancellation asynchronously again, but this time serialize it with the audio queue.</span></span><br><span class=\"line\">               <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.rwAudioSerializationQueue, ^&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Update the Boolean property indicating the task is complete and mark the input as finished if it hasn&#x27;t already been marked as such.</span></span><br><span class=\"line\">                    <span class=\"type\">BOOL</span> oldFinished = <span class=\"keyword\">self</span>.audioFinished;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.audioFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (oldFinished == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         [<span class=\"keyword\">self</span>.assetWriterAudioInput markAsFinished];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// Leave the dispatch group since the audio work is finished now.</span></span><br><span class=\"line\">                    dispatch_group_leave(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.assetWriterVideoInput)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">               <span class=\"comment\">// Handle cancellation asynchronously again, but this time serialize it with the video queue.</span></span><br><span class=\"line\">               <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.rwVideoSerializationQueue, ^&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Update the Boolean property indicating the task is complete and mark the input as finished if it hasn&#x27;t already been marked as such.</span></span><br><span class=\"line\">                    <span class=\"type\">BOOL</span> oldFinished = <span class=\"keyword\">self</span>.videoFinished;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.videoFinished = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (oldFinished == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                         [<span class=\"keyword\">self</span>.assetWriterVideoInput markAsFinished];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// Leave the dispatch group, since the video work is finished now.</span></span><br><span class=\"line\">                    dispatch_group_leave(<span class=\"keyword\">self</span>.dispatchGroup);</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// Set the cancelled Boolean property to YES to cancel any work on the main queue as well.</span></span><br><span class=\"line\">          <span class=\"keyword\">self</span>.cancelled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Asset-Output-Settings-Assistant\"><a href=\"#5-Asset-Output-Settings-Assistant\" class=\"headerlink\" title=\"5. Asset Output Settings Assistant\"></a>5. Asset Output Settings Assistant</h2><p>The AVOutputSettingsAssistant class aids in creating output-settings dictionaries for an asset reader or writer. This makes setup much simpler, especially for high frame rate H264 movies that have a number of specific presets. Listing 5-1 shows an example that uses the output settings assistant to use the settings assistant.</p>\n<p>资源输出源设置助手</p>\n<p>Listing 5-1  AVOutputSettingsAssistant sample</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">AVOutputSettingsAssistant</span> *outputSettingsAssistant = [<span class=\"built_in\">AVOutputSettingsAssistant</span> outputSettingsAssistantWithPreset:&lt;some preset&gt;];</span><br><span class=\"line\"><span class=\"built_in\">CMFormatDescriptionRef</span> audioFormat = [<span class=\"keyword\">self</span> getAudioFormat];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (audioFormat != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    [outputSettingsAssistant setSourceAudioFormat:(<span class=\"built_in\">CMAudioFormatDescriptionRef</span>)audioFormat];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">CMFormatDescriptionRef</span> videoFormat = [<span class=\"keyword\">self</span> getVideoFormat];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (videoFormat != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    [outputSettingsAssistant setSourceVideoFormat:(<span class=\"built_in\">CMVideoFormatDescriptionRef</span>)videoFormat];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">CMTime</span> assetMinVideoFrameDuration = [<span class=\"keyword\">self</span> getMinFrameDuration];</span><br><span class=\"line\"><span class=\"built_in\">CMTime</span> averageFrameDuration = [<span class=\"keyword\">self</span> getAvgFrameDuration]</span><br><span class=\"line\"> </span><br><span class=\"line\">[outputSettingsAssistant setSourceVideoAverageFrameDuration:averageFrameDuration];</span><br><span class=\"line\">[outputSettingsAssistant setSourceVideoMinFrameDuration:assetMinVideoFrameDuration];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriter</span> *assetWriter = [<span class=\"built_in\">AVAssetWriter</span> assetWriterWithURL:&lt;some URL&gt; fileType:[outputSettingsAssistant outputFileType] error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriterInput</span> *audioInput = [<span class=\"built_in\">AVAssetWriterInput</span> assetWriterInputWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span> outputSettings:[outputSettingsAssistant audioSettings] sourceFormatHint:audioFormat];</span><br><span class=\"line\"><span class=\"built_in\">AVAssetWriterInput</span> *videoInput = [<span class=\"built_in\">AVAssetWriterInput</span> assetWriterInputWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span> outputSettings:[outputSettingsAssistant videoSettings] sourceFormatHint:videoFormat];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>AVReaderWriter: Offline Audio &#x2F; Video Processing:<br><a href=\"https://developer.apple.com/library/mac/samplecode/ReaderWriter/Introduction/Intro.html\">https://developer.apple.com/library/mac/samplecode/ReaderWriter/Introduction/Intro.html</a></p>\n"},{"title":"fastlane添加sh来给环信SDK瘦身","url":"/2018/10/25/Add-sh-in-fastlane-to-slim-HyphenateSDK/","content":"<h2 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h2><p>由于环信将 i386 x86_64 armv7 arm64 几个平台都合并到了一起，所以使用动态库上传appstore时需要将i386 x86_64两个平台删除后，才能正常提交审核。</p>\n<p>所以我们使用 fastlane sh 在打包<code>gym</code> 时前后分别将 x86 的移除<code>remove86framework</code>和添加<code>add86framework</code> 。这样就可以继续使用 fastlane 一键打包。</p>\n<blockquote>\n<p>如果出错，使用 pod 删除并重新安装完整版的环信 SDK。</p>\n</blockquote>\n<h2 id=\"Fastfile\"><a href=\"#Fastfile\" class=\"headerlink\" title=\"Fastfile\"></a>Fastfile</h2><figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">desc <span class=\"string\">&quot;Deploy a new version to the App Store&quot;</span></span><br><span class=\"line\">  lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    remove86framework</span><br><span class=\"line\">    gym</span><br><span class=\"line\">    add86framework  </span><br><span class=\"line\">    deliver(<span class=\"symbol\">force:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"comment\"># frameit</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">desc <span class=\"string\">&quot;Remove x86 framework&quot;</span></span><br><span class=\"line\">  lane <span class=\"symbol\">:remove86framework</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sh(<span class=\"string\">%(</span></span><br><span class=\"line\"><span class=\"string\">      cd ../Pods/HyphenateLite/iOS_Pods_IMSDK*</span></span><br><span class=\"line\"><span class=\"string\">      pwd</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">      if [ ! -d &quot;./bak&quot; ]; then  </span></span><br><span class=\"line\"><span class=\"string\">        mkdir ./bak</span></span><br><span class=\"line\"><span class=\"string\">      fi</span></span><br><span class=\"line\"><span class=\"string\">      if [ -d &quot;./bak/HyphenateLite.framework&quot; ]; then  </span></span><br><span class=\"line\"><span class=\"string\">        rm -rf ./bak/HyphenateLite.framework</span></span><br><span class=\"line\"><span class=\"string\">      fi</span></span><br><span class=\"line\"><span class=\"string\">      cp -r HyphenateLite.framework ./bak</span></span><br><span class=\"line\"><span class=\"string\">      lipo HyphenateLite.framework/HyphenateLite -thin armv7 -output HyphenateLite_armv7</span></span><br><span class=\"line\"><span class=\"string\">      lipo HyphenateLite.framework/HyphenateLite -thin arm64 -output HyphenateLite_arm64</span></span><br><span class=\"line\"><span class=\"string\">      lipo -create HyphenateLite_armv7 HyphenateLite_arm64 -output HyphenateLite</span></span><br><span class=\"line\"><span class=\"string\">      mv HyphenateLite HyphenateLite.framework/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    )</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  desc <span class=\"string\">&quot;Add x86 framework back&quot;</span></span><br><span class=\"line\">  lane <span class=\"symbol\">:add86framework</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sh(<span class=\"string\">%(</span></span><br><span class=\"line\"><span class=\"string\">      cd ../Pods/HyphenateLite/iOS_Pods_IMSDK*</span></span><br><span class=\"line\"><span class=\"string\">      pwd</span></span><br><span class=\"line\"><span class=\"string\">      if [ -d &quot;./HyphenateLite.framework&quot; ]; then  </span></span><br><span class=\"line\"><span class=\"string\">        rm -rf ./HyphenateLite.framework</span></span><br><span class=\"line\"><span class=\"string\">      fi</span></span><br><span class=\"line\"><span class=\"string\">      cp -r ./bak/HyphenateLite.framework HyphenateLite.framework</span></span><br><span class=\"line\"><span class=\"string\">    )</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ol>\n<li>环信：<a href=\"http://docs.easemob.com/im/300iosclientintegration/20iossdkimport#%E9%9B%86%E6%88%90%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8A%E4%BC%A0appstore\">http://docs.easemob.com/im/300iosclientintegration/20iossdkimport#%E9%9B%86%E6%88%90%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8A%E4%BC%A0appstore</a> </li>\n<li>fastlane sh 文档：<a href=\"https://docs.fastlane.tools/actions/sh/\">https://docs.fastlane.tools/actions/sh/</a></li>\n</ol>\n"},{"title":"Add share button and statistics","url":"/2015/05/26/Add-share-button-and-statistics/","content":"<h2 id=\"添加分享\"><a href=\"#添加分享\" class=\"headerlink\" title=\"添加分享\"></a>添加分享</h2><p>###方法一：原生分享</p>\n<p>添加分享按钮代码， Hexo 文件夹下<code>/theme/next/layout/_macro/post.swig</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:wb</span>=<span class=\"string\">&quot;http://open.weibo.com/wb&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://tjs.sjs.sinajs.cn/open/api/js/wb.js&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">wb:share-button</span> <span class=\"attr\">appkey</span>=<span class=\"string\">&quot;2407521490&quot;</span> <span class=\"attr\">addition</span>=<span class=\"string\">&quot;simple&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">wb:share-button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://twitter.com/share&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;twitter-share-button&quot;</span> <span class=\"attr\">data-via</span>=<span class=\"string\">&quot;gewillorg&quot;</span> <span class=\"attr\">data-size</span>=<span class=\"string\">&quot;large&quot;</span> <span class=\"attr\">data-count</span>=<span class=\"string\">&quot;none&quot;</span>&gt;</span>Tweet<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">!<span class=\"keyword\">function</span>(<span class=\"params\">d,s,id</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> js,fjs=d.<span class=\"title function_\">getElementsByTagName</span>(s)[<span class=\"number\">0</span>],p=<span class=\"regexp\">/^http:/</span>.<span class=\"title function_\">test</span>(d.<span class=\"property\">location</span>)?<span class=\"string\">&#x27;http&#x27;</span>:<span class=\"string\">&#x27;https&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  \t<span class=\"keyword\">if</span>(!d.<span class=\"title function_\">getElementById</span>(id))&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  \t    js=d.<span class=\"title function_\">createElement</span>(s);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    js.<span class=\"property\">id</span>=id;js.<span class=\"property\">src</span>=p+<span class=\"string\">&#x27;://platform.twitter.com/widgets.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t    fjs.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(js,fjs);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">(<span class=\"variable language_\">document</span>, <span class=\"string\">&#x27;script&#x27;</span>, <span class=\"string\">&#x27;twitter-wjs&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>###方案二：<a href=\"http://www.sharethis.com/\">ShareThis</a> 定制</p>\n<p>更加统一优美的解决方案，有个各种样式可选，非常方便。<br>稍后我再进行定制，最好是默认黑色，点击激活时恢复彩色。</p>\n<p>默认有添加后缀在你的网址，去除方法如下<code> doNotHash: ture</code>，详情参考：<a href=\"http://support.sharethis.com/customer/portal/articles/961937#sthash.QKAIxxCu.dpbs\">CopyNShare Settings</a>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"keyword\">var</span> switchTo5x=<span class=\"literal\">true</span>;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://w.sharethis.com/button/buttons.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\">stLight.<span class=\"title function_\">options</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"attr\">publisher</span>: <span class=\"string\">&quot;7fb5f31a-b8e7-4aa1-a6eb-9aac8b9b13f0&quot;</span>, <span class=\"attr\">doNotHash</span>: ture, <span class=\"attr\">doNotCopy</span>: <span class=\"literal\">false</span>, <span class=\"attr\">hashAddressBar</span>: <span class=\"literal\">true</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_sina_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Sina&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_twitter_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Tweet&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_facebook_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Facebook&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_googleplus_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Google +&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_pinterest_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Pinterest&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_tumblr_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Tumblr&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;st_reddit_large&#x27;</span> <span class=\"attr\">displayText</span>=<span class=\"string\">&#x27;Reddit&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"不蒜子统计\"><a href=\"#不蒜子统计\" class=\"headerlink\" title=\"不蒜子统计\"></a>不蒜子统计</h2><p>“<a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a>”与百度统计谷歌分析等有区别：“不蒜子”可直接将访问次数显示在您在网页上。</p>\n<p>添加统计代码， Hexo 文件夹下<code>/theme/next/layout/_partials/footer.swig</code>。 </p>\n"},{"title":"苹果调试和逆向工程进阶-笔记（一）","url":"/2019/06/26/Advanced-Apple-Debugging-and-Reverse-Engineering-Notes-1/","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>写这本书的目的</p>\n<p>每个开发人员都应该研究调试代码的艺术。 但是，有些人会从本书中获得更多。 本书是为：</p>\n<ol>\n<li><p>希望更好地使用LLDB进行调试的开发人员</p>\n</li>\n<li><p>希望使用LLDB构建复杂调试命令的开发人员</p>\n</li>\n<li><p>希望深入了解Swift和Objective-C内部的开发人员</p>\n</li>\n<li><p>有兴趣了解：通过逆向工程，他们可以做些什么的开发人员</p>\n</li>\n<li><p>对现代主动逆向工程策略感兴趣的开发人员</p>\n</li>\n<li><p>希望在发现有关其计算机或软件问题的答案时有所帮助的开发人员</p>\n</li>\n</ol>\n<p>自定义LLDB脚本repo:</p>\n<p><a href=\"https://github.com/DerekSelander/LLDB\">https://github.com/DerekSelander/LLDB</a></p>\n<p>这些脚本将有助于您的调试&#x2F;逆向工程，并为您自己的LLDB脚本提供新颖的想法。</p>\n<h2 id=\"第一节：开始LLDB命令\"><a href=\"#第一节：开始LLDB命令\" class=\"headerlink\" title=\"第一节：开始LLDB命令\"></a>第一节：开始LLDB命令</h2><p>到本节结束时，您将能够使用调试器来执行调试所需的大多数基本任务，以及创建自己的简单自定义命令</p>\n<h3 id=\"第1章：入门\"><a href=\"#第1章：入门\" class=\"headerlink\" title=\"第1章：入门\"></a>第1章：入门</h3><p>想知道为什么命令是po？ po代表打印对象。 还有p，它只是打印RDI的内容。 po通常更有用，因为它提供了NSObject的描述或debugDescription方法（如果可用）。</p>\n<p>如果您想将调试提升到一个新的水平，汇编（Assembly）是一项重要的技能。</p>\n<p>它可以让您深入了解Apple的代码 - 即使您没有任何源代码可供阅读。 它将使您更好地了解Swift编译器团队如何使用Swift在Objective-C中跳出，并且它将使您更好地了解Apple设备上的一切是如何工作的。</p>\n<p>如果可以，我将始终选择在调试器中使用Objective-C，因为使用Objective-C LLDB比使用Swift更稳定。</p>\n<h3 id=\"第2章：Help和Apropos\"><a href=\"#第2章：Help和Apropos\" class=\"headerlink\" title=\"第2章：Help和Apropos\"></a>第2章：Help和Apropos</h3><p><code>help</code>将转储(dump)所有可用的命令，包括从〜&#x2F; .lldbinit加载的自定义命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) help breakpoint</span><br></pre></td></tr></table></figure>\n\n<p><code>apropos</code>命令可以为您执行此操作;这有点像使用搜索引擎在网络上找到一些东西。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) apropos swift</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第3章：使用LLDB-Attaching\"><a href=\"#第3章：使用LLDB-Attaching\" class=\"headerlink\" title=\"第3章：使用LLDB Attaching\"></a>第3章：使用LLDB Attaching</h3><p>LLDB“Attaching”的短语实际上有点误导。 名为debugserver(位于Xcode.app&#x2F;Contents&#x2F;SharedFrameworks&#x2F;LLDB.framework&#x2F;Resources&#x2F;)的程序负责附加(attaching)到目标进程。</p>\n<p>如果它是远程进程，例如在远程设备上运行的iOS，watchOS或tvOS应用程序，则会在该远程设备上启动远程调试服务器。 LLDB的工作是启动，连接和协调调试服务器，以处理调试应用程序时的所有交互。</p>\n<h4 id=\"附加到现有进程\"><a href=\"#附加到现有进程\" class=\"headerlink\" title=\"附加到现有进程\"></a>附加到现有进程</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lldb -n Xcode</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"附加到未来的进程\"><a href=\"#附加到未来的进程\" class=\"headerlink\" title=\"附加到未来的进程\"></a>附加到未来的进程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">lldb -n Finder -w</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"launch可选的参数\"><a href=\"#launch可选的参数\" class=\"headerlink\" title=\"launch可选的参数\"></a>launch可选的参数</h4><p>这告诉LLDB使用<code>/bin/ls</code>（文件列表命令）作为目标可执行文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">lldb -f /bin/ls</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 process 的选项 <code>-w</code> 更改工作目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) process launch -w /Applications</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接传递参数给<code>程序</code>，也就是<code>/bin/ls</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) process launch -- /Applications</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls /Applications</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>-X</code>选项可扩展您提供的任何shell参数，例如代字号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) process launch -X true -- ~/Desktop</span><br></pre></td></tr></table></figure>\n\n<p><code>run</code> 是 <code>process launch -X true —</code>的缩写，所以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">run ~/Desktop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>stdin也有一个选项<code>-i</code>，用来处理标准的输入输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) target delete</span><br><span class=\"line\">(lldb) target create /usr/bin/wc</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ echo &quot;hello world&quot; &gt; /tmp/wc_input.txt</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) process launch -i /tmp/wc_input.txt</span><br><span class=\"line\">Process 24511 launched: &#x27;/usr/bin/wc&#x27; (x86_64)</span><br><span class=\"line\">1 2 12 </span><br><span class=\"line\">Process 24511 exited with status = 0 (0x00000000)</span><br></pre></td></tr></table></figure>\n\n<p>等同于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wc &lt; /tmp/wc_input.txt</span><br><span class=\"line\"> 1  2 12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第4章：在代码中停止\"><a href=\"#第4章：在代码中停止\" class=\"headerlink\" title=\"第4章：在代码中停止\"></a>第4章：在代码中停止</h3><p>无论您是在技术堆栈中使用Swift，Objective-C，C ++，C还是完全不同的语言，您都需要学习如何创建断点。 可以轻松地在Xcode中单击侧面板以使用GUI创建断点，但LLDB控制台可以让您更好地控制断点。</p>\n<h4 id=\"Signals（信号）\"><a href=\"#Signals（信号）\" class=\"headerlink\" title=\"Signals（信号）\"></a>Signals（信号）</h4><p>Unix信号是进程间通信的基本形式。</p>\n<p>例如，其中一个信号SIGSTOP可用于保存状态并暂停执行进程，而其对应的SIGCONT则被发送到程序以恢复执行。调试器可以使用这两个信号暂停并继续执行程序。</p>\n<h5 id=\"Xcode-断点\"><a href=\"#Xcode-断点\" class=\"headerlink\" title=\"Xcode 断点\"></a>Xcode 断点</h5><p>符号断点（Symbolic breakpoints）是Xcode的一个很好的调试功能。它们允许您在应用程序中的某个符号上设置断点。例如<code>[NSObject init]</code>，它引用NSObject实例的init方法。</p>\n<p><img src=\"/../assets/xcode_breakpoints.png\"></p>\n<blockquote>\n<p>您将学习如何在第10章“汇编，寄存器和调用约定”中正确使用和操作寄存器，但是现?在，只需知道<code> arg1</code>与​<code> $rdi</code>寄存器同义，并且可以被认为是持有实例的调用init时的类。</p>\n</blockquote>\n<p>还有Swift错误断点，它通过在swift_willThrow方法上创建断点来随时停止Swift抛出错误。如果您正在处理任何容易出错的API，这是一个很好的选择，因为它可以让您快速诊断情况，而不会对代码的正确性做出错误的假设。</p>\n<h4 id=\"LLDB断点语法\"><a href=\"#LLDB断点语法\" class=\"headerlink\" title=\"LLDB断点语法\"></a>LLDB断点语法</h4><p><code>image</code>命令是一个很好的工具，可以帮助内省对设置断点至关重要的细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -n &quot;-[UIViewController viewDidLoad]&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Objective-C-properties\"><a href=\"#Objective-C-properties\" class=\"headerlink\" title=\"Objective-C properties\"></a>Objective-C properties</h5><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TestClass</span> : <span class=\"title\">NSObject</span> </span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name; </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -n &quot;-[TestClass name]&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Objective-C-properties-and-dot-notation\"><a href=\"#Objective-C-properties-and-dot-notation\" class=\"headerlink\" title=\"Objective-C properties and dot notation\"></a>Objective-C properties and dot notation</h5><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">TestClass *a = [[TestClass alloc] init];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Both equivalent for setters </span></span><br><span class=\"line\">[a setName:<span class=\"string\">@&quot;hello, world&quot;</span>]; </span><br><span class=\"line\">a.name = <span class=\"string\">@&quot;hello, world&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Both equivalent for getters </span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *b; </span><br><span class=\"line\">b = [a name]; <span class=\"comment\">// b = @&quot;hello, world&quot; </span></span><br><span class=\"line\">b = a.name; <span class=\"comment\">// b = @&quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>重要的是要知道您是在处理Objective-C代码并尝试使用点表示法在setter和getter属性上创建断点。</p>\n<h5 id=\"Swift-properties\"><a href=\"#Swift-properties\" class=\"headerlink\" title=\"Swift properties\"></a>Swift properties</h5><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SwiftTestClass</span>: <span class=\"title class_\">NSObject</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">var</span> name: <span class=\"type\">String</span>!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In the LLDB console, type the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn Signals.SwiftTestClass.name.setter</span><br></pre></td></tr></table></figure>\n\n<p>You’ll get output similar to below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 match found in /Users/derekselander/Library/Developer/Xcode/ DerivedData/Signals-atqcdyprrotlrvdanihoufkwzyqh/Build/Products/Debugiphonesimulator/Signals.app/Signals:</span><br><span class=\"line\"></span><br><span class=\"line\">Address: Signals[0x000000010000cc70] (Signals.__TEXT.__text + 44816)</span><br><span class=\"line\"></span><br><span class=\"line\">Summary: Signals`Signals.SwiftTestClass.name.setter : Swift.ImplicitlyUnwrappedOptional&lt;Swift.String&gt; at SwiftTestClass.swift: 28</span><br></pre></td></tr></table></figure>\n\n<p>使用以下正则表达式查询同时搜索name属性的SwiftTestClass setter和getter：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn Signals.SwiftTestClass.name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建断点\"><a href=\"#创建断点\" class=\"headerlink\" title=\"创建断点\"></a>创建断点</h4><p>有几种不同的方法可以创建断点。最基本的方法是只输入字母b，后跟断点名称。这在Objective-C和C中相当容易，因为名称简短且易于键入（例如 - [NSObject init]或 - [UIView setAlpha:]）。输入C ++和Swift非常棘手，因为编译器会将您的方法转换为具有相当长名称的符号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) b -[UIViewController viewDidLoad]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>与许多速记命令一样，b是另一个更长的LLDB命令的缩写。</p>\n</blockquote>\n<h5 id=\"正则表达式断点和范围\"><a href=\"#正则表达式断点和范围\" class=\"headerlink\" title=\"正则表达式断点和范围\"></a>正则表达式断点和范围</h5><p>rb命令将扩展到rbreak（假设您没有任何以“rb”开头的其他LLDB命令）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb SwiftTestClass.name.setter</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这将在包含短语name.setter的任何内容上生成断点:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb name\\.setter\t</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在UIViewController的每个Objective-C实例方法上创建一个断点:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb &#x27;\\-\\[UIViewController\\ &#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>删除所有断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint delete</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在断点中的UIViewController之后，这提供了带有一个或多个字母数字字符后跟空格的可选括号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb &#x27;\\-\\[UIViewController(\\(\\w+\\))?\\ &#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用正则表达式断点可以使用单个表达式捕获各种断点。</p>\n<p>您可以使用-f选项将断点的范围限制为特定文件。</p>\n<p>如果您正在调试DetailViewController.swift，这将非常有用。它将在此文件中的所有属性getter &#x2F; setter，块&#x2F;闭包，扩展&#x2F;类别和函数&#x2F;方法上设置断点。 -f称为范围限制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb . -f DetailViewController.swift</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用-s可以限制此共享库中设置断点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb . -s UIKit</span><br></pre></td></tr></table></figure>\n\n\n\n<p>-o选项为此提供了解决方案。它创造了所谓的“一次性”断点。当这些断点命中时，断点将被删除。所以它只会打一次。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint delete </span><br><span class=\"line\">(lldb) rb . -s UIKit -o</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其他很酷的断点选项\"><a href=\"#其他很酷的断点选项\" class=\"headerlink\" title=\"其他很酷的断点选项\"></a>其他很酷的断点选项</h5><p>-L选项允许您按源代码的语言进行过滤。因此，如果您只想在Signals应用程序的Commons模块中使用Swift代码，则可以执行以下操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint set -L swift -r . -s Commons</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这将在Commons模块中的每个Swift方法上设置断点。</p>\n</blockquote>\n<p>如果你想在Swift语句<code>if let</code>寻找一些有趣的东西，如果让它完全忘记你的应用程序在哪里，该怎么办？您可以使用源正则表达式断点来帮助确定感兴趣的位置！像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint set -A -p &quot;if let&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这将在包含<code>if let</code>的每个源代码位置创建一个断点。 -A选项表示搜索项目已知的所有源文件。</p>\n</blockquote>\n<p>如果想进一限制文件范围：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint set -p &quot;if let&quot; -f MasterViewController.swift -f DetailViewController.swift</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这将获取所有源文件（-A），但只过滤那些属于Signals可执行文件（使用-s Signals选项）的文件。</p>\n</blockquote>\n<p>再来一个很酷的断点选项示例？好的。每当viewDidLoad被命中时，将创建一个打印UIViewController的断点，但是将通过LLDB控制台而不是符号断点窗口来执行此操作。然后将这个断点导出到文件中，这样就可以通过使用断点读取和断点写入命令展现给同事。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) breakpoint delete //清理断点</span><br><span class=\"line\">(lldb) breakpoint set -n &quot;-[UIViewController viewDidLoad]&quot; -C &quot;po $arg1&quot; -G1 // 打印所有符合条件的实例对象</span><br><span class=\"line\">(lldb) breakpoint write -f /tmp/br.json //断点写入文件</span><br><span class=\"line\">(lldb) platform shell cat /tmp/br.json //shell读取文件</span><br><span class=\"line\">(lldb) breakpoint delete //清理断点</span><br><span class=\"line\">(lldb) breakpoint read -f /tmp/br.json //还能从文件中导入断点</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改和移除断点\"><a href=\"#修改和移除断点\" class=\"headerlink\" title=\"修改和移除断点\"></a>修改和移除断点</h5><p>断点会从1开始分配ID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) b main</span><br><span class=\"line\">(lldb) breakpoint list 1</span><br><span class=\"line\">(lldb) breakpoint list 1 -b //简洁：没有位置（location）</span><br><span class=\"line\">(lldb) breakpoint list 1 3 //多个</span><br><span class=\"line\">(lldb) breakpoint list 1-3 //范围</span><br><span class=\"line\">(lldb) breakpoint delete 1 //删除</span><br><span class=\"line\">(lldb) breakpoint delete 1.1 //仅删除第一个子断点</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"第5章：表达式\"><a href=\"#第5章：表达式\" class=\"headerlink\" title=\"第5章：表达式\"></a>第5章：表达式</h3><h4 id=\"格式化-p-和-po\"><a href=\"#格式化-p-和-po\" class=\"headerlink\" title=\"格式化 p 和 po\"></a>格式化 p 和 po</h4><p>po通常用于Swift和Objective-C代码中以打印出感兴趣的项目。这可以是对象中的实例变量，对象的本地引用或寄存器，如本书前面所述。它甚至可以是一个任意的内存引用 - 只要该地址有一个对象！</p>\n<p>po实际上是<code>expression -O --</code> 的简写表达式。 -O参数用于打印对象的描述。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) help po</span><br><span class=\"line\">     Evaluate an expression on the current thread.  Displays any returned</span><br><span class=\"line\">     value with formatting controlled by the type&#x27;s author.  Expects &#x27;raw&#x27;</span><br><span class=\"line\">     input (see &#x27;help raw-input&#x27;.)</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax: po &lt;expr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Command Options Usage:</span><br><span class=\"line\">  po &lt;expr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;po&#x27; is an abbreviation for &#x27;expression -O  --&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>po经常被忽视的兄弟p,是另一个省略-O选项的缩写，<code>expression --</code> 。打印出的p的格式更依赖于LLDB类型系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) help p</span><br><span class=\"line\">     Evaluate an expression on the current thread.  Displays any returned</span><br><span class=\"line\">     value with LLDB&#x27;s default formatting.  Expects &#x27;raw&#x27; input (see &#x27;help</span><br><span class=\"line\">     raw-input&#x27;.)</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax: p &lt;expr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Command Options Usage:</span><br><span class=\"line\">  p &lt;expr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;p&#x27; is an abbreviation for &#x27;expression --&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Yay! debugging &quot;</span> <span class=\"operator\">+</span> <span class=\"keyword\">super</span>.description </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">var</span> debugDescription: <span class=\"type\">String</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;debugDescription: &quot;</span> <span class=\"operator\">+</span> <span class=\"keyword\">super</span>.debugDescription </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"keyword\">self</span>)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在viewDidLoad中添加Xcode断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po self</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">debugDescription: Yay! debugging &lt;Signals.MasterViewController: 0x7fb71fd04080&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Swift-和-Objective-C-调试上下（文contexts）\"><a href=\"#Swift-和-Objective-C-调试上下（文contexts）\" class=\"headerlink\" title=\"Swift 和 Objective-C 调试上下（文contexts）\"></a>Swift 和 Objective-C 调试上下（文contexts）</h4><p>重要的是要注意调试程序时有两个调试上下文：非Swift调试上下文和Swift上下文。默认情况下，当您停止使用Objective-C代码时，LLDB将使用非Swift（Objective-C）调试上下文，而如果您在Swift代码中停止，则LLDB将使用Swift上下文。听起来合乎逻辑，对吧？</p>\n<p>但是你也可以指定上下文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) expression -l objc -O -- [UIApplication sharedApplication]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在这里，您告诉LLDB使用Objective-C的objc语言。如有必要，您还可以使用objc + +作为Objective-C ++。</p>\n</blockquote>\n<h4 id=\"用户定义变量\"><a href=\"#用户定义变量\" class=\"headerlink\" title=\"用户定义变量\"></a>用户定义变量</h4><p>如前所述，LLDB将在打印对象时代表您自动创建局部变量。您也可以创建自己的变量。</p>\n<p>但是记得名字前面加<code>$</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po id $test = [NSObject new] </span><br><span class=\"line\">(lldb) po $test </span><br><span class=\"line\">&lt;NSObject: 0x60000001d190&gt;</span><br><span class=\"line\">(lldb) expression -l swift -O -- $test //切换至Swift上下文，同样可用</span><br><span class=\"line\">&lt;NSObject: 0x60000001d190&gt;</span><br><span class=\"line\">(lldb) expression -l swift -O -- $test.description //但是不能期待一切都正常</span><br><span class=\"line\">error: &lt;EXPR&gt;:3:1: error: use of unresolved identifier &#x27;$test&#x27; $test.description ^~~~~</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这是一个正在积极开发的领域，Objective-C和Swift之间通过LLDB的桥梁可能会随着时间的推移而有所改善。</p>\n</blockquote>\n<p>在Xcoode创建符号断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Signals.MasterContainerViewController.viewDidLoad() -&gt; ()</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) p self</span><br><span class=\"line\">(lldb) po $R0.title //$R0是上一步打印出来的self的变量的名字</span><br><span class=\"line\">(lldb) expression -l swift -- $R0.title = &quot;new title&quot; //还可以修改</span><br></pre></td></tr></table></figure>\n\n<p>通过键入continue或按Xcode中的播放按钮来恢复应用程序。就会发现标题已经更新为 ’new title‘</p>\n<h5 id=\"类型格式化（Type-formatting）\"><a href=\"#类型格式化（Type-formatting）\" class=\"headerlink\" title=\"类型格式化（Type formatting）\"></a>类型格式化（Type formatting）</h5><p>LLDB的一个不错的选择是能够格式化基本数据类型的输出。这使得LLDB成为了解编译器如何格式化基本C类型的绝佳工具。当你正在探索汇编部分时，这是必须知道的，你将在本书后面做。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) expression -G x -- 10 //指定十进制格式化输出</span><br><span class=\"line\">(lldb) p/x 10 //十进制</span><br><span class=\"line\">(lldb) p/t 10 //二进制</span><br><span class=\"line\">(lldb) p/d &#x27;D&#x27; //十进制</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-G &lt;gdb-format&gt; ( --gdb-format &lt;gdb-format&gt; )</span><br><span class=\"line\">     Specify a format using a GDB format specifier string.</span><br></pre></td></tr></table></figure>\n\n<p>输出格式的完整列表如下（取自<a href=\"https://sourceware.org/gdb/\">https://sourceware.org/gdb/</a> onlinedocs &#x2F; gdb &#x2F; Output-Formats.html）：</p>\n<ul>\n<li>x：十六进制</li>\n<li>d：十进制</li>\n<li>u：无符号十进制</li>\n<li>o：八进制</li>\n<li>t：二进制</li>\n<li>a：地址</li>\n<li>c：字符常量</li>\n<li>f：浮点型</li>\n<li>s：字符串</li>\n</ul>\n<p>如果这些格式不够，您可以使用LLDB的额外格式化程序，但您将无法使用GDB格式化语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) expression -f Y -- 1430672467</span><br><span class=\"line\">(int) $0 = 53 54 46 55             STFU</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f &lt;format&gt; ( --format &lt;format&gt; )</span><br><span class=\"line\">     Specify a format to be used for display.</span><br></pre></td></tr></table></figure>\n\n<p>LLDB具有以下格式化程序（摘自<a href=\"http://lldb.llvm.org/varformats.html%EF%BC%89%EF%BC%9A\">http://lldb.llvm.org/varformats.html）：</a></p>\n<ul>\n<li><p>B：布尔值</p>\n</li>\n<li><p>b：二进制</p>\n</li>\n<li><p>y：字节</p>\n</li>\n<li><p>Y：ASCII字节</p>\n</li>\n<li><p>c：字符</p>\n</li>\n<li><p>C：可打印字符</p>\n</li>\n<li><p>F：复杂的浮点型（包含实部和虚部）</p>\n</li>\n<li><p>s：c-string</p>\n</li>\n<li><p>i：十进制</p>\n</li>\n<li><p>E：枚举</p>\n</li>\n<li><p>x：十六进制</p>\n</li>\n<li><p>f：浮点型</p>\n</li>\n<li><p>o：八进制</p>\n</li>\n<li><p>O：MacOS OSType</p>\n</li>\n<li><p>U：UTF-16</p>\n</li>\n<li><p>u：无符号十进制</p>\n</li>\n<li><p>p：指针</p>\n</li>\n</ul>\n<h3 id=\"第6章：线程，帧和步进（Thread-Frame-amp-Stepping-Around）\"><a href=\"#第6章：线程，帧和步进（Thread-Frame-amp-Stepping-Around）\" class=\"headerlink\" title=\"第6章：线程，帧和步进（Thread, Frame &amp; Stepping Around）\"></a>第6章：线程，帧和步进（Thread, Frame &amp; Stepping Around）</h3><p>您已经学习了如何创建断点，如何打印和修改值，以及如何在调试器中暂停时执行代码。但到目前为止，您已经处于高度干燥的状态，如何在调试器中移动并检查数据之外的数据。现在是时候了！</p>\n<p>在本章中，您将学习如何在LLDB当前暂停时将调试器移入和移出功能。</p>\n<p>这是一项关键技能，因为您经常需要在输入或退出代码片段时随时检查值。</p>\n<h4 id=\"（栈的第一课）Stack-101\"><a href=\"#（栈的第一课）Stack-101\" class=\"headerlink\" title=\"（栈的第一课）Stack 101\"></a>（栈的第一课）Stack 101</h4><p>当计算机程序执行时，它将值存储在堆和栈中。两者都有其优点。作为高级调试器，您需要充分了解这些工作原理。现在，让我们简要介绍一下这个栈。</p>\n<p>栈是LIFO（后进先出）队列，用于存储对当前正在执行的代码的引用。这种LIFO排序意味着最近添加的任何内容都会被删除。想想一栈盘子。在顶部添加一个盘子，它将是你首先取下的盘子。</p>\n<p>栈指针指向栈的当前顶部。在板块类比中，栈指针指向顶板，告诉您从哪里取下一块板，或者在哪里放下一块板。</p>\n<p><img src=\"/../assets/image-20190628093457893.png\" alt=\"image-20190628093457893\"></p>\n<p>在此图中，高地址显示在顶部（0xFFFFFFFF），低地址显示在底部（0x00000000），显示栈将向下增长。</p>\n<p>一些插图喜欢在底部具有高地址以与板类比匹配，因为栈将显示为向上增长。但是，我相信任何展示栈的图表都应显示从高地址向下增长，因为这会在以后讨论栈指针的偏移时引起较少的麻烦。</p>\n<h4 id=\"检查栈的帧\"><a href=\"#检查栈的帧\" class=\"headerlink\" title=\"检查栈的帧\"></a>检查栈的帧</h4><p>这里我将使用 iPhone X Simulator。</p>\n<p>添加断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Signals.MasterViewController.viewWillAppear(Swift.Bool) -&gt; ()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../assets/image-20190628094640418.jpg\" alt=\"image-20190628094640418\"></p>\n<p>在Debug Navigator面板中，将显示栈跟踪，显示栈帧列表，第一个是<code>viewWillAppear(_ :)</code>。接下来是Swift &#x2F; Objective-C桥接方法，<code>@objc MasterViewController.viewWillAppear(Bool) -&gt;():</code>。这个方法是自动生成的，所以Objective-C可以进入Swift代码。</p>\n<p>之后，有一些来自UIKit的Objective-C代码栈帧。深入挖掘一下，你会看到一些属于CoreAnimation的C ++代码。更深入的是，你会看到一些方法都包含属于CoreFoundation的名称CFRunLoop。最后，最重要的是，main函数。</p>\n<p>下面进入LLDB console：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) thread backtrace</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>bt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) help bt</span><br><span class=\"line\">     Show the current thread&#x27;s call stack.  Any numeric argument displays at</span><br><span class=\"line\">     most that many frames.  The argument &#x27;all&#x27; displays all threads.  Expects</span><br><span class=\"line\">     &#x27;raw&#x27; input (see &#x27;help raw-input&#x27;.)</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax: bt [&lt;digit&gt; | all]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;bt&#x27; is an abbreviation for &#x27;_regexp-bt&#x27;</span><br><span class=\"line\">(lldb) help thread backtrace</span><br><span class=\"line\">     Show thread call stacks.  Defaults to the current thread, thread indexes</span><br><span class=\"line\">     can be specified as arguments.</span><br><span class=\"line\">     Use the thread-index &quot;all&quot; to see all threads.</span><br><span class=\"line\">     Use the thread-index &quot;unique&quot; to see threads grouped by unique call stacks.</span><br><span class=\"line\"></span><br><span class=\"line\">Syntax: thread backtrace &lt;cmd-options&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Command Options Usage:</span><br><span class=\"line\">  thread backtrace [-c &lt;count&gt;] [-s &lt;frame-index&gt;] [-e &lt;boolean&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">       -c &lt;count&gt; ( --count &lt;count&gt; )</span><br><span class=\"line\">            How many frames to display (-1 for all)</span><br><span class=\"line\"></span><br><span class=\"line\">       -e &lt;boolean&gt; ( --extended &lt;boolean&gt; )</span><br><span class=\"line\">            Show the extended backtrace, if available</span><br><span class=\"line\"></span><br><span class=\"line\">       -s &lt;frame-index&gt; ( --start &lt;frame-index&gt; )</span><br><span class=\"line\">            Frame in which to start the backtrace</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) bt</span><br><span class=\"line\">* thread #1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1</span><br><span class=\"line\">  * frame #0: 0x0000000107044301 Signals`MasterViewController.viewWillAppear(animated=false, self=0x00007f9a26e0a670) at MasterViewController.swift:54:5</span><br><span class=\"line\">    frame #1: 0x0000000107044993 Signals`@objc MasterViewController.viewWillAppear(_:) at &lt;compiler-generated&gt;:0</span><br><span class=\"line\">    frame #2: 0x0000000110fc9437 UIKitCore`-[UIViewController _setViewAppearState:isAnimating:] + 687</span><br><span class=\"line\">    frame #3: 0x0000000110fc9995 UIKitCore`__52-[UIViewController _setViewAppearState:isAnimating:]_block_invoke + 265</span><br><span class=\"line\">    frame #4: 0x000000010957b33a CoreFoundation`-[__NSSingleObjectArrayI enumerateObjectsWithOptions:usingBlock:] + 58</span><br><span class=\"line\">    frame #5: 0x0000000110fc9729 UIKitCore`-[UIViewController _setViewAppearState:isAnimating:] + 1441</span><br><span class=\"line\">    frame #6: 0x0000000110fc9ba2 UIKitCore`-[UIViewController __viewWillAppear:] + 131</span><br><span class=\"line\">    frame #7: 0x0000000110f275c9 UIKitCore`-[UINavigationController _startTransition:fromViewController:toViewController:] + 868</span><br><span class=\"line\">    frame #8: 0x0000000110f283b5 UIKitCore`-[UINavigationController _startDeferredTransitionIfNeeded:] + 896</span><br><span class=\"line\">    frame #9: 0x0000000110f296a7 UIKitCore`-[UINavigationController __viewWillLayoutSubviews] + 150</span><br><span class=\"line\">    frame #10: 0x0000000110f0a38d UIKitCore`-[UILayoutContainerView layoutSubviews] + 217</span><br><span class=\"line\">    frame #11: 0x0000000111a939c1 UIKitCore`-[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1417</span><br><span class=\"line\">    frame #12: 0x000000010ea1feae QuartzCore`-[CALayer layoutSublayers] + 173</span><br><span class=\"line\">    frame #13: 0x000000010ea24b88 QuartzCore`CA::Layer::layout_if_needed(CA::Transaction*) + 396</span><br><span class=\"line\">    frame #14: 0x000000010ea30ee4 QuartzCore`CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 72</span><br><span class=\"line\">    frame #15: 0x000000010e9a03aa QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 328</span><br><span class=\"line\">    frame #16: 0x000000010e9d7584 QuartzCore`CA::Transaction::commit() + 608</span><br><span class=\"line\">    frame #17: 0x00000001115deccb UIKitCore`__34-[UIApplication _firstCommitBlock]_block_invoke_2 + 128</span><br><span class=\"line\">    frame #18: 0x0000000109592aec CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 12</span><br><span class=\"line\">    frame #19: 0x00000001095922b0 CoreFoundation`__CFRunLoopDoBlocks + 336</span><br><span class=\"line\">    frame #20: 0x000000010958cb34 CoreFoundation`__CFRunLoopRun + 1252</span><br><span class=\"line\">    frame #21: 0x000000010958c302 CoreFoundation`CFRunLoopRunSpecific + 626</span><br><span class=\"line\">    frame #22: 0x000000010e8e22fe GraphicsServices`GSEventRunModal + 65</span><br><span class=\"line\">    frame #23: 0x00000001115c5ba2 UIKitCore`UIApplicationMain + 140</span><br><span class=\"line\">    frame #24: 0x000000010704b88b Signals`main at AppDelegate.swift:32:7</span><br><span class=\"line\">    frame #25: 0x000000010af06541 libdyld.dylib`start + 1</span><br><span class=\"line\">(lldb) frame info</span><br><span class=\"line\">frame #0: 0x0000000107044301 Signals`MasterViewController.viewWillAppear(animated=false, self=0x00007f9a26e0a670) at MasterViewController.swift:54:5</span><br></pre></td></tr></table></figure>\n\n<p>如您所见，此输出与Debug Navigator中找到的内容相匹配。那么，如果您只是从Debug Navigator中看到所有内容，为什么这甚至很重要？好吧，使用LLDB控制台可以对您想要查看的信息进行细致的控制。此外，您将制作自定义LLDB脚本，其中这些命令将变得非常有用。知道Xcode从哪里获取信息也很好，对吧？</p>\n<p>然后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) frame select 1</span><br><span class=\"line\">frame #1: 0x0000000107044993 Signals`@objc MasterViewController.viewWillAppear(_:) at &lt;compiler-generated&gt;:0</span><br></pre></td></tr></table></figure>\n\n<p>记下汇编中的绿线。在该行之前是负责执行<code>viewWillAppear(_:)</code>的<code>callq</code>指令，您在之前设置了断点。</p>\n<p>不要让汇编太模糊你的眼睛。你还没有走出汇编树林……</p>\n<h4 id=\"步进\"><a href=\"#步进\" class=\"headerlink\" title=\"步进\"></a>步进</h4><p>掌握LLDB时，您可以在程序暂停时执行的三个最重要的导航操作围绕着逐步执行程序。通过LLDB，您可以跳过（step over），单步执行（step in）或退出（step out）代码。</p>\n<h5 id=\"跳过\"><a href=\"#跳过\" class=\"headerlink\" title=\"跳过\"></a>跳过</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) run //&#x27;run&#x27; is an abbreviation for &#x27;process launch -X true --&#x27;</span><br><span class=\"line\">(lldb) next //&#x27;next&#x27; is an abbreviation for &#x27;thread step-over&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) step //&#x27;step&#x27; is an abbreviation for &#x27;thread step-in&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) finish //&#x27;finish&#x27; is an abbreviation for &#x27;thread step-out&#x27;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请记住，只需按Enter键，LLDB将执行您输入的最后一个命令。</p>\n</blockquote>\n<h5 id=\"Xcode-界面中步进\"><a href=\"#Xcode-界面中步进\" class=\"headerlink\" title=\"Xcode 界面中步进\"></a>Xcode 界面中步进</h5><p>虽然使用控制台可以获得更加精细的控制，但Xcode已经为LLDB控制台上方的按钮提供了这些选项。</p>\n<h4 id=\"检查栈中的数据\"><a href=\"#检查栈中的数据\" class=\"headerlink\" title=\"检查栈中的数据\"></a>检查栈中的数据</h4><p><code>frame</code> 命令的一个非常有趣的选项是 <code>frame variable</code> 子命令。</p>\n<p>此命令将获取可执行文件头中的调试符号信息（如果您的应用程序被剥离，则为dYSM …稍后会详细介绍）并转储该特定栈帧的信息。由于调试信息，frame variable命令可以使用适当的选项轻松告诉您函数中所有变量的范围以及程序中的任何全局变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) frame variable</span><br><span class=\"line\">(lldb) frame variable -F self //以平面格式打印结果</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-F ( --flat )</span><br><span class=\"line\">      Display results in a flat format that uses expression paths for each variable or member.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/Users/will/git/blog/source/assets/image-20190701112507258.jpg\" alt=\"image-20190701112507258\"></p>\n<blockquote>\n<p>提供有关Apple私有API的ivars的更多信息，而不是Variables View。</p>\n</blockquote>\n<h3 id=\"第7章：镜像-Image\"><a href=\"#第7章：镜像-Image\" class=\"headerlink\" title=\"第7章：镜像(Image)\"></a>第7章：镜像(Image)</h3><p>现在是时候探索通过LLDB的权力找到感兴趣代码的最佳工具之一。在本章中，您将深入了解<code>image</code>命令。</p>\n<p><code>image</code>命令是<code>target modules</code>子命令的别名。<code>image</code>命令专门查询 module 信息;也就是说，代码在进程中加载和执行。Module 可以包含许多东西，包括主要的可执行文件(main executables)，框架(framework)或插件(plugin)。但是，这些module中的大多数通常以动态库(dynamic libraries)的形式出现。动态库的示例包括适用于iOS的UIKit或适用于macOS的AppKit。</p>\n<h4 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image list </span><br><span class=\"line\">(lldb) image list Foundation</span><br><span class=\"line\">[  0] FD4BF3C6-63C9-3A30-BEEA-D39F6F8EEB13 0x0000000107d70000 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Foundation.framework/Foundation </span><br></pre></td></tr></table></figure>\n\n<p>这是一种有用的方法，可以找到有关所需module的信息。</p>\n<p>让我们来探索这个输出。 那里有一些有趣的东西：</p>\n<ol>\n<li><p>首先打印module的UUID（FD4BF3C6-63C9-3A30-BEEA-D39F6F8EEB13）。UUID对于搜索符号信息和唯一标识Foundation module的版本非常重要。</p>\n</li>\n<li><p>在UUID之后是加载地址（0x0000000107d70000）。 这标识将Foundation  module加载到Signals可执行文件的进程空间中。</p>\n</li>\n<li><p>最后，您拥有module在磁盘上所在位置的完整路径。</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image dump symtab UIKitCore -s address</span><br></pre></td></tr></table></figure>\n\n<p>这将转储UIKitCore可用的所有符号表信息。由于<code>-s address</code>参数，此命令按私有UIKitCore模块中实现函数的地址对输出进行排序。</p>\n<p>但是可读性不佳，需要另外一个命令来搜索：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -n &quot;-[UIViewController viewDidLoad]&quot;</span><br><span class=\"line\">1 match found in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore:</span><br><span class=\"line\">        Address: UIKitCore[0x000000000034adf9] (UIKitCore.__TEXT.__text + 3443497)</span><br><span class=\"line\">        Summary: UIKitCore`-[UIViewController viewDidLoad]</span><br></pre></td></tr></table></figure>\n\n<p>这将转储与UIViewController的viewDidLoad实例方法相关的信息。</p>\n<p>如果想用正则来模糊搜索：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn UIViewController</span><br></pre></td></tr></table></figure>\n\n<p>但是这还不够，因为结果包含了<code>UIViewControllerBuiltinTransitionViewAnimator</code>，这并不是我们想要的，所改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn &#x27;\\[UIViewController\\ &#x27;</span><br><span class=\"line\">(lldb) image lookup -rn \\[UIViewController\\s //等价的</span><br></pre></td></tr></table></figure>\n\n<p>但是如果搜索Category，命名规则：<code>UIViewController(CategoryName)</code>，改进如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn &#x27;\\[UIViewController\\(\\w+\\)\\ &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>当然这些都是参考正则表达式的规则，然后用在实际的需求中。</p>\n<h5 id=\"寻找代码\"><a href=\"#寻找代码\" class=\"headerlink\" title=\"寻找代码\"></a>寻找代码</h5><p>您可以使用上面的<code>image lookup</code>命令找到UIViewController方法。您还使用它来寻找第4章“在代码中停止”中如何命名Swift属性setter和getter。</p>\n<p>但是Block如何搜索呢？如下面例子</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">dispatch_once(<span class=\"operator\">&amp;</span>onceToken, <span class=\"operator\">^</span>&#123;</span><br><span class=\"line\">  sharedSignalHandler <span class=\"operator\">=</span> [[<span class=\"type\">UnixSignalHandler</span> alloc] initPrivate];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们先在Xcode添加断点，然后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) frame info</span><br><span class=\"line\">frame #0: 0x00000001048e1250 Commons`__34+[UnixSignalHandler sharedHandler]_block_invoke(.block_descriptor=0x00000001048e8230) at UnixSignalHandler.m:72:28</span><br></pre></td></tr></table></figure>\n\n<p>可以看到完整的函数名：<code> __34+[UnixSignalHandler sharedHandler]_block_invoke</code></p>\n<p>让我们先试试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn _block_invoke</span><br></pre></td></tr></table></figure>\n\n<p>结果太多，添加范围限制：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn _block_invoke Commons</span><br></pre></td></tr></table></figure>\n\n<p>现在创建断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) rb appendSignal.*_block_invoke -s Commons</span><br></pre></td></tr></table></figure>\n\n<p>之后我回到终端：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pkill -SIGIO Signals</span><br></pre></td></tr></table></figure>\n\n<p>就会触发刚刚创建的断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2019-07-01 14:16:15.922561+0800 Signals[7583:429444] Appending new signal: SIGIO</span><br><span class=\"line\">(lldb) frame variable</span><br><span class=\"line\">(__block_literal_5 *) .block_descriptor = 0x0000600002f1d580</span><br><span class=\"line\">(int) sig = &lt;read memory from 0x41 failed (0 of 4 bytes read)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(siginfo_t *) siginfo = &lt;read memory from 0x39 failed (0 of 8 bytes read)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(UnixSignalHandler *const) self = &lt;read memory from 0x31 failed (0 of 8 bytes read)&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(lldb) next</span><br><span class=\"line\">(lldb) frame variable</span><br><span class=\"line\">(__block_literal_5 *) .block_descriptor = 0x0000600002f1d580</span><br><span class=\"line\">(int) sig = 23</span><br><span class=\"line\">(siginfo_t *) siginfo = 0x00007ffeecdd9e78</span><br><span class=\"line\">(UnixSignalHandler *) self = 0x0000600002f091c0</span><br><span class=\"line\">(UnixSignal *) unixSignal = 0x0000000106ca4454</span><br></pre></td></tr></table></figure>\n\n<p>您需要跳过一个语句，因此块执行了一些初始逻辑来设置函数，也称为函数序言（function prologue）。函数序言是与汇编相关的主题，您将在第II节中了解。</p>\n<p>这实际上非常有趣。首先，您会看到一个block的对象，正在调用的。然后有sig和siginfo参数传递给Objective-C方法，在该方法中调用此块。这些如何传递到block中？</p>\n<p>好吧，当创建一个block时，编译器足够聪明，可以确定它正在使用哪些参数。然后它创建一个将这些作为参数的函数。调用块时，调用此函数，并传入相关参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -t __block_literal_5</span><br><span class=\"line\">Best match found in /Users/will/Library/Developer/Xcode/DerivedData/Signals-bgjklehkjddsnxcexztwhrufpsbn/Build/Products/Debug-iphonesimulator/Signals.app/Frameworks/Commons.framework/Commons:</span><br><span class=\"line\">id = &#123;0x100000be1&#125;, name = &quot;__block_literal_5&quot;, byte-size = 52, decl = UnixSignalHandler.m:127, compiler_type = &quot;struct __block_literal_5 &#123;</span><br><span class=\"line\">    void *__isa;</span><br><span class=\"line\">    int __flags;</span><br><span class=\"line\">    int __reserved;</span><br><span class=\"line\">    void (*__FuncPtr)();</span><br><span class=\"line\">    __block_descriptor_withcopydispose *__descriptor;</span><br><span class=\"line\">    UnixSignalHandler *const self;</span><br><span class=\"line\">    siginfo_t *siginfo;</span><br><span class=\"line\">    int sig;</span><br><span class=\"line\">&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这是定义block的对象！</p>\n<p>正如您所看到的，这几乎与头文件一样好，可以告诉您如何在block中导航内存。如果将内存中的引用转换为<code>__block_literal_5</code>类型，则可以轻松打印出block引用的所有变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po ((__block_literal_5 *)0x0000600002f1d580)</span><br><span class=\"line\">&lt;__NSMallocBlock__: 0x600002f1d580&gt;</span><br><span class=\"line\">(lldb) p/x ((__block_literal_5 *)0x0000600002f1d580)-&gt;__FuncPtr</span><br><span class=\"line\">(void (*)()) $1 = 0x0000000103143a80 (Commons`__38-[UnixSignalHandler appendSignal:sig:]_block_invoke_2 at UnixSignalHandler.m:127)</span><br><span class=\"line\">(lldb) image lookup -a 0x0000000103143a80</span><br><span class=\"line\">      Address: Commons[0x0000000000001a80] (Commons.__TEXT.__text + 2240)</span><br><span class=\"line\">      Summary: Commons`__38-[UnixSignalHandler appendSignal:sig:]_block_invoke_2 at UnixSignalHandler.m:127</span><br><span class=\"line\">(lldb) po ((__block_literal_5 *)0x0000600002f1d580)-&gt;sig //打印出传递给block的所有参数</span><br><span class=\"line\">23</span><br><span class=\"line\">(lldb) p *(__block_literal_5 *)0x0000600002f1d580 //可以使用p命令转储完整的结构并解除引用指针</span><br><span class=\"line\">(__block_literal_5) $4 = &#123;</span><br><span class=\"line\">  __isa = 0x0000000106d6e170</span><br><span class=\"line\">  __flags = -1023410174</span><br><span class=\"line\">  __reserved = 0</span><br><span class=\"line\">  __FuncPtr = 0x0000000103143a80 (Commons`__38-[UnixSignalHandler appendSignal:sig:]_block_invoke_2 at UnixSignalHandler.m:127)</span><br><span class=\"line\">  __descriptor = 0x000000010314a2c0</span><br><span class=\"line\">  self = 0x0000600002f091c0</span><br><span class=\"line\">  siginfo = 0x00007ffeecdd9e78</span><br><span class=\"line\">  sig = 23</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深入研究（Snooping-around）\"><a href=\"#深入研究（Snooping-around）\" class=\"headerlink\" title=\"深入研究（Snooping around）\"></a>深入研究（Snooping around）</h4><p>好的，您已经发现了如何以静态方式检查私有类的实例变量，但是该块内存地址太过诱人而无法置之不理。 尝试将其打印出来并使用动态分析进行探索。</p>\n<p>直接打印block的内存地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po 0x0000600002f1d580</span><br><span class=\"line\">&lt;__NSMallocBlock__: 0x600002f1d580&gt;</span><br><span class=\"line\">(lldb) image lookup -rn __NSMallocBlock__ // 没有结果</span><br><span class=\"line\">(lldb) po [__NSMallocBlock__ superclass]</span><br><span class=\"line\">__NSMallocBlock</span><br><span class=\"line\">(lldb) image lookup -rn __NSMallocBlock</span><br><span class=\"line\">5 matches found in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation:</span><br><span class=\"line\">        Address: CoreFoundation[0x000000000018b600] (CoreFoundation.__TEXT.__text + 1614448)</span><br><span class=\"line\">        Summary: CoreFoundation`-[__NSMallocBlock retain]        Address: CoreFoundation[0x000000000018b620] (CoreFoundation.__TEXT.__text + 1614480)</span><br><span class=\"line\">        Summary: CoreFoundation`-[__NSMallocBlock release]        Address: CoreFoundation[0x000000000018b630] (CoreFoundation.__TEXT.__text + 1614496)</span><br><span class=\"line\">        Summary: CoreFoundation`-[__NSMallocBlock retainCount]        Address: CoreFoundation[0x000000000018b640] (CoreFoundation.__TEXT.__text + 1614512)</span><br><span class=\"line\">        Summary: CoreFoundation`-[__NSMallocBlock _tryRetain]        Address: CoreFoundation[0x000000000018b650] (CoreFoundation.__TEXT.__text + 1614528)</span><br><span class=\"line\">        Summary: CoreFoundation`-[__NSMallocBlock _isDeallocating]</span><br><span class=\"line\">        </span><br><span class=\"line\">(lldb) po [__NSMallocBlock superclass]</span><br><span class=\"line\">NSBlock</span><br><span class=\"line\"></span><br><span class=\"line\">(lldb) image lookup -rn &#x27;NSBlock\\ &#x27;</span><br><span class=\"line\">6 matches found in /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation:</span><br><span class=\"line\">        Address: CoreFoundation[0x000000000018b4c0] (CoreFoundation.__TEXT.__text + 1614128)</span><br><span class=\"line\">        Summary: CoreFoundation`+[NSBlock allocWithZone:]        Address: CoreFoundation[0x000000000018b4e0] (CoreFoundation.__TEXT.__text + 1614160)</span><br><span class=\"line\">        Summary: CoreFoundation`+[NSBlock alloc]        Address: CoreFoundation[0x000000000018b500] (CoreFoundation.__TEXT.__text + 1614192)</span><br><span class=\"line\">        Summary: CoreFoundation`-[NSBlock copy]        Address: CoreFoundation[0x000000000018b510] (CoreFoundation.__TEXT.__text + 1614208)</span><br><span class=\"line\">        Summary: CoreFoundation`-[NSBlock copyWithZone:]        Address: CoreFoundation[0x000000000018b520] (CoreFoundation.__TEXT.__text + 1614224)</span><br><span class=\"line\">        Summary: CoreFoundation`-[NSBlock invoke]        Address: CoreFoundation[0x000000000018b530] (CoreFoundation.__TEXT.__text + 1614240)</span><br><span class=\"line\">        Summary: CoreFoundation`-[NSBlock performAfterDelay:]</span><br></pre></td></tr></table></figure>\n\n<p>您现在将尝试在block上调用此方法。但是，当保留此block的引用释放其控制时，您不希望块消失，从而降低retainCount，并可能释放block。</p>\n<p>有一种简单的方法来保持这个block - 只需 <code>retain</code> 它！在LLDB中键入以下内容，将地址替换为block的地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po id $block = (id)0x0000600002f1d580</span><br><span class=\"line\">(lldb) po [$block retain]</span><br><span class=\"line\">&lt;__NSMallocBlock__: 0x600002f1d580&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(lldb) po [$block invoke]</span><br><span class=\"line\">2019-07-01 16:05:33.855039+0800 Signals[7583:452921] Appending new signal: SIGIO</span><br><span class=\"line\"> nil</span><br></pre></td></tr></table></figure>\n\n<p>这表明你已经再次调用了block！</p>\n<p>这种用于探索公共和私有类，然后探索它们实现的方法的方法，是了解程序覆盖范围内的内容的好方法。稍后您将对方法使用相同的发现过程，然后分析这些方法执行的程序集，为您提供原始方法源代码的非常接近的近似值。</p>\n<h5 id=\"Private-debugging-methods\"><a href=\"#Private-debugging-methods\" class=\"headerlink\" title=\"Private debugging methods\"></a>Private debugging methods</h5><p><code>image lookup</code> 命令可以很好地搜索私有方法以及您在Apple开发职业生涯中看到的公共方法。</p>\n<p>但是，在调试自己的代码时，有一些隐藏的方法非常有用。</p>\n<p>例如，以<code>_</code>开头的方法通常表示自己是一个私有（也可能是重要的！）方法。</p>\n<p>让我们尝试在所有以下划线字符开头的模块中搜索任何Objective-C方法，并在其中包含单词“description”。</p>\n<p>如果您在阅读此行代码时有些迷惑不解，强烈建议您仔细阅读 <a href=\"https://docs.python.org/2/library/re.html\">https://docs.python.org/2/library/re.html</a> 以了解正则表达式查询;从现在开始，它只会变得更加复杂。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) image lookup -rn (?i)\\ _\\w+description\\] //不区分大小写</span><br><span class=\"line\">(lldb) image lookup -rn NSObject\\(IvarDescription\\)</span><br><span class=\"line\">(lldb) po [[UIApplication sharedApplication] _ivarDescription]</span><br><span class=\"line\">(lldb) image lookup -rn &#x27;\\[UIStatusBar\\ set&#x27; //查找所以set开头方法</span><br><span class=\"line\">(lldb) po (BOOL)[[UIStatusBar class] isSubclassOfClass:[UIView class]]</span><br></pre></td></tr></table></figure>\n\n<p>通过地址调用对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(lldb) po [[UIApplication sharedApplication] statusBar]</span><br><span class=\"line\">&lt;UIStatusBar_Modern: 0x7f9965e03f00; frame = (0 0; 375 44); autoresize = W+BM; layer = &lt;CALayer: 0x6000025dd640&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(lldb) po [0x7f9965e03f00 setBackgroundColor:[UIColor purpleColor]]</span><br><span class=\"line\">purpleColor</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>未完待续</p>\n</blockquote>\n"},{"title":"Alamofire serverTrustEvaluationFailed 错误分析","url":"/2023/12/25/Alamofire-serverTrustEvaluationFailed-error/","content":"<h1 id=\"serverTrustEvaluationFailed-错误\"><a href=\"#serverTrustEvaluationFailed-错误\" class=\"headerlink\" title=\"serverTrustEvaluationFailed 错误\"></a>serverTrustEvaluationFailed 错误</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Printing description of error:</span><br><span class=\"line\">▿ AFError</span><br><span class=\"line\">  ▿ serverTrustEvaluationFailed : 1 element</span><br><span class=\"line\">    ▿ reason : ServerTrustFailureReason</span><br><span class=\"line\">      ▿ noRequiredEvaluator : 1 element</span><br><span class=\"line\">        - host : <span class=\"string\">&quot;***&quot;</span></span><br><span class=\"line\">(lldb) po error.debugDescription</span><br><span class=\"line\"><span class=\"string\">&quot;Server trust evaluation failed due to reason: A ServerTrustEvaluating value is required for host *** but none was found.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原因是配置了白名单\"><a href=\"#原因是配置了白名单\" class=\"headerlink\" title=\"原因是配置了白名单\"></a>原因是配置了白名单</h1><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> evaluators: [<span class=\"type\">String</span>: <span class=\"type\">ServerTrustEvaluating</span>] <span class=\"operator\">=</span> [:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> evaluators: [<span class=\"type\">String</span>: <span class=\"type\">ServerTrustEvaluating</span>] <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"string\">&quot;*.yourdomain.com&quot;</span>: <span class=\"type\">PinnedCertificatesTrustEvaluator</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\"><span class=\"comment\">// 白名单 allHostsMustBeEvaluated: true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serverTrust <span class=\"operator\">=</span> <span class=\"type\">ServerTrustManager</span>(allHostsMustBeEvaluated: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                                     evaluators: evaluators)</span><br><span class=\"line\"></span><br><span class=\"line\">session <span class=\"operator\">=</span> <span class=\"type\">Alamofire</span>.<span class=\"type\">Session</span>(configuration: configuration,</span><br><span class=\"line\">                            serverTrustManager: serverTrust)</span><br></pre></td></tr></table></figure>\n\n<p>可把 <code>allHostsMustBeEvaluated</code> 改为 <code>false</code>，只对指定的host开启。</p>\n<h1 id=\"原理-TLS-Server-Trust\"><a href=\"#原理-TLS-Server-Trust\" class=\"headerlink\" title=\"原理 TLS Server Trust\"></a>原理 TLS Server Trust</h1><p><a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#evaluating-server-trusts-with-servertrustmanager-and-servertrustevaluating\">https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#evaluating-server-trusts-with-servertrustmanager-and-servertrustevaluating</a></p>\n<p>在与服务器和 Web 服务通信时使用安全的 HTTPS 连接是保护敏感数据的重要步骤。默认情况下，Alamofire 会收到与 <code>URLSession</code> 相同的自动 TLS 证书和证书链验证。虽然这保证了证书链的有效性，但它并不能防止中间人 （MITM） 攻击或其他潜在漏洞。为了减轻中间人攻击，处理敏感客户数据或财务信息的应用程序应使用 Alamofire <code>ServerTrustEvaluating</code> 协议提供的证书或公钥固定。</p>\n<p><strong>使用 <code>ServerTrustManager</code> 和 <code>ServerTrustEvaluating</code> 评估服务器信任</strong></p>\n<p>该协议 <code>ServerTrustEvaluating</code> 提供了一种执行任何类型的服务器信任评估的方法。它只有一个要求：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"keyword\">_</span> <span class=\"params\">trust</span>: <span class=\"type\">SecTrust</span>, <span class=\"params\">forHost</span> <span class=\"params\">host</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span></span><br></pre></td></tr></table></figure>\n\n<p>此方法提供从基础 <code>URLSession</code> 接收 <code>SecTrust</code> 的值和主机 <code>String</code> ，并提供执行各种评估的机会。</p>\n<p>包括许多不同类型的信任评估器，提供对评估过程的可组合控制：</p>\n<ol>\n<li><code>DefaultTrustEvaluator</code> ：使用默认服务器信任评估，同时允许您控制是否验证质询提供的主机。</li>\n<li><code>RevocationTrustEvaluator</code> ：检查收到的证书的状态，以确保其未被吊销。由于它需要网络请求开销，因此通常不会对每个请求执行此操作。</li>\n<li><code>PinnedCertificatesTrustEvaluator</code> ：使用提供的证书来验证服务器信任。如果其中一个固定的证书与其中一个服务器证书匹配，则认为服务器信任有效。此赋值器还可以接受自签名证书。</li>\n<li><code>PublicKeysTrustEvaluator</code> ：使用提供的公钥来验证服务器信任。如果其中一个固定的公钥与其中一个服务器证书公钥匹配，则认为服务器信任有效。</li>\n<li><code>CompositeTrustEvaluator</code> ：计算值数组，仅当所有 <code>ServerTrustEvaluating</code> 值都成功时才成功。例如，此类型可用于组合 <code>RevocationTrustEvaluator</code> 和 <code>PinnedCertificatesTrustEvaluator</code> 。</li>\n<li><code>DisabledTrustEvaluator</code> ：此评估程序应仅在调试方案中使用，因为它会禁用所有评估，而这些评估将始终将任何服务器信任视为有效。此评估器绝不应在生产环境中使用！</li>\n</ol>\n<h2 id=\"ServerTrustManager\"><a href=\"#ServerTrustManager\" class=\"headerlink\" title=\"ServerTrustManager\"></a><strong><code>ServerTrustManager</code></strong></h2><p>负责 <code>ServerTrustManager</code> 存储值到特定主机的 <code>ServerTrustEvaluating</code> 内部映射。这允许 Alamofire 使用不同的评估器评估每个主机。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> evaluators: [<span class=\"type\">String</span>: <span class=\"type\">ServerTrustEvaluating</span>] <span class=\"operator\">=</span> [</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下，应用程序捆绑包中包含的证书会自动固定。</span></span><br><span class=\"line\">    <span class=\"string\">&quot;cert.example.com&quot;</span>: <span class=\"type\">PinnedCertificatesTrustEvaluator</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下，会自动使用应用程序包中包含的证书中的公钥。</span></span><br><span class=\"line\">    <span class=\"string\">&quot;keys.example.com&quot;</span>: <span class=\"type\">PublicKeysTrustEvaluator</span>(),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> manager <span class=\"operator\">=</span> <span class=\"type\">ServerTrustManager</span>(evaluators: evaluators)</span><br></pre></td></tr></table></figure>\n\n<p>这将 <code>ServerTrustManager</code> 具有以下行为：</p>\n<ol>\n<li><code>cert.example.com</code> 将始终使用启用默认和主机验证的证书固定，因此需要满足以下条件才能使 TLS 握手成功：<ol>\n<li>证书链必须有效。</li>\n<li>证书链必须包含其中一个固定的证书。</li>\n<li>质询主机必须与证书链的叶证书中的主机匹配。</li>\n</ol>\n</li>\n<li><code>keys.example.com</code> 将始终使用启用默认和主机验证的公钥固定，因此需要满足以下条件才能使 TLS 握手成功：<ol>\n<li>证书链必须有效。</li>\n<li>证书链必须包含其中一个固定的公钥。</li>\n<li>质询主机必须与证书链的叶证书中的主机匹配。</li>\n</ol>\n</li>\n<li>对其他主机的请求将产生错误，因为 <code>ServerTrustManager</code> 默认情况下需要评估所有主机。</li>\n</ol>\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p>Alamofire 项目中测试用例：<a href=\"https://github.com/Alamofire/Alamofire/blob/master/Tests/TLSEvaluationTests.swift#L422C12-L422C12\">Tests&#x2F;TLSEvaluationTests.swift</a></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">TestCertificates</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> rootCA <span class=\"operator\">=</span> <span class=\"type\">TestCertificates</span>.certificate(filename: <span class=\"string\">&quot;expired.badssl.com-root-ca&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> intermediateCA1 <span class=\"operator\">=</span> <span class=\"type\">TestCertificates</span>.certificate(filename: <span class=\"string\">&quot;expired.badssl.com-intermediate-ca-1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> intermediateCA2 <span class=\"operator\">=</span> <span class=\"type\">TestCertificates</span>.certificate(filename: <span class=\"string\">&quot;expired.badssl.com-intermediate-ca-2&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> leaf <span class=\"operator\">=</span> <span class=\"type\">TestCertificates</span>.certificate(filename: <span class=\"string\">&quot;expired.badssl.com-leaf&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从给定的文件名创建证书：SecCertificate对象。</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">certificate</span>(<span class=\"params\">filename</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">SecCertificate</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> filePath <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.test.path(forResource: filename, ofType: <span class=\"string\">&quot;cer&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> <span class=\"type\">Data</span>(contentsOf: <span class=\"type\">URL</span>(fileURLWithPath: filePath))</span><br><span class=\"line\">        <span class=\"keyword\">let</span> certificate <span class=\"operator\">=</span> <span class=\"type\">SecCertificateCreateWithData</span>(<span class=\"literal\">nil</span>, data <span class=\"keyword\">as</span> <span class=\"type\">CFData</span>)<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> certificate</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testThatExpiredCertificateRequestFailsWhenPinningLeafPublicKeyWithCertificateChainValidation</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Given</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里直接从证书提取公钥</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> keys <span class=\"operator\">=</span> [<span class=\"type\">TestCertificates</span>.leaf].af.publicKeys</span><br><span class=\"line\">        <span class=\"keyword\">let</span> evaluators <span class=\"operator\">=</span> [expiredHost: <span class=\"type\">PublicKeysTrustEvaluator</span>(keys: keys)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> manager <span class=\"operator\">=</span> <span class=\"type\">Session</span>(configuration: configuration,</span><br><span class=\"line\">                              serverTrustManager: <span class=\"type\">ServerTrustManager</span>(evaluators: evaluators))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> expectation <span class=\"operator\">=</span> expectation(description: <span class=\"string\">&quot;<span class=\"subst\">\\(expiredURLString)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> error: <span class=\"type\">AFError</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// When</span></span><br><span class=\"line\">        manager.request(expiredURLString)</span><br><span class=\"line\">            .response &#123; resp <span class=\"keyword\">in</span></span><br><span class=\"line\">                error <span class=\"operator\">=</span> resp.error</span><br><span class=\"line\">                expectation.fulfill()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        waitForExpectations(timeout: timeout)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Then</span></span><br><span class=\"line\">        <span class=\"type\">XCTAssertNotNil</span>(error, <span class=\"string\">&quot;error should not be nil&quot;</span>)</span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(error<span class=\"operator\">?</span>.isServerTrustEvaluationError, <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .serverTrustEvaluationFailed(reason)<span class=\"operator\">?</span> <span class=\"operator\">=</span> error &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">12</span>, <span class=\"keyword\">macOS</span> <span class=\"number\">10.14</span>, <span class=\"keyword\">tvOS</span> <span class=\"number\">12</span>, <span class=\"keyword\">watchOS</span> <span class=\"number\">5</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">XCTAssertTrue</span>(reason.isTrustEvaluationFailed, <span class=\"string\">&quot;should be .trustEvaluationFailed&quot;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">XCTAssertTrue</span>(reason.isDefaultEvaluationFailed, <span class=\"string\">&quot;should be .defaultEvaluationFailed&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">XCTFail</span>(<span class=\"string\">&quot;error should be .serverTrustEvaluationFailed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","tags":["Network","Swift","Alamofire"]},{"title":"App : open gewill.org","url":"/2015/05/21/App-open-gewill-org/","content":"<p>自动打开我的网站 <a href=\"http://gewill.org/\">gewill.org</a> 的 app。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  ViewController.swift</span><br><span class=\"line\">//  Open gewill.org</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will on 5/21/15.</span><br><span class=\"line\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        // Do any additional setup after loading the view, typically from a nib.</span><br><span class=\"line\">        UIApplication.sharedApplication().openURL(NSURL(string: &quot;http://gewill.org&quot;)!)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"数组拷贝","url":"/2015/12/14/Array-Copy/","content":"<p>源于微信群里一个问题讨论，具体陈铭嘉博客总结的很详细：<a href=\"http://www.jianshu.com/p/9a2952c792e6\">http://www.jianshu.com/p/9a2952c792e6</a>。</p>\n<p>我主要是实践验证一下文章中的代码，其中Swift中的内存指针参看：<a href=\"http://onevcat.com/2015/01/swift-pointer/\">http://onevcat.com/2015/01/swift-pointer/</a>。</p>\n<h2 id=\"Objective-C-部分：\"><a href=\"#Objective-C-部分：\" class=\"headerlink\" title=\"Objective-C 部分：\"></a>Objective-C 部分：</h2><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一层理解:</span></span><br><span class=\"line\"><span class=\"comment\">//如果对一个不可变容器复制，copy是指针复制，即浅拷贝。</span></span><br><span class=\"line\"><span class=\"comment\">//如果对一个可变容器复制，copy是对象复制，即深拷贝。</span></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array = [<span class=\"built_in\">NSArray</span> array];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *array2 = [array <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%p and %p&quot;</span>, array, array2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *marray = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *marray2 = [marray <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%p and %p&quot;</span>, marray, marray2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  第二层理解:</span></span><br><span class=\"line\"><span class=\"comment\">//  如果是对可变容器copy,是对象复制,即深拷贝,但拷贝出的是一个不可变容器。</span></span><br><span class=\"line\"><span class=\"comment\">//  如果是对可变容器mutableCopy才符合正确地copy语义,也是对象复制,即深拷贝,这次拷贝出的是一个可变容器。</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *array3 = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, [array3 <span class=\"keyword\">class</span>]);</span><br><span class=\"line\">[array3 addObject:<span class=\"string\">@&quot;Panda&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *array4 = [array3 mutableCopy];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, [array4 <span class=\"keyword\">class</span>]);</span><br><span class=\"line\">[array4 addObject:<span class=\"string\">@&quot;Lion&quot;</span>]; <span class=\"comment\">//成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *array5 = [array3 <span class=\"keyword\">copy</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, [array5 <span class=\"keyword\">class</span>]);</span><br><span class=\"line\"><span class=\"comment\">//[array5 addObject:@&quot;Lion&quot;]; //报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  第三层理解:</span></span><br><span class=\"line\"><span class=\"comment\">//  上述的深拷贝其实还不是完全深拷贝,因为第二层的图可以发现mutableCopy的数组仍然共享同样的数组元素。</span></span><br><span class=\"line\"><span class=\"comment\">//  而完全深拷贝即是对数组元素同样的拷贝的真正深拷贝。</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *marray3 = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">[marray3 addObject:<span class=\"string\">@&quot;Panda&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *marray4 = [marray3 mutableCopy]; <span class=\"comment\">//一般深拷贝</span></span><br><span class=\"line\">[marray4 addObject:<span class=\"string\">@&quot;Li&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *marray5 = [<span class=\"built_in\">NSKeyedUnarchiver</span></span><br><span class=\"line\">    unarchiveObjectWithData:</span><br><span class=\"line\">        [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:marray3]]; <span class=\"comment\">//完全深拷贝</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;数组第一个元素的指针 -&gt; 1:%p \\n 2:%p \\n 3:%p&quot;</span>, marray3[<span class=\"number\">0</span>], marray4[<span class=\"number\">0</span>], marray5[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;数组的指针 -&gt; 1:%p \\n 2:%p \\n 3:%p&quot;</span>, marray3, marray4, marray5);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0x7fd2e2501ff0 and 0x7fd2e2501ff0</span><br><span class=\"line\"> 0x7fd2e2500710 and 0x7fd2e2501ff0</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">__NSArrayM</span><br><span class=\"line\">__NSArrayM</span><br><span class=\"line\">__NSArrayI</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> 数组第一个元素的指针 -&gt; 1:0x10c0730a0 </span><br><span class=\"line\"> 2:0x10c0730a0 </span><br><span class=\"line\"> 3:0xa000061646e61505</span><br><span class=\"line\"> 数组的指针 -&gt; 1:0x7fd2e260f7a0 </span><br><span class=\"line\"> 2:0x7fd2e262c230 </span><br><span class=\"line\"> 3:0x7fd2e260b6b0</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Swift-部分：\"><a href=\"#Swift-部分：\" class=\"headerlink\" title=\"Swift 部分：\"></a>Swift 部分：</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//copy array swift</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">  <span class=\"keyword\">var</span> array4 <span class=\"operator\">=</span> array1</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrayPtr1 <span class=\"operator\">=</span> <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: <span class=\"operator\">&amp;</span>array1, count: array1.count)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrayPtr4 <span class=\"operator\">=</span> <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: <span class=\"operator\">&amp;</span>array4, count: array4.count)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(array1)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(array4)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(arrayPtr1)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(arrayPtr4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">array1[<span class=\"number\">0</span>] <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">array1.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(array1)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(array4)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrayPtr7 <span class=\"operator\">=</span> <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: <span class=\"operator\">&amp;</span>array1, count: array1.count)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arrayPtr8 <span class=\"operator\">=</span> <span class=\"type\">UnsafeMutableBufferPointer</span>&lt;<span class=\"type\">Int</span>&gt;(start: <span class=\"operator\">&amp;</span>array4, count: array4.count)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(arrayPtr7)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(arrayPtr8)</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\">UnsafeMutableBufferPointer(start: 0x00007fb568da65f0, length: 5)</span><br><span class=\"line\">UnsafeMutableBufferPointer(start: 0x00007fb568da65a0, length: 5)</span><br><span class=\"line\">[10, 2, 3, 4, 5, 20]</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\">UnsafeMutableBufferPointer(start: 0x00007fb568da65f0, length: 6)</span><br><span class=\"line\">UnsafeMutableBufferPointer(start: 0x00007fb568da65a0, length: 5)</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Auto Layout Cell Height","url":"/2015/12/25/Auto-Layout-Cell-Height/","content":"<p>参考文章 <a href=\"http://mp.weixin.qq.com/s?__biz=MzA3NzM0NzkxMQ==&mid=402970654&idx=2&sn=cd5a79255f4aafe79c6daf0ea7f6c593&scene=0#wechat_redirect\">iOS开发 - 处理不等高TableViewCell的小花招</a>，实践出真知，也是费了一番力气才把文章 Cell 使用 Auto Layout自动算高。眼高手低总是有的，所以以后不仅要学习开发的思路方法论，重要是在实践一遍。</p>\n<p>Auto Layout设置好高度约束。不要实现<code>- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">  [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.tableView.estimatedRowHeight = <span class=\"number\">100</span>;  <span class=\"comment\">//  随便设个不那么离谱的值</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.tableView.rowHeight = <span class=\"built_in\">UITableViewAutomaticDimension</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (TableViewCell *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView</span><br><span class=\"line\">       cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath &#123;</span><br><span class=\"line\">  TableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class=\"string\">@&quot;cell&quot;</span></span><br><span class=\"line\">                                                        forIndexPath:indexPath];</span><br><span class=\"line\">  cell.avatar.image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@&quot;avatar&quot;</span>];</span><br><span class=\"line\">  cell.name.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%ld&quot;</span>, indexPath.row % <span class=\"number\">2</span>];</span><br><span class=\"line\">  cell.time.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@&quot;</span>, [<span class=\"built_in\">NSDate</span> date]];</span><br><span class=\"line\">  cell.source.text = <span class=\"string\">@&quot;Weibo.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSMutableString</span> *str = [<span class=\"built_in\">NSMutableString</span> new];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">1</span>; i &lt; indexPath.row; i++) &#123;</span><br><span class=\"line\">    [str appendString:<span class=\"string\">@&quot;The 1989 World Tour (Live)&quot;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  [str appendString:<span class=\"string\">@&quot;END!!!&quot;</span>];</span><br><span class=\"line\">  cell.text.text = str;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//移除多余边框，如果是图片是 Aspect Fill 或者 Aspect Fit</span></span><br><span class=\"line\">  cell.pic.layer.borderColor = [<span class=\"built_in\">UIColor</span> clearColor].CGColor;</span><br><span class=\"line\">  cell.pic.layer.borderWidth = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  cell.pic.layer.masksToBounds = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (indexPath.row % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    cell.pic.image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@&quot;pic&quot;</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    cell.pic.image = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>源码：<a href=\"https://github.com/gewill/test-projects/tree/master/test%20auto%20height%20cell\">https://github.com/gewill/test-projects/tree/master/test%20auto%20height%20cell</a></p>\n"},{"title":"Auto Layout Guide - Notes","url":"/2016/01/21/Auto-Layout-Guide-Notes/","content":"<p>Auto Layout Guide: <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1\">https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40010853-CH7-SW1</a></p>\n<ul>\n<li>优先使用 stack view，可简化设置（个人认为还是有时候还是非常复杂的布局还是不用，增加复杂度）</li>\n<li>Constraint等式表示相等，而非赋值，表示两个 view 的关系</li>\n<li>From the view’s intrinsic content size, it’s  easy to understand: Compression Resistance &amp; Content Hugging. </li>\n<li>尽量和最邻居的 view 建立 Constraint</li>\n</ul>\n"},{"title":"Autolayout in Code","url":"/2016/02/27/Autolayout-in-Code/","content":"<p>使用代码自动布局，需求还是有的，虽然很习惯了 IB 来做。参看 Programming iOS 9。</p>\n<p>一共三个方法：</p>\n<ul>\n<li>Anchor notation</li>\n<li>Creating constraints in code</li>\n<li>Visual format notation</li>\n</ul>\n<h2 id=\"1-Anchor-notation\"><a href=\"#1-Anchor-notation\" class=\"headerlink\" title=\"1. Anchor notation\"></a>1. Anchor notation</h2><p>感觉 anchor 一个折中的方案，语法比 constraints 简洁，符合 IB 设计和添加约束的思路。美中不足是仅支持 iOS 9。</p>\n<blockquote>\n<p>The NSLayoutAnchor class is a <strong>factory class</strong> for creating NSLayoutConstraint objects using a fluent API. Use these constraints to programatically define your layout using Auto Layout.</p>\n</blockquote>\n<p>具体的使用语法都很简单，贴一个书中的 Demo：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> v1 <span class=\"operator\">=</span> <span class=\"type\">UIView</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">100</span>, <span class=\"number\">111</span>, <span class=\"number\">132</span>, <span class=\"number\">194</span>))</span><br><span class=\"line\">v1.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">1</span>, green: <span class=\"number\">0.4</span>, blue: <span class=\"number\">1</span>, alpha: <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> v2 <span class=\"operator\">=</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">v2.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">0.5</span>, green: <span class=\"number\">1</span>, blue: <span class=\"number\">0</span>, alpha: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mainview.addSubview(v1)</span><br><span class=\"line\">v1.addSubview(v2)</span><br><span class=\"line\"></span><br><span class=\"line\">v2.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> which: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">3</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> which &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\">// the old way, and this is the last time I&#x27;m going to show this</span></span><br><span class=\"line\">    v1.addConstraint(</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>(item: v2,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Leading</span>,</span><br><span class=\"line\">                           relatedBy: .<span class=\"type\">Equal</span>,</span><br><span class=\"line\">                           toItem: v1,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Leading</span>,</span><br><span class=\"line\">                           multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    v1.addConstraint(</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>(item: v2,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Trailing</span>,</span><br><span class=\"line\">                           relatedBy: .<span class=\"type\">Equal</span>,</span><br><span class=\"line\">                           toItem: v1,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Trailing</span>,</span><br><span class=\"line\">                           multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    v1.addConstraint(</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>(item: v2,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Top</span>,</span><br><span class=\"line\">                           relatedBy: .<span class=\"type\">Equal</span>,</span><br><span class=\"line\">                           toItem: v1,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Top</span>,</span><br><span class=\"line\">                           multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    v2.addConstraint(</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>(item: v2,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">Height</span>,</span><br><span class=\"line\">                           relatedBy: .<span class=\"type\">Equal</span>,</span><br><span class=\"line\">                           toItem: <span class=\"literal\">nil</span>,</span><br><span class=\"line\">                           attribute: .<span class=\"type\">NotAnAttribute</span>,</span><br><span class=\"line\">                           multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">10</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\">// new API in iOS 9 for making constraints individually</span></span><br><span class=\"line\">    <span class=\"comment\">// and we should now be activating constraints, not adding them...</span></span><br><span class=\"line\">    <span class=\"comment\">// to a specific view</span></span><br><span class=\"line\">    <span class=\"comment\">// whereever possible, activate all the constraints at once</span></span><br><span class=\"line\">    <span class=\"type\">NSLayoutConstraint</span>.activateConstraints([</span><br><span class=\"line\">        v2.leadingAnchor.constraintEqualToAnchor(v1.leadingAnchor),</span><br><span class=\"line\">        v2.trailingAnchor.constraintEqualToAnchor(v1.trailingAnchor),</span><br><span class=\"line\">        v2.topAnchor.constraintEqualToAnchor(v1.topAnchor),</span><br><span class=\"line\">        v2.heightAnchor.constraintEqualToConstant(<span class=\"number\">10</span>),</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// NSDictionaryOfVariableBindings(v2,v3) // it&#x27;s a macro, no macros in Swift</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// let d = [&quot;v2&quot;:v2,&quot;v3&quot;:v3]</span></span><br><span class=\"line\">    <span class=\"comment\">// okay, that&#x27;s boring...</span></span><br><span class=\"line\">    <span class=\"comment\">// let&#x27;s write our own Swift NSDictionaryOfVariableBindings substitute (sort of)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> d <span class=\"operator\">=</span> dictionaryOfNames(v1, v2, v3)</span><br><span class=\"line\">    <span class=\"type\">NSLayoutConstraint</span>.activateConstraints([</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(</span><br><span class=\"line\">            <span class=\"string\">&quot;H:|[v2]|&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">        <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(</span><br><span class=\"line\">            <span class=\"string\">&quot;V:|[v2(10)]&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">    ].flatten().map &#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">default</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">dictionaryOfNames</span>(<span class=\"params\">arr</span>: <span class=\"type\">UIView</span>...) -&gt; [<span class=\"type\">String</span>: <span class=\"type\">UIView</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> [<span class=\"type\">String</span>: <span class=\"type\">UIView</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ix, v) <span class=\"keyword\">in</span> arr.enumerate() &#123;</span><br><span class=\"line\">        d[<span class=\"string\">&quot;v<span class=\"subst\">\\(ix <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span>&quot;</span>] <span class=\"operator\">=</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Creating-constraints-in-code\"><a href=\"#2-Creating-constraints-in-code\" class=\"headerlink\" title=\"2. Creating constraints in code\"></a>2. Creating constraints in code</h2><p>兼容 iOS 8 以下的，但是超级啰嗦。</p>\n<ul>\n<li>iOS 6 可以<strong>全部使用最外面的视图</strong>添加约束，下面 Demo 中的：container.addConstraint(s) &#x2F; removeConstraints</li>\n<li>iOS 8 直接使用：NSLayoutConstraint.activateConstraints &#x2F; deactivateConstraints</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> container <span class=\"operator\">=</span> <span class=\"type\">UIView</span>(frame: <span class=\"keyword\">self</span>.view.bounds)</span><br><span class=\"line\">        container.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">0.0</span>, green: <span class=\"number\">0.0</span>, blue: <span class=\"number\">0.0</span>, alpha: <span class=\"number\">0.252461163294798</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.view.addSubview(container)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> aLine <span class=\"operator\">=</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        aLine.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">5</span>, height: <span class=\"number\">5</span>)</span><br><span class=\"line\">        aLine.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">0.6667</span>, green: <span class=\"number\">0.0742</span>, blue: <span class=\"number\">0.6667</span>, alpha: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">        container.addSubview(aLine)</span><br><span class=\"line\"></span><br><span class=\"line\">        aLine.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> i <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">// MARK:-  superview addConstraint</span></span><br><span class=\"line\">            container.addConstraint(<span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Leading</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Leading</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>))</span><br><span class=\"line\">            container.addConstraint(<span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Trailing</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Trailing</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>))</span><br><span class=\"line\">            container.addConstraint(<span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Top</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Top</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>))</span><br><span class=\"line\">            aLine.addConstraint(<span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Height</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: <span class=\"literal\">nil</span>, attribute: .<span class=\"type\">NotAnAttribute</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">20</span>))</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// MARK:- iOS 6</span></span><br><span class=\"line\">            container.addConstraints([</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Leading</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Leading</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Trailing</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Trailing</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Top</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Top</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Height</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: <span class=\"literal\">nil</span>, attribute: .<span class=\"type\">NotAnAttribute</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">20</span>),</span><br><span class=\"line\">            ])</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// MARK:- active = true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Leading</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Leading</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>).active <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Trailing</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Trailing</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>).active <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Top</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Top</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>).active <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Height</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: <span class=\"literal\">nil</span>, attribute: .<span class=\"type\">NotAnAttribute</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">20</span>).active <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Fallback on earlier versions</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"comment\">// MARK:- NSLayoutConstraint.activateConstraints</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">8.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">NSLayoutConstraint</span>.activateConstraints([</span><br><span class=\"line\">                    <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Leading</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Leading</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                    <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Trailing</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Trailing</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                    <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Top</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: container, attribute: .<span class=\"type\">Top</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">0</span>),</span><br><span class=\"line\">                    <span class=\"type\">NSLayoutConstraint</span>(item: aLine, attribute: .<span class=\"type\">Height</span>, relatedBy: .<span class=\"type\">Equal</span>, toItem: <span class=\"literal\">nil</span>, attribute: .<span class=\"type\">NotAnAttribute</span>, multiplier: <span class=\"number\">1</span>, constant: <span class=\"number\">20</span>),</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Fallback on earlier versions</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-Visual-format-notation\"><a href=\"#3-Visual-format-notation\" class=\"headerlink\" title=\"3. Visual format notation\"></a>3. Visual format notation</h2><p>这个语法支持 iOS 6，而且语法最为简洁直观。也是<br>Programming iOS 9 书中推荐的方案。实际项目尝试了上面两种两种方法后，想要更短的代码量的话，还是 Visual format notation 最为合适。这里也推荐大家，还很容易理解其语法，而且 console debugging 也会优先显示该语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;NSLayoutConstraint:0x7f855ad1bb00 H:[UIButton:0x7f855ad1bba0&#x27;Button&#x27;(46@188)] priority:188&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;NSLayoutConstraint:0x7f855ad1e130 UIButton:0x7f855ad1bba0&#x27;Button&#x27;.leading == UIView:0x7f855ad1ca20.leadingMargin + 127 priority:999&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Unable to simultaneously satisfy constraints.</span><br><span class=\"line\">\tProbably at least one of the constraints in the following list is one you don&#x27;t want. </span><br><span class=\"line\">\tTry this: </span><br><span class=\"line\">\t\t(1) look at each constraint and try to figure out which you don&#x27;t expect; </span><br><span class=\"line\">\t\t(2) find the code that added the unwanted constraint or constraints and fix it. </span><br><span class=\"line\">(</span><br><span class=\"line\">    &quot;&lt;NSLayoutConstraint:0x15c5ab880 V:[UIView:0x15c63d860(20)]&gt;&quot;,</span><br><span class=\"line\">    &quot;&lt;NSLayoutConstraint:0x15c5abb60 V:[UIView:0x15c63d860(10)]&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>当然这些都是不用 IB 和 View Debugging &#x2F; Reveal 情况下的选择。</p>\n<p>还有个优点就是类 ASCII-art，可视化的样式描述。</p>\n<blockquote>\n<p>The Visual Format Language lets you use ASCII-art like strings to define your constraints. This provides a visually descriptive representation of the constraints. </p>\n</blockquote>\n<p>下面是一个 CustomToolBar 的 Demo：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> Swift NSDictionaryOfVariableBindings substitute</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> - parameter arr: UIView array: (view1, view2)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> - returns: return [&quot;v1&quot;: UIView, &quot;v2&quot;: view2]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">dictionaryOfNames</span>(<span class=\"params\">arr</span>: <span class=\"type\">UIView</span> <span class=\"operator\">...</span>) -&gt; [<span class=\"type\">String</span>: <span class=\"type\">UIView</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d <span class=\"operator\">=</span> [<span class=\"type\">String</span>: <span class=\"type\">UIView</span>]()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ix, v) <span class=\"keyword\">in</span> arr.enumerate() &#123;</span><br><span class=\"line\">        d[<span class=\"string\">&quot;v<span class=\"subst\">\\(ix<span class=\"operator\">+</span><span class=\"number\">1</span>)</span>&quot;</span>] <span class=\"operator\">=</span> v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomToolBar</span>: <span class=\"title class_\">UIView</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> textField: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> commentCountButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> commentImageButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>.whiteColor()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span> <span class=\"params\">aDecoder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">drawRect</span>(<span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> topLine <span class=\"operator\">=</span> <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        topLine.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">0.6</span>, green: <span class=\"number\">0.6</span>, blue: <span class=\"number\">0.6</span>, alpha: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(topLine)</span><br><span class=\"line\"></span><br><span class=\"line\">        textField <span class=\"operator\">=</span> <span class=\"type\">UITextField</span>()</span><br><span class=\"line\">        textField.placeholder <span class=\"operator\">=</span> <span class=\"string\">&quot;Write some in your deep mind.&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(textField)</span><br><span class=\"line\"></span><br><span class=\"line\">        commentImageButton <span class=\"operator\">=</span> <span class=\"type\">UIButton</span>(type: .<span class=\"type\">Custom</span>)</span><br><span class=\"line\">        commentImageButton.setBackgroundImage(<span class=\"type\">UIImage</span>(named: <span class=\"string\">&quot;comment&quot;</span>), forState: .<span class=\"type\">Normal</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(commentImageButton)</span><br><span class=\"line\"></span><br><span class=\"line\">        commentCountButton <span class=\"operator\">=</span> <span class=\"type\">UIButton</span>(type: .<span class=\"type\">Custom</span>)</span><br><span class=\"line\">        commentCountButton.titleLabel<span class=\"operator\">?</span>.font <span class=\"operator\">=</span> <span class=\"type\">UIFont</span>.systemFontOfSize(<span class=\"number\">14</span>)</span><br><span class=\"line\">        commentCountButton.setTitle(<span class=\"string\">&quot;8888888888&quot;</span>, forState: .<span class=\"type\">Normal</span>)</span><br><span class=\"line\">        commentCountButton.setTitleColor(<span class=\"type\">UIColor</span>.blackColor(), forState: .<span class=\"type\">Normal</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addSubview(commentCountButton)</span><br><span class=\"line\"></span><br><span class=\"line\">        topLine.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        textField.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        commentImageButton.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        commentCountButton.translatesAutoresizingMaskIntoConstraints <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// NSLayoutConstraintsHelper.swift</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> d <span class=\"operator\">=</span> dictionaryOfNames(topLine, textField, commentImageButton, commentCountButton)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addConstraints([</span><br><span class=\"line\">            <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;H:|[v1]|&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">            <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;V:|[v1(0.5)]&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\"></span><br><span class=\"line\">        \t<span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;H:|-15-[v2]-[v3(14)][v4]-|&quot;</span>, options: .<span class=\"type\">AlignAllCenterY</span>, metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">            <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;V:|-[v2]-|&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">            <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;V:[v3(14)]&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">            <span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;V:[v4(14)]&quot;</span>, options: [], metrics: <span class=\"literal\">nil</span>, views: d),</span><br><span class=\"line\">        ].flatten().map &#123; <span class=\"variable\">$0</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>经过几次项目的实践，发现还是 Visual Format 最好用，简洁直观。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>UILayoutGuide – Auto Layout’s Invisible Helpers:<br>  <a href=\"https://www.captechconsulting.com/blogs/uilayoutguide--auto-layouts-invisible-helpers\">https://www.captechconsulting.com/blogs/uilayoutguide--auto-layouts-invisible-helpers</a></li>\n<li>Programmatically Creating Constraints:<br>  <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html#//apple_ref/doc/uid/TP40010853-CH16-SW1\">https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html#//apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40010853-CH16-SW1</a></li>\n</ul>\n"},{"title":"Avoid Weibo API 30% limits","url":"/2016/03/09/Avoid-Weibo-API-30-limits/","content":"<p>Use resursion to get more 90% data, still can’t upto 100%.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> Alamofire</span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftyJSON</span><br><span class=\"line\"><span class=\"keyword\">import</span> Alamofire-SwiftyJSON</span><br><span class=\"line\"><span class=\"keyword\">import</span> RealmSwift</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// MARK: -  friendships</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Weibo 30% more or less limits how to aovid this.</span></span><br><span class=\"line\">    <span class=\"comment\">// Thus count each response json user nubmer, to calculate true next cursor.</span></span><br><span class=\"line\">    <span class=\"comment\">// But Weibo return much fewer than 30%, fanially we got 93% data.</span></span><br><span class=\"line\">    <span class=\"comment\">// http://open.weibo.com/wiki/2/friendships/friends</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">allFriends</span>(<span class=\"params\">uid</span> <span class=\"params\">uid</span>: <span class=\"type\">Int</span>?, <span class=\"params\">cursor</span>: <span class=\"type\">Int</span>?, <span class=\"params\">completionHandler</span>: (stateCode: <span class=\"type\">WeiboServiceError</span>, error: <span class=\"type\">String</span>?, nextCursor: <span class=\"type\">Int</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> pageNumber: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> parameters: [<span class=\"type\">String</span>: <span class=\"type\">AnyObject</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;count&quot;</span>: pageNumber]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">AccountManager</span>.currentAcvtiveWeiboAccount &#123; (stateCode, error, weiboAccount) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> weiboAccount <span class=\"operator\">=</span> weiboAccount &#123;</span><br><span class=\"line\">                parameters.updateValue(weiboAccount.accessToken, forKey: <span class=\"string\">&quot;access_token&quot;</span>)</span><br><span class=\"line\">                parameters.updateValue(weiboAccount.accountId, forKey: <span class=\"string\">&quot;uid&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> uid <span class=\"operator\">=</span> uid &#123;</span><br><span class=\"line\">            parameters.updateValue(uid, forKey: <span class=\"string\">&quot;uid&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> cursor <span class=\"operator\">=</span> cursor &#123;</span><br><span class=\"line\">            parameters.updateValue(cursor, forKey: <span class=\"string\">&quot;cursor&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Alamofire</span>.request(.<span class=\"type\">GET</span>, <span class=\"type\">WeiboApi</span>.<span class=\"type\">FriendshipsFriends</span>, parameters: parameters)</span><br><span class=\"line\">            .responseSwiftyJSON(&#123; (request, response, json, error) <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> error <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                completionHandler(stateCode: .<span class=\"type\">Error</span>, error: <span class=\"string\">&quot;Please check internet connection.&quot;</span>, nextCursor: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> json[<span class=\"string\">&quot;error&quot;</span>] <span class=\"operator\">!=</span> <span class=\"type\">JSON</span>.null &#123;</span><br><span class=\"line\">                completionHandler(stateCode: .<span class=\"type\">Error</span>, error: json[<span class=\"string\">&quot;error&quot;</span>].stringValue, nextCursor: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">WeiboStore</span>.friendsJSONToUserAndSave(json: json, completionHandler: &#123; (stateCode, error, count) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> stateCode <span class=\"operator\">==</span> .<span class=\"type\">Error</span> &#123;</span><br><span class=\"line\">                        completionHandler(stateCode: .<span class=\"type\">Error</span>, error: error, nextCursor: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">let</span> previousCursor <span class=\"operator\">=</span> json[<span class=\"string\">&quot;previous_cursor&quot;</span>].intValue</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> nextCursor <span class=\"operator\">=</span> previousCursor <span class=\"operator\">+</span> count<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">self</span>.allFriends(uid: uid, cursor: nextCursor, completionHandler: &#123; (stateCode, error, nextCursor) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            completionHandler(stateCode: .<span class=\"type\">Success</span>, error: <span class=\"literal\">nil</span>, nextCursor: nextCursor)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// Model</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">friendsJSONToUserAndSave</span>(<span class=\"params\">json</span> <span class=\"params\">json</span>: <span class=\"type\">JSON</span>, <span class=\"params\">completionHandler</span>: (stateCode: <span class=\"type\">WeiboStoreError</span>, error: <span class=\"type\">String</span>?, count: <span class=\"type\">Int</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> queue <span class=\"operator\">=</span> dispatch_get_global_queue(<span class=\"type\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        dispatch_async(queue) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> realm <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> <span class=\"type\">Realm</span>()</span><br><span class=\"line\">            realm.beginWrite()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> json[<span class=\"string\">&quot;users&quot;</span>] <span class=\"operator\">!=</span> <span class=\"type\">JSON</span>.null &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">_</span>, subJson): (<span class=\"type\">String</span>, <span class=\"type\">JSON</span>) <span class=\"keyword\">in</span> json[<span class=\"string\">&quot;users&quot;</span>] &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> friend <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.<span class=\"type\">JSONToUserModel</span>(subJson)</span><br><span class=\"line\">                    friend.isFriend <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                    realm.add(friend, update: <span class=\"literal\">true</span>)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    count <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> realm.commitWrite()</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                    completionHandler(stateCode: .<span class=\"type\">Success</span>, error: <span class=\"literal\">nil</span>, count: count)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">                dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                    completionHandler(stateCode: .<span class=\"type\">Error</span>, error: <span class=\"string\">&quot;Realm Database save error.&quot;</span>, count: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Before Sunrise - Review","url":"/2016/02/15/Before-Sunrise-Review/","content":"<p>几乎都是两个人的对话，从双方羞涩的看向对方，到因为一对德国夫妻吵架而对视。男主鼓起勇气就此打开话题，聊天聊地，就此很愉快的旅程开始了。不管现实生活和情感是否顺利，但是两人总有新的话题和趣闻。当 Jesse 邀请下车游玩时候故事才真正开始。</p>\n<p>开始的找有趣的地方，到后来随意的逛街道，酒吧，看手相，看日落，餐厅里互打电话，晚上草地聊天，次日火车道别。两人不太想落入俗套的留电话地址的偶遇，固执的开始时声明不留电话。因此格外珍惜相遇的这一天，玩的尽兴，聊得深入心灵。酒吧里算是爱情观的吐槽：人总是寻求被爱的多一点。也都是害怕重新承受之前恋爱分手之痛。看手相部分引起了一些争执，Jesse 理性的戳穿手相师和填词诗人的把戏，Céline 的满足和感动都搅合了。餐厅里的打电话很有意思，感觉 Céline 的很多时候也是主动地吐露情愫。</p>\n<p>最后火车送别明明很不舍，但双方还是很坚持之前的想法不把这次邂逅变成俗套的艳遇。不过最后也做了妥协，约定六个月后此地在相见，还因为从今天还是昨天算起而争执了一番。说明内心是多么的喜欢对方，却又害怕伤害的顾忌而妥协。</p>\n<p>电影里面男女主角都是普通的人的性格特点和际遇，但因为相互吸引和聚到一起，一天虽短，但却异常有趣。或者这样的爱情很奢侈，但是或者这就是不讲婚姻时纯粹的爱情。</p>\n"},{"title":"最佳密码管理器","url":"/2023/07/05/Best-Password-Managers/","content":"<p><strong>先说结论：<a href=\"#Pass\">Pass</a></strong></p>\n<h2 id=\"1Password\"><a href=\"#1Password\" class=\"headerlink\" title=\"1Password\"></a>1Password</h2><p><img src=\"/../assets/Best-Password-Managers/1Password-screenshot.png\" alt=\"1Password-screenshot\">官网：<a href=\"https://1password.com/\">https://1password.com/</a></p>\n<p>客户端：支持 Mac、iOS、Windows、Android、Chrome OS 和 Linux</p>\n<p>技术栈：Electron</p>\n<p>代码开源：小部分组件开源 <a href=\"https://github.com/1Password\">https://github.com/1Password</a></p>\n<p>存储：官方存储</p>\n<p>价格：订阅制，每年$36</p>\n<p>优缺点：最出名的，价格偏贵，数据同步省心</p>\n<h2 id=\"Elpass\"><a href=\"#Elpass\" class=\"headerlink\" title=\"Elpass\"></a>Elpass</h2><p><img src=\"/../assets/Best-Password-Managers/screenshot-2.png\" alt=\"Elpass-screenshot\">官网：<a href=\"https://elpass.app/\">https://elpass.app/</a></p>\n<p>客户端：iOS和macOS，Chrome拓展</p>\n<p>技术栈：Objective-C 原生开发</p>\n<p>代码开源：核心开源 <a href=\"https://github.com/surge-networks/Elpass-Core\">Elpass-Core on GitHub</a></p>\n<p>存储：官方无存储，支持网盘同步：iCloud和Dropbox</p>\n<p>价格：订阅制，每年$20</p>\n<p>优缺点：苹果系统下体验不错，一旦到Windows、Linux只有Chrome拓展勉强可用，数据同步依赖三方网盘</p>\n<h2 id=\"KeePassXC\"><a href=\"#KeePassXC\" class=\"headerlink\" title=\"KeePassXC\"></a>KeePassXC</h2><p><img src=\"/../assets/Best-Password-Managers/autotype_entrylevel.png\" alt=\"KeePassXC_autotype_entrylevel\"></p>\n<p>官网：<a href=\"https://keepassxc.org/\">https://keepassxc.org/</a></p>\n<p>客户端：支持 Mac、Windows、和 Linux</p>\n<p>技术栈：C++、Qt</p>\n<p>代码开源：GPL-2 <a href=\"https://github.com/keepassxreboot/keepassxc\">https://github.com/keepassxreboot/keepassxc</a></p>\n<p>存储：本地存储</p>\n<p>价格：免费</p>\n<p>优缺点：开源免费、缺失良好同步机制。</p>\n<h2 id=\"LessPass\"><a href=\"#LessPass\" class=\"headerlink\" title=\"LessPass\"></a>LessPass</h2><p><img src=\"/../assets/Best-Password-Managers/SCR-20230705-qbxb.png\" alt=\"LessPass\"></p>\n<p>官网：<a href=\"https://www.lesspass.com/\">https://www.lesspass.com/</a></p>\n<p>客户端：支持 Mac、iOS、Windows、Android、Chrome OS 和 Linux</p>\n<p>技术栈：JS、TS、Vue、Python、React Native</p>\n<p>代码开源：GPL-3 <a href=\"https://github.com/lesspass/lesspass\">https://github.com/lesspass/lesspass</a></p>\n<p>存储：无存储，计算型密码生成器</p>\n<p>价格：免费</p>\n<p>优缺点：计算型无泄露风险、但是无法批量导入历史密码</p>\n<h2 id=\"Pass\"><a href=\"#Pass\" class=\"headerlink\" title=\"Pass\"></a>Pass</h2><p><img src=\"/../assets/Best-Password-Managers/SCR-20230710-osiz.png\" alt=\"pass-cli\"></p>\n<p><img src=\"/../assets/Best-Password-Managers/Pass-iOS.PNG\" alt=\"Pass-iOS\"></p>\n<p>官网：<a href=\"https://www.passwordstore.org/\">https://www.passwordstore.org/</a></p>\n<p>客户端：支持 Mac、Windows、和 Linux</p>\n<p>技术栈：C++、Qt</p>\n<p>代码开源：GPL-2 <a href=\"https://git.zx2c4.com/password-store\">https://git.zx2c4.com/password-store</a></p>\n<p>存储：本地存储</p>\n<p>价格：免费</p>\n<p>优缺点：开源免费、gpg加密文件，git同步数据、命令行和GUI客户端都有。个人认为最佳。</p>\n<h2 id=\"原理解释\"><a href=\"#原理解释\" class=\"headerlink\" title=\"原理解释\"></a>原理解释</h2><p>基于对称加密算法和口令加密算法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">secret = encrypt(key, plain); // 加密</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">plain = decrypt(key, secret); // 解密</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">key = Hash(password, salt); // 密钥长度不够，加密来凑</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.infoq.cn/article/Jrr56Ufm8h2jCkepI5qG\">密码管理器的进化史（上）</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744/1304227762667553\">对称加密算法</a></li>\n<li><a href=\"https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/\">2021年，用更现代的方法使用PGP（上）</a></li>\n</ol>\n","tags":["密码管理器"]},{"title":"Tart和GitHub Actions的CI/CD方案","url":"/2023/12/18/CI-CD-with-Tart-and-GitHub-Actions/","content":"<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p><a href=\"https://twitter.com/onevcat/status/1731675012049031648\">onevcat on Twitter &#x2F; X</a></p>\n<p>大家的 iOS 项目都是怎么做 CI 的？Xcode Cloud 不够用啊（太贵了）</p>\n<p>看你的提交频率了…我自己的话低配就够了。另外就是找一款合适的虚拟机，尽量别自己折腾环境和升级啥的 挺烦的…我是tart+GitHub Action 还挺满意</p>\n<p>Xcode 的 Test 结果可以直接显示在 GitHub 里吗？如果再能把截图都同步过去就完美了。</p>\n<p><a href=\"https://github.com/kishikawakatsumi/xcresulttool\">https://github.com/kishikawakatsumi/xcresulttool</a></p>\n<p><strong>Fastlane</strong></p>\n<p>不知道有没有帮助，可以参考下，</p>\n<p><a href=\"https://mp.weixin.qq.com/s/acH2-yy0iZBMRxldKzOXWw\">如何用极狐GitLab 为 iOS App 创建自动化CI&#x2F;CD？详细教程来了</a></p>\n<blockquote>\n<p>💡 GitLab Actions + Fastlane，GitLab Actions仅为触发器。</p>\n</blockquote>\n<h1 id=\"Tart\"><a href=\"#Tart\" class=\"headerlink\" title=\"Tart\"></a>Tart</h1><p><a href=\"https://github.com/cirruslabs/tart\">https://github.com/cirruslabs/tart</a></p>\n<h2 id=\"直接下载\"><a href=\"#直接下载\" class=\"headerlink\" title=\"直接下载\"></a>直接下载</h2><p>下载带Xcode的完整镜像</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">brew</span> <span class=\"string\">install</span> <span class=\"string\">cirruslabs/cli/tart</span></span><br><span class=\"line\"><span class=\"string\">tart</span> <span class=\"string\">clone</span> <span class=\"string\">ghcr.io/cirruslabs/macos-sonoma-xcode:latest</span> <span class=\"string\">sonoma-xcode</span></span><br><span class=\"line\"><span class=\"string\">tart</span> <span class=\"string\">run</span> <span class=\"string\">sonoma-xcode</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从头开始创建-macOS-虚拟机映像\"><a href=\"#从头开始创建-macOS-虚拟机映像\" class=\"headerlink\" title=\"从头开始创建 macOS 虚拟机映像\"></a>从头开始创建 macOS 虚拟机映像</h2><p>Tart 可以从 *.ipsw 文件创建虚拟机。你可以在这里下载特定的 *.ipsw 文件，也可以使用 latest 代替 *.ipsw 的路径来下载最新的可用版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tart create --from-ipsw=latest sonoma-vanilla</span><br><span class=\"line\">tart run sonoma-vanilla</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自托管-CI\"><a href=\"#自托管-CI\" class=\"headerlink\" title=\"自托管 CI\"></a><a href=\"https://tart.run/integrations/cirrus-cli/\">自托管 CI</a></h2><p>创建 <code>.cirrus.yml</code> 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">task:</span><br><span class=\"line\">  name: hello</span><br><span class=\"line\">  macos_instance:</span><br><span class=\"line\">    <span class=\"comment\"># can be a remote or a local virtual machine</span></span><br><span class=\"line\">    <span class=\"comment\"># image: ghcr.io/cirruslabs/macos-sonoma-base:latest</span></span><br><span class=\"line\">    image: sonoma-xcode</span><br><span class=\"line\">  hello_script:</span><br><span class=\"line\">    - <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello from within a Tart VM!&quot;</span></span><br><span class=\"line\">    - <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Here is my CPU info:&quot;</span></span><br><span class=\"line\">    - sysctl -n machdep.cpu.brand_string</span><br><span class=\"line\">    - <span class=\"built_in\">sleep</span> 15</span><br></pre></td></tr></table></figure>\n\n<p>运行该task</p>\n<p>将上述 <code>.cirrus.yml</code> 文件放入存储库的根目录中，并使用以下命令运行它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install cirruslabs/cli/cirrus</span><br><span class=\"line\">cirrus run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从-Tart-VM-中检索工件\"><a href=\"#从-Tart-VM-中检索工件\" class=\"headerlink\" title=\"从 Tart VM 中检索工件\"></a>从 Tart VM 中检索工件</h2><p>在许多情况下，需要从 Tart 虚拟机中检索特定文件或文件夹。例如，以下 <code>.cirrus.yml</code> 配置定义了一个任务，该任务构建二进制 <code>tart</code> 文件并通过 <code>artifacts</code> 指令公开它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">task:</span><br><span class=\"line\">  name: Build</span><br><span class=\"line\">  macos_instance:</span><br><span class=\"line\">    image: ghcr.io/cirruslabs/macos-sonoma-xcode:latest</span><br><span class=\"line\">  build_script: swift build --product tart</span><br><span class=\"line\">  binary_artifacts:</span><br><span class=\"line\">    path: .build/debug/tart</span><br></pre></td></tr></table></figure>\n\n<p>运行 Cirrus CLI 时，将 <code>--artifacts-dir</code> 定义 <code>artifacts</code> 写入主机上提供的本地目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cirrus run --artifacts-dir artifacts</span><br></pre></td></tr></table></figure>\n\n<p>请注意，所有检索到的工件都将以关联的任务名称和 <code>artifacts</code> 指令名称为前缀。对于上面的示例， <code>tart</code> 二进制文件将保存到 <code>$PWD/artifacts/Build/binary/.build/debug/tart</code> .</p>\n<h1 id=\"整合方案\"><a href=\"#整合方案\" class=\"headerlink\" title=\"整合方案\"></a>整合方案</h1><h2 id=\"第一步：GitHub-Actions\"><a href=\"#第一步：GitHub-Actions\" class=\"headerlink\" title=\"第一步：GitHub Actions\"></a>第一步：GitHub Actions</h2><p><code>GitHub Actions</code> 触发 <code>cirrus run</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">name: learn-github-actions</span><br><span class=\"line\">run-name: <span class=\"variable\">$&#123;&#123; github.actor &#125;</span>&#125; is learning GitHub Actions</span><br><span class=\"line\">on: [push]</span><br><span class=\"line\"><span class=\"built_in\">jobs</span>:</span><br><span class=\"line\">  check-bats-version:</span><br><span class=\"line\">    runs-on: self-hosted</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - run: <span class=\"built_in\">cd</span> ~/git/ci</span><br><span class=\"line\">      - run: git stash</span><br><span class=\"line\">      - run: git checkout main</span><br><span class=\"line\">      - run: git pull</span><br><span class=\"line\">      - run: cirrus run --artifacts-dir artifacts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二步：cirrus\"><a href=\"#第二步：cirrus\" class=\"headerlink\" title=\"第二步：cirrus\"></a>第二步：cirrus</h2><p>这一步使用<code>tart</code>来管理并隔离运行环境。</p>\n<p><code>cirrus</code>  再<code>tart</code>虚拟机中执行脚本： <code>xcodebuild</code> 打包或者测试。fastlane最好。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">task:</span><br><span class=\"line\">  name: xcode <span class=\"built_in\">test</span></span><br><span class=\"line\">  macos_instance:</span><br><span class=\"line\">    <span class=\"comment\"># can be a remote or a local virtual machine</span></span><br><span class=\"line\">    <span class=\"comment\"># image: ghcr.io/cirruslabs/macos-sonoma-base:latest</span></span><br><span class=\"line\">    image: sonoma-xcode</span><br><span class=\"line\">  hello_script:</span><br><span class=\"line\">    - <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Hello from within a Tart VM!&quot;</span></span><br><span class=\"line\">    - <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Here is my CPU info:&quot;</span></span><br><span class=\"line\">    - sysctl -n machdep.cpu.brand_string</span><br><span class=\"line\">  build_script: xcodebuild -scheme DemoApp -destination <span class=\"string\">&#x27;platform=iOS Simulator,name=iPhone 15,OS=17.2&#x27;</span> clean <span class=\"built_in\">test</span></span><br><span class=\"line\">  binary_artifacts:</span><br><span class=\"line\">    path: .build/debug/tart</span><br></pre></td></tr></table></figure>\n\n<p>GitHub Actions 部分log</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Run cirrus run</span><br><span class=\"line\"><span class=\"string\">&#x27;xcode test&#x27;</span> task</span><br><span class=\"line\">pull virtual machine</span><br><span class=\"line\"><span class=\"built_in\">clone</span> virtual machine</span><br><span class=\"line\">boot virtual machine</span><br><span class=\"line\">syncing working directory</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span> script</span><br><span class=\"line\"><span class=\"string\">&#x27;build&#x27;</span> script</span><br><span class=\"line\"><span class=\"string\">&#x27;binary&#x27;</span> artifacts</span><br><span class=\"line\"><span class=\"string\">&#x27;xcode test&#x27;</span> task succeeded <span class=\"keyword\">in</span> 03:17!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步：Fastlane\"><a href=\"#第三步：Fastlane\" class=\"headerlink\" title=\"第三步：Fastlane\"></a>第三步：Fastlane</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">default_platform(:ios)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">ipa_dir</span> <span class=\"string\">=</span> <span class=\"string\">&quot;fastlane_build/&quot;</span></span><br><span class=\"line\"><span class=\"string\">ipa_name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;AppName&quot;</span> <span class=\"string\">+</span> <span class=\"string\">Time.new.strftime(&quot;%Y-%m-%d_%H:%M:%S&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">commit</span> <span class=\"string\">=</span> <span class=\"string\">last_git_commit</span></span><br><span class=\"line\"><span class=\"string\">message</span> <span class=\"string\">=</span> <span class=\"string\">commit[:message]</span></span><br><span class=\"line\"><span class=\"string\">short_hash</span> <span class=\"string\">=</span> <span class=\"string\">commit[:abbreviated_commit_hash]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新内容</span></span><br><span class=\"line\"><span class=\"string\">changelog</span> <span class=\"string\">=</span> <span class=\"string\">%(by</span> <span class=\"string\">Will</span> </span><br><span class=\"line\">  <span class=\"attr\">git branch:</span> <span class=\"comment\">#&#123;git_branch&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">git short_hash:</span> <span class=\"comment\">#&#123;short_hash&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">git message:</span> <span class=\"comment\">#&#123;message&#125;</span></span><br><span class=\"line\"><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">before_all</span> <span class=\"string\">do</span></span><br><span class=\"line\">  <span class=\"string\">app_store_connect_api_key(</span></span><br><span class=\"line\">    <span class=\"attr\">key_id:</span> <span class=\"string\">&quot;&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"attr\">issuer_id:</span> <span class=\"string\">&quot;&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"attr\">key_filepath:</span> <span class=\"string\">&quot;&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"attr\">duration:</span> <span class=\"number\">1200</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"attr\">in_house:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></span><br><span class=\"line\">  <span class=\"string\">)</span></span><br><span class=\"line\"><span class=\"string\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">platform</span> <span class=\"string\">:ios</span> <span class=\"string\">do</span></span><br><span class=\"line\">  <span class=\"string\">desc</span> <span class=\"string\">&quot;Push a new beta build to TestFlight&quot;</span></span><br><span class=\"line\">  <span class=\"string\">lane</span> <span class=\"string\">:beta</span> <span class=\"string\">do</span></span><br><span class=\"line\">    <span class=\"string\">increment_build_number(</span></span><br><span class=\"line\">      <span class=\"attr\">build_number:</span> <span class=\"string\">latest_testflight_build_number</span> <span class=\"string\">+</span> <span class=\"number\">1</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"string\">build_app(</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">&quot;AppName&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">      <span class=\"comment\"># Debug、Release</span></span><br><span class=\"line\">      <span class=\"attr\">configuration:</span> <span class=\"string\">&quot;Release&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">      <span class=\"attr\">clean:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\">      <span class=\"comment\"># 导出方式 app-store、ad-hoc、enterprise、development</span></span><br><span class=\"line\">      <span class=\"attr\">export_method:</span> <span class=\"string\">&quot;app-store&quot;</span><span class=\"string\">,</span></span><br><span class=\"line\">      <span class=\"attr\">export_xcargs:</span> <span class=\"string\">&quot;-allowProvisioningUpdates&quot;</span><span class=\"string\">,</span> <span class=\"comment\"># enable automatic signing</span></span><br><span class=\"line\">      <span class=\"comment\"># ipa的存放目录</span></span><br><span class=\"line\">      <span class=\"attr\">output_directory:</span> <span class=\"string\">ipa_dir,</span></span><br><span class=\"line\">      <span class=\"comment\"># 输出ipa的文件名为当前的build号</span></span><br><span class=\"line\">      <span class=\"attr\">output_name:</span> <span class=\"string\">ipa_name,</span></span><br><span class=\"line\">    <span class=\"string\">)</span></span><br><span class=\"line\">    <span class=\"string\">upload_to_testflight(</span></span><br><span class=\"line\">      <span class=\"attr\">skip_waiting_for_build_processing:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></span><br><span class=\"line\">      <span class=\"attr\">changelog:</span> <span class=\"string\">changelog,</span></span><br><span class=\"line\">    <span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"string\">end</span></span><br><span class=\"line\"><span class=\"string\">end</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>总的流程就是</p>\n<ol>\n<li>GitHub Actions触发</li>\n<li>cirrus管理Tart</li>\n<li>Fastlane执行打包或者测试</li>\n</ol>\n<p>相比<a href=\"https://github.com/jenkinsci/jenkins\">Jenkins</a>，全局都是配置文件，更干净简洁，没有繁琐的UI。当然也稍微增加了门槛，上手就要求熟悉配置文件。</p>\n"},{"title":"CS193P 1.Logistics, iOS 8 Overview","url":"/2015/06/28/CS193P-1-Logistics-iOS-8-Overview/","content":"<p>iTunes U 课程地址：<a href=\"https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099\">iTunes U&#x2F;Developing iOS 8 Apps Swift</a></p>\n<p>CS193P 课程地址：<a href=\"http://web.stanford.edu/class/cs193p/cgi-bin/drupal/\">CS193P iPhone Application Development</a></p>\n<p>字幕下载：<a href=\"https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift\">https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift</a></p>\n<p>课程不用多介绍，下面直接进入笔记：</p>\n<p>iOS 仍是一个 Unix 系统，添加了很多移动方面的模块和优化。</p>\n<p>Cocoa Touch 是本课的重点，如涉及 Media 等主题需要自行找资料深入学习。</p>\n<p><strong>自己动手写代码，绝不复制粘贴别人的代码。</strong></p>\n<p>接下来是 DEMO：Calculator </p>\n<p>蓝线是自动布局时的好帮手。</p>\n<p>Storyboard 是正方形，自动布局就是实现对真实屏幕比例添加挤压效果或规则，已完成适配。</p>\n<p>Trailing Margin （尾部到边框）<br>Leading Margin （头部到边框）<br>Top （顶部）</p>\n<p>Outline mode （大纲模式）</p>\n<p>? 表示 Optional，有两种情况：</p>\n<ul>\n<li>nil ： 值缺失</li>\n<li>有值</li>\n</ul>\n<p>源码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//  ViewController.swift</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBOutlet weak var display: UILabel!</span><br><span class=\"line\">    </span><br><span class=\"line\">    var userIsInTheMiddleOfTypingANumber: Bool = false</span><br><span class=\"line\"></span><br><span class=\"line\">    @IBAction func appendDigit(sender: UIButton) &#123;</span><br><span class=\"line\">        let digit = sender.currentTitle!</span><br><span class=\"line\">        if userIsInTheMiddleOfTypingANumber&#123;</span><br><span class=\"line\">              display.text = display.text! + digit</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            display.text = digit</span><br><span class=\"line\">            userIsInTheMiddleOfTypingANumber = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        print(&quot;digit = \\(digit)&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"CS193P 2. More Xcode and Swift, MVC","url":"/2015/07/07/CS193P-2-More-Xcode-and-Swift-MVC/","content":"<p>继续 DEMO: Calculator </p>\n<p>Swift 能类型推断</p>\n<p>自动布局：</p>\n<ul>\n<li>Pin: Spacing to nearest neighbor, Equal Widths, Equal Heights</li>\n<li>Resolve Auto Layout Issues: Clear Constraints</li>\n</ul>\n<p>87果然是个神奇的数字，我之前没有对齐就开始 Pin，始终无法得到“Add 87 Constraints”，自然没有得到自动对齐的理想布局。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  ViewController.swift</span><br><span class=\"line\">//  Calculator</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will Ge on 6/28/15.</span><br><span class=\"line\">//  Copyright © 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    @IBOutlet weak var display: UILabel!</span><br><span class=\"line\">    </span><br><span class=\"line\">    var userIsInTheMiddleOfTypingANumber: Bool = false</span><br><span class=\"line\"></span><br><span class=\"line\">    @IBAction func appendDigit(sender: UIButton) &#123;</span><br><span class=\"line\">        let digit = sender.currentTitle!</span><br><span class=\"line\">        if userIsInTheMiddleOfTypingANumber&#123;</span><br><span class=\"line\">              display.text = display.text! + digit</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            display.text = digit</span><br><span class=\"line\">            userIsInTheMiddleOfTypingANumber = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        print(&quot;digit = \\(digit)&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var operandStack = Array&lt;Double&gt;()</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func enter() &#123;</span><br><span class=\"line\">        userIsInTheMiddleOfTypingANumber = false</span><br><span class=\"line\">        operandStack.append(displayValue)</span><br><span class=\"line\">        print(&quot;operandStack = \\(operandStack)&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func operate(sender: UIButton) &#123;</span><br><span class=\"line\">        let operation = sender.currentTitle!</span><br><span class=\"line\">        if userIsInTheMiddleOfTypingANumber &#123;</span><br><span class=\"line\">            enter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        switch operation &#123;</span><br><span class=\"line\">        case &quot;×&quot;: performOperation &#123; $0 * $1 &#125;</span><br><span class=\"line\">        case &quot;÷&quot;: performOperation &#123; $1 / $1 &#125;</span><br><span class=\"line\">        case &quot;+&quot;: performOperation &#123; $0 + $1 &#125;</span><br><span class=\"line\">        case &quot;−&quot;: performOperation &#123; $1 - $0 &#125;</span><br><span class=\"line\">        case &quot;√&quot;: performOperation1 &#123; sqrt($0) &#125;</span><br><span class=\"line\">        default: break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func performOperation(operation: (Double, Double) -&gt;Double) &#123;</span><br><span class=\"line\">        if operandStack.count &gt;= 2 &#123;</span><br><span class=\"line\">            displayValue = operation(operandStack.removeLast(), operandStack.removeLast())</span><br><span class=\"line\">            enter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func performOperation1(operation: Double -&gt;Double) &#123;</span><br><span class=\"line\">        if operandStack.count &gt;= 2 &#123;</span><br><span class=\"line\">            displayValue = operation(operandStack.removeLast())</span><br><span class=\"line\">            enter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    var displayValue: Double&#123;</span><br><span class=\"line\">        get &#123;</span><br><span class=\"line\">            return NSNumberFormatter().numberFromString(display.text!)!.doubleValue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set &#123;</span><br><span class=\"line\">            display.text = &quot;\\(newValue)&quot;</span><br><span class=\"line\">            userIsInTheMiddleOfTypingANumber = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>MVC:</p>\n<ul>\n<li>各个模块之间的含义</li>\n<li>模块之间的通信有无</li>\n<li>模块之间的控制关系</li>\n</ul>\n<p><img src=\"http://i.imgur.com/i8HTac7.png\" alt=\"MVC\"></p>\n"},{"title":"CS193P 3. Applying MVC","url":"/2015/07/11/CS193P-3-Applying-MVC/","content":"<p>看英文视频加中文字幕，效率也是蛮低的，下个星期六博览网的 iOS 极客班就开学了，希望能够认真高效投入更多时间去学习，一定要学好，找到开发的工作，圆毕业三年的一个梦。</p>\n<p>Swift 学习还算顺利，MVC 模式也有所熟悉，就是独自开发和想法实现有困难，暂时停留在看懂和自己写一遍的水平。</p>\n<p>还有就是玩手机，刷微博啥的超级浪费时间，因为这个不费脑，玩的也高兴，能够一天不吃饭，也不困，也停不下来。<br><strong>但是学习或看书，就很费神，容易犯困，这个一定要克服，实在困了就休息10分钟，再继续。</strong></p>\n<p>New Calculator Demo</p>\n<ul>\n<li>Applying MVC to the Calculator </li>\n<li>enum</li>\n<li>Simple initializer</li>\n<li>Returning an Optional</li>\n<li>Dicionary</li>\n<li>Tuples</li>\n</ul>\n<p>源码如下，待修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  CalculatorBrain.swift</span><br><span class=\"line\">//  Calculator</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will Ge on 7/11/15.</span><br><span class=\"line\">//  Copyright © 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import Foundation</span><br><span class=\"line\"></span><br><span class=\"line\">class CauculatorBrain</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 定义一个枚举类型，来分类表示输入的：运算数、一元运算和二元运算</span><br><span class=\"line\">    enum Op &#123;</span><br><span class=\"line\">        case Operand(Double)</span><br><span class=\"line\">        case UnaryOperation(String, Double -&gt; Double)</span><br><span class=\"line\">        case BinaryOperation(String, (Double, Double) -&gt; Double)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义一个数组来储存所有输入</span><br><span class=\"line\">    var opStack = [Op]()</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义已知运算符</span><br><span class=\"line\">    var knownOps = [String:Op]()</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 初始化已知运算符</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">        knownOps[&quot;+&quot;] = Op.BinaryOperation(&quot;+&quot;, +)</span><br><span class=\"line\">        knownOps[&quot;−&quot;] = Op.BinaryOperation(&quot;−&quot;) &#123;$1 - $0&#125;</span><br><span class=\"line\">        knownOps[&quot;×&quot;] = Op.BinaryOperation(&quot;×&quot;, *)</span><br><span class=\"line\">        knownOps[&quot;÷&quot;] = Op.BinaryOperation(&quot;÷&quot;) &#123;$1 / $0&#125;</span><br><span class=\"line\">        knownOps[&quot;√&quot;] = Op.UnaryOperation(&quot;√&quot;, sqrt)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义一个函数，把输入递归取出</span><br><span class=\"line\">    func evaluate(ops: [Op]) -&gt; (result: Double?, remainingOps:[Op]) &#123;</span><br><span class=\"line\">        if !ops.isEmpty &#123;</span><br><span class=\"line\">            var remainingOps = ops</span><br><span class=\"line\">            let op = remainingOps.removeLast()</span><br><span class=\"line\">            switch op &#123;</span><br><span class=\"line\">            case.Operand(let operand):</span><br><span class=\"line\">                return (operand, remainingOps)</span><br><span class=\"line\">            case .UnaryOperation(_, let operation):</span><br><span class=\"line\">                let operandEvaluation = evaluate(remainingOps)</span><br><span class=\"line\">                if let operand = operandEvaluation.result &#123;</span><br><span class=\"line\">                    return (operation(operand), operandEvaluation.remainingOps)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            case .BinaryOperation(_, let operation):</span><br><span class=\"line\">                let op1Evaluation = evaluate(remainingOps)</span><br><span class=\"line\">                if let operand1 = op1Evaluation.result &#123;</span><br><span class=\"line\">                    let op2Evaluation = evaluate(remainingOps)</span><br><span class=\"line\">                    if let operand2 = op2Evaluation.result &#123;</span><br><span class=\"line\">                        return (operation(operand1, operand2), op2Evaluation.remainingOps)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return (nil, ops)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func evaluate() -&gt; Double? &#123;</span><br><span class=\"line\">        let (result, remainder) = evaluate(opStack)</span><br><span class=\"line\">        print(&quot;\\(opStack) = \\(result) with \\(remainder) left over&quot;)</span><br><span class=\"line\">        return result</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 运算数</span><br><span class=\"line\">    func pushOperand(operand: Double) -&gt; Double? &#123;</span><br><span class=\"line\">        opStack.append(Op.Operand(operand))</span><br><span class=\"line\">        return evaluate()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 运算符</span><br><span class=\"line\">    func performOperation(symbol: String) -&gt; Double? &#123;</span><br><span class=\"line\">        if let operation = knownOps[symbol] &#123;</span><br><span class=\"line\">            opStack.append(operation)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return evaluate()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  ViewController.swift</span><br><span class=\"line\">//  Calculator</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will Ge on 6/28/15.</span><br><span class=\"line\">//  Copyright © 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    @IBOutlet weak var history: UILabel!</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBOutlet weak var display: UILabel!</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    var userIsInTheMiddleOfTypingANumber: Bool = false</span><br><span class=\"line\">    </span><br><span class=\"line\">    var brain = CauculatorBrain()</span><br><span class=\"line\"></span><br><span class=\"line\">    @IBAction func appendDigit(sender: UIButton) &#123;</span><br><span class=\"line\">        let digit = sender.currentTitle!</span><br><span class=\"line\">        if userIsInTheMiddleOfTypingANumber&#123;</span><br><span class=\"line\">              display.text = display.text! + digit</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            display.text = digit</span><br><span class=\"line\">            userIsInTheMiddleOfTypingANumber = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        print(&quot;digit = \\(digit)&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func enter() &#123;</span><br><span class=\"line\">        userIsInTheMiddleOfTypingANumber = false</span><br><span class=\"line\">        if let result = brain.pushOperand(displayValue) &#123;</span><br><span class=\"line\">            displayValue = result</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            displayValue = 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(&quot;pushOperand = \\(displayValue)&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func operate(sender: UIButton) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if userIsInTheMiddleOfTypingANumber &#123;</span><br><span class=\"line\">            enter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if let operation = sender.currentTitle &#123;</span><br><span class=\"line\">            print(&quot;\\(operation)&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    var displayValue: Double&#123;</span><br><span class=\"line\">        get &#123;</span><br><span class=\"line\">            return NSNumberFormatter().numberFromString(display.text!)!.doubleValue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set &#123;</span><br><span class=\"line\">            display.text = &quot;\\(newValue)&quot;</span><br><span class=\"line\">            userIsInTheMiddleOfTypingANumber = false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"CS193P 4. More Swift and Foundation Frameworks","url":"/2015/07/15/CS193P-4-More-Swift-and-Foundation-Frameworks/","content":"<p>本节介绍了一些 Swift 和 Foundation Framework，基本是要求自己搜索学习完成的，最好是参考 Swift 教材系统看看。说实话老师一节课只是把大纲列一下，好多根本没有展开详细系统的讲，当然时间上也不允许。</p>\n<ul>\n<li>可选值和枚举</li>\n<li>数组、字典、区间</li>\n<li>数据类型</li>\n<li>方法</li>\n<li>属性</li>\n<li>初始化</li>\n<li>AnyObject</li>\n<li>常用的方法和函数</li>\n</ul>\n"},{"title":"CS193P 5. Objective-C Compatibility, Proper","url":"/2015/07/17/CS193P-5-Objective-C-Compatibility-Proper/","content":"<h2 id=\"1-Objective-C-兼容性\"><a href=\"#1-Objective-C-兼容性\" class=\"headerlink\" title=\"1. Objective-C 兼容性\"></a>1. Objective-C 兼容性</h2><p>Bridging</p>\n<p>Swift 可以无缝使用以前 Objective-C 的 API，但是一些特殊的数据类型需要桥接。桥接是指可以互换的使用。</p>\n<p>NSString &lt;-&gt; String</p>\n<p>NSArray &lt;-&gt;  Array<AnyObject></p>\n<p>NSDictionary &lt;-&gt;  Dictionary&lt;NSObject, AnyObject&gt;</p>\n<p>Int, Float, Double, Bool -&gt;  NSNumber (反之不行)</p>\n<p>99%的桥接均是隐式完成的。</p>\n<h2 id=\"2-属性列表\"><a href=\"#2-属性列表\" class=\"headerlink\" title=\"2. 属性列表\"></a>2. 属性列表</h2><p>属性列表指 AnyObject 是一下六种类型的集合列表：<br>NSString, NSArray, NSDictionary, NSNumber, NSData, NSDate。</p>\n<p>处理属性列表通常需要映射：如 is 和 as。</p>\n<p>属性列表可以“盲”传递数据，也可以作为一种通用数据结构-类似泛型。</p>\n<p>NSUserDefaults 作为一种使用属性列表的存储机制。本质上就是一个小的存储数据列表的数据库。通常用存储“设置”信息。<br>NSUserDefaults 可以通过名称或键来存储或检索整个属性列表。</p>\n<p><strong>以下用法摘自：<a href=\"http://www.codingexplorer.com/nsuserdefaults-a-swift-introduction/\">NSUserDefaults — A Swift Introduction</a></strong></p>\n<h3 id=\"存储-NSUserDefaults\"><a href=\"#存储-NSUserDefaults\" class=\"headerlink\" title=\"存储 NSUserDefaults\"></a>存储 NSUserDefaults</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let defaults = NSUserDefaults.standardUserDefaults()</span><br><span class=\"line\">defaults.setObject(&quot;Coding Explorer&quot;, forKey: &quot;userNameKey&quot;)</span><br></pre></td></tr></table></figure>\n<p>NSUserDefaults 常用的写入方法:</p>\n<ul>\n<li>func setBool(value: Bool, forKey defaultName: String)</li>\n<li>func setInteger(value: Int, forKey defaultName: String)</li>\n<li>func setFloat(value: Float, forKey defaultName: String)</li>\n<li>func setDouble(value: Double, forKey defaultName: String)</li>\n<li>func setObject(value: AnyObject?, forKey defaultName: String)</li>\n<li>func setURL(url: NSURL, forKey defaultName: String)</li>\n</ul>\n<p>iOS 8或更新版本不要使用 synchronize。 </p>\n<h3 id=\"读取-NSUserDefaults\"><a href=\"#读取-NSUserDefaults\" class=\"headerlink\" title=\"读取 NSUserDefaults\"></a>读取 NSUserDefaults</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let defaults = NSUserDefaults.standardUserDefaults()</span><br><span class=\"line\">if let name = defaults.stringForKey(&quot;userNameKey&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    println(name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的常用读取 NSUserDefaults 的方法：</p>\n<ul>\n<li>func boolForKey(defaultName: String) -&gt; Bool</li>\n<li>func integerForKey(defaultName: String) -&gt; Int</li>\n<li>func floatForKey(defaultName: String) -&gt; Float</li>\n<li>func doubleForKey(defaultName: String) -&gt; Double</li>\n<li>func objectForKey(defaultName: String) -&gt; AnyObject?</li>\n<li>func URLForKey(defaultName: String) -&gt; NSURL?</li>\n<li>func dataForKey(defaultName: String) -&gt; NSData?</li>\n<li>func stringForKey(defaultName: String) -&gt; String?</li>\n<li>func stringArrayForKey(defaultName: String) -&gt; [AnyObject]?</li>\n<li>func arrayForKey(defaultName: String) -&gt; [AnyObject]?</li>\n<li>func dictionaryForKey(defaultName: String) -&gt; [NSObject : AnyObject]?</li>\n</ul>\n<h3 id=\"使用常量做键\"><a href=\"#使用常量做键\" class=\"headerlink\" title=\"使用常量做键\"></a>使用常量做键</h3><p>方便在一处修改，容易理解编译报错。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let userNameKeyConstant = &quot;userNameKey&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@IBAction func writeButton(sender: UIButton)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    let defaults = NSUserDefaults.standardUserDefaults()</span><br><span class=\"line\">    defaults.setObject(&quot;Coding Explorer&quot;, forKey: userNameKeyConstant)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@IBAction func readButton(sender: UIButton)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    let defaults = NSUserDefaults.standardUserDefaults()</span><br><span class=\"line\">    if let name = defaults.stringForKey(userNameKeyConstant)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-视图\"><a href=\"#3-视图\" class=\"headerlink\" title=\"3. 视图\"></a>3. 视图</h2><p>视图代表了一个长方形区域。</p>\n<p>视图是等级，类似单继承：一个视图只可以有一个 superview，但可以有很多 subviews。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  FaceView.swift</span><br><span class=\"line\">//  Happiness</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will Ge on 7/17/15.</span><br><span class=\"line\">//  Copyright © 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class FaceView: UIView &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var lineWidth: CGFloat = 5 &#123; didSet &#123; setNeedsDisplay() &#125; &#125;</span><br><span class=\"line\">    var color: UIColor = UIColor.blueColor() &#123; didSet &#123; setNeedsDisplay() &#125; &#125;</span><br><span class=\"line\">    var scale: CGFloat = 0.9</span><br><span class=\"line\">    var faceCenter: CGPoint &#123;</span><br><span class=\"line\">        return convertPoint(center, fromView: superview)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var faceRadius: CGFloat &#123;</span><br><span class=\"line\">        return min(bounds.size.width, bounds.size.height) / 2 * scale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 覆写 drawRect，自定义视图</span><br><span class=\"line\">    override func drawRect(rect: CGRect) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 画脸</span><br><span class=\"line\">        let facePath = UIBezierPath(arcCenter: faceCenter, radius: faceRadius, startAngle: 0, endAngle: CGFloat(2 * M_PI), clockwise: true)</span><br><span class=\"line\">        facePath.lineWidth = lineWidth</span><br><span class=\"line\">        color.set()</span><br><span class=\"line\">        facePath.stroke()</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 画眼</span><br><span class=\"line\">        bezierPathForEye(.Left).stroke()</span><br><span class=\"line\">        bezierPathForEye(.Right).stroke()</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 画嘴巴</span><br><span class=\"line\">        let smiliness = 0.8</span><br><span class=\"line\">        let smilePath = bezierPathForSmile(smiliness)</span><br><span class=\"line\">        smilePath.stroke()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    private struct Scaling &#123;</span><br><span class=\"line\">        static let FaceRadiusToEyeRadiusRatio: CGFloat = 10</span><br><span class=\"line\">        static let FaceRadiusToEyeOffsetRatio: CGFloat = 3</span><br><span class=\"line\">        static let FaceRadiusToEyeSeparationRatio: CGFloat = 1.5</span><br><span class=\"line\">        static let FaceRadiusToMouthWidthRatio: CGFloat = 1</span><br><span class=\"line\">        static let FaceRadiusToMouthHeightRatio: CGFloat = 3</span><br><span class=\"line\">        static let FaceRadiusToMouthOffsetRatio: CGFloat = 3</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义枚举：左右眼</span><br><span class=\"line\">    private enum Eye &#123; case Left, Right &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义函数：眼睛的路径</span><br><span class=\"line\">    private func bezierPathForEye(whichEye: Eye) -&gt; UIBezierPath &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let eyeRadius = faceRadius / Scaling.FaceRadiusToEyeRadiusRatio</span><br><span class=\"line\">        let eyeVerticalOffset = faceRadius / Scaling.FaceRadiusToEyeOffsetRatio</span><br><span class=\"line\">        let eyeHorizontalSeparation = faceRadius / Scaling.FaceRadiusToEyeSeparationRatio</span><br><span class=\"line\">        </span><br><span class=\"line\">        var eyeCenter = faceCenter</span><br><span class=\"line\">        eyeCenter.y -= eyeVerticalOffset</span><br><span class=\"line\">        switch whichEye &#123;</span><br><span class=\"line\">        case .Left: eyeCenter.x -= eyeHorizontalSeparation / 2</span><br><span class=\"line\">        case .Right: eyeCenter.x += eyeHorizontalSeparation / 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let path = UIBezierPath(arcCenter: eyeCenter, radius: eyeRadius, startAngle: 0, endAngle: CGFloat(2 * M_PI), clockwise: true)</span><br><span class=\"line\">        path.lineWidth = lineWidth</span><br><span class=\"line\">        return path</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 定义函数：嘴巴的路径</span><br><span class=\"line\">    private func bezierPathForSmile(fractionOfMaxSmile: Double) -&gt; UIBezierPath &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        let mouthWidth = faceRadius / Scaling.FaceRadiusToMouthWidthRatio</span><br><span class=\"line\">        let mouthHeight = faceRadius / Scaling.FaceRadiusToMouthHeightRatio</span><br><span class=\"line\">        let mouthVerticalOffset = faceRadius / Scaling.FaceRadiusToMouthOffsetRatio</span><br><span class=\"line\">        </span><br><span class=\"line\">        let smileHeight = CGFloat(max(min(fractionOfMaxSmile, 1), -1)) * mouthHeight</span><br><span class=\"line\">        </span><br><span class=\"line\">        let start = CGPoint(x: faceCenter.x - mouthWidth / 2, y: faceCenter.y + mouthVerticalOffset)</span><br><span class=\"line\">        let end = CGPoint(x: start.x + mouthWidth, y: start.y)</span><br><span class=\"line\">        let cp1 = CGPoint(x: start.x + mouthWidth / 3, y: start.y + smileHeight)</span><br><span class=\"line\">        let cp2 = CGPoint(x: end.x - mouthWidth / 3, y: cp1.y)</span><br><span class=\"line\">        </span><br><span class=\"line\">        let path = UIBezierPath()</span><br><span class=\"line\">        path.moveToPoint(start)</span><br><span class=\"line\">        path.addCurveToPoint(end, controlPoint1: cp1, controlPoint2: cp2)</span><br><span class=\"line\">        path.lineWidth = lineWidth</span><br><span class=\"line\">        return path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"CS193P 6. Protocols and Delegation, Gestures","url":"/2015/07/20/CS193P-6-Protocols-and-Delegation-Gestures/","content":"<p>网站添加 Tags，方便分类查找文章。 <a href=\"https://medium.com/\">Medium</a> 非常简洁优雅，可以借鉴。网站改版和文章排版比较耗费时间，以后要以内容输出优先。</p>\n<p>关于课程中 Swift 语言的知识我只是简单浏览一遍，毕竟他说的也不详细，真正搞懂还是要系统学习。复习一下《疯狂 Swift 讲义》或者 Google 都是可行的。重要是 Demo 实践。今天微博看到的玩笑：<a href=\"http://www.theallium.com/engineering/computer-programming-to-be-officially-renamed-googling-stackoverflow/\">Computer Programming To Be Officially Renamed “Googling Stackoverflow”\n</a>。</p>\n<h2 id=\"1-Interface-Builder\"><a href=\"#1-Interface-Builder\" class=\"headerlink\" title=\"1. Interface Builder\"></a>1. Interface Builder</h2><p>Demo: 自定义 UIViews in your storyboard (FaceView)</p>\n<blockquote>\n<p><a href=\"http://www.cocoachina.com/ios/20140619/8883.html\">如何在iOS 8中使用Swift和Xcode 6制作精美的UI组件</a> 有个例子：苹果在Xcode 6中加入了两个新的Interface Builder（下文用IB简称）属性声明:IBInspectable和IBDesignable。IBInspectable在IB的Attribute Inspector（属性检查器）中查看类的属性，而IBDesignable能实时更新视图，很厉害吧！</p>\n</blockquote>\n<h2 id=\"2-The-Happiness-MVC’s-Model\"><a href=\"#2-The-Happiness-MVC’s-Model\" class=\"headerlink\" title=\"2. The Happiness MVC’s Model\"></a>2. The Happiness MVC’s Model</h2><p>是寄于 HappinessViewController 里的 happiness，不同于 smiliness。</p>\n<h2 id=\"3-Protocols-and-Delegation\"><a href=\"#3-Protocols-and-Delegation\" class=\"headerlink\" title=\"3. Protocols and Delegation\"></a>3. Protocols and Delegation</h2><p>扩展</p>\n<p>协议也是一种数据类型</p>\n<p>代理是一种非常重要的协议的应用。<br>代理是我们完成视图和控制器盲沟通的方式。</p>\n<p><img src=\"http://i.imgur.com/OuW94mJ.png\" alt=\"Delegation\"></p>\n<p>通过代理模式 UIViews 可以控制 Model，虽然并不是真的拥有 Model。</p>\n<p><strong>如何实现：</strong></p>\n<ol>\n<li>视图中创建一个代理协议 (定义具体视图想要控制器关心的内容) </li>\n<li>视图中创建一个代理的属性，其类型是代理协议</li>\n<li>视图中使用代理的属性去得到并不用的事，或做并不能控制的事</li>\n<li>控制器声明并完成代理协议</li>\n<li>控制器把自己作为视图的代理，通过设置设置代理的属性（上面2提到的）</li>\n<li>控制器实施协议</li>\n</ol>\n<p>现在视图就勾住了控制器。不过视图仍不晓得控制器的内容，所以视图仍是通用&#x2F;可重复使用的。</p>\n<p><strong>Demo:  Happiness MVC’s Model using generic FaceView in its View</strong></p>\n<blockquote>\n<p>Cmd + Shift + O 快速打开文档，有种 Xcode 内置 spotlight 的即视感。</p>\n</blockquote>\n<p>FaceView.swift 为自定义 UIView 的类，是 View。<br>HappinessViewController.swift 是继承自 UIViewController，是 Controller。</p>\n<p>View 中 dataSource 是 protocol FaceViewDataSource 的属性（代理或数据源），作为 dataSource?.smilinessForFaceView(self) 的形参。</p>\n<p>Controller 实现了该协议，并将自己作为代理的对象，并通过 happiness 变量来改变协议中</p>\n<p>Controller 中的 faceView 通过 Outlet 监控 dataSource 值的改变（didSet），来控制 View 笑脸的变化（smiliness）。</p>\n<p><img src=\"http://i.imgur.com/Zop3POa.png\" alt=\"Happiness MVC\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//  FaceView.swift 部分代码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">protocol FaceViewDataSource: class &#123;</span><br><span class=\"line\">    func smilinessForFaceView(sender: FaceView) -&gt; Double?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@IBDesignable</span><br><span class=\"line\">class FaceView: UIView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    @IBInspectable</span><br><span class=\"line\">    var lineWidth: CGFloat = 3 &#123; didSet &#123; setNeedsDisplay() &#125; &#125;</span><br><span class=\"line\">    @IBInspectable</span><br><span class=\"line\">    var color: UIColor = UIColor.blueColor() &#123; didSet &#123; setNeedsDisplay() &#125; &#125;</span><br><span class=\"line\">    @IBInspectable</span><br><span class=\"line\">    var scale: CGFloat = 0.90 &#123; didSet &#123; setNeedsDisplay() &#125; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var faceCenter: CGPoint &#123;</span><br><span class=\"line\">        return convertPoint(center, fromView: superview)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var faceRadius: CGFloat &#123;</span><br><span class=\"line\">        return min(bounds.size.width, bounds.size.height) / 2 * scale</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    weak var dataSource: FaceViewDataSource?</span><br><span class=\"line\">    </span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//  HappinessViewController.swift</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class HappinessViewController: UIViewController, FaceViewDataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @IBOutlet weak var faceView: FaceView! &#123;</span><br><span class=\"line\">        didSet &#123;</span><br><span class=\"line\">            faceView.dataSource = self</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var happiness: Int = 99 &#123; // 0 = very sad, 100 = ecstatic</span><br><span class=\"line\">        didSet &#123;</span><br><span class=\"line\">            happiness = min(max(happiness, 0), 100)</span><br><span class=\"line\">            print(&quot;happiness = \\(happiness)&quot;)</span><br><span class=\"line\">            updateUI()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func updateUI() &#123;</span><br><span class=\"line\">        faceView.setNeedsDisplay()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func smilinessForFaceView(sender: FaceView) -&gt; Double? &#123;</span><br><span class=\"line\">        return Double(happiness - 50) / 50</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Gestures\"><a href=\"#4-Gestures\" class=\"headerlink\" title=\"4. Gestures\"></a>4. Gestures</h2><p>手势识别分两步走：</p>\n<ol>\n<li>Adding a gesture recognizer to a UIView (asking the UIView to “recognize” that gesture)</li>\n<li>Providing a method to “handle” that gesture (not necessarily handled by the UIView)</li>\n</ol>\n<blockquote>\n<p>Usually the first is done by a Controller<br>Though occasionally a UIView will do this itself if the gesture is integral to its existence</p>\n</blockquote>\n<blockquote>\n<p>The second is provided either by the UIView or a Controller Depending on the situation. We’ll see an example of both in our demo.</p>\n</blockquote>\n<h3 id=\"第一步：Adding-a-gesture-recognizer-to-a-UIView\"><a href=\"#第一步：Adding-a-gesture-recognizer-to-a-UIView\" class=\"headerlink\" title=\"第一步：Adding a gesture recognizer to a UIView\"></a>第一步：Adding a gesture recognizer to a UIView</h3><p>Imagine we wanted a UIView in our Controller’s View to recognize a “pan” gesture …</p>\n<p><img src=\"http://i.imgur.com/c1mSjmj.png\" alt=\"pannableView\"></p>\n<blockquote>\n<p>上面的代码造成排版错误，估计代码高亮产生的，先换成图片。</p>\n</blockquote>\n<p>This is just a normal outlet to the UIView we want to recognize the gesture</p>\n<p>We use its property observer to get involved when the outlet gets hooked up by iOS</p>\n<p>Here we are creating an instance of a concrete subclass of UIGestureRecognizer (for pans) </p>\n<p>The target gets notified when the gesture is recognized (in this case, the Controller itself) </p>\n<p>The action is the method invoked on recognition (the : means it has an argument)</p>\n<p>Here we ask the UIView to actually start trying to recognize this gesture in its bounds </p>\n<p>Let’s talk about how we implement the handler …</p>\n<h3 id=\"第二步：A-handler-for-a-gesture-needs-gesture-specific-information\"><a href=\"#第二步：A-handler-for-a-gesture-needs-gesture-specific-information\" class=\"headerlink\" title=\"第二步：A handler for a gesture needs gesture-specific information\"></a>第二步：A handler for a gesture needs gesture-specific information</h3><p>So each concrete subclass provides special methods for handling that type of gesture</p>\n<p><strong>For example, UIPanGestureRecognizer provides 3 methods</strong></p>\n<p><code>func translationInView(view: UIView) -&gt; CGPoint</code> &#x2F;&#x2F; cumulative since start of recognition </p>\n<p><code>func velocityInView(view: UIView) -&gt; CGPoint</code> &#x2F;&#x2F; how fast the finger is moving (points&#x2F;s)</p>\n<p><code>func setTranslation(translation: CGPoint, inView: UIView)</code></p>\n<p>This last one is interesting because it allows you to reset the translation so far</p>\n<p>By resetting the translation to zero all the time, you end up getting “incremental” translation </p>\n<p><strong>The abstract superclass also provides state information</strong></p>\n<p><code>var state: UIGestureRecognizerState &#123; get &#125;</code><br>This sits around in <code>.Possible</code> until recognition starts<br>For a discrete gesture (e.g. a Swipe), it changes to <code>.Recognized</code> (Tap is not a normal discrete) For a continues gesture (e.g. a Pan), it moves from <code>.Began</code> thru repeated <code>.Changed</code> to <code>.Ended</code><br>It can go to <code>.Failed</code> or <code>.Cancelled</code> too, so watch out for those!</p>\n<p><strong>So, given this information, what would the pan handler look like?</strong></p>\n<pre><code>  func pan(gesture: UIPanGestureRecognizer) &#123;\n      switch gesture.state &#123;\n          case .Changed: fallthrough\n          case .Ended:\n              let translation = gesture.translationInView(pannableView)\n// update anything that depends on the pan gesture using translation.x and .y\n￼            gesture.setTranslation(CGPointZero, inView: pannableView)\n        default: break\n     &#125;\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\rRemember that the action was “pan:” (if no colon, we would not get the gesture argument)</span><br><span class=\"line\"></span><br><span class=\"line\">We are only going to do anything when the finger moves or lifts up off the device’s surface </span><br><span class=\"line\"></span><br><span class=\"line\">fallthrough means “execute the code for the next case down”\r\rHere we get the location of the pan in the pannableView’s coordinate system\r\rNow we do whatever we want with that information\r\rBy resetting the translation, the next one we get will be how much it moved since this one\r\r### 常用手势：</span><br><span class=\"line\">\r- UIPinchGestureRecognizer</span><br><span class=\"line\">\r  var scale: CGFloat // not read-only (can reset)</span><br><span class=\"line\">  </span><br><span class=\"line\">  var   velocity: CGFloat &#123; get &#125; // scale factor per second</span><br><span class=\"line\">  \r- UIRotationGestureRecognizer</span><br><span class=\"line\">\r  var rotation: CGFloat // not read-only (can reset); in radians </span><br><span class=\"line\">  </span><br><span class=\"line\">  var velocity: CGFloat &#123; get &#125; // radians per second</span><br><span class=\"line\">  \r- UISwipeGestureRecognizer\r\r  Set up the direction and number of fingers you want, then look for .Recognized</span><br><span class=\"line\">  </span><br><span class=\"line\">  var direction: UISwipeGestureRecoginzerDirection // which swipes you want </span><br><span class=\"line\">  </span><br><span class=\"line\">  var numberOfTouchesRequired: Int // finger count</span><br><span class=\"line\">  \r- UITapGestureRecognizer</span><br><span class=\"line\">\r  Set up the number of taps and fingers you want, then look for .Ended </span><br><span class=\"line\">  </span><br><span class=\"line\">  var numberOfTapsRequired: Int // single tap, double tap, etc. </span><br><span class=\"line\">  </span><br><span class=\"line\">  var numberOfTouchesRequired: Int // finger count</span><br><span class=\"line\">  </span><br><span class=\"line\">￼￼￼￼\r### Demo: Happiness pinch and pan</span><br><span class=\"line\"></span><br><span class=\"line\">**FaceView Gestures**</span><br><span class=\"line\">\rAdd a gesture recognizer (pinch) to the FaceView to zoom in and out (control its own scale) </span><br><span class=\"line\"></span><br><span class=\"line\">Add a gesture recognizer (pan) to the FaceView to control happiness (Model) in the Controller\r\r\r\r```</span><br><span class=\"line\"></span><br><span class=\"line\">//  FaceView.swift 部分代码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">protocol FaceViewDataSource: class &#123;</span><br><span class=\"line\">    func smilinessForFaceView(sender: FaceView) -&gt; Double?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 2. handler</span><br><span class=\"line\">    func scale(gestrue: UIPinchGestureRecognizer) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        if gestrue.state == .Changed &#123;</span><br><span class=\"line\">            scale *= gestrue.scale</span><br><span class=\"line\">            gestrue.scale = 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//  HappinessViewController.swift 部分代码</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class HappinessViewController: UIViewController, FaceViewDataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @IBOutlet weak var faceView: FaceView! &#123;</span><br><span class=\"line\">        didSet &#123;</span><br><span class=\"line\">            faceView.dataSource = self</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 1. Adding a gesture recognizer</span><br><span class=\"line\">            faceView.addGestureRecognizer(UIPinchGestureRecognizer(target: faceView, action: &quot;scale:&quot;))</span><br><span class=\"line\">            // try in storyboard</span><br><span class=\"line\">            // faceView.addGestureRecognizer(UIPanGestureRecognizer(target: self, action: &quot;changeHapponess:&quot;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    // 通过 storyboard 添加 Pan Gesture Recognizer，然后 storyboard 添加 IBAction 到 Controller 中</span><br><span class=\"line\">    private struct Constants &#123;</span><br><span class=\"line\">        static let HappinessGestureScale: CGFloat = 4</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func changeHappiness(gesture: UIPanGestureRecognizer) &#123;</span><br><span class=\"line\">        switch gesture.state &#123;</span><br><span class=\"line\">        case .Ended: fallthrough</span><br><span class=\"line\">        case .Changed:</span><br><span class=\"line\">            let translatrion = gesture.translationInView(faceView)</span><br><span class=\"line\">            let happinessChange = -Int(translatrion.y / Constants.HappinessGestureScale)</span><br><span class=\"line\">            if happinessChange != 0 &#123;</span><br><span class=\"line\">                happiness -= happinessChange</span><br><span class=\"line\">                gesture.setTranslation(CGPointZero, inView: faceView)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default: break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var happiness: Int = 3 &#123; // 0 = very sad, 100 = ecstatic</span><br><span class=\"line\">        didSet &#123;</span><br><span class=\"line\">            happiness = min(max(happiness, 0), 100)</span><br><span class=\"line\">            print(&quot;happiness = \\(happiness)&quot;)</span><br><span class=\"line\">            updateUI()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func updateUI() &#123;</span><br><span class=\"line\">        faceView.setNeedsDisplay()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func smilinessForFaceView(sender: FaceView) -&gt; Double? &#123;</span><br><span class=\"line\">        return Double(happiness - 50) / 50</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n&gt;有待翻译\n\n## 5. 拓展阅读\n\n[UIGestureRecognizer Tutorial: Getting Started](http://www.raywenderlich.com/76020/using-uigesturerecognizer-with-swift-tutorial)\n\n\n## 项目代码保存在我的 GitHub: [CS193P-2015](https://github.com/gewill/CS193P-2015)\n</code></pre>\n"},{"title":"CS193P 7. Multiple MVCs","url":"/2015/07/22/CS193P-7-Multiple-MVCs/","content":"<h2 id=\"1-Split-View-Controllers-amp-Navigation-Controllers-amp-Tab-Bar-Controllers\"><a href=\"#1-Split-View-Controllers-amp-Navigation-Controllers-amp-Tab-Bar-Controllers\" class=\"headerlink\" title=\"1. Split View Controllers &amp; Navigation Controllers &amp; Tab Bar Controllers\"></a>1. Split View Controllers &amp; Navigation Controllers &amp; Tab Bar Controllers</h2><blockquote>\n<p>Slide 中图太多就不一一贴在这里了</p>\n</blockquote>\n<p>UINavigationController 比喻成一堆卡片，只能看到一张卡片。新的 MVC 出来，旧的就被丢弃。</p>\n<h2 id=\"2-Segues\"><a href=\"#2-Segues\" class=\"headerlink\" title=\"2. Segues\"></a>2. Segues</h2><p>Segue 总是引导到一个新建的 MVC，旧的同样被丢弃。</p>\n<p>Storyboard 总是通过名字连接代码的：UIView 的 Class、View Controller 的 Class、Outlet 的名字、IBAction 的名字，这是一种松散耦合，能够这个两件东西连接起来。</p>\n<h2 id=\"3-Demo-Psychologist\"><a href=\"#3-Demo-Psychologist\" class=\"headerlink\" title=\"3. Demo: Psychologist\"></a>3. Demo: Psychologist</h2><p>最好的理解就是做实践（Demo）。</p>\n<p>我们将会新建一个 Psychologist MVC</p>\n<p>Psychologist 将会披露他的诊断，通过 segue Happiness MVC。</p>\n<p>我们会把 MVCs 放进 navigation controllers 内部 split view controllers,它将兼容 iPad 和 iPhone 设备。</p>\n<p>Autolayout 另一个技巧是使用 Reset to Suggested Constraints，配合 Size Inspector 面板里 Descendant Constraints。</p>\n<h2 id=\"4-Popovers\"><a href=\"#4-Popovers\" class=\"headerlink\" title=\"4. Popovers\"></a>4. Popovers</h2><p>Popover 对应的是 popoverPresentationController</p>\n<p>由于 Popover 出来的 MVC 每次的新建的，History 相关信息可以存储到 NSUserDefaults 中。</p>\n<p>iPad 是小的弹窗，iPhone 默认 Modal，可以改回 Popover。</p>\n<p>可以UIPopoverPresentationControllerDelegate协议，重写  UIViewController 中的 preferredContentSize 自定义大小。</p>\n<h2 id=\"源码保存在我的-GitHub-CS193P-2015\"><a href=\"#源码保存在我的-GitHub-CS193P-2015\" class=\"headerlink\" title=\"源码保存在我的 GitHub: CS193P-2015\"></a>源码保存在我的 GitHub: <a href=\"https://github.com/gewill/CS193P-2015\">CS193P-2015</a></h2>"},{"title":"CS193P 8. View Controller Lifecycle, Autolayout","url":"/2015/08/13/CS193P-8-View-Controller-Lifecycle-Autolayout/","content":"<h2 id=\"View-Controller-Lifecycle\"><a href=\"#View-Controller-Lifecycle\" class=\"headerlink\" title=\"View Controller Lifecycle\"></a>View Controller Lifecycle</h2><ul>\n<li>Instantiated (from storyboard usually) </li>\n<li>awakeFromNib</li>\n<li>segue preparation happens </li>\n<li>outlets get set </li>\n<li>viewDidLoad</li>\n</ul>\n<p>These pairs will be called each time your Controller’s view goes on&#x2F;off screen … </p>\n<ul>\n<li>viewWillAppear and viewDidAppear</li>\n<li>viewWillDisappear and viewDidDisappear</li>\n</ul>\n<p>These “geometry changed” methods might be called at any time after viewDidLoad … </p>\n<ul>\n<li>viewWillLayoutSubviews (… then autolayout happens, then …) viewDidLayoutSubviews</li>\n</ul>\n<p>If memory gets low, you might get …</p>\n<ul>\n<li>didReceiveMemoryWarning</li>\n</ul>\n<h2 id=\"Autolayout\"><a href=\"#Autolayout\" class=\"headerlink\" title=\"Autolayout\"></a>Autolayout</h2><h3 id=\"You’ve-seen-a-lot-of-Autolayout-already\"><a href=\"#You’ve-seen-a-lot-of-Autolayout-already\" class=\"headerlink\" title=\"You’ve seen a lot of Autolayout already\"></a>You’ve seen a lot of Autolayout already</h3><ul>\n<li>Using the dashed blue lines to try to tell Xcode what you intend</li>\n<li>Ctrl-Dragging between views to create relationships (spacing, etc.)</li>\n<li>The “Pin” and “Arrange” popovers in the lower right of the storyboard</li>\n<li>Reset to Suggested Constraints (if the blue lines were enough to unambiguously set constraints) </li>\n<li>Document Outline (see all constraints, resolve misplacements and even conflicts)</li>\n<li>Size Inspector (look at (and edit!) the details of the constraints on the selected view)</li>\n<li>Clicking on a constraint to select it then bring up Attributes Inspector (to edit its details)</li>\n</ul>\n<h3 id=\"￼Mastering-Autolayout-requires-experience\"><a href=\"#￼Mastering-Autolayout-requires-experience\" class=\"headerlink\" title=\"￼Mastering Autolayout requires experience\"></a>￼Mastering Autolayout requires experience</h3><p>You just have to do it to learn it</p>\n<h3 id=\"Autolayout-can-be-done-from-code-too\"><a href=\"#Autolayout-can-be-done-from-code-too\" class=\"headerlink\" title=\"Autolayout can be done from code too\"></a>Autolayout can be done from code too</h3><p>Though you’re probably better off doing it in the storyboard wherever possible The demo today will show a simple case of doing Autolayout from code</p>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h3><ul>\n<li>Notice auto layout issues and resove them.</li>\n<li>Preview Storyboard in assistant editor</li>\n<li>Remove magic nubmers in constraints of size inspector: such as use standard value or 0.</li>\n</ul>\n<h3 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More:\"></a>More:</h3><p> <a href=\"http://stackoverflow.com/questions/29705747/what-does-use-standard-value-and-constrain-to-margins-mean-in-auto-layout\">What does “Use standard value and Constrain to Margins” mean in Auto Layout?</a></p>\n<p> <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutConcepts/AutoLayoutConcepts.html#//apple_ref/doc/uid/TP40010853-CH14-SW1\">Auto Layout Concepts</a></p>\n<blockquote>\n<p>The fundamental building block in Auto Layout is the constraint. Constraints express rules for the layout of elements in your interface; </p>\n</blockquote>\n<blockquote>\n<p>Constraint Basics</p>\n</blockquote>\n<blockquote>\n<p>You can think of a constraint as a mathematical representation of a human-expressable statement. If you’re defining the position of a button, for example, you might want to say “the left edge should be 20 points from the left edge of its containing view.” More formally, this translates to button.left &#x3D; (container.left + 20), which in turn is an expression of the form y &#x3D; m*x + b, where:</p>\n</blockquote>\n<blockquote>\n<p>y and x are attributes of views.</p>\n</blockquote>\n<blockquote>\n<p>m and b are floating point values.</p>\n</blockquote>\n<blockquote>\n<p>An attribute is one of left, right, top, bottom, leading, trailing, width, height, centerX, centerY, and baseline.</p>\n</blockquote>\n<p><a href=\"http://www.raywenderlich.com/83129/beginning-auto-layout-tutorial-swift-part-1\">Auto Layout Tutorial Part 1: Getting Started</a></p>\n"},{"title":"CS193P 9. Scroll View and Multithreading","url":"/2015/08/13/CS193P-9-Scroll-View-and-Multithreading/","content":"<p>一下看了9&#x2F;10两课，有点烧脑也好，走出舒适区也好， 困了也好，反正看完睡了2小时。现在刚起来写笔记，稍后实践知识点加到项目中。没开字幕，因为我的阅读速度还不如听力。</p>\n<blockquote>\n<p>Tinyfool：看英文视频不看字幕。</p>\n</blockquote>\n<blockquote>\n<p>ibuick：学习知识后，在另外一个小 App 去运用</p>\n</blockquote>\n<h2 id=\"Scroll-View\"><a href=\"#Scroll-View\" class=\"headerlink\" title=\"Scroll View\"></a>Scroll View</h2><p>概念和使用都很简单，理解成画布、画稿、放大镜即可。</p>\n<h2 id=\"Multithreading\"><a href=\"#Multithreading\" class=\"headerlink\" title=\"Multithreading\"></a>Multithreading</h2><p>典型的用法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> session <span class=\"operator\">=</span> <span class=\"type\">NSURLSession</span>(<span class=\"type\">NSURLSessionConfiguration</span>.defaultSessionConfiguration())</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>(string: “http:<span class=\"comment\">//url”) &#123;</span>\r\t<span class=\"keyword\">let</span> request <span class=\"operator\">=</span> <span class=\"type\">NSURLRequest</span>(URL: url)\r\t<span class=\"keyword\">let</span> task <span class=\"operator\">=</span> session.downloadTaskWithRequest(request) &#123; </span><br><span class=\"line\">\t(localURL, response, error) <span class=\"keyword\">in</span>\r￼￼￼￼￼￼￼￼￼￼￼￼￼        dispatch_async(dispatch_get_main_queue()) &#123;\r\t\t<span class=\"comment\">/* I want to do something in the UI here, can I? */</span>\r\t\t&#125;\r\t&#125;\r    task.resume()\r&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"CS193P Fall 2013: 11.Table View and iPad","url":"/2015/08/24/CS193P-Fall-2013-11-Table-View-and-iPad/","content":"<p>之前直接听英语单词不懂，基础概念也没有，很难真正明白。现在学习了许多中文课程，主要是概念有了，重新看一遍，容易理解的多。</p>\n<p>所以最好是想看中文了解相关背景概念，熟悉一下其实的关键词对应的英文，然后再学习英文的课程。</p>\n<p>项目驱动，习题驱动学习比较有劲头。</p>\n<h2 id=\"Table-View\"><a href=\"#Table-View\" class=\"headerlink\" title=\"Table View\"></a>Table View</h2><ul>\n<li>UITableView Segue: <code>NSIndexPath *indexPath = [self.tableView indexPathForCell:sender];</code></li>\n<li>UITableView Spinner: UITableViewController has an “activity indicator” built in</li>\n<li>What if your Model changes? <code>(void)reloadData;</code></li>\n</ul>\n<h2 id=\"Universal-Applications\"><a href=\"#Universal-Applications\" class=\"headerlink\" title=\"Universal Applications\"></a>Universal Applications</h2><p>Generally recommned use different storyboards.</p>\n<h2 id=\"UISplitViewController\"><a href=\"#UISplitViewController\" class=\"headerlink\" title=\"UISplitViewController\"></a>UISplitViewController</h2><ul>\n<li>UISplitViewControllerDelegate: <code>awakeFromNib</code></li>\n<li>Hide Master in portrait orientation only (the default)</li>\n</ul>\n"},{"title":"实时判断手机号码是否正确","url":"/2015/11/02/Check-Phone-Number-in-Real-Time/","content":"<p>综合实现对比了一下委托和通知，Target-Action是更直接的方式。<br><img src=\"http://i.imgur.com/6gYAhBq.jpg\" alt=\"check phone number\"></p>\n<h2 id=\"1-委托\"><a href=\"#1-委托\" class=\"headerlink\" title=\"1. 委托\"></a>1. 委托</h2><p>UITextFieldDelegate，只能判断开始编辑那一刻的状态。<br><code>optional public func textFieldDidBeginEditing(textField: UITextField)</code></p>\n<p> &#x2F;&#x2F; became first responder</p>\n<p>或者试试这个，下面这个委托实现起来有些啰嗦：正常输入需要加一个字符判断，但是用户按下删除键时 <code>string</code>为””,需要减一个字符来判断。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MARK: - phoneNumberTextField delegate</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">textField</span>(<span class=\"params\">textField</span>: <span class=\"type\">UITextField</span>, <span class=\"params\">shouldChangeCharactersInRange</span> <span class=\"params\">range</span>: <span class=\"type\">NSRange</span>, <span class=\"params\">replacementString</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span> - 检测电话号码注册与非</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>  textField.text <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">&amp;&amp;</span> string <span class=\"operator\">!=</span> <span class=\"string\">&quot;&quot;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newString <span class=\"operator\">=</span> textField.text<span class=\"operator\">!</span> <span class=\"operator\">+</span> string</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPhoneNumberAvailable(newString) &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            sendVerificationCodeButton.setTitleColor(<span class=\"type\">UIColor</span> ( red: <span class=\"number\">0.4</span>, green: <span class=\"number\">0.4</span>, blue: <span class=\"number\">0.4</span>, alpha: <span class=\"number\">1.0</span> ), forState: <span class=\"type\">UIControlState</span>.<span class=\"type\">Disabled</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> textField.text <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">&amp;&amp;</span> string <span class=\"operator\">==</span> <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newString <span class=\"operator\">=</span> <span class=\"type\">String</span>(textField.text<span class=\"operator\">!</span>.characters.dropLast())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPhoneNumberAvailable(newString) &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span>    </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span>       </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>但是如此还不行，如果光标移到不在尾部，上面的代码逻辑就不对。还要利用好range。但是这里还是将textField.text!转化为NSString，因为<code>public mutating func replaceRange(subRange: Range&lt;Index&gt;, with newElements: String)</code>这里的 <code> Range&lt;Index&gt;</code>没有搞明白，所以就是去了Unicode 的支持。这里是电话号码也就不影响使用。</p>\n<blockquote>\n<p>参考：<a href=\"http://stackoverflow.com/questions/25138339/nsrange-to-rangestring-index\">http://stackoverflow.com/questions/25138339/nsrange-to-rangestring-index</a></p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MARK: - phoneNumberTextField delegate</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">textField</span>(<span class=\"params\">textField</span>: <span class=\"type\">UITextField</span>, <span class=\"params\">shouldChangeCharactersInRange</span> <span class=\"params\">range</span>: <span class=\"type\">NSRange</span>, <span class=\"params\">replacementString</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span> - 检测电话号码注册与非</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>  textField.text <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newString <span class=\"operator\">=</span> (textField.text<span class=\"operator\">!</span> <span class=\"keyword\">as</span> <span class=\"type\">NSString</span>).stringByReplacingCharactersInRange(range, withString: string)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPhoneNumberAvailable(newString) &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sendVerificationCodeButton.setTitle(<span class=\"string\">&quot;发送验证码&quot;</span>, forState: <span class=\"type\">UIControlState</span>.<span class=\"type\">Disabled</span>)   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-注册通知\"><a href=\"#2-注册通知\" class=\"headerlink\" title=\"2. 注册通知\"></a>2. 注册通知</h2><p>最为方便，因为我们并不关心 UITextFieldDelegate中新字符<code>string</code>的值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">let</span> <span class=\"type\">UITextFieldTextDidChangeNotification</span>: <span class=\"type\">String</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"string\">&quot;phoneNumberDidChange:&quot;</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewWillDisappear</span>(<span class=\"params\">animated</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//MARK: - 检测电话号码是否正确更改发送验证码状态</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">phoneNumberDidChange</span>(<span class=\"params\">aNotification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> phoneNumberTextField.isFirstResponder() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isPhoneNumberAvailable() &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>.colorWithHex(<span class=\"string\">&quot;#15C76D&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>.lightGrayColor()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sendVerificationCodeButton.titleLabel<span class=\"operator\">?</span>.text <span class=\"operator\">=</span> <span class=\"string\">&quot;发送验证码&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-UIControl-的-Target-Action\"><a href=\"#3-UIControl-的-Target-Action\" class=\"headerlink\" title=\"3. UIControl 的 Target-Action\"></a>3. UIControl 的 Target-Action</h2><p>由于<code>public class UITextField : UIControl, UITextInput, NSCoding</code>之前没有注意，这里有个最简单直接方法：</p>\n<p><code>- addTarget:action:forControlEvents:</code>或者 IB 添加 Action<br> <code>EditingChanged: UIControlEvents</code> </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MARK: - 检测电话号码是否正确更改发送验证码状态</span></span><br><span class=\"line\"><span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">phoneNumberDidChange</span>(<span class=\"params\">sender</span>: <span class=\"type\">UITextField</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isPhoneNumberAvailable() &#123;</span><br><span class=\"line\">        sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>.colorWithHex(<span class=\"string\">&quot;#15C76D&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>.lightGrayColor()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sendVerificationCodeButton.titleLabel<span class=\"operator\">?</span>.text <span class=\"operator\">=</span> <span class=\"string\">&quot;发送验证码&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>附UIControlEvents：</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">UIControlEvents</span> : <span class=\"title class_\">OptionSetType</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">rawValue</span> <span class=\"params\">rawValue</span>: <span class=\"type\">UInt</span>)</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDown</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDownRepeat</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDragInside</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDragOutside</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDragEnter</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchDragExit</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchUpInside</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchUpOutside</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">TouchCancel</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">ValueChanged</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">PrimaryActionTriggered</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">EditingDidBegin</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">EditingChanged</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">EditingDidEnd</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">EditingDidEndOnExit</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">AllTouchEvents</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">AllEditingEvents</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">ApplicationReserved</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">SystemReserved</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> <span class=\"type\">AllEvents</span>: <span class=\"type\">UIControlEvents</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-计时器实现延迟发送验证码\"><a href=\"#4-计时器实现延迟发送验证码\" class=\"headerlink\" title=\"4. 计时器实现延迟发送验证码\"></a>4. 计时器实现延迟发送验证码</h2><p>延迟60秒后，可重发发送验证码。使用NSTimer来实现，有个小小的 bug，就是第一次按下发送键，界面卡顿，从59秒起算，以后是60秒起算。以下是完整的代码。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SignupViewController</span>: <span class=\"title class_\">BaseViewController</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> count <span class=\"operator\">=</span> <span class=\"number\">60</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> myTimer: <span class=\"type\">NSTimer</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> userNameTextField: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> phoneNumberTextField: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> <span class=\"type\">VerificationCodeTextField</span>: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> password0TextField: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> password1TextField: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> signupButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> sendVerificationCodeButton: <span class=\"type\">UIButton</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">signupButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">sendVerificationCodeButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//<span class=\"doctag\">TODO:</span> - 添加发送验证码模块</span></span><br><span class=\"line\">        sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        myTimer <span class=\"operator\">=</span> <span class=\"type\">NSTimer</span>.scheduledTimerWithTimeInterval(<span class=\"number\">1.0</span>, target: <span class=\"keyword\">self</span>, selector: <span class=\"string\">&quot;countDownTick&quot;</span>, userInfo: <span class=\"literal\">nil</span>, repeats: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        count <span class=\"operator\">=</span> <span class=\"number\">60</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.navigationItem.title <span class=\"operator\">=</span> <span class=\"string\">&quot;注册&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.setupBackButton()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.automaticallyAdjustsScrollViewInsets <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        signupButton.layer.cornerRadius <span class=\"operator\">=</span> <span class=\"number\">35.0</span> <span class=\"operator\">/</span> <span class=\"number\">2</span></span><br><span class=\"line\">        signupButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>.colorWithHex(<span class=\"string\">&quot;#15C76D&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().addObserver(<span class=\"keyword\">self</span>, selector: <span class=\"string\">&quot;phoneNumberDidChange:&quot;</span>, name: <span class=\"type\">UITextFieldTextDidChangeNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        sendVerificationCodeButton.setTitleColor(<span class=\"type\">UIColor</span> ( red: <span class=\"number\">0.4</span>, green: <span class=\"number\">0.4</span>, blue: <span class=\"number\">0.4</span>, alpha: <span class=\"number\">1.0</span> ), forState: <span class=\"type\">UIControlState</span>.<span class=\"type\">Disabled</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewWillDisappear</span>(<span class=\"params\">animated</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">NSNotificationCenter</span>.defaultCenter().removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">didReceiveMemoryWarning</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.didReceiveMemoryWarning()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//MARK: - 检测电话号码格式是非正确</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">isPhoneNumberAvailable</span>() -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> phoneNumber <span class=\"operator\">=</span> phoneNumberTextField.text</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mobile <span class=\"operator\">=</span> <span class=\"string\">&quot;^1(3[0-9]|5[0-35-9]|8[025-9])<span class=\"subst\">\\\\</span>d&#123;8&#125;$&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span>  <span class=\"type\">CM</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;^1(34[0-8]|(3[5-9]|5[017-9]|8[278])<span class=\"subst\">\\\\</span>d)<span class=\"subst\">\\\\</span>d&#123;7&#125;$&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span>  <span class=\"type\">CU</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;^1(3[0-2]|5[256]|8[56])<span class=\"subst\">\\\\</span>d&#123;8&#125;$&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span>  <span class=\"type\">CT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;^1((33|53|8[09])[0-9]|349)<span class=\"subst\">\\\\</span>d&#123;7&#125;$&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> regextestmobile <span class=\"operator\">=</span> <span class=\"type\">NSPredicate</span>(format: <span class=\"string\">&quot;SELF MATCHES %@&quot;</span>,mobile)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> regextestcm <span class=\"operator\">=</span> <span class=\"type\">NSPredicate</span>(format: <span class=\"string\">&quot;SELF MATCHES %@&quot;</span>,<span class=\"type\">CM</span> )</span><br><span class=\"line\">        <span class=\"keyword\">let</span> regextestcu <span class=\"operator\">=</span> <span class=\"type\">NSPredicate</span>(format: <span class=\"string\">&quot;SELF MATCHES %@&quot;</span> ,<span class=\"type\">CU</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> regextestct <span class=\"operator\">=</span> <span class=\"type\">NSPredicate</span>(format: <span class=\"string\">&quot;SELF MATCHES %@&quot;</span> ,<span class=\"type\">CT</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((regextestmobile.evaluateWithObject(phoneNumber) <span class=\"operator\">==</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"operator\">||</span> (regextestcm.evaluateWithObject(phoneNumber)  <span class=\"operator\">==</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"operator\">||</span> (regextestct.evaluateWithObject(phoneNumber) <span class=\"operator\">==</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">            <span class=\"operator\">||</span> (regextestcu.evaluateWithObject(phoneNumber) <span class=\"operator\">==</span> <span class=\"literal\">true</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//MARK: - 检测电话号码是否正确更改发送验证码状态</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">phoneNumberDidChange</span>(<span class=\"params\">aNotification</span>: <span class=\"type\">NSNotification</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> phoneNumberTextField.isFirstResponder() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isPhoneNumberAvailable() &#123;</span><br><span class=\"line\">                sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">Color</span>.colorWithHex(<span class=\"string\">&quot;#15C76D&quot;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.sendVerificationCodeButton.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>.lightGrayColor()</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.sendVerificationCodeButton.titleLabel<span class=\"operator\">?</span>.text <span class=\"operator\">=</span> <span class=\"string\">&quot;发送验证码&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//MARK: -</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">countDownTick</span>() &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> count <span class=\"operator\">==</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            myTimer<span class=\"operator\">?</span>.invalidate()</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sendVerificationCodeButton.enabled <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.sendVerificationCodeButton.setTitle(<span class=\"string\">&quot;发送验证码&quot;</span>, forState: <span class=\"type\">UIControlState</span>.<span class=\"type\">Normal</span>)</span><br><span class=\"line\">            count <span class=\"operator\">=</span> <span class=\"number\">61</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        count<span class=\"operator\">--</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.sendVerificationCodeButton.setTitle(<span class=\"string\">&quot;<span class=\"subst\">\\(count)</span>秒后重发&quot;</span>, forState: <span class=\"type\">UIControlState</span>.<span class=\"type\">Disabled</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Core Animation Essentials - Notes","url":"/2016/03/16/Core-Animation-Essentials-Notes/","content":"<p>Core Animation Essentials (WWDC 2011 - Session 421): </p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2011/421/\">https://developer.apple.com/videos/play/wwdc2011/421/</a></p>\n<p>Animations Explained:</p>\n<p><a href=\"https://www.objc.io/issues/12-animations/animations-explained/#a-basic-animation\">https://www.objc.io/issues/12-animations/animations-explained/#a-basic-animation</a></p>\n<p>According above two documents，write code again by myself. </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> QuartzCore</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> layer <span class=\"operator\">=</span> <span class=\"type\">CALayer</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.addImageLayer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addImageLayer</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        layer.bounds <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span>, width: <span class=\"number\">25</span>, height: <span class=\"number\">25</span>)</span><br><span class=\"line\">        layer.position <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>(named: <span class=\"string\">&quot;yanFei&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">        layer.contents <span class=\"operator\">=</span> image.<span class=\"type\">CGImage</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.view.layer.addSublayer(layer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">stopButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">firstButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        layer.opacity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">secendButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Just disable current run loop transaction</span></span><br><span class=\"line\"><span class=\"comment\">//        CATransaction.setDisableActions(true)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CATransaction</span>.setAnimationDuration(<span class=\"number\">2</span>)</span><br><span class=\"line\">        layer.opacity <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        layer.position <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">400</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">thirdButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">CATransaction</span>.setAnimationDuration(<span class=\"number\">5</span>)</span><br><span class=\"line\">        layer.position <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">0</span>, y: <span class=\"type\">UIScreen</span>.mainScreen().bounds.height)</span><br><span class=\"line\">        layer.opacity <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">fourthButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        layer.position <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: layer.position.x, y: <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> drop <span class=\"operator\">=</span> <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">&quot;position.y&quot;</span>)</span><br><span class=\"line\">        drop.fromValue <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">        drop.toValue <span class=\"operator\">=</span> <span class=\"number\">400</span></span><br><span class=\"line\">        drop.duration <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">        drop.delegate <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\"><span class=\"comment\">//        drop.beginTime = CACurrentMediaTime() + 0.5</span></span><br><span class=\"line\">        layer.addAnimation(drop, forKey: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">fivethButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> shake <span class=\"operator\">=</span> <span class=\"type\">CAKeyframeAnimation</span>(keyPath: <span class=\"string\">&quot;position.x&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// values or path</span></span><br><span class=\"line\">        shake.values <span class=\"operator\">=</span> [<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"operator\">-</span><span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">        shake.keyTimes <span class=\"operator\">=</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"operator\">/</span> <span class=\"number\">6.0</span>, <span class=\"number\">3</span> <span class=\"operator\">/</span> <span class=\"number\">6.0</span>, <span class=\"number\">5</span> <span class=\"operator\">/</span> <span class=\"number\">6.0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">        shake.duration <span class=\"operator\">=</span> <span class=\"number\">0.4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        shake.additive <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        shake.delegate <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\"></span><br><span class=\"line\">        layer.addAnimation(shake, forKey: <span class=\"string\">&quot;shake&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">sixthButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> boundingRect <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"operator\">-</span><span class=\"number\">50</span>, y: <span class=\"operator\">-</span><span class=\"number\">50</span>, width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> orbit <span class=\"operator\">=</span> <span class=\"type\">CAKeyframeAnimation</span>(keyPath: <span class=\"string\">&quot;position&quot;</span>)</span><br><span class=\"line\">        orbit.path <span class=\"operator\">=</span> <span class=\"type\">CGPathCreateWithEllipseInRect</span>(boundingRect, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        orbit.duration <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\">        orbit.additive <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        orbit.repeatCount <span class=\"operator\">=</span> <span class=\"type\">Float</span>.infinity</span><br><span class=\"line\">        orbit.calculationMode <span class=\"operator\">=</span> kCAAnimationPaced</span><br><span class=\"line\">        orbit.rotationMode <span class=\"operator\">=</span> kCAAnimationRotateAuto</span><br><span class=\"line\"></span><br><span class=\"line\">        layer.addAnimation(orbit, forKey: <span class=\"string\">&quot;orbit&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">seventhButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        layer.position <span class=\"operator\">=</span> <span class=\"type\">CGPoint</span>(x: <span class=\"number\">300</span>, y: layer.position.y)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> timing <span class=\"operator\">=</span> <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">&quot;position.x&quot;</span>)</span><br><span class=\"line\">        timing.fromValue <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">        timing.toValue <span class=\"operator\">=</span> <span class=\"number\">300</span></span><br><span class=\"line\">        timing.duration <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        timing.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)</span></span><br><span class=\"line\">        timing.timingFunction <span class=\"operator\">=</span> <span class=\"type\">CAMediaTimingFunction</span>(controlPoints: <span class=\"number\">0.5</span>, <span class=\"number\">0</span>, <span class=\"number\">0.9</span>, <span class=\"number\">0.7</span>)</span><br><span class=\"line\">        layer.addAnimation(timing, forKey: <span class=\"string\">&quot;timing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">eighthButtonClick</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> zPosistion <span class=\"operator\">=</span> <span class=\"type\">CABasicAnimation</span>(keyPath: <span class=\"string\">&quot;zPosition&quot;</span>)</span><br><span class=\"line\">        zPosistion.fromValue <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">1</span></span><br><span class=\"line\">        zPosistion.toValue <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        zPosistion.duration <span class=\"operator\">=</span> <span class=\"number\">1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> rotation <span class=\"operator\">=</span> <span class=\"type\">CAKeyframeAnimation</span>(keyPath: <span class=\"string\">&quot;transform.rotation&quot;</span>)</span><br><span class=\"line\">        rotation.values <span class=\"operator\">=</span> [<span class=\"number\">0</span>, <span class=\"number\">0.14</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">        rotation.duration <span class=\"operator\">=</span> <span class=\"number\">1.2</span></span><br><span class=\"line\">        rotation.timingFunctions <span class=\"operator\">=</span> [<span class=\"type\">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseInEaseOut),</span><br><span class=\"line\">            <span class=\"type\">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseInEaseOut)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> position <span class=\"operator\">=</span> <span class=\"type\">CAKeyframeAnimation</span>(keyPath: <span class=\"string\">&quot;position&quot;</span>)</span><br><span class=\"line\">        position.values <span class=\"operator\">=</span> [<span class=\"type\">NSValue</span>(CGPoint: <span class=\"type\">CGPointZero</span>), <span class=\"type\">NSValue</span>(CGPoint: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">110</span>, y: <span class=\"operator\">-</span><span class=\"number\">20</span>)), <span class=\"type\">NSValue</span>(CGPoint: <span class=\"type\">CGPointZero</span>)]</span><br><span class=\"line\">        position.timingFunctions <span class=\"operator\">=</span> [<span class=\"type\">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseInEaseOut),</span><br><span class=\"line\">            <span class=\"type\">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseInEaseOut)]</span><br><span class=\"line\">        position.duration <span class=\"operator\">=</span> <span class=\"number\">1.2</span></span><br><span class=\"line\">        position.additive <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> group <span class=\"operator\">=</span> <span class=\"type\">CAAnimationGroup</span>()</span><br><span class=\"line\">        group.animations <span class=\"operator\">=</span> [zPosistion, rotation, position]</span><br><span class=\"line\">        group.duration <span class=\"operator\">=</span> <span class=\"number\">1.2</span></span><br><span class=\"line\">        group.beginTime <span class=\"operator\">=</span> <span class=\"type\">CACurrentMediaTime</span>() <span class=\"operator\">+</span> <span class=\"number\">0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        layer.addAnimation(group, forKey: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        layer.zPosition <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">ViewController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">animationDidStart</span>(<span class=\"params\">anim</span>: <span class=\"type\">CAAnimation</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(anim)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">animationDidStop</span>(<span class=\"params\">anim</span>: <span class=\"type\">CAAnimation</span>, <span class=\"params\">finished</span> <span class=\"params\">flag</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(anim)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Demo link:<br><a href=\"https://github.com/gewill/test-projects/tree/master/test%20Core%20Animation\">https://github.com/gewill/test-projects/tree/master/test%20Core%20Animation</a></p>\n"},{"title":"Core Data - Notes","url":"/2016/04/28/Core-Data-Notes/","content":"<p>最近项目写 Core Data 感觉之前的看过零碎的知识忘记的差不多了，又遇到异步处理的问题。重新看了一些资料，总结了一些要点如下。</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p> Core Data 是一个 对象图管理和存储框架。简单明确的属性和关系以及获取，都已封装好。不管底层数据库的实现，开发者只需关心数据和获取就行了。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p>图形化编辑器：xcdatamodel </p>\n<p>managed object model ：</p>\n<ul>\n<li>属性支持 NSData：Binary Data 和符合 NSCoding protocol 的类型：Transformable</li>\n<li>关系建议采取 inverse</li>\n<li>关系一对多和一对一，其中有有序和无序的一对多的关系，分别为 NSSet 和 NSOrderedSet，具体可以参考这样文章</li>\n</ul>\n<p>Core Data and Swift: Relationships and More Fetching ：<br><a href=\"http://code.tutsplus.com/tutorials/core-data-and-swift-relationships-and-more-fetching--cms-25070\">http://code.tutsplus.com/tutorials/core-data-and-swift-relationships-and-more-fetching--cms-25070\n</a> </p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p>  Core Data Stack 涉及四个类：</p>\n<ul>\n<li>NSManagedObjectModel</li>\n<li>NSPersistentStore</li>\n<li>NSPersistentStoreCoordinator</li>\n<li>NSManagedObjectContext</li>\n</ul>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p>NSManagedObjectContext：</p>\n<ul>\n<li>内存寄存器来处理 managed objects</li>\n<li>记得 save()</li>\n<li>掌管 managed objects 生命周期包括创建和获取</li>\n<li>managed object 不能独立于 context 存在</li>\n<li>context 具有领域性，一旦一个 managed object 被管理在一个 context ，将会在其整个生命周期绑定该 context</li>\n<li>支持多个 context</li>\n<li><strong>context 不是线程安全的</strong></li>\n</ul>\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h2><p>如何配置 Core Data Stack：</p>\n<p>其中 lazy、try catch 等技术细节不用多解释，后面在介绍多个 context 和异步处理的线程安全问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CoreData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CoreDataStack</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> modelName <span class=\"operator\">=</span> <span class=\"string\">&quot;Dog Walk&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> context: <span class=\"type\">NSManagedObjectContext</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> managedObjectContext <span class=\"operator\">=</span> <span class=\"type\">NSManagedObjectContext</span>(</span><br><span class=\"line\">      concurrencyType: .<span class=\"type\">MainQueueConcurrencyType</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    managedObjectContext.persistentStoreCoordinator <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.psc</span><br><span class=\"line\">    <span class=\"keyword\">return</span> managedObjectContext</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> psc: <span class=\"type\">NSPersistentStoreCoordinator</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> coordinator <span class=\"operator\">=</span> <span class=\"type\">NSPersistentStoreCoordinator</span>(</span><br><span class=\"line\">      managedObjectModel: <span class=\"keyword\">self</span>.managedObjectModel)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.applicationDocumentsDirectory</span><br><span class=\"line\">      .<span class=\"type\">URLByAppendingPathComponent</span>(<span class=\"keyword\">self</span>.modelName)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> options <span class=\"operator\">=</span></span><br><span class=\"line\">      [<span class=\"type\">NSMigratePersistentStoresAutomaticallyOption</span> : <span class=\"literal\">true</span>]</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">try</span> coordinator.addPersistentStoreWithType(</span><br><span class=\"line\">        <span class=\"type\">NSSQLiteStoreType</span>, configuration: <span class=\"literal\">nil</span>, URL: url,</span><br><span class=\"line\">        options: options)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error adding persistent store.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> managedObjectModel: <span class=\"type\">NSManagedObjectModel</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> modelURL <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle()</span><br><span class=\"line\">      .<span class=\"type\">URLForResource</span>(<span class=\"keyword\">self</span>.modelName,</span><br><span class=\"line\">        withExtension: <span class=\"string\">&quot;momd&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">NSManagedObjectModel</span>(contentsOfURL: modelURL)<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> applicationDocumentsDirectory: <span class=\"type\">NSURL</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> urls <span class=\"operator\">=</span> <span class=\"type\">NSFileManager</span>.defaultManager().<span class=\"type\">URLsForDirectory</span>(</span><br><span class=\"line\">      .<span class=\"type\">DocumentDirectory</span>, inDomains: .<span class=\"type\">UserDomainMask</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urls[urls.count<span class=\"operator\">-</span><span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">saveContext</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> context.hasChanges &#123;</span><br><span class=\"line\">      <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> context.save()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error: <span class=\"subst\">\\(error.localizedDescription)</span>&quot;</span>)</span><br><span class=\"line\">        abort()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h2><p>Fetch</p>\n<ul>\n<li>NSManagedObjectResultType: 默认值，返回 managed objects </li>\n<li>NSCountResultType: 返回 count</li>\n<li>NSDictionaryResultType:  返回一个计算后值，如 sum。详细用法可以看文档 NSExpression</li>\n<li>NSManagedObjectIDResultType:</li>\n</ul>\n<p>从性能优化的角度，可以考虑时候后面的几个类型。<br>iOS8异步fetch：NSAsynchronousFetchRequest、批量更新&#x2F;删除属性</p>\n<h2 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7.\"></a>7.</h2><p>fetched results controller 可以帮助我们处理 core data 和 table view datasource，可以简单的看成专用的 datasource。</p>\n<p>记得添加 cacheName</p>\n<h2 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8.\"></a>8.</h2><p>后台处理使用 context PrivateQueueConcurrencyType，默认使用 MainQueueConcurrencyType，尤其设计 UI。</p>\n<p>可以使用 child context，先保存 child context 至 内存寄存器，一直到 parent context 保存后，才会保存至硬盘。</p>\n<p>这里就涉及一个好的实践：有多个 context 总是调用 performBlock 来保证安全。</p>\n<p>下面是一个 private context 后台处理，回到主线程的实践：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> privateContext <span class=\"operator\">=</span> <span class=\"type\">NSManagedObjectContext</span>(</span><br><span class=\"line\">    concurrencyType: .<span class=\"type\">PrivateQueueConcurrencyType</span>)</span><br><span class=\"line\">privateContext.persistentStoreCoordinator <span class=\"operator\">=</span></span><br><span class=\"line\">    coreDataStack.context.persistentStoreCoordinator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">privateContext.performBlock &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> results: [<span class=\"type\">AnyObject</span>]</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        results <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"keyword\">self</span>.coreDataStack.context</span><br><span class=\"line\">            .executeFetchRequest(<span class=\"keyword\">self</span>.surfJournalFetchRequest())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nserror <span class=\"operator\">=</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ERROR: <span class=\"subst\">\\(nserror)</span>&quot;</span>)</span><br><span class=\"line\">        results <span class=\"operator\">=</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> exportFilePath <span class=\"operator\">=</span></span><br><span class=\"line\">        <span class=\"type\">NSTemporaryDirectory</span>() <span class=\"operator\">+</span> <span class=\"string\">&quot;export.csv&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> exportFileURL <span class=\"operator\">=</span> <span class=\"type\">NSURL</span>(fileURLWithPath: exportFilePath)</span><br><span class=\"line\">    <span class=\"type\">NSFileManager</span>.defaultManager().createFileAtPath(</span><br><span class=\"line\">        exportFilePath, contents: <span class=\"type\">NSData</span>(), attributes: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileHandle: <span class=\"type\">NSFileHandle</span>?</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        fileHandle <span class=\"operator\">=</span> <span class=\"keyword\">try</span> <span class=\"type\">NSFileHandle</span>(forWritingToURL: exportFileURL)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nserror <span class=\"operator\">=</span> error <span class=\"keyword\">as</span> <span class=\"type\">NSError</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ERROR: <span class=\"subst\">\\(nserror)</span>&quot;</span>)</span><br><span class=\"line\">        fileHandle <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> fileHandle <span class=\"operator\">=</span> fileHandle &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 4</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> object <span class=\"keyword\">in</span> results &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> journalEntry <span class=\"operator\">=</span> object <span class=\"keyword\">as!</span> <span class=\"type\">JournalEntry</span></span><br><span class=\"line\"></span><br><span class=\"line\">            fileHandle.seekToEndOfFile()</span><br><span class=\"line\">            <span class=\"keyword\">let</span> csvData <span class=\"operator\">=</span> journalEntry.csv().dataUsingEncoding(</span><br><span class=\"line\">                <span class=\"type\">NSUTF8StringEncoding</span>, allowLossyConversion: <span class=\"literal\">false</span>)</span><br><span class=\"line\">            fileHandle.writeData(csvData<span class=\"operator\">!</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5</span></span><br><span class=\"line\">        fileHandle.closeFile()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4</span></span><br><span class=\"line\">        dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.exportBarButtonItem()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Export Path: <span class=\"subst\">\\(exportFilePath)</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showExportFinishedAlertView(exportFilePath)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dispatch_async(dispatch_get_main_queue(), &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.navigationItem.leftBarButtonItem <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.exportBarButtonItem()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// 5 Closing brace for performBlock()</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-参考资料\"><a href=\"#9-参考资料\" class=\"headerlink\" title=\"9. 参考资料\"></a>9. 参考资料</h2><ul>\n<li>走进Core Data的世界：<br>  <a href=\"http://liuduo.me/2016/03/12/gointocoredata/\">http://liuduo.me/2016/03/12/gointocoredata/</a></li>\n<li>Core Data by Tutorials:<br>   <a href=\"https://www.raywenderlich.com/store/core-data-by-tutorials\">https://www.raywenderlich.com/store/core-data-by-tutorials\n</a></li>\n</ul>\n"},{"title":"Custom UIView","url":"/2016/03/29/Custom-UIView/","content":"<p>最近项目需要自定义一个 UIView，虽然不是第一次做，但是还是出现了很多问题，其中最严重是的获取的 self.bounds 是不对。</p>\n<p>Debug 能力真的需要提高了，调试了很久，还是靠断点，逐个对比 bounds 才知道问题所在。</p>\n<p><a href=\"http://stackoverflow.com/questions/29763818/making-a-custom-uiview-subview-that-fills-its-superview\">http://stackoverflow.com/questions/29763818/making-a-custom-uiview-subview-that-fills-its-superview</a></p>\n<p>这一篇解释的很清楚，我自己混淆了几种方法的使用，还忘记了手动设置 frame 时，还忘了layoutSubviews()。以前可能是宽高确定或根据 UIScreen 来的计算的，一直没出现问题。</p>\n<ol>\n<li>Use Auto Layout<ul>\n<li>Interface Builder</li>\n<li>Programmatically</li>\n</ul>\n</li>\n<li>Manual Layout<ul>\n<li>Resizing Masks</li>\n<li>Layout Subviews</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">    setupViews()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">required</span> <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span> <span class=\"params\">aDecoder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</span><br><span class=\"line\">    setupViews()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">setupViews</span>() &#123;</span><br><span class=\"line\">   \t        </span><br><span class=\"line\">    <span class=\"keyword\">let</span> view <span class=\"operator\">=</span> <span class=\"type\">UIView</span>(frame: <span class=\"type\">CGRectZero</span>)</span><br><span class=\"line\">    view.setTranslatesAutoresizingMaskIntoConstraints(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> viewsDict <span class=\"operator\">=</span> [<span class=\"string\">&quot;view&quot;</span>: view]</span><br><span class=\"line\">    addConstraints(<span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;V:|-0-[view]-0-|&quot;</span>, options: .allZeros, metrics: <span class=\"literal\">nil</span>, views: viewsDict))</span><br><span class=\"line\">    addConstraints(<span class=\"type\">NSLayoutConstraint</span>.constraintsWithVisualFormat(<span class=\"string\">&quot;H:|-0-[view]-0-|&quot;</span>, options: .allZeros, metrics: <span class=\"literal\">nil</span>, views: viewsDict))</span><br><span class=\"line\">    addSubview(view)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>viewDidLoad 时获取的size 可能是错误的。</p>\n<blockquote>\n<p>viewDidLoad</p>\n</blockquote>\n<blockquote>\n<p>The view controller has obtained its view. See the discussion earlier in this chapter of how a view controller gets its view. Recall that this does not mean that the view is in the interface or even that it has been given its correct size.</p>\n</blockquote>\n"},{"title":"黑苹果用USBToolBox定制USB","url":"/2022/12/14/Custom-USB-for-hackintosh-by-USBToolBox/","content":"<blockquote>\n<p>参考<a href=\"https://space.bilibili.com/16323318\">大头蔡Cass</a>的教程<a href=\"https://www.bilibili.com/video/BV1m3411b7JP\">【黑苹果】全新的定制USB教程</a> ，<a href=\"https://www.bilibili.com/video/BV1yv4y1X7Jq/\">「黑苹果」USB定制补充内容，该选择哪种USB定制方式？</a> 感谢🙏。</p>\n</blockquote>\n<h1 id=\"Windows下步骤\"><a href=\"#Windows下步骤\" class=\"headerlink\" title=\"Windows下步骤\"></a>Windows下步骤</h1><h2 id=\"运行USBToolBox\"><a href=\"#运行USBToolBox\" class=\"headerlink\" title=\"运行USBToolBox\"></a>运行USBToolBox</h2><p>下载地址：<a href=\"https://github.com/USBToolBox/tool\">https://github.com/USBToolBox/tool</a> ，<a href=\"https://github.com/USBToolBox/kext\">https://github.com/USBToolBox/kext</a> 。</p>\n<p> <img src=\"https://gewill.org/assets/Custom-USB-for-hackintosh-by-USBToolBox/USBToolBox-main.png\" alt=\"USBToolBox-main\"></p>\n<p>D：插拔USB2和USB3等设备</p>\n<p> <img src=\"https://gewill.org/assets/Custom-USB-for-hackintosh-by-USBToolBox/USBToolBox-Port-Discovery.png\" alt=\"USBToolBox-Port-Discovery\"></p>\n<p>S：生成<code>UTBMap.kext</code></p>\n<h2 id=\"修改UTBMap-kext\"><a href=\"#修改UTBMap-kext\" class=\"headerlink\" title=\"修改UTBMap.kext\"></a>修改<code>UTBMap.kext</code></h2><p>如果超过15个需要删除多余的，主要这里填写<code>ports</code>的最大值。</p>\n<p><img src=\"https://gewill.org/assets/Custom-USB-for-hackintosh-by-USBToolBox/UTBMap.png\" alt=\"UTBMap\"> </p>\n<p>生成<code>UTBMap.kext</code>和下载<code>USBToolBox.kext</code>导入EFI，启动macOS</p>\n<h1 id=\"macOS下步骤\"><a href=\"#macOS下步骤\" class=\"headerlink\" title=\"macOS下步骤\"></a>macOS下步骤</h1><h2 id=\"Hackintool生成USBPorts-kext\"><a href=\"#Hackintool生成USBPorts-kext\" class=\"headerlink\" title=\"Hackintool生成USBPorts.kext\"></a>Hackintool生成<code>USBPorts.kext</code></h2><p>对应HS设置USB2，SS设置USB，导出<code>USBPorts.kext</code>。</p>\n<p> <strong>特别需要主要的是<code>Name</code>中数字后缀，不是<code>port</code>。</strong><img src=\"https://gewill.org/assets/Custom-USB-for-hackintosh-by-USBToolBox/Hackintool.png\" alt=\"Hackintool\"></p>\n<h2 id=\"USBPorts-kext导入EFI\"><a href=\"#USBPorts-kext导入EFI\" class=\"headerlink\" title=\"USBPorts.kext导入EFI\"></a><code>USBPorts.kext</code>导入EFI</h2><p>使用OCAuxiliaryTools，生成的<code>USBPorts.kext</code>导入EFI，并关闭<code>UTBMap.kext</code>和<code>USBToolBox.kext</code>，重启验证。</p>\n<p><img src=\"https://gewill.org/assets/Custom-USB-for-hackintosh-by-USBToolBox/OCAuxiliaryTools.png\" alt=\"OCAuxiliaryTools\"></p>\n","tags":["黑苹果"]},{"title":"在tvOS上使用PrimitiveButtonStyle自定义按钮样式","url":"/2022/12/14/Custom-button-style-use-PrimitiveButtonStyle-on-tvOS/","content":"<p>tvOS上<code>.frame</code>只能修改<code>label</code>，而非<code>button</code>。通过自定义PrimitiveButtonStyle，可以自由修改button。tvOS还需要手动处理<code>@FocusState</code>。</p>\n<p>下面例子就是写一个固定大小的按钮样式，这样就不会因为文字或者图片大小而产生差异。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FixedSizeButtonStyle</span>: <span class=\"title class_\">PrimitiveButtonStyle</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@FocusState</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isFocused: <span class=\"type\">Bool</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> size: <span class=\"type\">CGSize</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cornerRadius: <span class=\"type\">CGFloat</span> </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">makeBody</span>(<span class=\"params\">configuration</span>: <span class=\"type\">Configuration</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    configuration.label</span><br><span class=\"line\">      .frame(width: size.width, height: size.height)</span><br><span class=\"line\">      .foregroundColor(.accentColor)</span><br><span class=\"line\">      .background(</span><br><span class=\"line\">        <span class=\"type\">RoundedRectangle</span>(cornerRadius: cornerRadius, style: .continuous)</span><br><span class=\"line\">          .stroke()</span><br><span class=\"line\">          .foregroundStyle(.linearGradient(colors: [.white.opacity(<span class=\"number\">0.5</span>), .clear, .white.opacity(<span class=\"number\">0.5</span>), .clear], startPoint: .topLeading, endPoint: .bottomTrailing))</span><br><span class=\"line\">      )</span><br><span class=\"line\">      .background(</span><br><span class=\"line\">        <span class=\"type\">RoundedRectangle</span>(cornerRadius: cornerRadius, style: .continuous)</span><br><span class=\"line\">          .fill((isFocused <span class=\"operator\">?</span> <span class=\"type\">Color</span>.white : <span class=\"type\">Color</span>.gray).opacity(<span class=\"number\">0.5</span>).gradient)</span><br><span class=\"line\">      )</span><br><span class=\"line\">      .scaleEffect(isFocused <span class=\"operator\">?</span> <span class=\"number\">1.2</span> : <span class=\"number\">1</span>)</span><br><span class=\"line\">      .animation(.easeOut(duration: <span class=\"number\">0.2</span>), value: isFocused)</span><br><span class=\"line\">      .focusable()</span><br><span class=\"line\">      .focused(<span class=\"variable\">$isFocused</span>)</span><br><span class=\"line\">      .onTapGesture &#123;</span><br><span class=\"line\">        configuration.trigger()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">fixedSizeButtonStyle</span>(<span class=\"params\">size</span>: <span class=\"type\">CGSize</span> <span class=\"operator\">=</span> <span class=\"type\">CGSize</span>(width: <span class=\"number\">122</span>, height: <span class=\"number\">80</span>), <span class=\"params\">cornerRadius</span>: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    buttonStyle(<span class=\"type\">FixedSizeButtonStyle</span>(size: size, cornerRadius: cornerRadius))</span><br><span class=\"line\">      .frame(width: size.width, height: size.height)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n<p><img src=\"https://gewill.org/assets/iPerfman-tv-screenshot2.jpg\" alt=\"iPerfman-tv-screenshot\"></p>\n","tags":["Swift","SwiftUI","tvOS"]},{"title":"Dash 3 Snippets","url":"/2015/08/09/Dash-3-Snippets/","content":"<p>Dash 3 Snippets 全局使用很好很强大，稍后添加一些 Swift 和常用邮箱和用户名。</p>\n<p>下面是打开 MacDown 软件直接开始文章，不用去 Terminal 新建文章。<br>定义为：hexon</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">title: __placeholder__</span><br><span class=\"line\"></span><br><span class=\"line\">date: @date @time</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">@cursor</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Swift数据结构和算法（一）","url":"/2019/08/01/Data-Structures-and-Algorithms-in-Swift-Notes-1/","content":"<h2 id=\"第一部分：引言\"><a href=\"#第一部分：引言\" class=\"headerlink\" title=\"第一部分：引言\"></a>第一部分：引言</h2><h3 id=\"第一章：前言\"><a href=\"#第一章：前言\" class=\"headerlink\" title=\"第一章：前言\"></a>第一章：前言</h3><p>数据结构是一门经过充分研究的学科，其概念与语言无关; 来自C的数据结构在功能上和概念上与任何其他语言中的相同数据结构相同，例如Swift。 与此同时，Swift的高级表现力使其成为学习这些核心概念的理想选择，而不会牺牲太多的性能。</p>\n<p>Swift标准库有一小组通用集合类型; 他们甚至没有涵盖每一个案例。正如您将看到的，这些 原始的类型可以用作构建更复杂和特殊用途构造的一个很好的起点。 了解比标准数组和字典更多的数据结构，您可以使用更多的工具来构建自己的应用程序。</p>\n<h3 id=\"第二章：Swift标准库\"><a href=\"#第二章：Swift标准库\" class=\"headerlink\" title=\"第二章：Swift标准库\"></a>第二章：Swift标准库</h3><p>在开始构建自己的自定义数据结构之前，了解Swift标准库已经提供的主要数据结构非常重要。</p>\n<p>字典缺乏明确的排序劣势，却又带来了一些其他的优点。 与数组不同，字典不需要担心元素的转移。 插入字典总是O(1)。 查找操作也在O(1)时间内完成，这比在需要O(n)扫描的数组中找到特定元素要快得多。</p>\n<h3 id=\"第三章：复杂度\"><a href=\"#第三章：复杂度\" class=\"headerlink\" title=\"第三章：复杂度\"></a>第三章：复杂度</h3><p>常见的时间复杂度和空间复杂度。</p>\n<p>对于计算机，算法的资源是内存。空间复杂度就意味着内存占用率。</p>\n<p><strong>总结</strong></p>\n<ul>\n<li><p>时间复杂度衡量输入大小增加时运行算法所需的时间。</p>\n</li>\n<li><p>空间复杂度衡量算法运行所需的资源。</p>\n</li>\n<li><p>Big O表示法用于表示时间和空间复杂性的一般形式。</p>\n</li>\n<li><p>时间和空间复杂性是可扩展性的高级度量; 它们不测量算法本身的实际速度。</p>\n</li>\n<li><p>对于小型数据集，时间复杂度通常无关紧要。 拟线性算法可能比线性算法慢。</p>\n</li>\n</ul>\n<h2 id=\"第二部分：基本数据类型\"><a href=\"#第二部分：基本数据类型\" class=\"headerlink\" title=\"第二部分：基本数据类型\"></a>第二部分：基本数据类型</h2><h3 id=\"第四章：链表\"><a href=\"#第四章：链表\" class=\"headerlink\" title=\"第四章：链表\"></a>第四章：链表</h3><p>链表是以线性单向序列排列的值的集合。链表比连续存储选项（如Swift数组）具有几个理论上的优势：</p>\n<ul>\n<li>从列表前面插入和删除恒定时间。</li>\n<li>可靠的性能特征。</li>\n</ul>\n<p><img src=\"https://gewill.org/assets/image-20190801154442688.png\" alt=\"image-20190801154442688\"></p>\n<p>如图所示，链表是一系列节点。 节点有两个职责：</p>\n<p>1.保存一个值。</p>\n<p>2.保存对下一个节点的引用。 空表示列表的结尾。<img src=\"https://gewill.org/assets/image-20190801154554314.png\" alt=\"image-20190801154554314\"></p>\n<p>节点</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;<span class=\"title class_\">Value</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> value: <span class=\"type\">Value</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> next: <span class=\"type\">Node</span>?</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">value</span>: <span class=\"type\">Value</span>, <span class=\"params\">next</span>: <span class=\"type\">Node</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> value</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.next <span class=\"operator\">=</span> next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedList</span>&lt;<span class=\"title class_\">Value</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> head: <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;?</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> tail: <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;?</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head <span class=\"operator\">==</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// MARK: - 增加和删除节点的方法</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(1)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>) &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    head <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: value, next: head)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tail <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      tail <span class=\"operator\">=</span> head</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(1)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">append</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>) &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      push(value)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tail<span class=\"operator\">!</span>.next <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: value)</span><br><span class=\"line\">    tail <span class=\"operator\">=</span> tail<span class=\"operator\">!</span>.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(i) , i 就是给定的index</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">node</span>(<span class=\"params\">at</span> <span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentNode <span class=\"operator\">=</span> head</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentIndex <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> currentNode <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"operator\">&amp;&amp;</span> currentIndex <span class=\"operator\">&lt;</span> index &#123;</span><br><span class=\"line\">      currentNode <span class=\"operator\">=</span> currentNode<span class=\"operator\">!</span>.next</span><br><span class=\"line\">      currentIndex <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(1)</span></span><br><span class=\"line\">  <span class=\"keyword\">@discardableResult</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">insert</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>, <span class=\"params\">after</span> <span class=\"params\">node</span>: <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt; &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> tail <span class=\"operator\">!==</span> node <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      append(value)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tail<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.next <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: value, next: node.next)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.next<span class=\"operator\">!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(1)  </span></span><br><span class=\"line\">  <span class=\"keyword\">@discardableResult</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>() -&gt; <span class=\"type\">Value</span>? &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">      head <span class=\"operator\">=</span> head<span class=\"operator\">?</span>.next</span><br><span class=\"line\">      <span class=\"keyword\">if</span> isEmpty &#123;</span><br><span class=\"line\">        tail <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head<span class=\"operator\">?</span>.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(n)</span></span><br><span class=\"line\">  <span class=\"keyword\">@discardableResult</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">removeLast</span>() -&gt; <span class=\"type\">Value</span>? &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> head <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> head.next <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prev <span class=\"operator\">=</span> head</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current <span class=\"operator\">=</span> head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> next <span class=\"operator\">=</span> current.next &#123;</span><br><span class=\"line\">      prev <span class=\"operator\">=</span> current</span><br><span class=\"line\">      current <span class=\"operator\">=</span> next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prev.next <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    tail <span class=\"operator\">=</span> prev</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 时间复杂度：O(1)  </span></span><br><span class=\"line\">  <span class=\"keyword\">@discardableResult</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">remove</span>(<span class=\"params\">after</span> <span class=\"params\">node</span>: <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;) -&gt; <span class=\"type\">Value</span>? &#123;</span><br><span class=\"line\">    copyNodes()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> node.next <span class=\"operator\">===</span> tail &#123;</span><br><span class=\"line\">        tail <span class=\"operator\">=</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.next <span class=\"operator\">=</span> node.next<span class=\"operator\">?</span>.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.next<span class=\"operator\">?</span>.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// MARK: - 实现值类型和写入时复制</span></span><br><span class=\"line\">  <span class=\"comment\">//使用COW实现价值语义的策略非常简单。在改变链接列表的内容之前，您希望执行底层存储的副本并将所有引用（头部和尾部）更新为新副本。</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">copyNodes</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"operator\">!</span><span class=\"built_in\">isKnownUniquelyReferenced</span>(<span class=\"operator\">&amp;</span>head) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">var</span> oldNode <span class=\"operator\">=</span> head <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    head <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: oldNode.value)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newNode <span class=\"operator\">=</span> head</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> nextOldNode <span class=\"operator\">=</span> oldNode.next &#123;</span><br><span class=\"line\">      newNode<span class=\"operator\">!</span>.next <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: nextOldNode.value)</span><br><span class=\"line\">      newNode <span class=\"operator\">=</span> newNode<span class=\"operator\">!</span>.next</span><br><span class=\"line\">      oldNode <span class=\"operator\">=</span> nextOldNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    tail <span class=\"operator\">=</span> newNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK: - 实现Swift的Collection协议</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Swift Collection还允许通过下标进行访问，这是一个很好的术语，用于表示索引可以映射到集合中的值。</span></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">LinkedList</span>: <span class=\"title class_\">Collection</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Index</span>: <span class=\"title class_\">Comparable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> node: <span class=\"type\">Node</span>&lt;<span class=\"type\">Value</span>&gt;?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">==</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Index</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (lhs.node, rhs.node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (left<span class=\"operator\">?</span>, right<span class=\"operator\">?</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.next <span class=\"operator\">===</span> right.next</span><br><span class=\"line\">      <span class=\"keyword\">case</span> (<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">&lt;</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Index</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">guard</span> lhs <span class=\"operator\">!=</span> rhs <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> nodes <span class=\"operator\">=</span> <span class=\"built_in\">sequence</span>(first: lhs.node) &#123; <span class=\"variable\">$0</span><span class=\"operator\">?</span>.next &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nodes.contains &#123; <span class=\"variable\">$0</span> <span class=\"operator\">===</span> rhs.node &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> startIndex: <span class=\"type\">Index</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Index</span>(node: head)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> endIndex: <span class=\"type\">Index</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Index</span>(node: tail<span class=\"operator\">?</span>.next)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">index</span>(<span class=\"params\">after</span> <span class=\"params\">i</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Index</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Index</span>(node: i.node<span class=\"operator\">?</span>.next)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">subscript</span>(<span class=\"params\">position</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Value</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> position.node<span class=\"operator\">!</span>.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>关键点</strong></p>\n<ul>\n<li>链接列表是线性和单向的。 只要将引用从一个节点移动到另一个节点，就无法返回。</li>\n<li>链接列表的头部第一次插入具有O(1)时间复杂度。 对于头部第一次插入，数组有O(n)时间复杂度。</li>\n<li>符合Swift收集协议（如序列和集合），可为相当少的要求提供一系列有用的方法。</li>\n<li>写时复制行为使您可以实现值语义。</li>\n</ul>\n<h3 id=\"第五章：链表挑战\"><a href=\"#第五章：链表挑战\" class=\"headerlink\" title=\"第五章：链表挑战\"></a>第五章：链表挑战</h3><h4 id=\"逆序打印所有节点元素\"><a href=\"#逆序打印所有节点元素\" class=\"headerlink\" title=\"逆序打印所有节点元素\"></a>逆序打印所有节点元素</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printInReverse</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">list</span>: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//巧妙的递归：先迭代后打印，这样打印的就是逆序了</span></span><br><span class=\"line\">  printInReverse(list.head)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">printInReverse</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">node</span>: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> node <span class=\"operator\">=</span> node <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">  printInReverse(node.next)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(node.value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取中间节点\"><a href=\"#取中间节点\" class=\"headerlink\" title=\"取中间节点\"></a>取中间节点</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getMiddle</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">list</span>: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;) -&gt; <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;? &#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//两个步长差一倍，这样快的遍历到终点，慢的刚好到中间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fast <span class=\"operator\">=</span> list.head</span><br><span class=\"line\">    <span class=\"keyword\">var</span> slow <span class=\"operator\">=</span> list.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> nextFast <span class=\"operator\">=</span> fast<span class=\"operator\">?</span>.next &#123;</span><br><span class=\"line\">        fast <span class=\"operator\">=</span> nextFast.next</span><br><span class=\"line\">        slow <span class=\"operator\">=</span> slow<span class=\"operator\">?</span>.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不断的分割链表，从头部开始，下一步时把之前分割的节点拼接在新的节点之后。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如此遍历到底，就实现了逆序。</span></span><br><span class=\"line\">    <span class=\"comment\">// 核心思路：把每个节点的前节点变成后节点，同时通过遍历时分割成2~3个分段。</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">reverse</span>() &#123;</span><br><span class=\"line\">        tail <span class=\"operator\">=</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> current <span class=\"operator\">=</span> head<span class=\"operator\">?</span>.next</span><br><span class=\"line\">        <span class=\"comment\">//  临时存储逆序的链表</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> prev <span class=\"operator\">=</span> head</span><br><span class=\"line\">        prev<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> current <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> next <span class=\"operator\">=</span> current<span class=\"operator\">?</span>.next</span><br><span class=\"line\">            current<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> prev</span><br><span class=\"line\">            prev <span class=\"operator\">=</span> current</span><br><span class=\"line\">            current <span class=\"operator\">=</span> next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        head <span class=\"operator\">=</span> prev</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并两个已经排序好的链表\"><a href=\"#合并两个已经排序好的链表\" class=\"headerlink\" title=\"合并两个已经排序好的链表\"></a>合并两个已经排序好的链表</h4><p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// list1 1 -&gt; 4 -&gt; 10 -&gt; 11</span><br><span class=\"line\"></span><br><span class=\"line\">// list2 -1 -&gt; 2 -&gt; 3 -&gt; 6</span><br><span class=\"line\"></span><br><span class=\"line\">// merged list -1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; 10 -&gt; 11</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">mergeSorted</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">Comparable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">left</span>: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;,</span><br><span class=\"line\">                                <span class=\"keyword\">_</span> <span class=\"params\">right</span>: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;) -&gt; <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>left.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>right.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义新的链表的首尾</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newHead: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tail: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原有链表的游标，后面以此遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentLeft <span class=\"operator\">=</span> left.head</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentRight <span class=\"operator\">=</span> right.head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始设置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> leftNode <span class=\"operator\">=</span> currentLeft, <span class=\"keyword\">let</span> rightNode <span class=\"operator\">=</span> currentRight &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> leftNode.value <span class=\"operator\">&lt;</span> rightNode.value &#123;</span><br><span class=\"line\">            newHead <span class=\"operator\">=</span> leftNode</span><br><span class=\"line\">            currentLeft <span class=\"operator\">=</span> leftNode.next</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newHead <span class=\"operator\">=</span> rightNode</span><br><span class=\"line\">            currentRight <span class=\"operator\">=</span> rightNode.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail <span class=\"operator\">=</span> newHead</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> leftNode <span class=\"operator\">=</span> currentLeft, <span class=\"keyword\">let</span> rightNode <span class=\"operator\">=</span> currentRight &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> leftNode.value <span class=\"operator\">&lt;</span> rightNode.value &#123;</span><br><span class=\"line\">            tail<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> leftNode</span><br><span class=\"line\">            currentLeft <span class=\"operator\">=</span> leftNode.next</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tail<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> rightNode</span><br><span class=\"line\">            currentRight <span class=\"operator\">=</span> rightNode.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail <span class=\"operator\">=</span> tail<span class=\"operator\">?</span>.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> leftNode <span class=\"operator\">=</span> currentLeft &#123;</span><br><span class=\"line\">        tail<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> leftNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> rightNode <span class=\"operator\">=</span> currentRight &#123;</span><br><span class=\"line\">        tail<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> rightNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理新的链表的首尾</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> list <span class=\"operator\">=</span> <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    list.head <span class=\"operator\">=</span> newHead</span><br><span class=\"line\">    <span class=\"comment\">// 找到真的尾部节点</span></span><br><span class=\"line\">    list.tail <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> next <span class=\"operator\">=</span> tail<span class=\"operator\">?</span>.next &#123;</span><br><span class=\"line\">            tail <span class=\"operator\">=</span> next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tail</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个从链表中删除所有特定元素的函数\"><a href=\"#创建一个从链表中删除所有特定元素的函数\" class=\"headerlink\" title=\"创建一个从链表中删除所有特定元素的函数\"></a>创建一个从链表中删除所有特定元素的函数</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">LinkedList</span> <span class=\"title class_\">where</span> <span class=\"title class_\">Value</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">removeAll</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 头部的值相等时单独处理</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.head, head.value <span class=\"operator\">==</span> value &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.head <span class=\"operator\">=</span> head.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> current <span class=\"operator\">=</span> head<span class=\"operator\">?</span>.next</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prev <span class=\"operator\">=</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> currentNode <span class=\"operator\">=</span> current &#123;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> currentNode.value <span class=\"operator\">!=</span> value <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                prev<span class=\"operator\">?</span>.next <span class=\"operator\">=</span> currentNode.next</span><br><span class=\"line\">                current <span class=\"operator\">=</span> prev<span class=\"operator\">?</span>.next</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            prev <span class=\"operator\">=</span> current</span><br><span class=\"line\">            current <span class=\"operator\">=</span> current<span class=\"operator\">?</span>.next</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tail <span class=\"operator\">=</span> prev</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在时间复杂度上优化，所以一般都是2~3个临时变量（牺牲一点空间复杂度）。相当于让更多人协同做一件事情，肯定更快。但是如果是资源有限的时候，比如说雇人做事，总的成本不一定会减少。但是通常情况下，电脑的内存容量是既定的，而且够用的情况下，就要优化时间复杂度，不用吝惜内存。</p>\n</blockquote>\n<h3 id=\"第六章：栈\"><a href=\"#第六章：栈\" class=\"headerlink\" title=\"第六章：栈\"></a>第六章：栈</h3><p>栈无处不在。 以下是您要栈的一些常见示例：</p>\n<ul>\n<li>薄煎饼</li>\n<li>书籍</li>\n<li>纸张</li>\n</ul>\n<p>在概念上，栈数据结构与物理栈相同。 将项目添加到栈时，将其放在栈顶部。 从栈中删除项目时，始终会删除最顶层的项目。</p>\n<h4 id=\"栈的操作\"><a href=\"#栈的操作\" class=\"headerlink\" title=\"栈的操作\"></a>栈的操作</h4><p>栈的操作只有两个：</p>\n<ol>\n<li>push：将元素添加到栈顶部。</li>\n<li>pop：删除栈的顶部元素。</li>\n</ol>\n<p>这意味着您只能在数据结构的一侧添加或删除元素。在计算机科学中，栈被称为LIFO（后进先出）数据结构。最后推入的元素是第一个被弹出的元素。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛型Element为存储的元素</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Stack</span>&lt;<span class=\"title class_\">Element</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//内部为数组存储所有元素</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> storage: [<span class=\"type\">Element</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">elements</span>: [<span class=\"type\">Element</span>]) &#123;</span><br><span class=\"line\">    storage <span class=\"operator\">=</span> elements</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">push</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">Element</span>) &#123;</span><br><span class=\"line\">    storage.append(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@discardableResult</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">pop</span>() -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> storage.popLast()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">peek</span>() -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> storage.last</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> peek() <span class=\"operator\">==</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Stack</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> topDivider <span class=\"operator\">=</span> <span class=\"string\">&quot;----top----<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> bottomDivider <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>-----------&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> stackElements <span class=\"operator\">=</span> storage</span><br><span class=\"line\">      .map &#123; <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span> &#125;</span><br><span class=\"line\">      .reversed()</span><br><span class=\"line\">      .joined(separator: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topDivider <span class=\"operator\">+</span> stackElements <span class=\"operator\">+</span> bottomDivider</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Stack</span>: <span class=\"title class_\">ExpressibleByArrayLiteral</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">arrayLiteral</span> <span class=\"params\">elements</span>: <span class=\"type\">Element</span>...) &#123;</span><br><span class=\"line\">    storage <span class=\"operator\">=</span> elements</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能想知道是否可以为栈采用Swift集合协议。栈的目的是限制访问数据的方式的数量，并采用诸如Collection之类的协议将通过迭代器和下标公开所有元素来违背此目标。在这种情况下，少即是多！</p>\n<h3 id=\"第七章：栈挑战\"><a href=\"#第七章：栈挑战\" class=\"headerlink\" title=\"第七章：栈挑战\"></a>第七章：栈挑战</h3><h4 id=\"逆序打印链表，但是不能用递归\"><a href=\"#逆序打印链表，但是不能用递归\" class=\"headerlink\" title=\"逆序打印链表，但是不能用递归\"></a>逆序打印链表，但是不能用递归</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list <span class=\"operator\">=</span> <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">  list.push(<span class=\"number\">3</span>)</span><br><span class=\"line\">  list.push(<span class=\"number\">2</span>)</span><br><span class=\"line\">  list.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printInReverse</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">list</span>: <span class=\"type\">LinkedList</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> current <span class=\"operator\">=</span> list.head</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack <span class=\"operator\">=</span> <span class=\"type\">Stack</span>&lt;<span class=\"type\">T</span>&gt;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> node <span class=\"operator\">=</span> current &#123;</span><br><span class=\"line\">    stack.push(node.value)</span><br><span class=\"line\">    current <span class=\"operator\">=</span> node.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> stack.pop() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printInReverse(list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查括号的匹配\"><a href=\"#检查括号的匹配\" class=\"headerlink\" title=\"检查括号的匹配\"></a>检查括号的匹配</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testString1 <span class=\"operator\">=</span> <span class=\"string\">&quot;h((e))llo(world)()&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> testString2 <span class=\"operator\">=</span> <span class=\"string\">&quot;(hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">checkParentheses</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack <span class=\"operator\">=</span> <span class=\"type\">Stack</span>&lt;<span class=\"type\">Character</span>&gt;()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> string &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> character <span class=\"operator\">==</span> <span class=\"string\">&quot;(&quot;</span> &#123;</span><br><span class=\"line\">      stack.push(character)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> character <span class=\"operator\">==</span> <span class=\"string\">&quot;)&quot;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> stack.isEmpty &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        stack.pop()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.isEmpty</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkParentheses(testString1)</span><br><span class=\"line\">checkParentheses(testString2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第八章：队列\"><a href=\"#第八章：队列\" class=\"headerlink\" title=\"第八章：队列\"></a>第八章：队列</h3><p>我们都熟悉排队，无论是买票还是排队打印。</p>\n<p>队列使用FIFO或先进先出顺序，这意味着添加的第一个元素将始终是第一个被删除的元素。当您需要维护元素的顺序以便稍后处理时，队列很方便。</p>\n<h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>让我们先确定队列的协议：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span></span><br><span class=\"line\">  <span class=\"comment\">///在队列后面插入一个元素。如果操作成功，则返回true。</span></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">enqueue</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">Element</span>) -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">  <span class=\"comment\">///删除队列前面的元素并将其返回。</span></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">dequeue</span>() -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> peek: <span class=\"type\">Element</span>? &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以下部分中，将以四种不同的方式创建队列：</p>\n<ol>\n<li>数组</li>\n<li>双向列表</li>\n<li>环形缓冲区</li>\n<li>双栈</li>\n</ol>\n<h4 id=\"用数组来实现\"><a href=\"#用数组来实现\" class=\"headerlink\" title=\"用数组来实现\"></a>用数组来实现</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueArray</span>&lt;<span class=\"title class_\">T</span>&gt;: <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> array: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> peek: <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.first</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">enqueue</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    array.append(element)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">dequeue</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isEmpty <span class=\"operator\">?</span> <span class=\"literal\">nil</span> : array.removeFirst()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueArray</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: array)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">QueueArray</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Ray&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Brian&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Eric&quot;</span>)</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.dequeue()</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.peek</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h5><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://gewill.org/assets/image-20190912160423263.png\" alt=\"image-20190912160423263\"></h5><p>很明显只有<code>enqueue</code>是O(1)，其他都是O(n)。</p>\n<h4 id=\"用双向链表来实现\"><a href=\"#用双向链表来实现\" class=\"headerlink\" title=\"用双向链表来实现\"></a>用双向链表来实现</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QueueLinkedList</span>&lt;<span class=\"title class_\">T</span>&gt;: <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> list <span class=\"operator\">=</span> <span class=\"type\">DoublyLinkedList</span>&lt;<span class=\"type\">T</span>&gt;()</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">enqueue</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    list.append(element)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">dequeue</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>list.isEmpty, <span class=\"keyword\">let</span> element <span class=\"operator\">=</span> list.first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.remove(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> peek: <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.first<span class=\"operator\">?</span>.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueLinkedList</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">QueueLinkedList</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Ray&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Brian&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Eric&quot;</span>)</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.dequeue()</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.peek</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK: - DoublyLinkedList</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> value: <span class=\"type\">T</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> next: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> previous: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">value</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Node</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoublyLinkedList</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> head: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> tail: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head <span class=\"operator\">==</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> first: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">append</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newNode <span class=\"operator\">=</span> <span class=\"type\">Node</span>(value: value)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> tailNode <span class=\"operator\">=</span> tail <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      head <span class=\"operator\">=</span> newNode</span><br><span class=\"line\">      tail <span class=\"operator\">=</span> newNode</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    newNode.previous <span class=\"operator\">=</span> tailNode</span><br><span class=\"line\">    tailNode.next <span class=\"operator\">=</span> newNode</span><br><span class=\"line\">    tail <span class=\"operator\">=</span> newNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">remove</span>(<span class=\"keyword\">_</span> <span class=\"params\">node</span>: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev <span class=\"operator\">=</span> node.previous</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next <span class=\"operator\">=</span> node.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> prev <span class=\"operator\">=</span> prev &#123;</span><br><span class=\"line\">      prev.next <span class=\"operator\">=</span> next</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      head <span class=\"operator\">=</span> next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    next<span class=\"operator\">?</span>.previous <span class=\"operator\">=</span> prev</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> next <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      tail <span class=\"operator\">=</span> prev</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    node.previous <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    node.next <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">DoublyLinkedList</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> string <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> current <span class=\"operator\">=</span> head</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> node <span class=\"operator\">=</span> current &#123;</span><br><span class=\"line\">      string.append(<span class=\"string\">&quot;<span class=\"subst\">\\(node.value)</span> -&gt; &quot;</span>)</span><br><span class=\"line\">      current <span class=\"operator\">=</span> node.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string <span class=\"operator\">+</span> <span class=\"string\">&quot;end&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListIterator</span>&lt;<span class=\"title class_\">T</span>&gt;: <span class=\"title class_\">IteratorProtocol</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> current: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">node</span>: <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;?) &#123;</span><br><span class=\"line\">    current <span class=\"operator\">=</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">next</span>() -&gt; <span class=\"type\">Node</span>&lt;<span class=\"type\">T</span>&gt;? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> &#123; current <span class=\"operator\">=</span> current<span class=\"operator\">?</span>.next &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">DoublyLinkedList</span>: <span class=\"title class_\">Sequence</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">makeIterator</span>() -&gt; <span class=\"type\">LinkedListIterator</span>&lt;<span class=\"type\">T</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">LinkedListIterator</span>(node: head)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点<img src=\"https://gewill.org/assets/image-20190912161101034.png\" alt=\"image-20190912161101034\"></h5><p>出来空间复杂度是O(n)，其他的都是O(1)。</p>\n<p>双向列表的主要弱点在表中并不明显。尽管有O(1)的性能，但它的开销很高。每个元素都必须有额外的存储空间用于前向和后向引用。而且，每次创建新元素时，都需要相对昂贵的动态分配。相比之下，数组进行批量分配，速度更快。</p>\n<h4 id=\"用环形缓冲区来实现\"><a href=\"#用环形缓冲区来实现\" class=\"headerlink\" title=\"用环形缓冲区来实现\"></a>用环形缓冲区来实现</h4><p>环形缓冲区，也称为循环缓冲区，是固定大小的阵列。当最终没有更多项目需要删除时，这种数据结构战略性地包含在开头。</p>\n<p>详见：[<a href=\"https://github.com/raywenderlich/swift-algorithm-club/tree/master/Ring%20Buffer]\">https://github.com/raywenderlich/swift-algorithm-club/tree/master/Ring%20Buffer]</a>(<a href=\"https://github.com/raywenderlich/swift-algorithm-club/tree/master/Ring\">https://github.com/raywenderlich/swift-algorithm-club/tree/master/Ring</a> Buffer)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueRingBuffer</span>&lt;<span class=\"title class_\">T</span>&gt;: <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> ringBuffer: <span class=\"type\">RingBuffer</span>&lt;<span class=\"type\">T</span>&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">count</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    ringBuffer <span class=\"operator\">=</span> <span class=\"type\">RingBuffer</span>&lt;<span class=\"type\">T</span>&gt;(count: count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ringBuffer.isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> peek: <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ringBuffer.first</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">enqueue</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ringBuffer.write(element)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">dequeue</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isEmpty <span class=\"operator\">?</span> <span class=\"literal\">nil</span> : ringBuffer.read()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueRingBuffer</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: ringBuffer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">QueueRingBuffer</span>&lt;<span class=\"type\">String</span>&gt;(count: <span class=\"number\">10</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Ray&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Brian&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Eric&quot;</span>)</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.dequeue()</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.peek</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK: - RingBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">RingBuffer</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> array: [<span class=\"type\">T</span>?]</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> readIndex <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> writeIndex <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">count</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    array <span class=\"operator\">=</span> <span class=\"type\">Array</span>&lt;<span class=\"type\">T</span>?&gt;(repeating: <span class=\"literal\">nil</span>, count: count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> first: <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[readIndex]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">write</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>isFull &#123;</span><br><span class=\"line\">      array[writeIndex <span class=\"operator\">%</span> array.count] <span class=\"operator\">=</span> element</span><br><span class=\"line\">      writeIndex <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">read</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"operator\">!</span>isEmpty &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element <span class=\"operator\">=</span> array[readIndex <span class=\"operator\">%</span> array.count]</span><br><span class=\"line\">      readIndex <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> element</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> availableSpaceForReading: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> writeIndex <span class=\"operator\">-</span> readIndex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> availableSpaceForReading <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> availableSpaceForWriting: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.count <span class=\"operator\">-</span> availableSpaceForReading</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isFull: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> availableSpaceForWriting <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">RingBuffer</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> values <span class=\"operator\">=</span> (<span class=\"number\">0</span><span class=\"operator\">..&lt;</span>availableSpaceForReading).map &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span>(describing: array[(<span class=\"variable\">$0</span> <span class=\"operator\">+</span> readIndex) <span class=\"operator\">%</span> array.count]<span class=\"operator\">!</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> <span class=\"operator\">+</span> values.joined(separator: <span class=\"string\">&quot;, &quot;</span>) <span class=\"operator\">+</span> <span class=\"string\">&quot;]&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优缺点-2\"><a href=\"#优缺点-2\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h5><p><img src=\"https://gewill.org/assets/image-20190912162139308.png\" alt=\"image-20190912162139308\"></p>\n<p>基于环缓冲区的队列具有与链表实现相同的入队和出队时间复杂度。唯一的区别是空间复杂性。环形缓冲区具有固定大小，这意味着入队可能会失败。</p>\n<h4 id=\"用双栈来实现\"><a href=\"#用双栈来实现\" class=\"headerlink\" title=\"用双栈来实现\"></a>用双栈来实现</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">QueueStack</span>&lt;<span class=\"title class_\">T</span>&gt; : <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> leftStack: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> rightStack: [<span class=\"type\">T</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isEmpty: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftStack.isEmpty <span class=\"operator\">&amp;&amp;</span> rightStack.isEmpty</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> peek: <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"operator\">!</span>leftStack.isEmpty <span class=\"operator\">?</span> leftStack.last : rightStack.first</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">enqueue</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    rightStack.append(element)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">dequeue</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> leftStack.isEmpty &#123;</span><br><span class=\"line\">      leftStack <span class=\"operator\">=</span> rightStack.reversed()</span><br><span class=\"line\">      rightStack.removeAll()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftStack.popLast()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueStack</span>: <span class=\"title class_\">CustomStringConvertible</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> printList <span class=\"operator\">=</span> leftStack.reversed() <span class=\"operator\">+</span> rightStack</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: printList)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">QueueStack</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Ray&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Brian&quot;</span>)</span><br><span class=\"line\">queue.enqueue(<span class=\"string\">&quot;Eric&quot;</span>)</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.dequeue()</span><br><span class=\"line\">queue</span><br><span class=\"line\">queue.peek</span><br></pre></td></tr></table></figure>\n\n<p>出队：<img src=\"https://gewill.org/assets/image-20190912162831309.png\" alt=\"image-20190912162831309\"></p>\n<p>入队：</p>\n<p>![image-20190912162918069](&#x2F;Users&#x2F;will&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20190912162918069.png)</p>\n<h5 id=\"优缺点-3\"><a href=\"#优缺点-3\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h5><h5 id=\"image-20190912163001741-x2F-Users-x2F-will-x2F-Library-x2F-Application-Support-x2F-typora-user-images-x2F-image-20190912163001741-png\"><a href=\"#image-20190912163001741-x2F-Users-x2F-will-x2F-Library-x2F-Application-Support-x2F-typora-user-images-x2F-image-20190912163001741-png\" class=\"headerlink\" title=\"![image-20190912163001741](&#x2F;Users&#x2F;will&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20190912163001741.png)\"></a>![image-20190912163001741](&#x2F;Users&#x2F;will&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20190912163001741.png)</h5><p>与基于数组的实现相比，通过利用两个堆栈，您可以将<code>dequeue(_ :)</code>转换为分摊的O(1)操作。</p>\n<p>此外，您的双栈实现是完全动态的，并且没有基于环形缓冲区的队列实现所具有的固定大小限制。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>队列采用FIFO策略，首先必须先删除添加的元素。</p>\n</li>\n<li><p>Enqueue将元素插入队列的后面。</p>\n</li>\n<li><p>Dequeue删除队列前面的元素。</p>\n</li>\n<li><p>数组中的元素在连续的内存块中布局，而链表中的元素更加分散，可能存在缓存未命中。</p>\n</li>\n<li><p>基于环路缓冲区队列的实现适用于具有固定大小的队列。</p>\n</li>\n<li><p>与其他数据结构相比，利用两个栈可以将出列<code>dequeue(_ :)</code>时间复杂度提高到摊销的O(1)操作。</p>\n</li>\n<li><p>双栈实现在空间复杂度方面击败了链表。</p>\n</li>\n</ul>\n<h3 id=\"第九章：队列挑战\"><a href=\"#第九章：队列挑战\" class=\"headerlink\" title=\"第九章：队列挑战\"></a>第九章：队列挑战</h3><h4 id=\"解释栈和队列之间的区别\"><a href=\"#解释栈和队列之间的区别\" class=\"headerlink\" title=\"解释栈和队列之间的区别\"></a>解释栈和队列之间的区别</h4><p>为每个数据结构提供两个实际示例。</p>\n<h4 id=\"画逐步图表\"><a href=\"#画逐步图表\" class=\"headerlink\" title=\"画逐步图表\"></a>画逐步图表</h4><p>演示四种实现时，每一步对队列的有影响。</p>\n<p>如队列为：”SWIFT”</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">enqueue(<span class=\"string\">&quot;R&quot;</span>) </span><br><span class=\"line\">enqueue(<span class=\"string\">&quot;O&quot;</span>) </span><br><span class=\"line\">dequeue() </span><br><span class=\"line\">enqueue(<span class=\"string\">&quot;C&quot;</span>) </span><br><span class=\"line\">dequeue() </span><br><span class=\"line\">dequeue() </span><br><span class=\"line\">enqueue(<span class=\"string\">&quot;K&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"给队列添加next协议\"><a href=\"#给队列添加next协议\" class=\"headerlink\" title=\"给队列添加next协议\"></a>给队列添加<code>next</code>协议</h4><p>用来大富翁游戏，指派下一个玩家</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">BoardGameManager</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Player</span></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nextPlayer</span>() -&gt; <span class=\"type\">Player</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueArray</span>: <span class=\"title class_\">BoardGameManager</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Player</span> <span class=\"operator\">=</span> <span class=\"type\">T</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">nextPlayer</span>() -&gt; <span class=\"type\">T</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> person <span class=\"operator\">=</span> dequeue() <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enqueue(person)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> person</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逆序排列队列\"><a href=\"#逆序排列队列\" class=\"headerlink\" title=\"逆序排列队列\"></a>逆序排列队列</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">QueueArray</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">reversed</span>() -&gt; <span class=\"type\">QueueArray</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack <span class=\"operator\">=</span> <span class=\"type\">Stack</span>&lt;<span class=\"type\">T</span>&gt;()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> element <span class=\"operator\">=</span> queue.dequeue() &#123;</span><br><span class=\"line\">      stack.push(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> element <span class=\"operator\">=</span> stack.pop() &#123;</span><br><span class=\"line\">      queue.enqueue(element)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Swift数据结构和算法（二）","url":"/2019/11/18/Data-Structures-and-Algorithms-in-Swift-Notes-2/","content":"<h2 id=\"第三部分：树\"><a href=\"#第三部分：树\" class=\"headerlink\" title=\"第三部分：树\"></a>第三部分：树</h2><h3 id=\"第十章：树\"><a href=\"#第十章：树\" class=\"headerlink\" title=\"第十章：树\"></a>第十章：树</h3><p>树在数据结构中相当重要。它用于解决软件开发中的许多反复出现的挑战：</p>\n<ul>\n<li><p>表示层次关系。</p>\n</li>\n<li><p>管理排序的数据。</p>\n</li>\n<li><p>促进快速查找操作。</p>\n</li>\n</ul>\n<p>相关术语</p>\n<ul>\n<li>节点（Node）</li>\n<li>父子（Parent and child）</li>\n<li>根（Root）</li>\n<li>叶子（Leaf）</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>&lt;<span class=\"title class_\">T</span>&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> value: <span class=\"type\">T</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> children: [<span class=\"type\">TreeNode</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">T</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">_</span> <span class=\"params\">child</span>: <span class=\"type\">TreeNode</span>) &#123;</span><br><span class=\"line\">    children.append(child)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"遍历算法\"><a href=\"#遍历算法\" class=\"headerlink\" title=\"遍历算法\"></a>遍历算法</h4><p>遍历线性的集合（如：数组和链表）是非常直接的。因为有直接的首尾。</p>\n<p>但是遍历树就复杂了。是左边优先，还是深度优先，要看具体解决的问题。</p>\n<h5 id=\"深度优先遍历（Depth-ﬁrst-traversal）\"><a href=\"#深度优先遍历（Depth-ﬁrst-traversal）\" class=\"headerlink\" title=\"深度优先遍历（Depth-ﬁrst traversal）\"></a>深度优先遍历（Depth-ﬁrst traversal）</h5><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">forEachDepthFirst</span>(<span class=\"params\">visit</span>: (<span class=\"type\">TreeNode</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    visit(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    children.forEach &#123;</span><br><span class=\"line\">      <span class=\"variable\">$0</span>.forEachDepthFirst(visit: visit)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"层级优先遍历（Level-order-traversal）\"><a href=\"#层级优先遍历（Level-order-traversal）\" class=\"headerlink\" title=\"层级优先遍历（Level-order traversal）\"></a>层级优先遍历（Level-order traversal）</h5><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">forEachLevelOrder</span>(<span class=\"params\">visit</span>: (<span class=\"type\">TreeNode</span>) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    visit(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">Queue</span>&lt;<span class=\"type\">TreeNode</span>&gt;()</span><br><span class=\"line\">    children.forEach &#123; queue.enqueue(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> node <span class=\"operator\">=</span> queue.dequeue() &#123;</span><br><span class=\"line\">      visit(node)</span><br><span class=\"line\">      node.children.forEach &#123; queue.enqueue(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h5><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">TreeNode</span> <span class=\"title class_\">where</span> <span class=\"title class_\">T</span>: <span class=\"title class_\">Equatable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">search</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">T</span>) -&gt; <span class=\"type\">TreeNode</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result: <span class=\"type\">TreeNode</span>?</span><br><span class=\"line\">    forEachDepthFirst &#123; node <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> node.value <span class=\"operator\">==</span> value &#123;</span><br><span class=\"line\">        result <span class=\"operator\">=</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>树与链接列表具有一些相似之处，但是，链接列表节点只能链接到另一个节点，而树节点可以链接到无限多个节点。</li>\n<li>熟悉树的术语，例如父，子，叶子和根。 这些术语中有许多是其他程序员常用的语言，将用于帮助解释其他树形结构。</li>\n<li>遍历（例如深度优先遍历和层级遍历）不是特定于常规树的。 它们也可以在其他树上工作，尽管根据树的结构，它们的实现会略有不同。</li>\n</ol>\n<h3 id=\"第十一章：树挑战\"><a href=\"#第十一章：树挑战\" class=\"headerlink\" title=\"第十一章：树挑战\"></a>第十一章：树挑战</h3><p>打印所有的值，按照他们层级的顺序。同意层级应该打印在一行</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">15 </span><br><span class=\"line\">1 17 20</span><br><span class=\"line\">1 5 0 2 5 7</span><br></pre></td></tr></table></figure>\n\n<p>实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printEachLevel</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">for</span> <span class=\"params\">tree</span>: <span class=\"type\">TreeNode</span>&lt;<span class=\"type\">T</span>&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">Queue</span>&lt;<span class=\"type\">TreeNode</span>&lt;<span class=\"type\">T</span>&gt;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 加入每层的节点计数，当打印完时，换行</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodesLeftInCurrentLevel <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    queue.enqueue(tree)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"operator\">!</span>queue.isEmpty &#123;</span><br><span class=\"line\">        nodesLeftInCurrentLevel <span class=\"operator\">=</span> queue.count</span><br><span class=\"line\">        <span class=\"keyword\">while</span> nodesLeftInCurrentLevel <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> node <span class=\"operator\">=</span> queue.dequeue() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">break</span> &#125;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(node.value)</span> &quot;</span>, terminator: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            node.children.forEach &#123; queue.enqueue(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">            nodesLeftInCurrentLevel <span class=\"operator\">-=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Delegate","url":"/2015/11/24/Delegate/","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.  前言\"></a>1.  前言</h2><p>以前只知道怎么用 Delegate，能够传值和回传值。<strong>最近写代码封装一个 UIPickerView+UIButton</strong>，时候需要传值，就想到了 Delegate。但是自己写一个却把我难住了。最后看了还是看了一个 Demo, 单步调试才算真正理解的Delegate 整个流程和原理。</p>\n<p>简单来说就是声明 Protocol，添加触发 调用Protocol 方法的条件，被委托者设置 Delegate &#x3D; self，就会在触发条件下调用 Protocol 方法（参数和返回值可实现双向传值）。</p>\n<p>主要看了这个教程：<br><a href=\"http://sledgedev.com/create-custom-delegate-and-protocol-ios-swift-objective-c/\">CREATE CUSTOM DELEGATE AND PROTOCOL IOS | SWIFT &amp; OBJECTIVE-C</a>，下面是作者提供的源码<a href=\"https://github.com/barrettbreshears/objective-c-protocol\">Objective-C  Project</a>，<a href=\"https://github.com/barrettbreshears/swift-protocol\">Swift Project</a>。</p>\n<p>教材中MyTimer是Custom ViewController，我实际工作中是 UIView，也是参考了另外一篇 Apple 的教程：<a href=\"https://developer.apple.com/library/prerelease/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson5.html\">Implement a Custom Control</a>。发现开发真的离不开 Google，但是前提是要有思路，或者对一个项目或者难题，要有整体的框架和可用的知识点熟悉。</p>\n<h2 id=\"2-源码\"><a href=\"#2-源码\" class=\"headerlink\" title=\"2. 源码\"></a>2. 源码</h2><p>下面是UIPickerView+UIButton封装后的源码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  GenderPickerView.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">GenderPickerViewDelegate</span>: <span class=\"title class_\">NSObjectProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">genderPickerDidSelectItem</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenderPickerView</span>: <span class=\"title class_\">UIView</span>, <span class=\"title class_\">UIPickerViewDataSource</span>, <span class=\"title class_\">UIPickerViewDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> delegate: <span class=\"type\">GenderPickerViewDelegate</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> toolbar: <span class=\"type\">UIToolbar</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> picker: <span class=\"type\">UIPickerView</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> genderPickerViewData <span class=\"operator\">=</span> [<span class=\"string\">&quot;不告诉你&quot;</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;女&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> genderSelectedRow <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">frame</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame)</span><br><span class=\"line\">        toolbar <span class=\"operator\">=</span> <span class=\"type\">UIToolbar</span>.<span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"type\">UIScreen</span>.mainScreen().bounds.width, <span class=\"number\">20</span>))</span><br><span class=\"line\">        toolbar.barStyle <span class=\"operator\">=</span> .<span class=\"type\">Default</span></span><br><span class=\"line\">        toolbar.sizeToFit()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> cancelButton <span class=\"operator\">=</span> <span class=\"type\">UIBarButtonItem</span>.<span class=\"keyword\">init</span>(title: <span class=\"string\">&quot;取消&quot;</span>, style: <span class=\"type\">UIBarButtonItemStyle</span>.<span class=\"type\">Done</span>,  target: <span class=\"keyword\">self</span>, action: <span class=\"string\">&quot;genderPickerDidCancel&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> flexibleButton <span class=\"operator\">=</span> <span class=\"type\">UIBarButtonItem</span>.<span class=\"keyword\">init</span>(barButtonSystemItem: <span class=\"type\">UIBarButtonSystemItem</span>.<span class=\"type\">FlexibleSpace</span>, target: <span class=\"keyword\">self</span>, action: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> doneButton <span class=\"operator\">=</span> <span class=\"type\">UIBarButtonItem</span>.<span class=\"keyword\">init</span>(title: <span class=\"string\">&quot;确定&quot;</span>, style: <span class=\"type\">UIBarButtonItemStyle</span>.<span class=\"type\">Done</span>,  target: <span class=\"keyword\">self</span>, action: <span class=\"string\">&quot;genderPickerDidSelect&quot;</span>)</span><br><span class=\"line\">        toolbar.setItems([cancelButton, flexibleButton, doneButton], animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        picker <span class=\"operator\">=</span> <span class=\"type\">UIPickerView</span>.<span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"type\">UIScreen</span>.mainScreen().bounds.width, <span class=\"number\">120</span>))</span><br><span class=\"line\">        picker.dataSource <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">        picker.delegate <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\"></span><br><span class=\"line\">        addSubview(toolbar)</span><br><span class=\"line\">        addSubview(picker)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"type\">UIScreen</span>.mainScreen().bounds.height <span class=\"operator\">-</span> <span class=\"number\">164</span>, <span class=\"type\">UIScreen</span>.mainScreen().bounds.width, <span class=\"number\">164</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">required</span>  <span class=\"keyword\">init?</span>(<span class=\"params\">coder</span> <span class=\"params\">aDecoder</span>: <span class=\"type\">NSCoder</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//MARK: - 性别选择视图</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">numberOfComponentsInPickerView</span>(<span class=\"params\">pickerView</span>: <span class=\"type\">UIPickerView</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pickerView</span>(<span class=\"params\">pickerView</span>: <span class=\"type\">UIPickerView</span>, <span class=\"params\">numberOfRowsInComponent</span> <span class=\"params\">component</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pickerView</span>(<span class=\"params\">pickerView</span>: <span class=\"type\">UIPickerView</span>, <span class=\"params\">titleForRow</span> <span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">forComponent</span> <span class=\"params\">component</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> genderPickerViewData[row]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">pickerView</span>(<span class=\"params\">pickerView</span>: <span class=\"type\">UIPickerView</span>, <span class=\"params\">didSelectRow</span> <span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">inComponent</span> <span class=\"params\">component</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        genderSelectedRow <span class=\"operator\">=</span> row</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">genderPickerDidSelect</span>() &#123;</span><br><span class=\"line\">        delegate<span class=\"operator\">?</span>.genderPickerDidSelectItem(genderSelectedRow)</span><br><span class=\"line\">        removeFromSuperview()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">genderPickerDidCancel</span>() &#123;</span><br><span class=\"line\">        removeFromSuperview()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  PersonalInfoViewController.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span>, <span class=\"title class_\">GenderPickerViewDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> genderPicker: <span class=\"type\">GenderPickerView</span>!</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        genderPicker <span class=\"operator\">=</span> <span class=\"type\">GenderPickerView</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        genderPicker.delegate <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.view.addSubview(genderPicker)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//MARK: - GenderPickerViewDelegate</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">genderPickerDidSelectItem</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Delete the extra separator of UITableView with pain style","url":"/2015/09/04/Delete-the-extra-separator-of-UITableView-with-pain-style/","content":"<h2 id=\"“Delete”-the-extra-separator-of-UITableView-with-pain-style\"><a href=\"#“Delete”-the-extra-separator-of-UITableView-with-pain-style\" class=\"headerlink\" title=\"“Delete” the extra separator of UITableView with pain style\"></a>“Delete” the extra separator of UITableView with pain style</h2><p><a href=\"http://stackoverflow.com/questions/1369831/eliminate-extra-separators-below-uitableview-in-iphone-sdk\">ios - Eliminate Extra separators below UITableView - in iphone sdk? - Stack Overflow</a></p>\n<h3 id=\"Solution-1\"><a href=\"#Solution-1\" class=\"headerlink\" title=\"Solution 1\"></a>Solution 1</h3><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &quot;Delete&quot; the extra separator of UITableView and the last one Separator in ecah Section</span></span><br><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForFooterInSection:(<span class=\"built_in\">NSInteger</span>)section &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.01</span>f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://i.imgur.com/PYNMsFb.png\" alt=\"height=0.01f\"></p>\n<h3 id=\"Solution-2\"><a href=\"#Solution-2\" class=\"headerlink\" title=\"Solution 2\"></a>Solution 2</h3><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">self</span>.tableView.tableFooterView = [[<span class=\"built_in\">UIView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://i.imgur.com/h4A0jWN.png\" alt=\"CGRectZero\"></p>\n<h2 id=\"Table-View-Style\"><a href=\"#Table-View-Style\" class=\"headerlink\" title=\"Table View Style\"></a>Table View Style</h2><p><strong>UITableViewStylePlain</strong></p>\n<p>A plain table view. Any section headers or footers are displayed as inline separators and float when the table view is scrolled.</p>\n<p><strong>UITableViewStyleGrouped</strong></p>\n<p>A table view whose sections present distinct groups of rows. The section headers and footers do not float.</p>\n"},{"title":"Design Patterns: Delegation - Notes","url":"/2015/08/21/Design-Patterns-Delegation-Notes/","content":"<p>From：<a href=\"http://code.tutsplus.com/articles/design-patterns-delegation--cms-23901\">Design Patterns: Delegation</a> by Bart Jacobs</p>\n<h2 id=\"1-What-Is-Delegation\"><a href=\"#1-What-Is-Delegation\" class=\"headerlink\" title=\"1. What Is Delegation?\"></a>1. What Is Delegation?</h2><p>The definition of the delegation pattern is short and simple. This is how Apple defines the pattern.</p>\n<blockquote>\n<p>A delegate is an object that acts on behalf of, or in coordination with, another object when that object encounters an event in a program.</p>\n</blockquote>\n<h2 id=\"2-Example\"><a href=\"#2-Example\" class=\"headerlink\" title=\"2. Example\"></a>2. Example</h2><h3 id=\"The-UITableViewDelegate-protocol\"><a href=\"#The-UITableViewDelegate-protocol\" class=\"headerlink\" title=\"The UITableViewDelegate protocol\"></a>The UITableViewDelegate protocol</h3><p>An important difference between Swift and Objective-C is the possibility to mark protocol methods as optional. In Objective-C, the methods of a protocol are required by default. The methods of the UITableViewDelegate protocol, however, are optional. In other words, it is possible for a class to conform to the UITableViewDelegate protocol without implementing any of the protocol’s methods.</p>\n<p>In Swift, however, a class conforming to a particular protocol is required to implement every method defined by the protocol. This is much safer since the delegating object doesn’t need to verify whether the delegate implements a protocol method. This subtle, but important, difference is illustrated later in this tutorial when we implement the delegation pattern.</p>\n<h3 id=\"Data-Source\"><a href=\"#Data-Source\" class=\"headerlink\" title=\"Data Source\"></a>Data Source</h3><p>The data source pattern fits nicely in the Model-View-Controller or MVC pattern. Why is that? A table view, for example, is part of the view layer. It doesn’t and shouldn’t know about the model layer and isn’t in charge of handling the data that is coming from the model layer. This implies that the data source of a table view, or any other view component that implements the data source pattern, is often a controller of some sort. On iOS, it’s usually a UIViewController subclass.</p>\n<h2 id=\"3-Implementation\"><a href=\"#3-Implementation\" class=\"headerlink\" title=\"3. Implementation\"></a>3. Implementation</h2><h3 id=\"Objective-C\"><a href=\"#Objective-C\" class=\"headerlink\" title=\"Objective-C\"></a>Objective-C</h3><p><a href=\"https://github.com/gewill/test-projects/tree/master/test%20Delegation%20Objective-C\">Project on GitHub</a></p>\n<p><strong>recipient:</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AddItemViewController.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">AddItemViewControllerDelegate</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AddItemViewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"type\">id</span>&lt;AddItemViewControllerDelegate&gt; delegate;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">AddItemViewControllerDelegate</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewControllerDidCancel:(AddItemViewController *)viewController;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewController:(AddItemViewController *)viewController didAddItem:(<span class=\"built_in\">NSString</span> *)item;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">@optional</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)viewController:(AddItemViewController *)viewController validateItem:(<span class=\"built_in\">NSString</span> *)item;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We declare a class, AddItemViewController, which extends UIViewController. The class declares a property, delegate, of type id<AddItemViewControllerDelegate>. Note that the property is marked as weak, which means that an AddItemViewController instance keeps a weak reference to its delegate.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AddItemViewController.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)cancel:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.delegate &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(viewControllerDidCancel:)]) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.delegate viewControllerDidCancel:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>Sender:</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewController.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AddItemViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> () &lt;<span class=\"title\">AddItemViewControllerDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)addItem:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize View Controller</span></span><br><span class=\"line\">    AddItemViewController *viewController = [[AddItemViewController alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Configure View Controller</span></span><br><span class=\"line\">    [viewController setDelegate:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Present View Controller</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:viewController animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewControllerDidCancel:(AddItemViewController *)viewController &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Dismiss Add Item View Controller</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h3><p><a href=\"https://github.com/gewill/test-projects/tree/master/test%20Delegation%20Swift\">Project on GitHub</a></p>\n<p>In Swift, the delegation pattern is just as easy to implement and you’ll find that Swift makes delegation slightly more elegant. Let’s implement the above example in Swift. This is what the AddItemViewController class looks like in Swift.</p>\n<p><strong>recipient:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AddItemViewController.swift</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">protocol</span> <span class=\"title class_\">AddItemViewControllerDelegate</span>: <span class=\"title class_\">NSObjectProtocol</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewControllerDidCancel</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewController</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>, <span class=\"params\">didAddItem</span>: <span class=\"type\">String</span>)</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewController</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>, <span class=\"params\">validateItem</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddItemViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> delegate: <span class=\"type\">AddItemViewControllerDelegate</span>?</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">cancel</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        delegate<span class=\"operator\">?</span>.viewControllerDidCancel(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The protocol declaration looks a bit different in Swift. Note that the AddItemViewControllerDelegate protocol extends the NSObjectProtocol instead of the NSObject protocol. In Swift, classes and protocols cannot have the same name, which is why the NSObject protocol is named differently in Swift.</p>\n<hr>\n<p>Let’s now look at the ViewController class, which implements the AddItemViewControllerDelegate protocol. The interface shows us that the ViewController class extends the UIViewController class and adopts the AddItemViewControllerDelegate protocol.</p>\n<p><strong>Sender:</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewController.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span>, <span class=\"title class_\">AddItemViewControllerDelegate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addItem</span>(<span class=\"params\">send</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Initialize View Controller</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> viewController <span class=\"operator\">=</span> <span class=\"type\">AddItemViewController</span>()</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Configure View Controller</span></span><br><span class=\"line\">        viewController.delegate <span class=\"operator\">=</span> <span class=\"keyword\">self</span></span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Present View Controller</span></span><br><span class=\"line\">        presentViewController(viewController, animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewControllerDidCancel</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Dismiss Add Item View Controller</span></span><br><span class=\"line\">        <span class=\"operator\">...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewController</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>, <span class=\"params\">didAddItem</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">viewController</span>(<span class=\"params\">viewController</span>: <span class=\"type\">AddItemViewController</span>, <span class=\"params\">validateItem</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Conclusion\"><a href=\"#4-Conclusion\" class=\"headerlink\" title=\"4. Conclusion\"></a>4. Conclusion</h2><p>Delegation is a pattern you’ll come across frequently when developing iOS and OS X applications. Cocoa relies heavily on this design pattern so it’s important to become familiar with it.</p>\n<p>Since the introduction of blocks, a few years ago, Apple has slowly offered an alternative blocks-based API to some delegation implementations. Some developers have followed Apple’s lead by offering their own blocks-based alternatives. The popular AFNetworking library, for example, relies heavily on blocks instead of delegation, resulting in an elegant, intuitive API.</p>\n"},{"title":"Designing Sound - 笔记","url":"/2017/06/22/Designing-Sound-Notes/","content":"<p><img src=\"http://i.imgur.com/sE46GGb.png\" alt=\"iPhone Sound Switch\"></p>\n<p>WWDC 2017 Session 803 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/803/\">https://developer.apple.com/videos/play/wwdc2017/803/</a></p>\n<h3 id=\"1-为何声音是设计的一个重要方面\"><a href=\"#1-为何声音是设计的一个重要方面\" class=\"headerlink\" title=\"1. 为何声音是设计的一个重要方面\"></a>1. 为何声音是设计的一个重要方面</h3><ul>\n<li>很多app都自己的通知的声音，为自己app设计声音可提高辨识度。</li>\n</ul>\n<h3 id=\"2-为通知设计声音\"><a href=\"#2-为通知设计声音\" class=\"headerlink\" title=\"2. 为通知设计声音\"></a>2. 为通知设计声音</h3><ul>\n<li>Dark Sky为例，好的通知声音：已于辨识、传达信息、友好的、清晰的</li>\n<li>立项时要思考的问题：产品的本质？唤起什么样的情感？符合app的美学？声音来源？</li>\n<li>推荐采集合成声音的app：Voice Memos、Music Memos、Garage Band、Logic Pro</li>\n<li>好的通知声音的特性：可辨别的、符合设计、不突兀、可重复的、清晰的</li>\n</ul>\n<h3 id=\"3-为UI元素设计声音\"><a href=\"#3-为UI元素设计声音\" class=\"headerlink\" title=\"3. 为UI元素设计声音\"></a>3. 为UI元素设计声音</h3><ul>\n<li>UI声音：键盘、滚动、按钮、点击、滑动、变换</li>\n<li>好的UI声音的特性：谨慎的使用、低音量、有帮助、愉悦的、建立深入人心的体验</li>\n</ul>\n<h3 id=\"4-提示和技术\"><a href=\"#4-提示和技术\" class=\"headerlink\" title=\"4. 提示和技术\"></a>4. 提示和技术</h3><ul>\n<li>思考几个问题：通知频率？品牌建立有什么作用？对UI有什么好处？没有界面时如何理解我的app？</li>\n<li>不要过度使用</li>\n<li>为用户提供开关</li>\n<li>细节很重要</li>\n<li>真机测试，包括耳机</li>\n<li>和专家合作：声音设计师、声音工程师</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>感觉每次听下来都很容易，毕竟是苹果出品，写笔记时才感觉要操作的细节很多。作为一个开发者更多的是思考：声音对app的体验的帮助。</p>\n<p>ps：稍后看WWDC打算参考这个 WWDC 2017 Viewing Guide：<a href=\"https://useyourloaf.com/blog/wwdc-2017-viewing-guide/\">https://useyourloaf.com/blog/wwdc-2017-viewing-guide/</a> </p>\n"},{"title":"Effective Objective-C 2.0 - 笔记","url":"/2016/02/24/Effective-Objective-C-2-0-Notes/","content":"<p>在 Swift 大行其道，Objective-C 渐行渐远的今天，这本书看起来还是获益匪浅。按照52条方法目录摘录一些笔记。</p>\n<h2 id=\"1-了解-Objective-C-语言的起源\"><a href=\"#1-了解-Objective-C-语言的起源\" class=\"headerlink\" title=\"1. 了解 Objective-C 语言的起源\"></a>1. 了解 Objective-C 语言的起源</h2><p>Objective-C 为 C 语言添加了面向对象的特性，是其超集。Objective-C 使用动态绑定的消息结构，运行时才会检查对象的类型。接受一条消息后，究竟执行何种代码，由运行期环境而非编译器决定。</p>\n<h2 id=\"5-用枚举表示状态、选项、状态吗\"><a href=\"#5-用枚举表示状态、选项、状态吗\" class=\"headerlink\" title=\"5. 用枚举表示状态、选项、状态吗\"></a>5. 用枚举表示状态、选项、状态吗</h2><h2 id=\"6-理解-“属性”可以概念\"><a href=\"#6-理解-“属性”可以概念\" class=\"headerlink\" title=\"6. 理解 “属性”可以概念\"></a>6. 理解 “属性”可以概念</h2><p>自动合成属性：<code>@property</code>，指定实例变量名称：<code>@synthesize</code>，属性特质：原子性&#x2F;读写权限&#x2F;读写方法名&#x2F;内存管理，都做有详细的解释，就不在此赘述了。</p>\n<h2 id=\"7-在对象内部尽量直接访问实例变量\"><a href=\"#7-在对象内部尽量直接访问实例变量\" class=\"headerlink\" title=\"7. 在对象内部尽量直接访问实例变量\"></a>7. 在对象内部尽量直接访问实例变量</h2><p>直接访问实例变量：</p>\n<ul>\n<li>不经过方法派发（method dispatch）</li>\n<li>不调用设置方法（access methods）</li>\n<li>不触发键值观测（KVO）</li>\n<li>惰性初始化（lazy initialization）无法完成</li>\n</ul>\n<h2 id=\"11-理解-objc-msgSend-的作用\"><a href=\"#11-理解-objc-msgSend-的作用\" class=\"headerlink\" title=\"11. 理解 objc_msgSend 的作用\"></a>11. 理解 objc_msgSend 的作用</h2><p>例如：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">id</span> returnValue = [someObject messageName: parameter];</span><br></pre></td></tr></table></figure>\n<p>someObject 叫做接受者（receiver），messageName 叫做选择子（selector），选择子和参数合起来称为消息（message）。编译器看到消息后将其转换为一条标准的 C 语言函数调用，所调用函数 objc_msgSend，原型如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> objc_msgSend(<span class=\"type\">id</span> <span class=\"keyword\">self</span>, SEL cmd, ...)</span><br></pre></td></tr></table></figure>\n<p>编译器会把消息转换为如下函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">id</span> returnValue = objc_msgSend(someObject, </span><br><span class=\"line\">\t\t\t\t\t\t\t  <span class=\"keyword\">@selector</span>(messageName:), </span><br><span class=\"line\">\t\t\t\t\t\t\t  parameter);</span><br></pre></td></tr></table></figure>\n<p>objc_msgSend 函数会依据接受者与选择子的类型，来搜寻接受者所属的类中方法列表（list of methods ），找到就跳至实现代码。若找不到就沿着继承体系向上查找。最终找不到就执行消息转发（message forwarding）。</p>\n<blockquote>\n<p>未完</p>\n</blockquote>\n"},{"title":"Emerging Best Practices • Ash Furrow -Notes","url":"/2015/11/25/Emerging-Best-Practices-%E2%80%A2-Ash-Furrow-Notes/","content":"<p>Watch video here: <a href=\"https://youtu.be/YsUTuwpbURA\">https://youtu.be/YsUTuwpbURA</a>  </p>\n<p>It’s much clear to understand what’s the Ash talk about by list the outlines</p>\n<h2 id=\"1-Agenda\"><a href=\"#1-Agenda\" class=\"headerlink\" title=\"1. Agenda\"></a>1. Agenda</h2><ul>\n<li>We’ve been here before </li>\n<li>Learning is forever, deal with it </li>\n<li>Never throw ideas away</li>\n<li>How to force yourself to think </li>\n<li>Always be abstracting</li>\n</ul>\n<h2 id=\"2-Ideas-vs-Syntax\"><a href=\"#2-Ideas-vs-Syntax\" class=\"headerlink\" title=\"2. Ideas vs Syntax\"></a>2. Ideas vs Syntax</h2><p>Object Literals&#x2F;Blocks &amp; GCD&#x2F;Swift 2: Guard&#x2F;Currying&#x2F;Enums</p>\n<p>New syntax lets us do new things<br>However! Syntax is only a tool<br>Like blocks, Swift 2 syntax is most useful when it enables new ideas</p>\n<p>That’s all just syntax. What matters are ideas.</p>\n<h2 id=\"3-Benefits-of-Testing\"><a href=\"#3-Benefits-of-Testing\" class=\"headerlink\" title=\"3. Benefits of Testing\"></a>3. Benefits of Testing</h2><ul>\n<li>Limited object scope is good<ul>\n<li>High cohesion, low coupling</li>\n</ul>\n</li>\n<li>How to limit scope?<ul>\n<li>Controlling public interface and dependencies</li>\n</ul>\n</li>\n</ul>\n<p>Things to never throw away:Code &amp; Ideas</p>\n<p>Changing a unit test?</p>\n<ul>\n<li>No -&gt; Refactoring</li>\n<li>Yes -&gt; Rewriting</li>\n</ul>\n<h2 id=\"4-Dependency-Injection\"><a href=\"#4-Dependency-Injection\" class=\"headerlink\" title=\"4. Dependency Injection\"></a>4. Dependency Injection</h2><p>Your things shouldn’t create the things they need</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;\r<span class=\"keyword\">let</span> networkController <span class=\"operator\">=</span> <span class=\"type\">NetworkController</span>()\r    <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;\r        <span class=\"keyword\">super</span>.viewDidLoad()\r        networkController.fetchStuff &#123;\r            <span class=\"keyword\">self</span>.showStuff()\r        &#125;\r&#125; &#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;\r<span class=\"keyword\">var</span> networkController: <span class=\"type\">NetworkController</span>?\r    <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;\r        <span class=\"keyword\">super</span>.viewDidLoad()\r        networkController<span class=\"operator\">?</span>.fetchStuff &#123;\r            <span class=\"keyword\">self</span>.showStuff()\r        &#125;\r&#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Unit-Testing\"><a href=\"#5-Unit-Testing\" class=\"headerlink\" title=\"5. Unit Testing\"></a>5. Unit Testing</h2><ul>\n<li>Don’t test private functions<ul>\n<li>Also, start marking functions as private</li>\n</ul>\n</li>\n<li>Remember, we want to avoid rewriting </li>\n<li>Don’t test the implementation</li>\n<li>Don’t use “partial mocks”<ul>\n<li>See @searls post on partial mocks</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-Wrap-Up\"><a href=\"#6-Wrap-Up\" class=\"headerlink\" title=\"6. Wrap Up\"></a>6. Wrap Up</h2><ul>\n<li>We have a history of being awesome, let’s keep it up</li>\n<li>Learning isn’t just for when Xcode is in beta</li>\n<li>Ideas are more valuable than code, but throwing away either is dangerous </li>\n<li>Effective unit tests make it easy to change code</li>\n<li>Operate at the highest level of abstraction you can at any given time</li>\n</ul>\n"},{"title":"Exploring AVFoundation - Notes","url":"/2016/04/14/Exploring-AVFoundation-Notes/","content":"<p>WWDC 2011 - Session 405 - Exploring AV Foundation<br><a href=\"https://developer.apple.com/videos/play/wwdc2011/405/\">https://developer.apple.com/videos/play/wwdc2011/405/</a></p>\n<h2 id=\"1-扯淡\"><a href=\"#1-扯淡\" class=\"headerlink\" title=\"1. 扯淡\"></a>1. 扯淡</h2><p>可以学习英文教程，但要循序渐进，之后总结实践很重要。转化为自己的理解才行。之前看了一段时间 Doctmentation，感觉很大很复杂的框架。之后动手写了一些代码，回头再看相关 Session 就豁然开朗，一切不过是熟悉 Cocoa 框架结构，无非就是本事视频相关的不熟悉，直接开发就比较抽象。<strong>开发实践中持续学习</strong>，也就进入佳境。</p>\n<p>视频学习时，双屏必备利器。加上最近 iPad 在 Session Keynote 上笔记，效率很高。</p>\n<p>Session 不停的示例代码非常易于理解。</p>\n<h2 id=\"2-总结\"><a href=\"#2-总结\" class=\"headerlink\" title=\"2. 总结\"></a>2. 总结</h2><p> Keynote 要点如下：</p>\n<ol>\n<li>五大功能：检测&#x2F;播放&#x2F;编辑片段&#x2F;导出&#x2F;录制。</li>\n<li>两种媒体 model：static&#x2F;dynamic， 类似NSArray&#x2F;NSMutableArray，对应读取时是否会 mutate。</li>\n<li>异步加载</li>\n<li>Key-Value Observe 支持大多数属性</li>\n<li>“There’s a protocol for that” TM</li>\n<li>AVPlayerItem: AVAsynchronousKeyValueLoading：<code> loadValuesAsynchronouslyForKeys(_:completionHandler:)</code>，可以异步获取状态&#x2F;属性变化，以更新 UI 等。</li>\n<li>AVPlayer 时间属性变化很快，异步 KVO 不再合适，改为同步 KVO，需要添加&#x2F;移除观察：<code>addPeriodicTimeObserverForInterval(_:queue:usingBlock:)</code></li>\n<li>AVPlayerItem 可获取媒体相关的属性，对 status 添加KVO。</li>\n<li>AVPlayerItemTrack：enabled 属性可以选择性播放 track。</li>\n<li>AVQueuePlayer：播放一组 AVAsset，适用于编辑完播放。</li>\n<li>AVPlayerLayer 用于显示媒体在屏幕上。有 readyForDisplay&#x2F;videoGravity 等属性。</li>\n<li>AVMediaSelectionGroup 用于字幕&#x2F;音频等可选 track。</li>\n<li>iPod Library: MPMediaQuery</li>\n<li>Camera Roll: AssetsLibrary (iOS 9: Photos)</li>\n<li>static&#x2F;dynamic model 对应不同的观察机制，如下：</li>\n</ol>\n<p>Matters of protocol And platform etiquette</p>\n<ul>\n<li>AVAsynchronousKeyValueLoading</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadValuesAsynchronouslyForKeys:completionHandler: </span><br><span class=\"line\">statusOfValueForKey:error:</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>NSObject(NSKeyValueObserving)</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">addObserver:forKeyPath:options:context: </span><br><span class=\"line\">removeObserver:forKeyPath: </span><br><span class=\"line\">observeValueForKeyPath:ofObject:change:context:</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-部分示例代码：\"><a href=\"#3-部分示例代码：\" class=\"headerlink\" title=\"3. 部分示例代码：\"></a>3. 部分示例代码：</h2><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *keys = [<span class=\"built_in\">NSArray</span> arrayWithObject:@”playable”];</span><br><span class=\"line\">[asset</span><br><span class=\"line\">    loadValuesAsynchronouslyForKeys:keys</span><br><span class=\"line\">                  completionHandler:^&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">AVKeyValueStatus</span> playableStatus =</span><br><span class=\"line\">                        [asset statusOfValueForKey:<span class=\"string\">@&quot;playable&quot;</span> error:&amp;error];</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (playableStatus) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"built_in\">AVKeyValueStatusLoaded</span>:</span><br><span class=\"line\">                      [<span class=\"keyword\">self</span> updateUIForAsset];</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"built_in\">AVKeyValueStatusFailed</span>:</span><br><span class=\"line\">                      [<span class=\"keyword\">self</span> reportError:error forAsset:asset];</span><br><span class=\"line\">                      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                      ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;];</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)setUpTransportUI &#123;</span><br><span class=\"line\">  <span class=\"built_in\">CMTime</span> interval = <span class=\"built_in\">CMTimeMakeWithSeconds</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">  <span class=\"type\">id</span> myObserver =</span><br><span class=\"line\">      [[myPlayer addPeriodicTimeObserverForInterval:interval</span><br><span class=\"line\">                                              queue:dispatch_get_main_queue()</span><br><span class=\"line\">                                         usingBlock:^&#123;</span><br><span class=\"line\">                                           [<span class=\"keyword\">self</span> movePlayheadUI];</span><br><span class=\"line\">                                         &#125;] <span class=\"keyword\">retain</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)cleanUp &#123;</span><br><span class=\"line\">  [myPlayer removeTimeObserver:myObserver];</span><br><span class=\"line\">  [myObserver release];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Feeyue","url":"/2015/12/10/Feeyue/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>正如一个朋友说得：“开发这个工作讲究的就是自学能力。” 我最近开发一款 App 希望能够同时阅读 Twitter 和微博，接触到官方文档时候，就想偷懒去开源第三方 SDK，发现太多bug。还不如官方文档解释的清楚和步骤详细。<br>而且忘记了方法论，就是开发一款 App，罗列出 UI 和技术框架，但是遇到全英文的文档时候也懵了。仔细想想其实也就是 TwitterKit 封装 iOS 一些常见用法的 API，但是总的来说还是基于 oAuth 和 REST ，其中 REST 都很熟悉了，无非就是 oAuth 比较麻烦一般都是每个公司封装不一样，需要安装文档一步一步来配置就好了。</p>\n<p>总结下来，遇到新的技术要注意方法：</p>\n<ul>\n<li>对比是否接触过类似的技术问题</li>\n<li>总结提取大纲分类</li>\n<li>不认识单词一定要翻译清楚</li>\n<li>实践部分一步一步的做</li>\n</ul>\n<blockquote>\n<p>吐槽一下 dev.twitter.com 的三级菜单真是很隐晦，不是一个好的设计。<br><img src=\"http://ww3.sinaimg.cn/large/5369602egw1eyuhfnu59nj20py0j6dl8.jpg\" alt=\"dev.twitter.com\"></p>\n</blockquote>\n<h2 id=\"Twitter-集成-TwitterKit\"><a href=\"#Twitter-集成-TwitterKit\" class=\"headerlink\" title=\"Twitter 集成 TwitterKit\"></a>Twitter 集成 TwitterKit</h2><p>下载 Fabric.app，添加 pod，安装提示步骤来即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod &#x27;Fabric&#x27;</span><br><span class=\"line\">pod &#x27;TwitterKit&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>访问：<a href=\"https://docs.fabric.io/ios\">https://docs.fabric.io/ios</a>，使用其 Authentication 和 REST API 即可。</p>\n<blockquote>\n<p>The REST API can be used to make authenticated Twitter API requests. Though it can be accessed manually, we recommend using the convenience methods whenever possible.</p>\n</blockquote>\n<h2 id=\"微博集成-LeanCloudSocial\"><a href=\"#微博集成-LeanCloudSocial\" class=\"headerlink\" title=\"微博集成 LeanCloudSocial\"></a>微博集成 LeanCloudSocial</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod &#x27;LeanCloudSocial&#x27;</span><br></pre></td></tr></table></figure>\n<p>文档：<a href=\"https://leancloud.cn/docs/sns.html\">https://leancloud.cn/docs/sns.html</a></p>\n<p>LeanCloudSocial是只有一键登录，属于轻量级添加微博&#x2F;微信&#x2F;QQ登录支持，没有其他微博相关 REST API 可用。后面微博部分需要手动或者可能换成微博官方 SDK。</p>\n"},{"title":"修复 SwiftUI Preview 项目中无法运行的问题","url":"/2023/10/23/Fix-SwiftUI-Preview/","content":"<h1 id=\"第一步：定位问题\"><a href=\"#第一步：定位问题\" class=\"headerlink\" title=\"第一步：定位问题\"></a><strong>第一步：定位问题</strong></h1><table>\n<thead>\n<tr>\n<th>页面</th>\n<th>Scheme Target</th>\n<th>Preview是否成功</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空白View</td>\n<td>App</td>\n<td>失败</td>\n</tr>\n<tr>\n<td>空白View</td>\n<td>Package</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>空白View + import Core</td>\n<td>Package</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>空白View + import Core + 调用Font</td>\n<td>Package</td>\n<td>失败</td>\n</tr>\n</tbody></table>\n<p>定位到时<code>Common</code>中<code>Core</code>的错误</p>\n<h1 id=\"第二步：分析解决问题\"><a href=\"#第二步：分析解决问题\" class=\"headerlink\" title=\"第二步：分析解决问题\"></a><strong>第二步：分析解决问题</strong></h1><p>分析<code>Common</code>中<code>Product</code>：<code>Core</code>依赖没有真正引入。</p>\n<p>故拆分<code>Common</code>为四个<code>Product</code>，直接对外暴露，解决了Preview无法运行的问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PackageDescription</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> package <span class=\"operator\">=</span> <span class=\"type\">Package</span>(</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Common&quot;</span>,</span><br><span class=\"line\">    platforms: [</span><br><span class=\"line\">        .iOS(.v14)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    products: [</span><br><span class=\"line\">        .library(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;Core&quot;</span>,</span><br><span class=\"line\">           <span class=\"comment\">// type: .dynamic,</span></span><br><span class=\"line\">            targets: [<span class=\"string\">&quot;Core&quot;</span>]</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有两个细节要调整：\"><a href=\"#有两个细节要调整：\" class=\"headerlink\" title=\"有两个细节要调整：\"></a>有两个细节要调整：</h2><ol>\n<li>全局Package移除 <code>type: .dynamic</code>，让SPM决定使用什么类型。</li>\n<li>Fork <code>ProgressHUD</code>， 移除 <code>type: .static</code>。并在<code>Common</code> <code>Package.swift</code> 中引用fork</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .package(url: &quot;https://github.com/relatedcode/ProgressHUD.git&quot;, from: &quot;13.7.2&quot;)</span></span><br><span class=\"line\">.package(url: <span class=\"string\">&quot;https://github.com/gewill/ProgressHUD.git&quot;</span>, branch: <span class=\"string\">&quot;devlop&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么改为静态库？\"><a href=\"#为什么改为静态库？\" class=\"headerlink\" title=\"为什么改为静态库？\"></a>为什么改为静态库？</h2><p>静态库可以避免Core引用的重复的问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Showing Recent Messages</span><br><span class=\"line\">Swift package target <span class=\"string\">&#x27;Core&#x27;</span> is linked as a static library by <span class=\"string\">&#x27;AppCommoms&#x27;</span> and <span class=\"string\">&#x27;Core&#x27;</span>, but cannot be built dynamically because there is a package product with the same name.</span><br><span class=\"line\"></span><br><span class=\"line\">Swift package target <span class=\"string\">&#x27;Core&#x27;</span> is linked as a static library by <span class=\"string\">&#x27;Onboarding&#x27;</span> and <span class=\"string\">&#x27;Core&#x27;</span>, but cannot be built dynamically because there is a package product with the same name.</span><br><span class=\"line\"></span><br><span class=\"line\">Swift package target <span class=\"string\">&#x27;Core&#x27;</span> is linked as a static library by <span class=\"string\">&#x27;AppSDK&#x27;</span> and <span class=\"string\">&#x27;Core&#x27;</span>, but cannot be built dynamically because there is a package product with the same name.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第三步：解决跨Package引用资源文件的问题\"><a href=\"#第三步：解决跨Package引用资源文件的问题\" class=\"headerlink\" title=\"第三步：解决跨Package引用资源文件的问题\"></a><strong>第三步：解决跨Package引用资源文件的问题</strong></h1><h2 id=\"SwiftUI-Preview-位置特殊处理\"><a href=\"#SwiftUI-Preview-位置特殊处理\" class=\"headerlink\" title=\"SwiftUI Preview 位置特殊处理\"></a>SwiftUI Preview 位置特殊处理</h2><p>由于Preview特殊机制，实际上<code>Bundle(for: BundleFinder.**self**).resourceURL</code>，位置在 <code>/Users/will/Library/Developer/Xcode/DerivedData/App-gvnjpztkrklpjvfegxsksaoxjaaf/Build/Intermediates.noindex/Previews/Onboarding/Products/Debug-iphonesimulator/PackageFrameworks/Onboarding_-570F2A58E471CBF3_PackageProduct.framework</code></p>\n<p>需要往上跳两级目录。故在<code>AppCommomsBundle</code> 的<code>Bundle</code>备选中添加SwiftUI Preview目录即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BundleFinder</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppCommomsBundle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> module: <span class=\"type\">Bundle</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Bundle name should be like this &quot;ProductName_TargetName&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> bundleName <span class=\"operator\">=</span> <span class=\"string\">&quot;AppCommoms_AppCommoms&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> candidates <span class=\"operator\">=</span> [</span><br><span class=\"line\">            <span class=\"comment\">// Bundle should be present here when the package is linked into an App.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>.main.resourceURL,</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// Bundle should be present here when the package is linked into a framework.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>(for: <span class=\"type\">BundleFinder</span>.<span class=\"keyword\">self</span>).resourceURL,</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// SwiftUI Preview</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>(for: <span class=\"type\">BundleFinder</span>.<span class=\"keyword\">self</span>).resourceURL<span class=\"operator\">?</span>.deletingLastPathComponent().deletingLastPathComponent(),</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// For command-line tools.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>.main.bundleURL</span><br><span class=\"line\">        ] <span class=\"operator\">+</span> <span class=\"type\">Bundle</span>.allBundles.map &#123; <span class=\"variable\">$0</span>.bundleURL &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> candidate <span class=\"keyword\">in</span> candidates &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> bundlePath <span class=\"operator\">=</span> candidate<span class=\"operator\">?</span>.appendingPathComponent(bundleName <span class=\"operator\">+</span> <span class=\"string\">&quot;.bundle&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bundle <span class=\"operator\">=</span> bundlePath.flatMap(<span class=\"type\">Bundle</span>.<span class=\"keyword\">init</span>(url:)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bundle</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Bundle</span>(for: <span class=\"type\">BundleFinder</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\"><span class=\"comment\">//        fatalError(&quot;unable to find bundle named \\(bundleName)&quot;)</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Bundle-module\"><a href=\"#使用Bundle-module\" class=\"headerlink\" title=\"使用Bundle.module\"></a>使用<code>Bundle.module</code></h2><p>还有一种更简单的方案就是用Apple推荐的<code>Bundle.module</code>，也是Rswift使用的<code>public let R = _R(bundle: Bundle.module)</code>。</p>\n<blockquote>\n<p><a href=\"https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package#Access-a-resource-in-code\"><strong>Access a resource in codein page link</strong> </a><br>Always use <code>Bundle.module</code> when you access resources. A package shouldn’t make assumptions about the exact location of a resource.</p>\n</blockquote>\n<p>具体原因见Xcode Build生成的资源文件：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> class Foundation.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> class Foundation.ProcessInfo</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct Foundation.URL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BundleFinder</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Foundation</span>.<span class=\"title class_\">Bundle</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Returns the resource bundle associated with the current Swift module.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> module: <span class=\"type\">Bundle</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> bundleName <span class=\"operator\">=</span> <span class=\"string\">&quot;Onboarding_Onboarding&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> overrides: [<span class=\"type\">URL</span>]</span><br><span class=\"line\">        <span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\">        <span class=\"comment\">// The &#x27;PACKAGE_RESOURCE_BUNDLE_PATH&#x27; name is preferred since the expected value is a path. The</span></span><br><span class=\"line\">        <span class=\"comment\">// check for &#x27;PACKAGE_RESOURCE_BUNDLE_URL&#x27; will be removed when all clients have switched over.</span></span><br><span class=\"line\">        <span class=\"comment\">// This removal is tracked by rdar://107766372.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"keyword\">override</span> <span class=\"operator\">=</span> <span class=\"type\">ProcessInfo</span>.processInfo.environment[<span class=\"string\">&quot;PACKAGE_RESOURCE_BUNDLE_PATH&quot;</span>]</span><br><span class=\"line\">                       <span class=\"operator\">??</span> <span class=\"type\">ProcessInfo</span>.processInfo.environment[<span class=\"string\">&quot;PACKAGE_RESOURCE_BUNDLE_URL&quot;</span>] &#123;</span><br><span class=\"line\">            overrides <span class=\"operator\">=</span> [<span class=\"type\">URL</span>(fileURLWithPath: <span class=\"keyword\">override</span>)]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            overrides <span class=\"operator\">=</span> []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">#else</span></span><br><span class=\"line\">        overrides <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> candidates <span class=\"operator\">=</span> overrides <span class=\"operator\">+</span> [</span><br><span class=\"line\">            <span class=\"comment\">// Bundle should be present here when the package is linked into an App.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>.main.resourceURL,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Bundle should be present here when the package is linked into a framework.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>(for: <span class=\"type\">BundleFinder</span>.<span class=\"keyword\">self</span>).resourceURL,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// For command-line tools.</span></span><br><span class=\"line\">            <span class=\"type\">Bundle</span>.main.bundleURL,</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> candidate <span class=\"keyword\">in</span> candidates &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> bundlePath <span class=\"operator\">=</span> candidate<span class=\"operator\">?</span>.appendingPathComponent(bundleName <span class=\"operator\">+</span> <span class=\"string\">&quot;.bundle&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bundle <span class=\"operator\">=</span> bundlePath.flatMap(<span class=\"type\">Bundle</span>.<span class=\"keyword\">init</span>(url:)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bundle</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;unable to find bundle named Onboarding_Onboarding&quot;</span>)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ol>\n<li><a href=\"https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\"><strong>Bundling resources with a Swift package</strong></a></li>\n<li><a href=\"https://pratheeshbennet.medium.com/static-library-vs-dynamic-library-in-ios-55478ed53a03\"><strong>Static Library vs Dynamic Library in iOS</strong></a></li>\n<li><a href=\"https://github.com/Moya/Moya/blob/master/Package.swift\"><strong>Moya Package.swift</strong> </a></li>\n<li><a href=\"https://www.fatbobman.com/posts/how-SwiftUI-Preview-works/\"><strong>构建稳定的预览视图 —— SwiftUI 预览的工作原理</strong></a></li>\n</ol>\n","tags":["Swift","SwiftUI","SwiftPM","iOS"]},{"title":"Flat Tomato","url":"/2015/05/24/Flat-Tomato/","content":"<p>重新使用番茄学习法，<a href=\"https://itunes.apple.com/cn/app/flat-tomato-time-management/id719462746?l=en&mt=8\">Flat Tomato</a> 设计非常简洁优雅。</p>\n<p>使用计时器感觉时间过得飞快，也是平日里浪费时间习惯了。一晃一下午就过去了，什么都没做，就听歌看新闻了，关键是没有总结和互动，往往一个耳朵进一个耳朵出。</p>\n<p>希望以后能够珍惜时间，做正确的事。</p>\n<p><img src=\"http://i.imgur.com/SjGeNXd.jpg\" alt=\"Imgur\"></p>\n"},{"title":"Functions and Methods","url":"/2015/08/18/Functions-and-Methods/","content":"<p>函数（Functions）是用来完成特地任务的独立的代码块；方法（Methods）是与某些特定类型相关联的函数。所以 Swift 中都用的 func 关键词。 结构体和枚举能够定义方法是 Swift 与 C&#x2F;Objective-C 的主要区别之一。</p>\n<p>Functions are self-contained chunks of code that perform a specific task.</p>\n<p>Methods are functions that are associated with a particular type: classes, structures, and enumerations.</p>\n"},{"title":"极客班 Objective-C 高级编程（一）","url":"/2015/07/20/GeekBand-Objective-C-Programming-1/","content":"<p><a href=\"http://weibo.com/songduan\">@段松</a> 老师有7年的iOS研发经验，一线大牛我喜欢，奇幻之旅就正式开始吧。</p>\n<p>iOS 开发和盖房子差不多，那么我们就先学习一些基本建筑材料:数据类型与操作符。后面还有一些数组、运算符、流程控制语句、枚举、结构体和宏定义等。</p>\n<p>虽然这些之前都有学过，也算温故知新吧。和 Swift 相比确实繁琐古老的一些。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSInteger age = 18;</span><br><span class=\"line\">NSInteger testAge;</span><br><span class=\"line\">testAge = age &gt;= 18 ? 1 : 0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if (testAge) &#123;</span><br><span class=\"line\">    NSLog(@&quot;你已经是个成年人了&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    NSLog(@&quot;你还是未成年人&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">char name[] = &quot;Will&quot;;</span><br><span class=\"line\">printf(name);</span><br><span class=\"line\"></span><br><span class=\"line\">NSInteger price = 4;</span><br><span class=\"line\">switch (price) &#123;</span><br><span class=\"line\">    case 4: &#123;</span><br><span class=\"line\">        NSLog(@&quot;four&quot;);</span><br><span class=\"line\">        NSLog(@&quot;more than one line.&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    case 3:        </span><br><span class=\"line\">        NSLog(@&quot;three&quot;);        </span><br><span class=\"line\">        break;        </span><br><span class=\"line\">    case 2:        </span><br><span class=\"line\">        NSLog(@&quot;two&quot;);        </span><br><span class=\"line\">        break;        </span><br><span class=\"line\">    default:        </span><br><span class=\"line\">        break;        </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">bool isFemale = false;</span><br><span class=\"line\">BOOL isMale = YES;</span><br><span class=\"line\">if (isMale) &#123;</span><br><span class=\"line\">    if (!isFemale) &#123;</span><br><span class=\"line\">        NSLog(@&quot;You are a ture man.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 循环</span><br><span class=\"line\">int sum = 0;</span><br><span class=\"line\">for (int i = 1; i &lt;= 100; ++i) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;%i&quot;, sum);</span><br><span class=\"line\"></span><br><span class=\"line\">int sum1 = 0;</span><br><span class=\"line\">int j = 1;</span><br><span class=\"line\">for ( ;  ;  ) &#123;</span><br><span class=\"line\">    sum1 += j;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">    if (j &gt; 100) &#123;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NSLog(@&quot;%i&quot;, sum1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 枚举</span><br><span class=\"line\">enum Person &#123;GoodGirl, GodBoy, BadGirl, BadBoy&#125;;</span><br><span class=\"line\">enum Person someone;</span><br><span class=\"line\">someone = GodBoy;</span><br><span class=\"line\">if (someone != BadBoy &amp;&amp; someone != BadGirl) &#123;</span><br><span class=\"line\">            NSLog(@&quot;Someone is a good person.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">// 结构体</span><br><span class=\"line\">typedef struct &#123;CGFloat x; CGFloat y;&#125; MyPoint;</span><br><span class=\"line\">MyPoint myPoint = &#123;6, 8&#125;;</span><br><span class=\"line\">CGFloat result = myPoint.x + myPoint.y;</span><br><span class=\"line\">NSLog(@&quot;result = %f&quot;, result);</span><br><span class=\"line\"></span><br><span class=\"line\">// #define 宏：文本替换</span><br><span class=\"line\">        </span><br><span class=\"line\">#define PI 3.1415926</span><br><span class=\"line\">#define SQUARE(x) ((x)*(x))</span><br><span class=\"line\">        </span><br><span class=\"line\">NSLog(@&quot;%f&quot;, PI * SQUARE(5 - 4));   // 3.141593</span><br><span class=\"line\">NSLog(@&quot;%.7f&quot;, PI * SQUARE(5 - 4)); // 3.1415926</span><br><span class=\"line\">NSLog(@&quot;%e&quot;, PI * SQUARE(5 - 4));   // 3.141593e+00</span><br><span class=\"line\">    </span><br><span class=\"line\">// #import 导入文件</span><br><span class=\"line\">// #import &quot;example.h&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">// 条件编译</span><br><span class=\"line\">#ifdef __OBJC__</span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>"},{"title":"极客班 Objective-C 高级编程（二）","url":"/2015/07/26/GeekBand-Objective-C-Programming-2/","content":"<h2 id=\"课堂笔记\"><a href=\"#课堂笔记\" class=\"headerlink\" title=\"课堂笔记\"></a>课堂笔记</h2><p><a href=\"http://weibo.com/songduan\">@段松</a> 老师上课喜欢类比生活中的对象，还是比较容易理解的。</p>\n<p>断点的使用可以帮助理解每一行的作用和追踪对象或属性的变化。</p>\n<p>内存管理讲的挺详细，发现课程结构顺序和《iOS 编程》很像。</p>\n<h2 id=\"源码保存在我的-GitHub-GeekBand-iOS-Demo\"><a href=\"#源码保存在我的-GitHub-GeekBand-iOS-Demo\" class=\"headerlink\" title=\"源码保存在我的 GitHub: GeekBand-iOS-Demo\"></a>源码保存在我的 GitHub: <a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Objective-C%20Programming\">GeekBand-iOS-Demo</a></h2>"},{"title":"极客班 Objective-C 高级编程（三）","url":"/2015/08/04/GeekBand-Objective-C-Programming-3/","content":"<h2 id=\"13-集合类\"><a href=\"#13-集合类\" class=\"headerlink\" title=\"13. 集合类\"></a>13. 集合类</h2><p>只要记住有这个方法或类，知道有什么用，不一定非要记住长长的名字，我们随时查看文档即可。</p>\n<h2 id=\"14-代理\"><a href=\"#14-代理\" class=\"headerlink\" title=\"14. 代理\"></a>14. 代理</h2><p>上班怎么收家里衣服：电话请家人、邻居帮忙。</p>\n<p>MVC 为什么使用代理？</p>\n<p>前三步：A、申明代理原型。B、申明代理变量。C、调用代理方法。</p>\n<p>后三步：A、&lt;&gt;申明实现代理。B、设置代理的值。C、实现代理方法。</p>\n<h2 id=\"16-类别、扩展与通知\"><a href=\"#16-类别、扩展与通知\" class=\"headerlink\" title=\"16. 类别、扩展与通知\"></a>16. 类别、扩展与通知</h2><p>Category &amp; Extension</p>\n<ul>\n<li><p>Category给原有的类扩展特有的方法。可以分解文件代码和功能</p>\n</li>\n<li><p>Extension可以扩展变量、属性,可以改写属性的读写属性。</p>\n</li>\n<li><p>什么时候用？</p>\n</li>\n</ul>\n<blockquote>\n<p>BLDemo01 L16 在 ViewController.h 完成代理，非课堂上 AppDelegate.h 中。</p>\n</blockquote>\n<h2 id=\"源码保存在我的-GitHub-GeekBand-iOS-Demo\"><a href=\"#源码保存在我的-GitHub-GeekBand-iOS-Demo\" class=\"headerlink\" title=\"源码保存在我的 GitHub: GeekBand-iOS-Demo\"></a>源码保存在我的 GitHub: <a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Objective-C%20Programming\">GeekBand-iOS-Demo</a></h2>"},{"title":"极客班《Objective-C 高级编程》测试题","url":"/2015/08/08/GeekBand-Objective-C-Test1/","content":"<p>##《Objective-C 高级编程》测试题</p>\n<ol>\n<li>设计一个动物基类。<br>要求: A、抽象出动物的基本属性(包括:性别、名字、体重)。 B、抽象出动物的基本能力(包括:发声)。 C、基本属性性别用枚举定义。</li>\n<li>由题目 1 设计好的动物基类继承,设计一个新的鸟和鱼的子类。 要求:<br>A、鸟类需要扩展颜色属性。 B、鸟类需要扩展飞的方法(方法体输出打印出飞行状态即可)。 C、鱼类需要扩展颜色属性。 D、鱼类需要扩展出游的方法(方法体输出打印游的状态即可)。</li>\n<li>设计好 1、2 两个题目要求的类后,创建一个数组。使用一个循环,生成 10 只鸟、10 条鱼的对象,并将 10 只鸟、10 条鱼的对象加入到创建好的数组中。 最后,遍历这个数组对象,遍历到鸟对象时调用鸟儿飞的方法,遍历到鱼对象 时调用鱼儿游的方法。</li>\n<li>考虑游戏中捞鱼, 随机器捞到 n 条鱼,纪录数量(被捞到的鱼认为对象的生 命周期结束,需要从内存中释放)。打鸟同理。</li>\n</ol>\n<h2 id=\"我的实现\"><a href=\"#我的实现\" class=\"headerlink\" title=\"我的实现\"></a>我的实现</h2><p><a href=\"https://github.com/GeekBand/GeekBand-IOS-1501-Homework/tree/master/G2015010176/Objective-C/BLTest1\">github 源码：BLTest1</a></p>\n<p>复习了类的定义，属性，实例方法，枚举，NSArray，随机数。<br>@孔祥波 老师点评了我的错误实现。自己回来改了很多，终于完成了，也加深了涉及知识点的应用。再次感觉 Google 真是个好东西。</p>\n<p>###实现代码位置：</p>\n<ol>\n<li>一二题目定义类为：GWAnimal，GWBird，GWFish</li>\n<li>三四题对应代码在：ViewController.m 的 - (void)viewDidLoad {}中<br>分别添加 &#x2F;&#x2F; MARK No.3 和 &#x2F;&#x2F; MARK: No.4，方便定位。</li>\n</ol>\n<h3 id=\"注释文档\"><a href=\"#注释文档\" class=\"headerlink\" title=\"注释文档\"></a>注释文档</h3><p>其他的 Headerdoc 为练习写注释文档，尤其是&#x2F;&#x2F; FIXME: Print a more readable result. 和 &#x2F;&#x2F; TODO: Set a NSArray to init randomGWFish. 纯粹凑字数。测试 Swift 哪些可以用在 Objective-C 上。参看： <a href=\"http://nshipster.cn/swift-documentation/\">Swift Documentation</a>。</p>\n<p>其实这个实现是 Objective-C，应该看这一篇的 <a href=\"http://nshipster.com/documentation/\">Documentation</a>：</p>\n<ul>\n<li>@param [param] [Description]: Describes what value should be passed for this parameter</li>\n<li>@return [Description]: Describes the return value of the method</li>\n<li>@see [selector]: Provide “see also” reference to related method</li>\n<li>@warning [description]: Call out exceptional or potentially dangerous behavior</li>\n</ul>\n<blockquote>\n<p>To help speed up the process of documenting your project, you may want to check out the <a href=\"https://github.com/onevcat/VVDocumenter-Xcode\">VVDocumenter-Xcode project</a>, which automatically adds @param and @return labels for methods according to their signature.</p>\n</blockquote>\n<figure class=\"highlight obj-c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK: No.3</span></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *animal = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> *birdNames = @[<span class=\"string\">@&quot;Parrot&quot;</span>, <span class=\"string\">@&quot;Pelican&quot;</span>, <span class=\"string\">@&quot;Raptor&quot;</span>, <span class=\"string\">@&quot;Ural&quot;</span>, <span class=\"string\">@&quot;Owls&quot;</span>, <span class=\"string\">@&quot;BABY BLUE&quot;</span>, <span class=\"string\">@&quot;AIDEN&quot;</span>, <span class=\"string\">@&quot;BB&quot;</span>, <span class=\"string\">@&quot;DAVE&quot;</span>, <span class=\"string\">@&quot;CHILI&quot;</span>];</span><br><span class=\"line\">    GWBird *randomGWBird = [[GWBird alloc] initWithName:birdNames[i] gender:(Gender)(arc4random() % <span class=\"number\">2</span>) weight:(<span class=\"built_in\">NSUInteger</span>)(arc4random() % <span class=\"number\">100</span>)];</span><br><span class=\"line\">    randomGWBird.color = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    [animal addObject:randomGWBird];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Set a NSArray to init randomGWFish.</span></span><br><span class=\"line\">    GWFish *randomGWFish = [[GWFish alloc] initWithName:<span class=\"string\">@&quot;Fish&quot;</span> gender:(Gender)(arc4random() % <span class=\"number\">2</span>) weight:(<span class=\"built_in\">NSUInteger</span>)(arc4random() % <span class=\"number\">100</span>)];</span><br><span class=\"line\">    randomGWFish.color = [<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">0.0</span> green:<span class=\"number\">1.0</span> blue:<span class=\"number\">0.0</span> alpha:<span class=\"number\">1.0</span>];</span><br><span class=\"line\">    [animal addObject:randomGWFish];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; [animal count]; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([animal[i] isKindOfClass:[GWBird <span class=\"keyword\">class</span>]]) &#123;</span><br><span class=\"line\">        [animal[i] fly];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([animal[i] isKindOfClass:[GWFish <span class=\"keyword\">class</span>]]) &#123;</span><br><span class=\"line\">        [animal[i] swim];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK: No.4</span></span><br><span class=\"line\"><span class=\"type\">int</span> fishCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> birdCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSUInteger</span> randomRemoveNumber = (<span class=\"built_in\">NSUInteger</span>)(arc4random() % <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">NSUInteger</span> i = randomRemoveNumber; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSUInteger</span> randomIndex = (<span class=\"built_in\">NSUInteger</span>)(arc4random() % i);</span><br><span class=\"line\">    [animal removeObjectAtIndex:randomIndex];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([animal[randomIndex] isKindOfClass:[GWBird <span class=\"keyword\">class</span>]]) &#123;</span><br><span class=\"line\">        birdCount++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([animal[randomIndex] isKindOfClass:[GWFish <span class=\"keyword\">class</span>]]) &#123;</span><br><span class=\"line\">        fishCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">FIXME:</span> Print a more readable result.</span></span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;fishCount:%d, birdCount:%d, randomRemoveNumber:%lu, [animal count]:%lu&quot;</span>, fishCount, birdCount, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)randomRemoveNumber, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)[animal count]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"GeekBand Test 2","url":"/2015/08/22/GeekBand-Test-2/","content":"<h2 id=\"做习题涉及和想到的点\"><a href=\"#做习题涉及和想到的点\" class=\"headerlink\" title=\"做习题涉及和想到的点\"></a>做习题涉及和想到的点</h2><blockquote>\n<p>我的习题代码 <a href=\"https://github.com/gewill/GeekBand-IOS-1501-Homework/tree/new-branch/G2015010176/iOS%20APP%20Development\">Github</a></p>\n</blockquote>\n<ul>\n<li>Lazy load image in table view: Apple example<br><a href=\"https://developer.apple.com/library/ios/samplecode/LazyTableImages/Introduction/Intro.html\">LazyTableImagesor</a> or <a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a></li>\n<li>Try NSURLSession </li>\n<li>望文生义的能力很重要</li>\n<li>拿到一个项目代码，start step into from initial view，了解了整个 app 的运行时的结构或循环，才能理解整个 app 的逻辑框架。</li>\n<li>框架&gt;目录&gt;类&gt;方法&gt;属性&#x2F;实例变量，这样子下来整个一个 App 就跑起来了，入口就是 main.m，然后各种设置属性和发消息，基于事件驱动的这一层理解运行时是比较合适的颗粒。</li>\n<li>Lazy load iamge use AFNetworking</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">[cell.appImage setImageWithURL:[<span class=\"built_in\">NSURL</span> URLWithString:[mediumImage valueForKeyPath:<span class=\"string\">@&quot;label&quot;</span>]] placeholderImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@&quot;placeholder&quot;</span>]];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"习题完成情况\"><a href=\"#习题完成情况\" class=\"headerlink\" title=\"习题完成情况\"></a>习题完成情况</h2><h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3><p>完成 1.0:</p>\n<ul>\n<li>实现 table view 自带刷新</li>\n<li>添加 Cellular 开关，并能够检查网络连接方式，并提醒用户</li>\n<li>NSURLSession 下载 JSON</li>\n</ul>\n<blockquote>\n<p>2015-08-26</p>\n</blockquote>\n<p>进行中 1.1: </p>\n<ul>\n<li>Lazy load iamge use AFNetworking</li>\n</ul>\n<blockquote>\n<p>2015-09-03 11:36:32</p>\n</blockquote>\n<h3 id=\"Further-Reading\"><a href=\"#Further-Reading\" class=\"headerlink\" title=\"Further Reading\"></a>Further Reading</h3><ul>\n<li><p><a href=\"http://blog.ibireme.com/2015/05/18/runloop/#apple\">深入理解 RunLoop</a></p>\n<blockquote>\n<p>通过 Runloop 讲解了 NSURLConnection 的工作过程<br>iOS 中，关于网络请求的接口自下至上有如下几层:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CFSocket</span></span><br><span class=\"line\"><span class=\"built_in\">CFNetwork</span>       -&gt;ASIHttpRequest</span><br><span class=\"line\"><span class=\"built_in\">NSURLConnection</span> -&gt;AFNetworking</span><br><span class=\"line\"><span class=\"built_in\">NSURLSession</span>    -&gt;AFNetworking2, Alamofire</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>CFSocket 是最底层的接口，只负责 socket 通信。</p>\n</li>\n<li><p>CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。</p>\n</li>\n<li><p>NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。</p>\n</li>\n<li><p>NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。</p>\n</li>\n<li><p><a href=\"http://cocoadocs.org/docsets/AFNetworking/2.6.0/index.html\">Network Reachability Manager</a></p>\n<blockquote>\n<p>AFNetworkReachabilityManager monitors the reachability of domains, and addresses for both WWAN and WiFi network interfaces.</p>\n</blockquote>\n<blockquote>\n<p>Do not use Reachability to determine if the original request should be sent.</p>\n</blockquote>\n</li>\n</ul>\n<p>You should try to send it.<br>You can use Reachability to determine when a request should be automatically retried.<br>Although it may still fail, a Reachability notification that the connectivity is available is a good time to retry something.<br>Network reachability is a useful tool for determining why a request might have failed.<br>After a network request has failed, telling the user they’re offline is better than giving them a more technical but accurate error, such as “request timed out.”</p>\n<ul>\n<li><p>See also <a href=\"https://developer.apple.com/videos/wwdc/2012/#706%22\">WWDC 2012 session 706, “Networking Best Practices</a>.</p>\n</li>\n<li><p><a href=\"https://github.com/rs/SDWebImage\">SDWebImage</a></p>\n<blockquote>\n<p>AFNetworking takes advantage of Foundation URL Loading System caching using NSURLCache, as well as a configurable in-memory cache for UIImageView and UIButton, which uses NSCache by default. Caching behavior can be further specified in the caching policy of a corresponding NSURLRequest. Other SDWebImage features, like background decompression of image data is also provided by AFNetworking.</p>\n</blockquote>\n<blockquote>\n<p>If you’re already using AFNetworking and just want an easy async image loading category, the built-in UIKit extensions will probably fit your needs.\n  </p>\n</blockquote>\n</li>\n<li><p><a href=\"https://github.com/AFNetworking/AFNetworking\">AFNetworking</a> example</p>\n<blockquote>\n<p>iOS example 非常经典，包含了使用方法和一个 UITableView实用框架。</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://www.raywenderlich.com/59255/afnetworking-2-0-tutorial\">AFNetworking 2.0 Tutorial</a></p>\n</li>\n</ul>\n<h2 id=\"测试题原文\"><a href=\"#测试题原文\" class=\"headerlink\" title=\"测试题原文\"></a>测试题原文</h2><h3 id=\"1-做一个类似微信的聊天的-tableview-tablewviewcell-自定义-。只需要-显示文字内容和用户头像-不需要做输入部分-文字内容自己模拟\"><a href=\"#1-做一个类似微信的聊天的-tableview-tablewviewcell-自定义-。只需要-显示文字内容和用户头像-不需要做输入部分-文字内容自己模拟\" class=\"headerlink\" title=\"1. 做一个类似微信的聊天的 tableview(tablewviewcell 自定义) 。只需要 显示文字内容和用户头像(不需要做输入部分,文字内容自己模拟)\"></a>1. 做一个类似微信的聊天的 tableview(tablewviewcell 自定义) 。只需要 显示文字内容和用户头像(不需要做输入部分,文字内容自己模拟)</h3><p>1 必须实现文字内容背景<br>2 背景的长度和高度要合适<br>3 发生者和接受者左右布局区分  </p>\n<h3 id=\"2-使用-http-api-请求解析-json-or-xml-数据-并且使用-tableview-展示出来-http-ax-itunes-apple-com-WebObjects-MZStoreServices-woa-ws-RSS-toppaidapplications-limit-10-json-or-xml\"><a href=\"#2-使用-http-api-请求解析-json-or-xml-数据-并且使用-tableview-展示出来-http-ax-itunes-apple-com-WebObjects-MZStoreServices-woa-ws-RSS-toppaidapplications-limit-10-json-or-xml\" class=\"headerlink\" title=\"2. 使用 http api 请求解析 json or xml 数据,并且使用 tableview 展示出来 http://ax.itunes.apple.com/WebObjects/MZStoreServices.woa/ws/RSS/toppaidapplications/limit=10/json or xml\"></a>2. 使用 http api 请求解析 json or xml 数据,并且使用 tableview 展示出来 <a href=\"http://ax.itunes.apple.com/WebObjects/MZStoreServices.woa/ws/RSS/toppaidapplications/limit=10/json\">http://ax.itunes.apple.com/WebObjects/MZStoreServices.woa/ws/RSS/toppaidapplications/limit=10/json</a> or xml</h3><p><strong>提示</strong>:  </p>\n<ol>\n<li>可以使用第三方库,也可以使用 SDK 基础库  </li>\n<li>显示网络下载数据时间  </li>\n<li>比较 xml or json 解析效率  </li>\n<li>tableviewcell自定义</li>\n</ol>\n<p>注:</p>\n<ul>\n<li>希望大家在一周内上传答案到极客班 github 个人的作业文件夹(以学生编 号命名)</li>\n<li>IOS 专业 Github 目录: <a href=\"https://github.com/GeekBand/GeekBand-IOS-1501-Homework\">https://github.com/GeekBand/GeekBand-IOS-1501-Homework</a></li>\n<li>老师会在直播环节点评此题</li>\n<li>作业的最终批改和成绩公布会在结业时进行。</li>\n</ul>\n"},{"title":"极客班线下翻转课堂第一周","url":"/2015/07/19/GeekBand-flip-classroom-week-1/","content":"<p>极客班线下翻转课堂第一周，坐标浦东软件园，时间7月19日。</p>\n<p>一天下来学习不少关于开发和产品的干货，感觉获益匪浅，但是还是要以后的学习和项目中实践可能才会理解透彻。本来参加极客班，是因为一个人独自钻研太累进展缓慢，现在感觉豁然开朗，信心十足，最主要的是有了学习的精神头，希望这一份主动性能够持续下去。既然 iOS 是我兴趣爱好，完成线上课程的同时，完成自我管理自律，明天图书馆约起。</p>\n<p>课程安排的是线上课堂和项目实践同时进行，我想也多少和 Tiny 老师提到的学习方法相通：先了解官方文档 Guidelines，Release note，Documentation，理清楚技术架构关系，项目实际使用技术重点学习突破，也就完成了项目（大意如此）。</p>\n<p>今天最大缺憾是没有和老师同学很好的交流，\b无论是上台提创意，提问题，听课有疑问没有去请教。一则我一直性格害羞内向，二则因为一造成的缺乏想法表达能力和技巧。性格弱我早就知道，天天提醒自己最棒能做好，希望能一点点进步。</p>\n<p><strong>以下是课程安排：</strong></p>\n<h2 id=\"自我介绍：\"><a href=\"#自我介绍：\" class=\"headerlink\" title=\"自我介绍：\"></a>自我介绍：</h2><p>一部分同学是网络，开发，室内设计，摄影，大三，多是因为兴趣爱好报名的。但更多的都已经是几年的开发经验，还有几个是5-10年的，没有开发工作经验的我要努力了，不能落了后。</p>\n<h2 id=\"李建忠\"><a href=\"#李建忠\" class=\"headerlink\" title=\"@李建忠\"></a><a href=\"http://weibo.com/jzli\">@李建忠</a></h2><p>线下班推你下水，逼你学会游泳。真实做项目中学习技术。</p>\n<p>推荐 iOS 样板项目供同学选择：</p>\n<ul>\n<li>移动的 Blog</li>\n<li>交互式白板</li>\n<li>多媒体相册</li>\n</ul>\n<h2 id=\"Tinyfool\"><a href=\"#Tinyfool\" class=\"headerlink\" title=\"@Tinyfool\"></a><a href=\"http://weibo.com/tinyfool\">@Tinyfool</a></h2><ul>\n<li><p>全栈：建筑学-掌握全局</p>\n<p>实际项目需要技术和知识，如何组合运用到项目中，再去详细学习。培训目的，自主学习，遇到具体的难题可以提问。</p>\n</li>\n<li><p>创业： Zero to One，先失败，项目火之前少有人认同，先做一个简版让客户评判</p>\n</li>\n<li><p>项目管理：项目迭代去做，MVP，如：10行代码，成就感，</p>\n<p>PM 和程序员关系，需求<strong>优先级</strong>往往没说，程序员<strong>分功能评估时间</strong>。两者之间的如何协作好，进度表中的关键：细分技术评估时间，确定优先级。</p>\n</li>\n<li><p>融资-&gt;招人-&gt;离职，半年才招齐人</p>\n</li>\n<li><p>创业泥潭，产品不温不火，添加不靠谱功能</p>\n</li>\n<li><p>UX 优先级低于功能实现</p>\n</li>\n<li><p>先站出来才有人认识你，占尽便宜 </p>\n</li>\n<li><p>以后课堂不说了，只接受提问交流</p>\n</li>\n</ul>\n<h2 id=\"孔祥波\"><a href=\"#孔祥波\" class=\"headerlink\" title=\"孔祥波\"></a>孔祥波</h2><p>经历：Unix&#x2F;SA-&gt;SP-&gt;Python-&gt;OC</p>\n<p>写代码自我要求，优秀。不要用直接抄袭其他产品。</p>\n<p>知识像产品迭代，每次看一个知识都会不一样的理解。能讲解一个知识或技术，说明真的懂了。例如：UIObject等的继承关系。</p>\n<h2 id=\"大家提创意项目：\"><a href=\"#大家提创意项目：\" class=\"headerlink\" title=\"大家提创意项目：\"></a>大家提创意项目：</h2><ul>\n<li>信贷员工具项目</li>\n<li>个人版历史上的今天</li>\n<li>局域网多屏互动</li>\n<li>摄影项目</li>\n<li>个人头像贴图</li>\n</ul>\n<h2 id=\"董飞\"><a href=\"#董飞\" class=\"headerlink\" title=\"董飞\"></a><a href=\"http://www.zhihu.com/people/dongfei\">董飞</a></h2><p><a href=\"http://geekband.com/course/syllabus/10\">算法原理与实践</a> 课程知识梳理。</p>\n<h2 id=\"投票分组选项目\"><a href=\"#投票分组选项目\" class=\"headerlink\" title=\"投票分组选项目\"></a>投票分组选项目</h2><p>互联网：UGC(User-generated content)、用户互动、公司基因创始人背景专业</p>\n<p>组团学习重要性，学习是动词</p>\n<p>证书不重要，重要的是真正学习成长</p>\n<p>重分享：output 带动 input</p>\n<p>TODO：第一周的功能列表，团队 GitHub账号</p>\n<p>我选了信贷员工具项目。</p>\n"},{"title":"GeekBand Test 3: Classmates","url":"/2015/09/01/GeekBand-Test-3-Classmates/","content":"<p>极客班iOS应用开发实战测试题二（8月31日）</p>\n<p>习题：同学录</p>\n<blockquote>\n<p>项目源码见 <a href=\"https://github.com/gewill/GeekBand-IOS-1501-Homework/tree/new-branch/G2015010176/%E6%9E%81%E5%AE%A2%E7%8F%ADiOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%B5%8B%E8%AF%95%E9%A2%98%E4%BA%8C%EF%BC%888%E6%9C%8831%E6%97%A5%EF%BC%89\">GitHub</a>。</p>\n<p>v1.5以后使用 CocoaPods，<code>.gitignore</code>包含<code>/pod</code>，下载后请 <code>pod install</code>。</p>\n</blockquote>\n<h2 id=\"1-题目要求：\"><a href=\"#1-题目要求：\" class=\"headerlink\" title=\"1. 题目要求：\"></a>1. 题目要求：</h2><ul>\n<li>实现一个同学录列表，包含姓名、简介和头像等信息。</li>\n<li>可以添加新的同学，支持拍照添加头像。</li>\n<li>可以查看每一个的同学详情页。</li>\n<li>实现存储所有同学的信息。</li>\n</ul>\n<p><img src=\"http://i.imgur.com/kdKYL12.png\" alt=\"Classmates\"></p>\n<h2 id=\"2-实际开发遇到的点：\"><a href=\"#2-实际开发遇到的点：\" class=\"headerlink\" title=\"2. 实际开发遇到的点：\"></a>2. 实际开发遇到的点：</h2><ul>\n<li>Add Parse</li>\n<li>Add iCloud</li>\n<li>input view : <a href=\"https://github.com/slackhq/SlackTextViewController\">https://github.com/slackhq/SlackTextViewController</a></li>\n<li>统一的属性命名，vc，db，object</li>\n<li>各种输入框的逻辑处理和键盘跳出前后 UI 自动调整：<a href=\"http://code.tutsplus.com/tutorials/ios-sdk-keeping-content-from-underneath-the-keyboard--mobile-6103\">http://code.tutsplus.com/tutorials/ios-sdk-keeping-content-from-underneath-the-keyboard--mobile-6103</a></li>\n<li>添加删除，编辑功能</li>\n<li>Search</li>\n<li>Sort</li>\n<li>清晰的项目目录结构</li>\n<li>Dash 集成了 Cocoa Docsets： 如 Realm、FFDB &amp; AFNetworking etc.</li>\n<li>Dash Bookmark 有点用，可惜不能同步到 iOS</li>\n<li>Use Realm</li>\n<li>学习新的框架或知识点：一看 API，二看 Examples</li>\n<li>Realm query 还需熟悉提高</li>\n<li>Debug 尤其需要提高，思路要清晰，断点可以下多几个，查值要玩转。</li>\n<li>The Realm Browser is <a href=\"https://itunes.apple.com/app/realm-browser/id1007457278\">available on the Mac App Store</a>.</li>\n<li><a href=\"http://www.runoob.com/sqlite/sqlite-data-types.html\">SQLite 数据类型</a></li>\n<li>Updating Objects</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Updating Objects with primary keys</span></span><br><span class=\"line\"><span class=\"comment\">// This will make properties no settled be NULL</span></span><br><span class=\"line\">[GWClassmate createOrUpdateInDefaultRealmWithValue:newClassmate];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>两种编辑保存界面: 微信进入编辑的界面，Back 有个Alert确认保存; Phone.app 则是禁用右滑和 Back，显示 Cancel &amp; Done，也是完善的方案。<br><img src=\"http://ww2.sinaimg.cn/large/5369602ejw1evo9v2ahltj20ts15p43r.jpg\" alt=\"Edit View\"></p>\n</li>\n<li><p>Estimating default values for properties of Classmate</p>\n<ul>\n<li>In <code>Domain Logic</code>: ClassmateDB.h&#x2F;m (BEST Solution)</li>\n<li>In <code>Model</code>: Classmate.h&#x2F;m, Specify default values. BUT Realm isn’t support nil property.</li>\n<li>In <code>View Controller</code>: if&#x2F;esle</li>\n<li>In <code>Interface Builder</code>: Setting a default value. Especially giving a default avatar is a nice solution for user.</li>\n</ul>\n<blockquote>\n<p><a href=\"http://cocoadocs.org/docsets/Realm/0.95.0/Constants/RLMPropertyType.html\">RLMPropertyType Constants Reference</a>\n  </p>\n</blockquote>\n</li>\n<li><p>“To use AVAsset to extract metadata informations, this post is useful.” <a href=\"http://stackoverflow.com/questions/16318821/extracting-mp3-album-artwork-in-ios\">http://stackoverflow.com/questions/16318821/extracting-mp3-album-artwork-in-ios</a></p>\n</li>\n<li><p><a href=\"http://jacopretorius.net/2013/02/playing-video-in-ios.html\">Playing video in iOS</a></p>\n</li>\n<li><p>Use Clang-Format -&gt; LLVM (default)</p>\n</li>\n</ul>\n<h2 id=\"3-项目完成情况：\"><a href=\"#3-项目完成情况：\" class=\"headerlink\" title=\"3. 项目完成情况：\"></a>3. 项目完成情况：</h2><p>完成1.0: </p>\n<ul>\n<li>基本功能完成</li>\n<li>列表使用了缩略图，待优化直接保存数据库</li>\n<li>输入键盘时，View 自动升降一个键盘高度，以保持可见</li>\n<li>保存是检验用户名，不能为空</li>\n<li>使用 Realm 数据库</li>\n<li>classmate.h&#x2F;m 为 Model，四个属性分别为：uuid、name、info &amp; avator</li>\n<li>Using GWDetailViewController as super class to GWShowDetailViewController can easy to create a new view.</li>\n</ul>\n<blockquote>\n<p>2015-08-31 20:17:00</p>\n</blockquote>\n<p>完成1.1:</p>\n<ul>\n<li>使用 FMDB</li>\n</ul>\n<blockquote>\n<p>把习题同学录的存储 Realm 换成 FMDB，午饭到16：00还没吃，我的学习新的知识的能力还比较低的。需要投入更多时间来学习了。</p>\n</blockquote>\n<blockquote>\n<p>2015-09-01 16:09:00</p>\n</blockquote>\n<p>完成1.2:</p>\n<ul>\n<li>换回 Realm</li>\n<li>增加编辑和删除功能</li>\n</ul>\n<blockquote>\n<p>2015-09-01 20:00:00</p>\n</blockquote>\n<p>完成1.3:</p>\n<ul>\n<li>随机添加修改和删除10000个classmate，以测试性能</li>\n<li>Add a tab bar view as root view </li>\n<li>UI layout like Wechat </li>\n<li>Set UUID as parimary key </li>\n<li>Updating Objects With Primary Keys</li>\n<li>把取消按钮改为 Button，并把 Segue to GWDetailViewController &amp; GWShowDetailViewController， 改为 Modle</li>\n<li>New a manaager class: GWClassmateDB, to abstract most useful SUQD methods and testing methods.</li>\n</ul>\n<blockquote>\n<p>2015-09-02 18:20:47</p>\n</blockquote>\n<p>完成1.4:</p>\n<ul>\n<li>Change cell’s Accessory form Detail to Disclosure Indicator</li>\n<li>Specify default values for properties of Classmate.h&#x2F;m</li>\n<li>Add Music Tab</li>\n<li>Add a “red dot badge” on avatars’ view for test. </li>\n<li>Change the classmates display style. Just looks like WeChat.app.</li>\n</ul>\n<blockquote>\n<p>2015-09-06 11:43:19</p>\n</blockquote>\n<p><img src=\"http://i.imgur.com/2lEu3Og.jpg\" alt=\"Classmates v1.4\"></p>\n<p>进行中1.5:</p>\n<ul>\n<li>Adapting to MVVM</li>\n<li><a href=\"http://objccn.io/issue-15-2/\">XCTest</a></li>\n<li>Add a ‘Edit’ Button, and after taped the ‘back’ button in navigation change to “cancel”, add a “Done” in right. Just looks like Phone.app.</li>\n<li>Add Sort by name, and index by initial</li>\n<li>Add Search</li>\n</ul>\n<h2 id=\"4-BUG\"><a href=\"#4-BUG\" class=\"headerlink\" title=\"4. BUG\"></a>4. BUG</h2><p>以下的代码提示越界错误：Terminating app due to uncaught exception ‘RLMException’, reason: ‘Index is out of bounds.’可能的原因：</p>\n<blockquote>\n<p>需要注意的是，写入操作会相互阻塞，而且其相对应的进程也会受到影响。这和其他的永久数据存储解决方案是一样的，所以我们建议你使用常用的，也是最有效的方案， 将所有写入放到一个单独的进程中。<a href=\"https://realm.io/cn/docs/objc/latest/\">https://realm.io/cn/docs/objc/latest/</a></p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"type\">id</span>)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([segue.identifier isEqualToString:<span class=\"string\">@&quot;showDetail&quot;</span>]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSIndexPath</span> *indexPath = [<span class=\"keyword\">self</span>.tableView indexPathForCell:sender];</span><br><span class=\"line\">        GWCustomTableViewCell *cell = (GWCustomTableViewCell *)[<span class=\"keyword\">self</span>.tableView cellForRowAtIndexPath:indexPath];</span><br><span class=\"line\">        </span><br><span class=\"line\">        GWDetailViewController *vc = (GWDetailViewController *)segue.destinationViewController;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//        vc.userid       = cell.userid;</span></span><br><span class=\"line\">        vc.name.text    = cell.name.text;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最终解决方法是修改 Custom Cell 中添加一个 UILabel 的 text 来存储 UUID，并设置为隐藏。并添加使用 Detail Disclosure 测试 NSLog UUID。具体的越界问题，还需要在研究。</p>\n<h2 id=\"5-Further-Reading\"><a href=\"#5-Further-Reading\" class=\"headerlink\" title=\"5. Further Reading\"></a>5. Further Reading</h2><ul>\n<li><a href=\"http://nshipster.com/random/\">rand(3) &#x2F; random(3) &#x2F; arc4random(3) &#x2F; et al.</a></li>\n<li><a href=\"http://blog.ibireme.com/2015/05/18/runloop/#apple\">深入理解 RunLoop</a></li>\n</ul>\n"},{"title":"极客班线下翻转课堂第二周","url":"/2015/07/25/GeekBand-flip-classroom-week-2/","content":"<h2 id=\"李建忠：课程安排\"><a href=\"#李建忠：课程安排\" class=\"headerlink\" title=\"@李建忠：课程安排\"></a><a href=\"http://weibo.com/jzli\">@李建忠</a>：课程安排</h2><p>startup：账号系统，登陆系统，setting，有时间的组员可以多做一点</p>\n<p>项目变化，很正常，确定人员分配，推动项目往前走。</p>\n<h2 id=\"袁店明：探讨产品\"><a href=\"#袁店明：探讨产品\" class=\"headerlink\" title=\"@袁店明：探讨产品\"></a><a href=\"http://weibo.com/80yuandm\">@袁店明</a>：探讨产品</h2><p>我们小组的项目“一秒”：需求真实性，目的在哪里，目标用户为什么会用，解决什么问题。</p>\n<p>添加一个主题：亲子成长，空气环境变化。</p>\n<p>分享带有主题的视频，类似 iMovie 的手机版</p>\n<p>很多时候需求都是你自己猜想的，产品的使用场景，都是需要验证的！</p>\n<p><strong>言语表达要求很高。</strong></p>\n<p><strong>语言描述要准确</strong>，不一定要非常简练华丽。</p>\n<blockquote>\n<p><a href=\"http://weibo.com/jzli\">@李建忠</a>: A good thinker is a good talker.</p>\n</blockquote>\n<p>例子：上班很远，并不是所有人都是问题，并不是所有人都一样的界定。所以提供的解决方案都不一样，用户真实的上班方式开车自行车走路，又该如何解决？要面对面访谈用户，电话次之。</p>\n<p>产品探索过程中，要抛弃自己的创意和解决方法，重点在用户的需求和相应的解决方案，最后收敛（投票和排序重要性）成一个产品。</p>\n<p>所有人：销售运营开发测试产品经理坐在一起产品的逻辑推理，然后才能进行用户访谈。</p>\n<p>用户细分，不然找错人浪费了时间经理。</p>\n<p>这一套做产品思维，可以用工作中，如正在培训的创业公司敏捷开发。</p>\n<p>不要让天使用户看到你的访谈的问题。</p>\n<p>热点事件来分析，<strong>提高逻辑推理</strong>。推荐<a href=\"http://book.douban.com/subject/1137278/\">《系统化思维导论》</a>。</p>\n<p>最近在看<a href=\"http://book.douban.com/subject/26278639/\">《精益数据分析》</a>。</p>\n<p>用户群不要混合现有用户群来定义你的用户群，如：色影无忌和蜂鸟网</p>\n<p>用户发现问题-&gt;寻找解决方案-&gt;找到产品-&gt;愿意付费</p>\n<blockquote>\n<p>我是 iOS 学员，关于产品方面听来挺过瘾。多谢 Tele Deng 的笔记：<a href=\"http://note.youdao.com/share/?id=befe7cc6bef23e9f7d6ceb4fe4567590&type=note\">【极客班-精益产品探索】第一周课堂笔记</a>。</p>\n</blockquote>\n<h2 id=\"段松：iOS-大纲的梳理\"><a href=\"#段松：iOS-大纲的梳理\" class=\"headerlink\" title=\"@段松：iOS 大纲的梳理\"></a><a href=\"http://weibo.com/songduan\">@段松</a>：iOS 大纲的梳理</h2><blockquote>\n<p>说话真心快</p>\n</blockquote>\n<p>创业中：<a href=\"https://itunes.apple.com/us/app/jian-mei-le/id1001465884?mt=8\">健美乐</a></p>\n<p>过去培训经验：5小时 * 12天完成培训，走向职场。</p>\n<p>不是看了多少书，死记硬背了多少知识点，更多是写代码的能力，写的多了自然会用了。</p>\n<p>学习过程中类比现实生活中的东西，可能比较容易理解。</p>\n<p>代理就是委托，力有不逮时，联系朋友去完成。</p>\n<p>学习方法：就是梳理大纲知识点，掌握要点，理清楚后，自己写代码自然就会了。</p>\n<p>先学习整体框架，后学习细节。</p>\n<p>UITabBarViewController 90%使用的框架。</p>\n<p>UITableView</p>\n<p>实战中的两种应用框架（后续课程）</p>\n<p>查看开源项目，删除多余的部分，只看自己关注的部分。最基本也要会用开源框架。</p>\n<p>iOS 数据结构用的不多。</p>\n<p>分享易庆晟的笔记：<a href=\"http://www.jianshu.com/p/8a24ffc1dd22\">GeekBand第二周线下课堂</a>，总结的非常好。</p>\n<h2 id=\"李建忠：C-辅导\"><a href=\"#李建忠：C-辅导\" class=\"headerlink\" title=\"@李建忠：C++ 辅导\"></a><a href=\"http://weibo.com/jzli\">@李建忠</a>：C++ 辅导</h2><p>分享 X-Lion 的 C++ 笔记：<a href=\"http://blog.csdn.net/lionpku/article/details/47059299?from=timeline&isappinstalled=0\">极客班GeekBand - C++第一次课程辅导 - 李建忠</a>，和于航的笔记：<a href=\"http://www.yhspy.com/blog/67.html\">GeekBank极客班C++线下班学习心得（二）</a>。</p>\n<h2 id=\"李建忠：确定项目\"><a href=\"#李建忠：确定项目\" class=\"headerlink\" title=\"@李建忠：确定项目\"></a><a href=\"http://weibo.com/jzli\">@李建忠</a>：确定项目</h2><p>均衡组员分配，iOS&#x2F;C++&#x2F;PM，考虑到产品上线审核产生的延迟，要提前两周就要完成项目，约9月12日。</p>\n<p> <strong>基于 MVP，产品原型图和技术要点分解同步进行，快速迭代，让真实项目催促你前进。</strong></p>\n<p>一天下来，我们小组项目最终打磨为：“一秒变大人”，张诚 PM、我和易庆晟iOS 方面、郭意亮 C++ 技术、还有新加入的沈秋艳 PM，希望尽快下周末前出第一个版本。</p>\n<p>我负责项目图片视频处理方面，TODO：</p>\n<p>-阅读图片视频相关的文档<br>-objc.io 关于图片视频的小节<br>-找几个相关开源的项目</p>\n<p>Swift or Objective-C？虽然两门课都有，但是我还是❤️Swift，并不仅仅因为❤️Taylor。</p>\n"},{"title":"极客班线下翻转课堂第三周","url":"/2015/08/03/GeekBand-flip-classroom-week-3/","content":"<p>读书很重要，但是学习起步阶段还是跟老师前辈学习，容易入”门”。</p>\n<p>上午听了产品经理的课，感觉对公司产品有了更直接的了解，更多的是面向用户面向市场的考虑。</p>\n<p>小组项目基本确定，期待一周内见到它。</p>\n<h2 id=\"王程远\"><a href=\"#王程远\" class=\"headerlink\" title=\"王程远\"></a>王程远</h2><p>淘宝4年产品经理</p>\n<p>产品经理要有无授权领导能力</p>\n<p>视觉设计和交互设计角色，不一定等同于具体一个人。</p>\n<p>豆瓣小组是社区运营典范，其搜索排序算法：小组浓度，重心在核心用户质量</p>\n<p>投资砸钱考虑RY</p>\n<p>多变的奖励让用户成为深度用户 </p>\n<p>推荐书：<a href=\"http://www.amazon.com/Hooked-How-Build-Habit-Forming-Products-ebook/dp/B00HJ4A43S\">Hooked: How to Build Habit-Forming Products</a></p>\n<blockquote>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Product_manager\"><strong>product manager</strong></a> investigates, selects, and drives the development of products for an organization, performing the activities of <a href=\"https://www.wikiwand.com/en/Product_management\">product management</a>.</p>\n<p>In some companies, the product manager also acts as a:</p>\n<p>-<a href=\"https://www.wikiwand.com/en/Product_marketing\">Product marketing</a> manager — may perform all <a href=\"https://www.wikiwand.com/en/Marketing_communications\">outbound marketing</a> activities in the older sense of the term<br>-<a href=\"https://www.wikiwand.com/en/Project_manager\">Project manager</a> — may perform all activities related to schedule and resource management<br>-<a href=\"https://www.wikiwand.com/en/Program_manager\">Program manager</a> — may perform activities related to schedule, resource, and cross-functional execution</p>\n</blockquote>\n<h2 id=\"Tinyfool\"><a href=\"#Tinyfool\" class=\"headerlink\" title=\"Tinyfool\"></a>Tinyfool</h2><p>-Git: 模块细分好</p>\n<p>-时间周期：至少有个版本</p>\n<p>-看文档：还需要自主学习，扫目录索引记忆，术语概念明白</p>\n<h2 id=\"小组技术讨论\"><a href=\"#小组技术讨论\" class=\"headerlink\" title=\"小组技术讨论\"></a>小组技术讨论</h2><p>郭意亮：技术分解原型图，大致分了相机和 UI 界面。尽可能地分解每一步，并画出原型图。我和易庆晟分别负责相机和 UI，下周交付出一个MVP出来。</p>\n"},{"title":"极客班线下翻转课堂第四周","url":"/2015/08/08/GeekBand-flip-classroom-week-4/","content":"<h2 id=\"日程安装\"><a href=\"#日程安装\" class=\"headerlink\" title=\"日程安装\"></a>日程安装</h2><ul>\n<li>上午完成测试题目</li>\n<li>下午项目可行性的探讨，是否砍掉</li>\n</ul>\n<h2 id=\"芦苇：-BRD-x2F-MRD文档撰写指导\"><a href=\"#芦苇：-BRD-x2F-MRD文档撰写指导\" class=\"headerlink\" title=\"@芦苇： BRD&#x2F;MRD文档撰写指导\"></a>@芦苇： BRD&#x2F;MRD文档撰写指导</h2><p>###产品的7问：</p>\n<ol>\n<li>做什么</li>\n<li>为谁做</li>\n<li>市场有多大</li>\n<li>竞争对手</li>\n<li>时机</li>\n<li>如何打造核心竞争力</li>\n<li>阶段性的目标</li>\n</ol>\n<p><strong>想清楚做什么，可能做起来会容易一点。</strong></p>\n<h2 id=\"项目可行性的探讨\"><a href=\"#项目可行性的探讨\" class=\"headerlink\" title=\"项目可行性的探讨\"></a>项目可行性的探讨</h2><p>@孔祥波：主界面日历方式的实现：锻炼逻辑，都是一些基础的，实现布局和代理的。可以学习 table view 的整个逻辑，datasource、delegate，</p>\n<p>小组讨论了：几个页面和存储功能开发的分配，添加 task 到 Teambition。</p>\n<p>@李建忠：产品核心竞争力，亮点有没有？不仅仅要学习技术，更是要学会做一个好的产品，做出来一个好的产品。</p>\n<p>要好好想想我们项目的方向问题。</p>\n<h2 id=\"最后下周-Swift-开课，晒一下新书\"><a href=\"#最后下周-Swift-开课，晒一下新书\" class=\"headerlink\" title=\"最后下周 Swift 开课，晒一下新书\"></a>最后下周 Swift 开课，晒一下新书</h2><p><img src=\"http://ww4.sinaimg.cn/large/5369602ejw1euvif8kwalj21kw16oki5.jpg\" alt=\"Swift books\"></p>\n"},{"title":"极客班线下翻转课堂第五周","url":"/2015/08/15/GeekBand-flip-classroom-week-5/","content":"<p>今天主要是和项目的团队沟通进度，Tonyfool的分享很有料。</p>\n<h2 id=\"Tonyfool-分享\"><a href=\"#Tonyfool-分享\" class=\"headerlink\" title=\"Tonyfool 分享\"></a>Tonyfool 分享</h2><h3 id=\"演讲能力\"><a href=\"#演讲能力\" class=\"headerlink\" title=\"演讲能力\"></a>演讲能力</h3><p>忽悠能力低于水平，不会表达，就很吃亏。</p>\n<p>藏拙，不添加有问题的的功能。iPhone 前几版都少了很多功能的，基于产品迭代和</p>\n<p>演讲追求哇效应，出乎观众的意料。</p>\n<p>别人都有的功能的，就跳过不讲。卖亮点功能，融入场景故事中去演示，如 Apple keynote。</p>\n<p>iOS 强调 UE。内置 app 已经用的很舒服很易用，谁便一个产品经理不能画出其产品流畅图。</p>\n<h3 id=\"系统化解决问题\"><a href=\"#系统化解决问题\" class=\"headerlink\" title=\"系统化解决问题\"></a>系统化解决问题</h3><p>代码调优和 Debug，如何系统化解决新的问题：猜可能是那几个方面出了问题，全面分析完了，再去全面的验证调试解决。而不是想到一个可能一个想法就去试。</p>\n"},{"title":"极客班线下翻转课堂第六周","url":"/2015/08/22/GeekBand-flip-classroom-week-6/","content":"<h2 id=\"孔祥波\"><a href=\"#孔祥波\" class=\"headerlink\" title=\"孔祥波\"></a>孔祥波</h2><p>iOS 测试题解答：</p>\n<ul>\n<li>Static cell or dynamic </li>\n<li>Different identifiers for cells</li>\n<li>学习 iOS 开发的目标是提升工资，还是爱好，还是进入一个好的团队？</li>\n<li>应聘1-3年工作经验要求时，就报极客班孔老师的名字😎</li>\n<li>学习曲线摆在那里，一点点进步。</li>\n<li><a href=\"https://github.com/robovm/apple-ios-samples\">apple-ios-samples</a></li>\n<li><a href=\"https://github.com/Lax/iOS-Swift-Demos\">iOS-Swift-Demos</a></li>\n</ul>\n"},{"title":"极客班线下翻转课堂第七周","url":"/2015/08/29/GeekBand-flip-classroom-week-7/","content":"<h2 id=\"杨武老师全天辅导\"><a href=\"#杨武老师全天辅导\" class=\"headerlink\" title=\"@杨武老师全天辅导\"></a><a href=\"http://weibo.com/pinxue\">@杨武</a>老师全天辅导</h2><h3 id=\"1-学习，不仅要学，还要习：\"><a href=\"#1-学习，不仅要学，还要习：\" class=\"headerlink\" title=\"1. 学习，不仅要学，还要习：\"></a>1. 学习，不仅要学，还要习：</h3><ul>\n<li><p>作业，不仅仅是作业。有信心拿给未来的面试官看不？</p>\n</li>\n<li><p>作业是一个机会，做完基本功能后，琢磨着如何完善优化。要求自己的代码容易别人看懂。看我做的多牛逼，风格好。</p>\n</li>\n<li><p>学习要复习，主动回忆+分散重复。尤其凭空去做。</p>\n<p>  被动学习有个线索如书和 Demo，才有思路。只有做练习时，才能主动回忆知识。回忆方法：<strong>Mind Map</strong></p>\n</li>\n</ul>\n<h3 id=\"2-课堂上共同整理了一份-iOS-Map，涉及到的一些知识点：\"><a href=\"#2-课堂上共同整理了一份-iOS-Map，涉及到的一些知识点：\" class=\"headerlink\" title=\"2. 课堂上共同整理了一份 iOS Map，涉及到的一些知识点：\"></a>2. 课堂上共同整理了一份 iOS Map，涉及到的一些知识点：</h3><ul>\n<li>NARC (new alloc retain copy)</li>\n<li>ARC 不是垃圾收集，只是一个语法糖</li>\n<li>Xcode Preprocess, Assembly and Disassembly</li>\n<li>LLDB: help</li>\n<li><a href=\"http://objccn.io/issue-19/\">调试</a></li>\n<li>IB: Outlets 直接访问 UI</li>\n<li>设计师设计一个功能的难度和程序员实现的难度</li>\n<li>常用 UI 文档介绍，追根究底</li>\n<li><a href=\"http://objccn.io/issue-15/\">单元测试等</a></li>\n</ul>\n<h3 id=\"3-习题很重要：\"><a href=\"#3-习题很重要：\" class=\"headerlink\" title=\"3. 习题很重要：\"></a>3. 习题很重要：</h3><ul>\n<li>想学好，每天都要投入2个小时到开发中</li>\n<li>刷题提高技术</li>\n</ul>\n"},{"title":"极客班线下翻转课堂第八周","url":"/2015/09/12/GeekBand-flip-classroom-week-8/","content":"<h2 id=\"杨武老师全天辅导\"><a href=\"#杨武老师全天辅导\" class=\"headerlink\" title=\"@杨武老师全天辅导\"></a><a href=\"http://weibo.com/pinxue\">@杨武</a>老师全天辅导</h2><h3 id=\"1-学习方法\"><a href=\"#1-学习方法\" class=\"headerlink\" title=\"1. 学习方法\"></a>1. 学习方法</h3><ul>\n<li>更新 iOS Map，最好每周更新，自己整理思路，每一个控件的用法。</li>\n<li>学习新的知识：写一组 Demo 把 API 都实现一边，不看文档就能做出来。至少熟悉 API 的名字和用途。</li>\n</ul>\n<h3 id=\"2-问题辅导\"><a href=\"#2-问题辅导\" class=\"headerlink\" title=\"2. 问题辅导\"></a>2. 问题辅导</h3><h4 id=\"2-1-KVC-KVO\"><a href=\"#2-1-KVC-KVO\" class=\"headerlink\" title=\"2.1. KVC KVO\"></a>2.1. KVC KVO</h4><p>其实就是和点语法一样的，但是提供了一种访问便利，最简单的 KVC 能让我们通过以下的形式访问属性。</p>\n<ul>\n<li>键路径（Key Path）</li>\n<li>键值验证 (KVV)</li>\n</ul>\n<h4 id=\"2-2-Block\"><a href=\"#2-2-Block\" class=\"headerlink\" title=\"2.2. Block\"></a>2.2. Block</h4><p>就是匿名函数</p>\n<h4 id=\"2-3-Multitasking\"><a href=\"#2-3-Multitasking\" class=\"headerlink\" title=\"2.3. Multitasking\"></a>2.3. Multitasking</h4><p>NSOperationQueue，立刻并行执行。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">[queue addOperationWithBlock:^&#123;&#125;];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>GCD 则是提供更多灵活性</p>\n<h3 id=\"3-随堂练习\"><a href=\"#3-随堂练习\" class=\"headerlink\" title=\"3. 随堂练习\"></a>3. 随堂练习</h3><p>通过多任务，只看 API，做一个异步下载加载图片的 Demo</p>\n<p>Demo 见 <a href=\"https://github.com/gewill/test-projects\">GitHub</a> ：</p>\n<ul>\n<li>test Block</li>\n<li>test GCD</li>\n<li>test NSOperation</li>\n</ul>\n"},{"title":"极客班 iOS 应用开发实战（一）","url":"/2015/07/20/GeekBand-iOS-APP-Development-1/","content":"<p>还是<a href=\"http://weibo.com/songduan\">@段松</a> 老师，讲解了 Xcode 常用的设置。还有楼房设计和楼房建造对应软件设计框架和代码实现。</p>\n<h2 id=\"课程目标：\"><a href=\"#课程目标：\" class=\"headerlink\" title=\"课程目标：\"></a>课程目标：</h2><ul>\n<li>会做 APP</li>\n<li>APP 微架构、代码风格</li>\n</ul>\n<h2 id=\"课程大纲：\"><a href=\"#课程大纲：\" class=\"headerlink\" title=\"课程大纲：\"></a>课程大纲：</h2><ul>\n<li><p>熟悉 Xcode</p>\n</li>\n<li><p>一个 iOS 应用的构成详解</p>\n</li>\n<li><p>iOS 应用的生命周期</p>\n</li>\n<li><p>一款 iOS 应用是如何产生的？</p>\n<p>看了7遍需求文档，心中自然有了成了一个原型图，甚至找到需求中缺乏的组件。</p>\n<p>曾经辍学做过建筑，就有了下面比喻，很形象好理解：</p>\n</li>\n</ul>\n<p><img src=\"http://i.imgur.com/X0jT1YE.png\" alt=\"楼房建造流程图\"><br><img src=\"http://i.imgur.com/0gTWv40.png\" alt=\"iOS 开发流程图\"></p>\n<p>  项目开发流程图：</p>\n<p><img src=\"http://i.imgur.com/qV2FtGd.png\" alt=\"项目开发流程图\"></p>\n"},{"title":"极客班 iOS 应用开发实战（二）","url":"/2015/07/28/GeekBand-iOS-APP-Development-2/","content":"<h2 id=\"7-经典-UI-应用框架\"><a href=\"#7-经典-UI-应用框架\" class=\"headerlink\" title=\"7. 经典 UI 应用框架\"></a>7. 经典 UI 应用框架</h2><p>UITabBarController + UINavigationController 基本上就可以完成一个 APP。</p>\n<p>删除多余注释，不是强迫症而是要保证代码简洁干净。</p>\n<p>有了 BLDemo03 就有了一个基础 UI 框架 ，就可以快速开发一个 APP，很给力。</p>\n<h2 id=\"9-应用界面的切换\"><a href=\"#9-应用界面的切换\" class=\"headerlink\" title=\"9. 应用界面的切换\"></a>9. 应用界面的切换</h2><p>添加按钮，push&#x2F;modal 到自定义子视图</p>\n<h2 id=\"10-UI-界面编程基础\"><a href=\"#10-UI-界面编程基础\" class=\"headerlink\" title=\"10. UI 界面编程基础\"></a>10. UI 界面编程基础</h2><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add an UIImageView and an image in it</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UIImageView</span> *imageView = [[<span class=\"built_in\">UIImageView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">10</span>, <span class=\"number\">212</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@&quot;bg5.png&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[imageView initWithImage:image];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:imageView];</span><br></pre></td></tr></table></figure>\n\n<p>感觉代码添加 UI 很简单，设置大小属性内容，添加到 view。</p>\n<p>完成相应地代理，可以实现视图“控制” model。</p>\n<h2 id=\"13-UIView-和常用的组件\"><a href=\"#13-UIView-和常用的组件\" class=\"headerlink\" title=\"13.UIView 和常用的组件\"></a>13.UIView 和常用的组件</h2><p>类似画画上色过程，自底向上以此上色。</p>\n<p>Views 自上到下的层次关系：</p>\n<ul>\n<li>UIImage</li>\n<li>UIImageView</li>\n<li>UIView </li>\n<li>UIScrollView 和 UIPagecontrol </li>\n<li>self.view</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLThreeViewController.h</span></span><br><span class=\"line\"><span class=\"comment\">//  BLDemo03</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BLBaseViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BLThreeViewController</span> : <span class=\"title\">BLBaseViewController</span> &lt;<span class=\"title\">UIScrollViewDelegate</span>&gt;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIScrollView</span>  *_scrollView;</span><br><span class=\"line\">    <span class=\"built_in\">UIPageControl</span> *_pageControl;</span><br><span class=\"line\">    <span class=\"built_in\">UIView</span>        *_contentView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>BLDemo01 L13 课开始集成了 Reveal，很直观看懂层次关系</p>\n</blockquote>\n<h2 id=\"源码保存在我的-GitHub-GeekBand-iOS-Demo\"><a href=\"#源码保存在我的-GitHub-GeekBand-iOS-Demo\" class=\"headerlink\" title=\"源码保存在我的 GitHub: GeekBand-iOS-Demo\"></a>源码保存在我的 GitHub: <a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/iOS%20APP%20Development\">GeekBand-iOS-Demo</a></h2>"},{"title":"极客班 iOS 应用开发实战（三）","url":"/2015/08/04/GeekBand-iOS-APP-Development-3/","content":"<blockquote>\n<p>Removed FuzzyAutocomplete plugin. It made me stupid.</p>\n</blockquote>\n<h2 id=\"15-地图与定位\"><a href=\"#15-地图与定位\" class=\"headerlink\" title=\"15. 地图与定位\"></a>15. 地图与定位</h2><p>地图这一节实践了一天，理一理知识点：</p>\n<ul>\n<li>CLLocationManager and CLLocationManagerDelegate 地理事件处理和其代理方法</li>\n<li>CLLocation 地理坐标</li>\n<li>CLGeocoder 地理坐标化</li>\n<li>MKMapView and MKMapViewDelegate 地图显示和处理相关的代理方法</li>\n<li>MKAnnotationView’s protocol is MKAnnotation 自定义一个标记</li>\n</ul>\n<blockquote>\n<p>Geocoding (sometimes called forward geocoding) uses a description of a location, most typically a postal address or place name, to find geographic coordinates from spatial reference data such as building polygons, land parcels, street addresses, postal codes (e.g. ZIP codes, CEDEX) and so on. </p>\n</blockquote>\n<p>可能是时间不充足，段老师后面课程的代码风格不好。少#pragma mark 分段，少注释，if 语句嵌套的错误，命名随意。</p>\n<p>贴一个 Apple Sample: <a href=\"https://developer.apple.com/library/prerelease/ios/samplecode/MapCallouts/Introduction/Intro.html\">MapCallouts</a></p>\n<h2 id=\"17-UITableView（一）\"><a href=\"#17-UITableView（一）\" class=\"headerlink\" title=\"17. UITableView（一）\"></a>17. UITableView（一）</h2><p>UITableView 和 UITableViewController 关系图</p>\n<p><img src=\"http://i.imgur.com/IQWE4NL.jpg\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/XqbWU5H.jpg\" alt=\"Imgur\"></p>\n<ul>\n<li>UITableView 初始化后，属性和方法</li>\n<li>UITableViewDataSource and UITableViewDelegate 方法</li>\n<li>section、row、cell 部分、行、细胞</li>\n<li>header、footer </li>\n<li>separator 分割线</li>\n</ul>\n<h2 id=\"20-UITableView（四）\"><a href=\"#20-UITableView（四）\" class=\"headerlink\" title=\"20.UITableView（四）\"></a>20.UITableView（四）</h2><p>主要是一个 table view 的 Demo。</p>\n<h2 id=\"源码保存在我的-GitHub-GeekBand-iOS-Demo\"><a href=\"#源码保存在我的-GitHub-GeekBand-iOS-Demo\" class=\"headerlink\" title=\"源码保存在我的 GitHub: GeekBand-iOS-Demo\"></a>源码保存在我的 GitHub: <a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/iOS%20APP%20Development\">GeekBand-iOS-Demo</a></h2>"},{"title":"极客班 iOS 应用开发实战（四）","url":"/2015/08/11/GeekBand-iOS-APP-Development-4/","content":"<h2 id=\"21-iOS应用框架-上\"><a href=\"#21-iOS应用框架-上\" class=\"headerlink\" title=\"21. iOS应用框架(上)\"></a>21. iOS应用框架(上)</h2><p>主要讲解了 Project 文件目录整理分类，Storyboard 和代码结合使用，Constraints 的使用。稍后在项目里面实践一下。</p>\n<p>有提到 [UIScreen mainScreen].bounds 的问题。</p>\n<p>我之前就研究过，见：<a href=\"http://gewill.org/2015/08/04/UIScreen-mainScreen-bounds-in-Xcode-7-Beta-4/\">http://gewill.org/2015/08/04/UIScreen-mainScreen-bounds-in-Xcode-7-Beta-4/</a></p>\n<h2 id=\"23-iOS应用框架-下\"><a href=\"#23-iOS应用框架-下\" class=\"headerlink\" title=\"23. iOS应用框架(下)\"></a>23. iOS应用框架(下)</h2><p>主要演示 Storyboard 的自动布局和代码管理跳转和动画过度。但是总感觉有点基本上是在 AppDelegate 中管理 Storyboard 的跳转关系，实不如 Storyboard references 清晰明了，且不妨碍分工开发。</p>\n<p>代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  AppDelegate.h</span></span><br><span class=\"line\"><span class=\"comment\">//  BLDemo05</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> : <span class=\"title\">UIResponder</span> &lt;<span class=\"title\">UIApplicationDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIWindow</span> *window;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  声明一个 UINavigationController 属性，作为 rootViewController</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UINavigationController</span> *loginNavigationVC;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  使用代码加载 Login.storyboard 的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)loadLoginView;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  使用代码加载 Login.storyboard 的函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)loadMainView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  AppDelegate.m</span></span><br><span class=\"line\"><span class=\"comment\">//  BLDemo05</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AppDelegate.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BLUserInfoViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)loadLoginView &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取 Login.storyboard， 压入 rootViewController（loginNavigationVC）</span></span><br><span class=\"line\">    <span class=\"built_in\">UIStoryboard</span> *loginStoryboard</span><br><span class=\"line\">    = [<span class=\"built_in\">UIStoryboard</span> storyboardWithName:<span class=\"string\">@&quot;Login&quot;</span></span><br><span class=\"line\">                                bundle:[<span class=\"built_in\">NSBundle</span> mainBundle]];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.loginNavigationVC = loginStoryboard.instantiateInitialViewController;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window.rootViewController = <span class=\"keyword\">self</span>.loginNavigationVC;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)loadMainView &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1 - 读取 UserInfo.storyboard， 压入 BLUserInfoViewController（userInfoVC）， 一并压入 UINavigationController（navc）</span></span><br><span class=\"line\">    <span class=\"built_in\">UIStoryboard</span> *userInfoStoryboard</span><br><span class=\"line\">    = [<span class=\"built_in\">UIStoryboard</span> storyboardWithName:<span class=\"string\">@&quot;UserInfo&quot;</span> bundle:[<span class=\"built_in\">NSBundle</span> mainBundle]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    BLUserInfoViewController *userInfoVC</span><br><span class=\"line\">    = [userInfoStoryboard instantiateViewControllerWithIdentifier:<span class=\"string\">@&quot;BLUserInfoViewController&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UINavigationController</span> *navc</span><br><span class=\"line\">    = [[<span class=\"built_in\">UINavigationController</span> alloc] initWithRootViewController:userInfoVC];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2 - 添加 UINavigationController 标题</span></span><br><span class=\"line\">    navc.tabBarItem.title = <span class=\"string\">@&quot;userInfo&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3 - 新建一个 UITabBarController（tabBarC），并设为 rootViewController</span></span><br><span class=\"line\">    <span class=\"built_in\">UITabBarController</span> *tabBarC = [[<span class=\"built_in\">UITabBarController</span> alloc] init];</span><br><span class=\"line\">    tabBarC.viewControllers = @[navc];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window.rootViewController = tabBarC;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4 - 添加过度效果</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:<span class=\"keyword\">self</span>.loginNavigationVC.view];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"built_in\">UIView</span> animateWithDuration:<span class=\"number\">0.3</span></span><br><span class=\"line\">                     animations:^&#123;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.loginNavigationVC.view.alpha = <span class=\"number\">0</span>;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.loginNavigationVC.view.frame = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.loginNavigationVC.view.transform = <span class=\"built_in\">CGAffineTransformMakeScale</span>(<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">                     &#125; completion:^(<span class=\"type\">BOOL</span> finished) &#123;</span><br><span class=\"line\">                         <span class=\"keyword\">self</span>.loginNavigationVC = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">                     &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window = [[<span class=\"built_in\">UIWindow</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds]];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.window makeKeyAndVisible];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// App 启动，调用 loadLoginView 函数</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> loadLoginView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)applicationWillResignActive:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)applicationDidBecomeActive:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)applicationWillTerminate:(<span class=\"built_in\">UIApplication</span> *)application &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n"},{"title":"极客班 iOS 应用开发实战（五）","url":"/2015/08/20/GeekBand-iOS-APP-Development-5/","content":"<p>学以致用，不如说：<strong>用到再学</strong>。这样可以保证能用到。记得 <a href=\"http://www.gotealeaf.com/books/http\">Introduction to HTTP</a> 以前就看多，但是没有认真的分析，只是达到了了解的地步。现在 iOS 开发，也就认真仔细，尤其是能用到的部分。</p>\n<p>老师讲的比较快，真的每个关键词都查文档，才会完成明白每一步什么意思。顺便加了注释（没忍住再次吐槽了段老师的代码没注释😅）。</p>\n<p>Option 键快被我按坏了，今天才发现三只轻拍也可以 Quick Help。</p>\n<p>提炼常用类，可以拆分代码，方便复用，逻辑清晰。</p>\n<p>可以按照 MVC 或者其他方式整理项目文件。</p>\n<h2 id=\"24-网络编程\"><a href=\"#24-网络编程\" class=\"headerlink\" title=\"24. 网络编程\"></a>24. 网络编程</h2><p><a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/iOS%20APP%20Development/BLDemo05%20L21\">项目源码</a></p>\n<h3 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h3><ul>\n<li>Web service 应用开发流程：网络数据的获取&gt;解析&gt;生成&gt;上传</li>\n<li>Http 网络通信： NSURLConnection&#x2F;NSURLConnectionDataDelegate (Get&#x2F;Post)</li>\n<li>XML 数据解析： NSXMLParser&#x2F;NSXMLParserDelegate</li>\n<li>JSON 数据解析：NSJSONSerialization</li>\n<li>上传&amp;下载：参考 Http 网络通信</li>\n</ul>\n<p>安装配置 XAMPP</p>\n<p>以微博 API：<a href=\"http://open.weibo.com/wiki/2/users/show\">users&#x2F;show</a> 说明 Http 通信过程。</p>\n<p>整个过程还算清晰主要是下载和登陆类添加代理，方便与对应的控制器通信。</p>\n<p>服务器比较简陋，无法 POST 什么信息，都能从 <a href=\"http://localhost/login.xml\">http://localhost/login.xml</a> 返回 user 信息。</p>\n<h3 id=\"解析-JSON\"><a href=\"#解析-JSON\" class=\"headerlink\" title=\"解析 JSON\"></a>解析 JSON</h3><p>看 CS193P 更优雅的方案，就是 NSJSONSerialization：转化为字典或数组，顺序如下面代码所示，最后使用 valueForKeyPath: 访问数组即可。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@&quot;http://ax.itunes.apple.com/WebObjects/MZStoreServices.woa/ws/RSS/topfreeapplications/limit=10/json&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSData</span> *jsonRequests = [<span class=\"built_in\">NSData</span> dataWithContentsOfURL:url];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSDictionary</span> *appListRequests = [<span class=\"built_in\">NSJSONSerialization</span> JSONObjectWithData:jsonRequests options:<span class=\"number\">0</span> error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *appEntry = [appListRequests valueForKeyPath:<span class=\"string\">@&quot;feed.entry&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"POST-网络请求的过程\"><a href=\"#POST-网络请求的过程\" class=\"headerlink\" title=\"POST 网络请求的过程\"></a>POST 网络请求的过程</h3><p>GWLoginRequest.m 文件代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GWLoginRequest.m</span></span><br><span class=\"line\"><span class=\"comment\">//  BLDemo05 L21</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will Ge on 8/21/15.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GWLoginRequest.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GWMutipartForm.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GWLoginRequestsParsers.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GWLoginRequest</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  发送登陆用户名密码请求的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param userName 用户名</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param password 密码</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param delegate 登陆请求的代理方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)sendLoginRequestWithUserName:(<span class=\"built_in\">NSString</span> *)userName</span><br><span class=\"line\">                            password:(<span class=\"built_in\">NSString</span> *)password</span><br><span class=\"line\">                            delegate:(<span class=\"type\">id</span>&lt;GWLoginRequestDelegate&gt;)delegate &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.URLConnection cancel];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.delegate = delegate;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *URLString = <span class=\"string\">@&quot;http://localhost/login.xml&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// POST</span></span><br><span class=\"line\">    <span class=\"comment\">// 转化为合法的 URL 格式</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *encodeURLString = [URLString stringByAddingPercentEscapesUsingEncoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *URL = [<span class=\"built_in\">NSURL</span> URLWithString:encodeURLString];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 转化为 NSMutableURLRequest ，方便调用存取方法更改属性</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableURLRequest</span> *request = [<span class=\"built_in\">NSMutableURLRequest</span> requestWithURL:URL];</span><br><span class=\"line\">    request.HTTPMethod = <span class=\"string\">@&quot;POST&quot;</span>;</span><br><span class=\"line\">    request.timeoutInterval = <span class=\"number\">60</span>;</span><br><span class=\"line\">    request.cachePolicy = <span class=\"built_in\">NSURLRequestReloadIgnoringCacheData</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 发送的数据转换为表单</span></span><br><span class=\"line\">    GWMutipartForm *form = [[GWMutipartForm alloc] init];</span><br><span class=\"line\">    [form addValue:userName forField:<span class=\"string\">@&quot;username&quot;</span>];</span><br><span class=\"line\">    [form addValue:password forField:<span class=\"string\">@&quot;password&quot;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    request.HTTPBody = [form httpBody];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 更新 URLConnection</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.URLConnection = [[<span class=\"built_in\">NSURLConnection</span> alloc] initWithRequest:request</span><br><span class=\"line\">                                                         delegate:<span class=\"keyword\">self</span> startImmediately:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  取消登陆请求的方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)cancelRequest &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.URLConnection) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 取消异步请求，并置空</span></span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.URLConnection cancel];</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.URLConnection = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - NSURLConnectionDataDelegate methods</span></span><br><span class=\"line\"><span class=\"comment\">// 作为 NSURLConnection 补充，来处理网络请求的过程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// URL 响应请求状态</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)connection:(<span class=\"built_in\">NSURLConnection</span> *)connection didReceiveResponse:(<span class=\"built_in\">NSURLResponse</span> *)response &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 转化为 NSHTTPURLResponse ，来访问 HTTP 状态码</span></span><br><span class=\"line\">    <span class=\"built_in\">NSHTTPURLResponse</span> *httpResponse = (<span class=\"built_in\">NSHTTPURLResponse</span> *)response;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 根据状态码分情况处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (httpResponse.statusCode == <span class=\"number\">200</span>) &#123; <span class=\"comment\">//连接成功</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">self</span>.receviedData = [<span class=\"built_in\">NSMutableData</span> data]; <span class=\"comment\">// 设置为一个空的 NSData</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 连接失败，待处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接受数据增量</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)connection:(<span class=\"built_in\">NSURLConnection</span> *)connection didReceiveData:(<span class=\"built_in\">NSData</span> *)data &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.receviedData appendData:data];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成连接或加载</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)connectionDidFinishLoading:(<span class=\"built_in\">NSURLConnection</span> *)connection &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 整理收到的数据，并解析</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *string = [[<span class=\"built_in\">NSString</span> alloc ] initWithData:<span class=\"keyword\">self</span>.receviedData</span><br><span class=\"line\">                                              encoding:<span class=\"built_in\">NSUTF8StringEncoding</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, string);</span><br><span class=\"line\">    </span><br><span class=\"line\">    GWLoginRequestsParsers *parser = [[GWLoginRequestsParsers alloc] init];</span><br><span class=\"line\">    GWUser *user = [parser parseXML:<span class=\"keyword\">self</span>.receviedData];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查接收者是非实现代理方法，并响应代理方法：</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([_delegate respondsToSelector:<span class=\"keyword\">@selector</span>(requestSuccess:user:)]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [_delegate requestSuccess:<span class=\"keyword\">self</span> user:user];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接失败</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)connection:(<span class=\"built_in\">NSURLConnection</span> *)connection didFailWithError:(<span class=\"built_in\">NSError</span> *)error &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, error);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查接收者是非实现代理方法，并响应代理方法：</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(requestFailed:error:)]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.delegate requestFailed:<span class=\"keyword\">self</span> error:error];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延伸阅读：\"><a href=\"#延伸阅读：\" class=\"headerlink\" title=\"延伸阅读：\"></a>延伸阅读：</h3><ul>\n<li><p><a href=\"http://www.gotealeaf.com/books/http\">Introduction to HTTP</a> by Tealeaf Academy</p>\n</li>\n<li><p><a href=\"http://www.w3schools.com/tags/ref_httpmethods.asp\">HTTP Methods: GET vs. POST</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html\">浅谈HTTP中Get与Post的区别</a></p>\n<blockquote>\n<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.wikiwand.com/en/List_of_HTTP_status_codes\">HTTP status codes</a></p>\n</li>\n<li><p><a href=\"http://json.org/\">JSON</a></p>\n<blockquote>\n<p>JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. </p>\n</blockquote>\n</li>\n<li><p><a href=\"http://code.tutsplus.com/articles/design-patterns-delegation--cms-23901\">Design Patterns: Delegation</a> by Bart Jacobs</p>\n<blockquote>\n<p><code>@property (weak, nonatomic) id&lt;AddItemViewControllerDelegate&gt; delegate;</code><br>We declare a class, AddItemViewController, which extends UIViewController. The class declares a property, delegate, of type id<AddItemViewControllerDelegate>. Note that the property is marked as weak, which means that an AddItemViewController instance keeps a weak reference to its delegate.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://nshipster.com/nil/\">nil &#x2F; Nil &#x2F; NULL &#x2F; NSNull</a> by Mattt Thompson</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举个例子，这个表达...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (name != <span class=\"literal\">nil</span> &amp;&amp; [name isEqualToString:<span class=\"string\">@&quot;Steve&quot;</span>]) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// …可以被简化为：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([name isEqualToString:<span class=\"string\">@&quot;steve&quot;</span>]) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NULL</td>\n<td>(void *)0</td>\n<td>literal null value for C pointers</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>(id)0</td>\n<td>literal null value for Objective-C objects</td>\n</tr>\n<tr>\n<td>Nil</td>\n<td>(Class)0</td>\n<td>literal null value for Objective-C classes</td>\n</tr>\n<tr>\n<td>NSNull</td>\n<td>[NSNull null]</td>\n<td>singleton object used to represent null</td>\n</tr>\n</tbody></table>\n"},{"title":"极客班 iOS 应用开发实战（六）","url":"/2015/08/28/GeekBand-iOS-APP-Development-6/","content":"<p>段老师的视频教程，采用都是比较通用是 Demo，方便以后代码复用。也是从项目实践经验来教授相关知识如 FMDB，这几节课获益匪浅。</p>\n<blockquote>\n<p>Demo 源码见 <a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/iOS%20APP%20Development\">Github</a>，并添加了相关注释。</p>\n</blockquote>\n<h2 id=\"28-沙盒机制\"><a href=\"#28-沙盒机制\" class=\"headerlink\" title=\"28. 沙盒机制\"></a>28. 沙盒机制</h2><p>介绍几种数据持久化的方案，选择合适项目的方案：</p>\n<ul>\n<li>沙盒机制</li>\n<li>NSFileManager</li>\n<li>Plist、Archive数据归档 *  SQLite3应用</li>\n<li>NSUserDefaults</li>\n</ul>\n<p>沙盒目录结构 <code>NSDocumentDirectory</code>：</p>\n<ul>\n<li>Application Bundle&#x2F;</li>\n<li>Documents&#x2F;</li>\n<li>Library&#x2F;Caches&#x2F;</li>\n<li>Library&#x2F;Perferences&#x2F;</li>\n<li>tmp&#x2F;</li>\n</ul>\n<h2 id=\"29-NSFileManager-amp-Plist\"><a href=\"#29-NSFileManager-amp-Plist\" class=\"headerlink\" title=\"29. NSFileManager &amp; Plist\"></a>29. NSFileManager &amp; Plist</h2><p><strong>存取文档的方法</strong>封装一个通用的类<code>BLUtility.h/m</code>，方便调用。以下代码是测试保存文本文档。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLUtility.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  创建目录</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param dirPath 待创建的目录</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param isDir   结尾是否是目录</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 是否创建成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+ (<span class=\"built_in\">NSString</span>*) getPathWithinDocumentDir:(<span class=\"built_in\">NSString</span>*)aPath &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">NSString</span> *fullPath = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">NSArray</span> *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ([paths count] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tfullPath = (<span class=\"built_in\">NSString</span> *)[paths objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([aPath length] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tfullPath = [fullPath stringByAppendingPathComponent:aPath];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fullPath;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLArchiveViewController.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  测试保存文档和 plist 的按钮关联的 Action 方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param sender &lt;#sender description#&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)writeFileButtonClicked:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1 - 测试字符串文档，保存到 Documents</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.1 - 生成并保存</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *string = <span class=\"string\">@&quot;ABC副经理&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *stringFilePath = [BLUtility getPathWithinDocumentDir:<span class=\"string\">@&quot;string.text&quot;</span>];</span><br><span class=\"line\">    [BLUtility createDirectory:stringFilePath lastComponentIsDirectory:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    [string writeToFile:stringFilePath atomically:<span class=\"literal\">YES</span> encoding:<span class=\"built_in\">NSUTF8StringEncoding</span> error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30-Archive-数据归档和-NSUserDefaults\"><a href=\"#30-Archive-数据归档和-NSUserDefaults\" class=\"headerlink\" title=\"30. Archive 数据归档和 NSUserDefaults\"></a>30. Archive 数据归档和 NSUserDefaults</h3><p><strong>转化为 NSData，二进制的数据，利于存储和传输。</strong></p>\n<p>遵循 NSCoding 协议，即可实现编码和解码的类，进一步对其归档和解档。也用到了封装的类<code>BLUtility.h/m</code>。本例中文档保存到 NSUserDefaults：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLUser.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  解码</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param aDecoder 编码类型</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 解码得到的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">self</span>.userName\t= [aDecoder decodeObjectForKey:<span class=\"string\">@&quot;userName&quot;</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">self</span>.email\t\t= [aDecoder decodeObjectForKey:<span class=\"string\">@&quot;email&quot;</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">self</span>.password\t= [aDecoder decodeObjectForKey:<span class=\"string\">@&quot;password&quot;</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">self</span>.age\t\t= [aDecoder decodeIntForKey:<span class=\"string\">@&quot;age&quot;</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLUtility.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  解档</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param archivedData 待解档的 NSData</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param key           key</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return  解档完成的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">+ (<span class=\"built_in\">NSObject</span> *) unarchiverObject:(<span class=\"built_in\">NSData</span> *)archivedData withKey:(<span class=\"built_in\">NSString</span> *)key &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(archivedData == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">NSKeyedUnarchiver</span> *unarchiver = [[<span class=\"built_in\">NSKeyedUnarchiver</span> alloc] initForReadingWithData:archivedData];</span><br><span class=\"line\">\t<span class=\"built_in\">NSObject</span> *object = [unarchiver decodeObjectForKey:key];</span><br><span class=\"line\">\t[unarchiver finishDecoding];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLArchiveViewController.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  读取按钮关联的 Action 方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param sender &lt;#sender description#&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) readButtonClicked:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSUserDefaults</span> *userDefaults = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</span><br><span class=\"line\">    <span class=\"built_in\">NSInteger</span> test = [userDefaults integerForKey:<span class=\"string\">@&quot;integer&quot;</span>];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;test = %li&quot;</span>, test);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">NSString</span> *userDataPath = [BLUtility getPathWithinDocumentDir:UserDataName];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ([userDataPath length] &gt; <span class=\"number\">0</span> &amp;&amp; [[<span class=\"built_in\">NSFileManager</span> defaultManager] fileExistsAtPath:userDataPath]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSData</span> *userData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:userDataPath];</span><br><span class=\"line\">\t\tBLUser *user = (BLUser *)[BLUtility unarchiverObject:userData withKey:<span class=\"string\">@&quot;UserData&quot;</span>];</span><br><span class=\"line\">\t\t_userNameTextField.text = user.userName;</span><br><span class=\"line\">\t\t_emailTextField.text = user.email;</span><br><span class=\"line\">\t\t_passwordTextField.text = user.password;</span><br><span class=\"line\">\t\t_ageTextField.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%ld&quot;</span>, user.age];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###延伸阅读：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nscoding/\">NSCoding &#x2F; NSKeyed​Archiver</a></li>\n<li><a href=\"http://nshipster.cn/nsfilemanager/\">NSFile​Manager</a></li>\n</ul>\n<h2 id=\"31-SQLite3\"><a href=\"#31-SQLite3\" class=\"headerlink\" title=\"31. SQLite3\"></a>31. SQLite3</h2><p>通过 FMDB 封装，得以 OBjective-C 访问 SQLite，完成常用增删改查。从语法和数据体积实现轻量级存储方案。这个方案稍后用在习题“同学录”上实践一下。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLPoemDB.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;FMDatabase.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BLPoem.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BLPoemDB</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  创建一个 FMDatabase 实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">\tFMDatabase\t\t*_db;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  创建一个表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 是否创建成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) createPoemTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  增加一首诗到表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param poem 待添加的诗</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 是否添加成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) addPoem:(BLPoem *)poem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  查询所有诗</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 查询到的包含所有诗的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *) getAllPoems;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  查询被收藏的诗</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 查询到的包含所有收藏的诗的数组</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *) getFavoritesPoems;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  更改是非收藏这一首诗</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param favorite 是否收藏</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param poemId   待更改的诗的 ID</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 是否更改收藏成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) setFavorite:(<span class=\"type\">BOOL</span>)favorite favoriteId:(<span class=\"built_in\">NSInteger</span>)poemId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  删除指定 ID 的一首诗</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param poemId 待删除的诗的 ID</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return  是否删除成功</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) deletePoemWithPoemId:(<span class=\"built_in\">NSInteger</span>)poemId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  BLPoemDB.m</span></span><br><span class=\"line\"><span class=\"comment\">//  BLDataSaveDemo</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BLPoemDB.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;BLUtility.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BLPOEMDBNAME @<span class=\"string\">&quot;BLPoemDB.sqlite&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">BLPoemDB</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  初始化数据库 FMDatabase 实例</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  @return 初始化得到的 FMDatabase 实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">-(<span class=\"type\">id</span>) init &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSString</span> *dbPath = [BLUtility getPathWithinDocumentDir:BLPOEMDBNAME];</span><br><span class=\"line\">\t\t<span class=\"built_in\">NSFileManager</span> *fileManager = [<span class=\"built_in\">NSFileManager</span> defaultManager];</span><br><span class=\"line\">\t\t<span class=\"type\">BOOL</span> existFile = [fileManager fileExistsAtPath:dbPath];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (existFile == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">NSString</span> *poemDBPath = [[[<span class=\"built_in\">NSBundle</span> mainBundle] resourcePath] stringByAppendingPathComponent:BLPOEMDBNAME];</span><br><span class=\"line\">\t\t\t[fileManager copyItemAtPath:poemDBPath toPath:dbPath error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_db\t = [[FMDatabase alloc] initWithPath:dbPath];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ([_db open] == <span class=\"literal\">NO</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) createPoemTable &#123;</span><br><span class=\"line\">\t[_db beginTransaction];</span><br><span class=\"line\">\t<span class=\"type\">BOOL</span> success = [_db executeUpdate:<span class=\"string\">@&quot;CREATE TABLE IF NOT EXISTS POEMTABLE (&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">@&quot;ID INTEGER PRIMARY KEY NOT NULL,&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">@&quot;POEMNAME TEXT NOT NULL,&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">@&quot;POETNAME TEXT NOT NULL,&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">@&quot;POEMCONTENT TEXT NOT NULL,&quot;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">@&quot;WHETHERFAVORITE BOOL NOT NULL);&quot;</span>];</span><br><span class=\"line\">\t[_db commit];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!success || [_db hadError]) &#123;</span><br><span class=\"line\">\t\t[_db rollback];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) addPoem:(BLPoem *)poem &#123;</span><br><span class=\"line\">\tFMResultSet *rs = [_db executeQuery:<span class=\"string\">@&quot;SELECT ID FROM POEMTABLE WHERE ID=?&quot;</span>, [<span class=\"built_in\">NSNumber</span> numberWithInteger:poem.poemId]];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(rs &amp;&amp; [rs next]) &#123;</span><br><span class=\"line\">\t\t[rs close];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t[rs close];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t[_db beginTransaction];</span><br><span class=\"line\">\t<span class=\"built_in\">NSString</span> *bookMark = <span class=\"literal\">nil</span>;\t\t</span><br><span class=\"line\">\t<span class=\"type\">BOOL</span> success =  [_db executeUpdate:<span class=\"string\">@&quot;INSERT OR IGNORE INTO POEMTABLE (ID,POEMNAME,POETNAME,POEMCONTENT,WHETHERFAVORITE) VALUES (?,?,?,?,?);&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t [<span class=\"built_in\">NSNumber</span> numberWithInteger:poem.poemId],</span><br><span class=\"line\">\t\t\t\t\t poem.poemName,</span><br><span class=\"line\">\t\t\t\t\t poem.poetName,</span><br><span class=\"line\">\t\t\t\t\t poem.poemContent,</span><br><span class=\"line\">\t\t\t\t\t [<span class=\"built_in\">NSNumber</span> numberWithBool:poem.whetherFavorite],</span><br><span class=\"line\">\t\t\t\t\t bookMark];</span><br><span class=\"line\">\t[_db commit];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!success || [_db hadError]) &#123;</span><br><span class=\"line\">\t\t[_db rollback];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *) getAllPoems &#123;\t</span><br><span class=\"line\">\t<span class=\"built_in\">NSMutableArray</span> *result = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</span><br><span class=\"line\"><span class=\"comment\">//\tFMResultSet *rs = [_db executeQuery:@&quot;SELECT * FROM POEMTABLE WHERE ID=? AND WHETHERFAVORITE=?&quot;, [NSNumber numberWithInt:poem.poemId], [NSNumber numberWithBool:poem.whetherFavorite]];</span></span><br><span class=\"line\">\tFMResultSet *rs = [_db executeQuery:<span class=\"string\">@&quot;SELECT * FROM POEMTABLE&quot;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>([rs next]) &#123;</span><br><span class=\"line\">\t\tBLPoem *poem = [[BLPoem alloc] init];</span><br><span class=\"line\">\t\tpoem.poemId = [rs intForColumn:<span class=\"string\">@&quot;ID&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poemName = [rs\tstringForColumn:<span class=\"string\">@&quot;POEMNAME&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poetName = [rs stringForColumn:<span class=\"string\">@&quot;POETNAME&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poemContent = [rs stringForColumn:<span class=\"string\">@&quot;POEMCONTENT&quot;</span>];</span><br><span class=\"line\">\t\tpoem.whetherFavorite = [rs boolForColumn:<span class=\"string\">@&quot;WHETHERFAVORITE&quot;</span>];</span><br><span class=\"line\">\t\t[result addObject:poem];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t[rs close];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *) getFavoritesPoems &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">NSMutableArray</span> *result = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];\t</span><br><span class=\"line\">\tFMResultSet *rs = [_db executeQuery:<span class=\"string\">@&quot;SELECT * FROM POEMTABLE WHERE WHETHERFAVORITE=?&quot;</span>, [<span class=\"built_in\">NSNumber</span> numberWithBool:<span class=\"literal\">YES</span>]];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>([rs next]) &#123;</span><br><span class=\"line\">\t\tBLPoem *poem = [[BLPoem alloc] init];</span><br><span class=\"line\">\t\tpoem.poemId = [rs intForColumn:<span class=\"string\">@&quot;ID&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poemName = [rs\tstringForColumn:<span class=\"string\">@&quot;POEMNAME&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poetName = [rs stringForColumn:<span class=\"string\">@&quot;POETNAME&quot;</span>];</span><br><span class=\"line\">\t\tpoem.poemContent = [rs stringForColumn:<span class=\"string\">@&quot;POEMCONTENT&quot;</span>];</span><br><span class=\"line\">\t\tpoem.whetherFavorite = [rs boolForColumn:<span class=\"string\">@&quot;WHETHERFAVORITE&quot;</span>];</span><br><span class=\"line\">\t\t[result addObject:poem];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t[rs close];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) setFavorite:(<span class=\"type\">BOOL</span>)favorite favoriteId:(<span class=\"built_in\">NSInteger</span>)poemId &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_db == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t[_db beginTransaction];</span><br><span class=\"line\">\t<span class=\"type\">BOOL</span> result = [_db executeUpdate:<span class=\"string\">@&quot;UPDATE POEMTABLE SET WHETHERFAVORITE=? WHERE ID=?&quot;</span>, [<span class=\"built_in\">NSNumber</span> numberWithBool:favorite], [<span class=\"built_in\">NSNumber</span> numberWithInteger:poemId]];</span><br><span class=\"line\">\t[_db commit];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) deletePoemWithPoemId:(<span class=\"built_in\">NSInteger</span>)poemId &#123;</span><br><span class=\"line\">\t[_db beginTransaction];</span><br><span class=\"line\">\t<span class=\"type\">BOOL</span> success = [_db executeUpdate:<span class=\"string\">@&quot;DELETE FROM POEMTABLE WHERE ID=?&quot;</span>, [<span class=\"built_in\">NSNumber</span> numberWithInteger:poemId]];</span><br><span class=\"line\">\t[_db commit];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!success || [_db hadError]) &#123;</span><br><span class=\"line\">\t\t[_db rollback];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>) dealloc &#123;</span><br><span class=\"line\">\t[_db\tclose];</span><br><span class=\"line\">\t_db\t\t= <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"延伸阅读：\"><a href=\"#延伸阅读：\" class=\"headerlink\" title=\"延伸阅读：\"></a>延伸阅读：</h3><ul>\n<li><a href=\"http://www.sqlite.org/\">SQLite</a></li>\n<li><a href=\"https://github.com/ccgus/fmdb\">FMDB</a></li>\n<li><a href=\"https://www.objc.io/issues/4-core-data/SQLite-instead-of-core-data/\">On Using SQLite and FMDB Instead of Core Data</a></li>\n<li><a href=\"https://realm.io/\">Realm</a></li>\n<li><a href=\"http://sqlitebrowser.org/\">DB Browser for SQLite</a></li>\n</ul>\n<h2 id=\"32-多线程和多媒体\"><a href=\"#32-多线程和多媒体\" class=\"headerlink\" title=\"32. 多线程和多媒体\"></a>32. 多线程和多媒体</h2><p>简单介绍了常见多媒体的播放：</p>\n<ul>\n<li>UIImagePickerViewController</li>\n<li>UIActionSheet （👈名字谐音）</li>\n<li>AVAudioPlayer</li>\n<li>SystenSounID</li>\n<li>MPMoviePlayerViewController</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">BLOneViewController</span> ()&lt;<span class=\"title\">UIAlertViewDelegate</span>, <span class=\"title\">UIActionSheetDelegate</span>, <span class=\"title\">UIImagePickerControllerDelegate</span>, <span class=\"title\">UINavigationControllerDelegate</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AVAudioPlayer</span>           *audioPlayer;</span><br><span class=\"line\">    SystemSoundID           systemSoundId;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - Play Music button action</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)palyMusic:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!audioPlayer) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *mp3Path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@&quot;yishengsuoai&quot;</span> ofType:<span class=\"string\">@&quot;mp3&quot;</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *mp3Url = [[<span class=\"built_in\">NSURL</span> alloc] initFileURLWithPath:mp3Path];</span><br><span class=\"line\">        audioPlayer = [[<span class=\"built_in\">AVAudioPlayer</span> alloc] initWithContentsOfURL:mp3Url error:<span class=\"literal\">NULL</span>];</span><br><span class=\"line\">        audioPlayer.numberOfLoops = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        [audioPlayer prepareToPlay];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([audioPlayer isPlaying]) &#123;</span><br><span class=\"line\">        [audioPlayer stop];</span><br><span class=\"line\">        sender.titleLabel.text = <span class=\"string\">@&quot;Play Music&quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [audioPlayer play];</span><br><span class=\"line\">        sender.titleLabel.text = <span class=\"string\">@&quot;Pasue Music&quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"33-硬件访问、CALayer-amp-Core-Graphics\"><a href=\"#33-硬件访问、CALayer-amp-Core-Graphics\" class=\"headerlink\" title=\"33. 硬件访问、CALayer &amp; Core Graphics\"></a>33. 硬件访问、CALayer &amp; Core Graphics</h2><h3 id=\"33-1-gravity-and-user-acceleration\"><a href=\"#33-1-gravity-and-user-acceleration\" class=\"headerlink\" title=\"33.1. gravity and user acceleration\"></a>33.1. gravity and user acceleration</h3><p>Useage: shaking device to feedback or 360° image</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4 - Start update divice motion and print them</span></span><br><span class=\"line\">   <span class=\"comment\">// The accelerometer measures the sum of two acceleration vectors: gravity and user acceleration.</span></span><br><span class=\"line\">   <span class=\"built_in\">NSOperationQueue</span> *diviceMotionQueue = [[<span class=\"built_in\">NSOperationQueue</span> alloc] init];</span><br><span class=\"line\">   [<span class=\"keyword\">self</span>.motionManager startDeviceMotionUpdatesToQueue:diviceMotionQueue</span><br><span class=\"line\">                                           withHandler:^(<span class=\"built_in\">CMDeviceMotion</span> *motion, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">                                               </span><br><span class=\"line\">                                               <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;\\n \\n--------------------------------------------------------------------------&gt;\\n \\n 1 - attitude: %@ \\n 2 - rotation rate x: %f, y: %f, z: %f,\\n  \\n 3 - gravity x: %f, y: %f, z: %f \\n \\n 4 - user acceleration x: %f, y: %f, z: %f \\n \\n 5 - magnetic field accuracy: %d, x: %f, y: %f, z: %f \\n \\n &lt;--------------------------------------------------------------------------\\n \\n&quot;</span> ,</span><br><span class=\"line\">                                                     motion.attitude,</span><br><span class=\"line\">                                                     motion.rotationRate.x, motion.rotationRate.y, motion.rotationRate.z,</span><br><span class=\"line\">                                                     motion.gravity.x, motion.gravity.y, motion.gravity.z,</span><br><span class=\"line\">                                                     motion.userAcceleration.x, motion.userAcceleration.y, motion.userAcceleration.z,</span><br><span class=\"line\">                                                     motion.magneticField.accuracy, motion.magneticField.field.x, motion.magneticField.field.y, motion.magneticField.field.z);</span><br><span class=\"line\">                                           &#125;];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Search the definiton of each new word, really 😄😄😄. </p>\n<p>Do you believe that, At least I don’t think so.    </p>\n</blockquote>\n<p>Output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------------------------------------------------------------------&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> 1 - attitude: CMAttitude Pitch: 0.751292, Roll: 0.555726, Yaw: 22.198534</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2 - rotation rate x: 0.001511, y: -0.000795, z: 0.002454,</span><br><span class=\"line\">  </span><br><span class=\"line\"> 3 - gravity x: 0.009698, y: -0.013112, z: -0.999867 </span><br><span class=\"line\"> </span><br><span class=\"line\"> 4 - user acceleration x: -0.002603, y: 0.000783, z: -0.014095 </span><br><span class=\"line\"> </span><br><span class=\"line\"> 5 - magnetic field accuracy: -1, x: 0.000000, y: 0.000000, z: 0.000000 </span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;--------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n<h3 id=\"33-2-CALayer\"><a href=\"#33-2-CALayer\" class=\"headerlink\" title=\"33.2. CALayer\"></a>33.2. CALayer</h3><p>Modifying the Layer’s Appearance Properties.<br>Lots of properties really similar to Sketch.</p>\n<h3 id=\"33-3-Core-Graphics\"><a href=\"#33-3-Core-Graphics\" class=\"headerlink\" title=\"33.3. Core Graphics\"></a>33.3. Core Graphics</h3><p>CGContextRef: An opaque type that represents a Quartz 2D drawing environment.</p>\n<p>Path on CGContextRef vs Vector on Artboard in Sketch, by learn Sketch really make sense of those abstract concepts.</p>\n<h2 id=\"34-自定义手势、Block-amp-GCD\"><a href=\"#34-自定义手势、Block-amp-GCD\" class=\"headerlink\" title=\"34. 自定义手势、Block &amp; GCD\"></a>34. 自定义手势、Block &amp; GCD</h2><h3 id=\"34-1-手势\"><a href=\"#34-1-手势\" class=\"headerlink\" title=\"34.1. 手势\"></a>34.1. 手势</h3><p>尽量设计使用常用的手势</p>\n<blockquote>\n<p>设计一个小 Demo，实现：Shake Your iPhone To Send Feedback Email To Me😄</p>\n</blockquote>\n<h3 id=\"34-2-Block\"><a href=\"#34-2-Block\" class=\"headerlink\" title=\"34.2. Block\"></a>34.2. Block</h3><p>比较简洁的函数，就在当前就可以调用。</p>\n<h3 id=\"34-3-GCD\"><a href=\"#34-3-GCD\" class=\"headerlink\" title=\"34.3. GCD\"></a>34.3. GCD</h3><p>Group queue：并行执行多任务比较牛。</p>\n<h2 id=\"35-APNS、Core-Date、URL-Scheme、单元测试、APP发布流\"><a href=\"#35-APNS、Core-Date、URL-Scheme、单元测试、APP发布流\" class=\"headerlink\" title=\"35. APNS、Core Date、URL Scheme、单元测试、APP发布流\"></a>35. APNS、Core Date、URL Scheme、单元测试、APP发布流</h2><h3 id=\"35-1-APNS\"><a href=\"#35-1-APNS\" class=\"headerlink\" title=\"35.1. APNS\"></a>35.1. APNS</h3><p><img src=\"http://i.imgur.com/2iItYMd.jpg\" alt=\"Remote Notification\"></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 - Register Remote Notification</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - Register deviceToken</span></span><br><span class=\"line\"><span class=\"comment\">// 3 - Receive Remote Notification</span></span><br><span class=\"line\"><span class=\"comment\">// 4 - Update Icon Badge Number</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>稍后添加到 Classmates</p>\n</blockquote>\n<h3 id=\"35-2-Core-Data\"><a href=\"#35-2-Core-Data\" class=\"headerlink\" title=\"35.2. Core Data\"></a>35.2. Core Data</h3><p>核心概念：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 程序员和管理对象模式之间的桥梁，做数据库的增删改查等操作</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSManagedObjectContext</span> *managedObjectContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据库里的不同管理对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSManagedObjectModel</span> *managedObjectModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数据库文件和程序之间的联系桥梁</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSPersistentStoreCoordinator</span> *persistentStoreCoordinator;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>稍后把 Classmate 整个 Core Data 的版本</p>\n</blockquote>\n<h3 id=\"35-3-URL-Scheme\"><a href=\"#35-3-URL-Scheme\" class=\"headerlink\" title=\"35.3. URL Scheme\"></a>35.3. URL Scheme</h3><p>就是一个通过个地址访问系统软件或第三方软件，如地图和 Launch Center Pro。iOS 9之后估计有更多可能性。</p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html\">About Apple URL Schemes</a></li>\n</ul>\n<h3 id=\"35-4-单元测试或断点测试\"><a href=\"#35-4-单元测试或断点测试\" class=\"headerlink\" title=\"35.4. 单元测试或断点测试\"></a>35.4. 单元测试或断点测试</h3><h3 id=\"35-5-App-发布流程\"><a href=\"#35-5-App-发布流程\" class=\"headerlink\" title=\"35.5. App 发布流程\"></a>35.5. App 发布流程</h3>"},{"title":"极客班 iOS 设计模式（一）","url":"/2015/08/11/GeekBand-iOS-Design-Patterns-1/","content":"<p><img src=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/Art/design_patterns_2x.png\" alt=\"design_patterns\"></p>\n<p>总体感觉设计模式课程偏理论，操作起来可能要反复实践后，才会知道项目用哪个设计模式比较合适。</p>\n<p>我目前还是学习了解的还是六大基本设计模式，希望以后开发过程中能够思考设计模式的选择。</p>\n<blockquote>\n<p>@李建忠：设计模式是程序员从初阶往中阶迈进很重要的素养。关键在于要去思考设计的方案，为什么这么做？还有哪些设计方法？彼此的优劣？而不是功能跑通就了事。 在这样日积月累的思考和反复实践中，设计功力就会提高。</p>\n</blockquote>\n<h2 id=\"1-设计模式简介和-MVC\"><a href=\"#1-设计模式简介和-MVC\" class=\"headerlink\" title=\"1. 设计模式简介和 MVC\"></a>1. 设计模式简介和 MVC</h2><p>简单介绍了设计模式的含义，和一些常用的 iOS 设计模式。</p>\n<p>xdrt81y 的 <a href=\"http://blog.csdn.net/xdrt81y/article/details/12128721\">关于iOS六大基本设计模式</a>，文章简单明了可以参考一下。</p>\n<p><a href=\"http://www.raywenderlich.com/86477/introducing-ios-design-patterns-in-swift-part-1\">Introducing iOS Design Patterns in Swift – Part 1&#x2F;2</a> 结合项目介绍了 Swift 中的设计模式。</p>\n<p><a href=\"https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/DesignPatterns.html\">使用设计模式</a>，苹果文档介绍。</p>\n<p>Wikipedia:</p>\n<blockquote>\n<p>In software engineering, a design pattern is a general reusable solution to a commonly occurring problem within a given context in software design.<br>It is a description or template for how to solve a problem that can be used in many different situations.<br>Patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.  </p>\n</blockquote>\n<h2 id=\"2-Target-Action、selector-和-Nib\"><a href=\"#2-Target-Action、selector-和-Nib\" class=\"headerlink\" title=\"2. Target-Action、selector 和 Nib\"></a>2. Target-Action、selector 和 Nib</h2><p>详细介绍了 Nib 加载</p>\n<h2 id=\"3-Storyboard-和原型设计\"><a href=\"#3-Storyboard-和原型设计\" class=\"headerlink\" title=\"3. Storyboard 和原型设计\"></a>3. Storyboard 和原型设计</h2><h3 id=\"Storyboard\"><a href=\"#Storyboard\" class=\"headerlink\" title=\"Storyboard\"></a>Storyboard</h3><p>我还是很喜欢 Storyboard，比代码直观高效，方便看到原型图和交互关系。</p>\n<p>拆分 Storyboard，避免多人同时修改。</p>\n<p>推荐：WWDC15 215 <a href=\"https://developer.apple.com/videos/wwdc/2015/?id=215\">What’s New in Storyboards</a></p>\n<p>参考：<a href=\"http://code.tutsplus.com/tutorials/ios-9-staying-organized-with-storyboard-references--cms-24226\">iOS 9: Staying Organized with Storyboard References</a>：</p>\n<ul>\n<li>instantiateInitialViewController()</li>\n<li>destination of a segue</li>\n</ul>\n<blockquote>\n<p>Storyboard references are powerful. Not only do they make storyboards manageable and modular, they make it very easy to reuse storyboards and even hook into storyboards at arbitrary places.</p>\n<p>Storyboard references are only available in iOS 9.</p>\n</blockquote>\n<p>代码见 <a href=\"https://github.com/gewill/test-projects/tree/master/test%20Storyboard%20References\">GitHub</a></p>\n<h2 id=\"4-两步创建和模板方法\"><a href=\"#4-两步创建和模板方法\" class=\"headerlink\" title=\"4. 两步创建和模板方法\"></a>4. 两步创建和模板方法</h2><blockquote class=\"blockquote-center\">The best way to predict your future is to create it.\n\n<p>― Abraham Lincoln</blockquote></p>\n<h3 id=\"两步创建\"><a href=\"#两步创建\" class=\"headerlink\" title=\"两步创建\"></a>两步创建</h3><p>对象两步创建：alloc init</p>\n<p>工厂方法：+ (instancetype)dateWithTimeIntervalSinceNow:(NSTimeInterval)seconds</p>\n<p>内省（Introspection）</p>\n<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><p>参考：lichwei1983 的文章 <a href=\"http://blog.csdn.net/lichwei1983/article/details/8435644\">模板方法–行为型模式之四</a></p>\n<p><strong>模板方法应用于下列情况:</strong></p>\n<ul>\n<li>一次性实现一个算法的不变的部分,并将可变的行为留给子类来实现。</li>\n<li>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是 Opdyke 和 Johnson 所描述过的“重分解以一般化”的一个很好的例子。首先识别现有代码中的不同之处,并且将不同之处分离为新的操作。最后,用一个调用这些新的操作的模板方法来替换这些不同的代码。</li>\n<li>控制子类扩展。模板方法只在特定点调用“ h o o k”操作(参见效果一节),这样就只允许在这些点进行扩展。</li>\n</ul>\n<p>模板方法是一种代码复用的基本技术。它们在类库中尤为重要,它们提取了类库中的公共行为。模板方法导致一种反向的控制结构,这种结构有时被称为“好莱坞法则”,即“别找我们,我们找你”。这指的是一个父类调用一个子类的操作,而不是相反。</p>\n<h2 id=\"5-单例模式\"><a href=\"#5-单例模式\" class=\"headerlink\" title=\"5. 单例模式\"></a>5. 单例模式</h2><ul>\n<li>UIApplication</li>\n<li>NSNotificationCenter</li>\n<li>NSUserDefaults</li>\n<li>NSFileManager</li>\n<li>UIAccelerometer</li>\n<li>NSURLSession</li>\n</ul>\n<p>参考：刚刚在线的 <a href=\"http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/\">iOS 设计模式系列：Singleton – 单例模式</a></p>\n<p>单例设计模式确切的说就是一个类只有一个实例，有一个全局的接口来访问这个实例。当第一次载入的时候，它通常使用延时加载的方法创建单一实例。</p>\n<p>在一些情况下，一个类只有一个实例是有意义的。例如，这里没有必要有多个登录实例，除非你一次想写入多个日志文件。或者，一个全局的配置类文件：它可以很容易的很安全的执行一个公共资源，这样的一个配置文件，要比同时修改多个配置类文件好很多。</p>\n"},{"title":"极客班 iOS 设计模式（二）","url":"/2015/08/19/GeekBand-iOS-Design-Patterns-2/","content":"<p>重点在通知模式流程图，大致了解几种通知模式的用途的区别。都是理论的东西，还是希望实际写代码时联系理论，仔细考虑选择。</p>\n<p>课件下载：<a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Design%20Patterns\">https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Design%20Patterns</a></p>\n<h2 id=\"6-委托模式\"><a href=\"#6-委托模式\" class=\"headerlink\" title=\"6. 委托模式\"></a>6. 委托模式</h2><ul>\n<li>复杂的模型,scrollView,tableView,collectionView</li>\n<li>单⼀一个类无法表现复杂的设计</li>\n<li>设计拆分</li>\n<li>方便重⽤</li>\n<li>delegate 独立对象 </li>\n<li>清晰定义功能,变化行为&#x2F;自定义界⾯面 </li>\n<li>松散耦合,容易扩展</li>\n</ul>\n<p>以 Master-Detail Application 模板详细介绍了委托模式。孔老师喜欢直接看类的定义。</p>\n<p><img src=\"http://i.imgur.com/ijupTTB.png\" alt=\"UITableView delegation\"><br><img src=\"http://i.imgur.com/QPtgCFl.png\" alt=\"Jump to Definition\"><br><img src=\"http://i.imgur.com/eUzOn9O.png\" alt=\"UITableViewDataSource\"></p>\n<h2 id=\"7-观察者和消息通知\"><a href=\"#7-观察者和消息通知\" class=\"headerlink\" title=\"7. 观察者和消息通知\"></a>7. 观察者和消息通知</h2><p><img src=\"http://i.imgur.com/i8HTac7.png\" alt=\"MVC\"><br><img src=\"http://cdn.cocimg.com/cms/uploads/allimg/130506/4196_130506095606_1.png\" alt=\"Observer pattern\"></p>\n<ul>\n<li>定义对象间一种⼀对多的依赖关系,使得每当一个对象改变状态,则所有依赖于他的对象都会得到通知并被自动更新。</li>\n<li>Subject被观察者：定义被观察者必须实现的职责,它必须能够动态的增加、取消 观察者。它一般是抽象类或者是实现类,仅仅完成作为被观察者必须实现的职责<br>：管理观察者并通知观察者</li>\n<li>Observer观察者：观察者接收到消息后,即进行update(更新方法)操作,对接收到的信息进行处理。</li>\n<li>具体的被观察者：定义被观察者自己的业务逻辑,同时定义对哪些事件进行通知。</li>\n<li>具体的观察者：每个观察者在接收到消息后的处理反应是不同的,各个观察者有自己的处理逻辑。</li>\n</ul>\n<h3 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h3><p><img src=\"http://i.imgur.com/18qyxxi.png\" alt=\"Notification pattern\"></p>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>窗口变化通知 </li>\n<li>系统键盘的出现和消失&#x2F;位置⼤小变化</li>\n<li>UITextField 字符变化通知(可以用来限制输入长度)</li>\n<li>MPMoviePlayerController 播放器的⾏为变化(开始结束等事件) </li>\n<li>自定义Class使用</li>\n</ul>\n<p>代码实现参看李久寧的文章：<a href=\"http://www.cnblogs.com/limlee/archive/2012/06/21/2547582.html\">iOS 设计模式之四：观察者模式</a></p>\n<h3 id=\"Key-Value-Coding-and-Key-Value-Observing\"><a href=\"#Key-Value-Coding-and-Key-Value-Observing\" class=\"headerlink\" title=\"Key-Value-Coding and Key-Value-Observing\"></a>Key-Value-Coding and Key-Value-Observing</h3><p>可在 Xcode 中 Open Quickly(⇧⌘O)，查看<code>NSKeyValueCoding.h</code>协议的内容。</p>\n<p>典型的例子 NSOperation and NSOperationQueue</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*\tNSOperation.h</span></span><br><span class=\"line\"><span class=\"comment\">\tCopyright (c) 2006-2014, Apple Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSOperation</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">@private</span></span><br><span class=\"line\">    <span class=\"type\">id</span> _private;</span><br><span class=\"line\">    int32_t _private1;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __LP64__</span></span><br><span class=\"line\">    int32_t _private1b;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)start;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isCancelled) <span class=\"type\">BOOL</span> cancelled;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)cancel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isExecuting) <span class=\"type\">BOOL</span> executing;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isFinished) <span class=\"type\">BOOL</span> finished;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isConcurrent) <span class=\"type\">BOOL</span> concurrent; <span class=\"comment\">// To be deprecated; use and override &#x27;asynchronous&#x27; below</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isAsynchronous) <span class=\"type\">BOOL</span> asynchronous <span class=\"built_in\">NS_AVAILABLE</span>(<span class=\"number\">10</span>_8, <span class=\"number\">7</span>_0);</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">readonly</span>, <span class=\"keyword\">getter</span>=isReady) <span class=\"type\">BOOL</span> ready;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/42743-6dd68172ae4cbf64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NSOperationQueue\"></p>\n<p>###延伸阅读：</p>\n<ul>\n<li>Apple <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html#//apple_ref/doc/uid/10000107-SW1\">Key-Value Coding Programming Guide</a><blockquote>\n<p>This document describes the NSKeyValueCoding informal protocol, which defines a mechanism allowing applications to access the properties of an object indirectly by name (or key), rather than directly through invocation of an accessor method or as instance variables.</p>\n</blockquote>\n<blockquote>\n<p>Dot Syntax and Key-Value Coding: Objective-C’s dot syntax and key-value coding are orthogonal technologies. You can use key-value coding whether or not you use the dot syntax, and you can use the dot syntax whether or not you use KVC. Both, though, make use of a “dot syntax.” In the case of key-value coding, the syntax is used to delimit elements in a key path. Remember that when you access a property using the dot syntax, you invoke the receiver’s standard accessor methods.</p>\n</blockquote>\n</li>\n<li><a href=\"http://objccn.io/issue-7-3/\">KVC 和 KVO</a></li>\n<li><a href=\"http://objccn.io/issue-7-4/\">消息传递机制</a><blockquote>\n<p>我们会常常提及“接收者”和“发送者”。它们在消息传递中的意思可以通过以下的例子解释：一个 table view 是发送者，它的 delegate 就是接收者。Core Data managed object context 是它所发出的 notification 的发送者，获取 notification 的就是接收者。一个滑块 (slider) 是 action 消息的发送者，而实现这个 action （方法）的是它的接收者。任何修改一个支持 KVO 的对象的对象是发送者，这个 KVO 对象的观察者就是接收者。明白精髓了吗？<br>基于不同消息传递机制的特点的流程图<br><img src=\"http://img.objccn.io/issue-7/communication-patterns-flow-chart.png\" alt=\"communication-patterns-flow-chart\"></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"9-归档和解档\"><a href=\"#9-归档和解档\" class=\"headerlink\" title=\"9. 归档和解档\"></a>9. 归档和解档</h2><p>###NSCoding </p>\n<p>是一个简单的协议，有两个方法： -initWithCoder: 和 encodeWithCoder:。遵循NSCoding协议的类可以被序列化和反序列化，这样可以归档到磁盘上或分发到网络上。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Book</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *title;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *author;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSUInteger</span> pageCount;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSSet</span> *categories;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">getter</span> = isAvailable) <span class=\"type\">BOOL</span> available;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Book</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - NSCoding</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)decoder &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"variable language_\">super</span> init];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = [decoder decodeObjectForKey:<span class=\"string\">@&quot;title&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.author = [decoder decodeObjectForKey:<span class=\"string\">@&quot;author&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.pageCount = [decoder decodeIntegerForKey:<span class=\"string\">@&quot;pageCount&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.categories = [decoder decodeObjectForKey:<span class=\"string\">@&quot;categories&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.available = [decoder decodeBoolForKey:<span class=\"string\">@&quot;available&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)encoder &#123;</span><br><span class=\"line\">    [encoder encodeObject:<span class=\"keyword\">self</span>.title forKey:<span class=\"string\">@&quot;title&quot;</span>];</span><br><span class=\"line\">    [encoder encodeObject:<span class=\"keyword\">self</span>.author forKey:<span class=\"string\">@&quot;author&quot;</span>];</span><br><span class=\"line\">    [encoder encodeInteger:<span class=\"keyword\">self</span>.pageCount forKey:<span class=\"string\">@&quot;pageCount&quot;</span>];</span><br><span class=\"line\">    [encoder encodeObject:<span class=\"keyword\">self</span>.categories forKey:<span class=\"string\">@&quot;categories&quot;</span>];</span><br><span class=\"line\">    [encoder encodeBool:[<span class=\"keyword\">self</span> isAvailable] forKey:<span class=\"string\">@&quot;available&quot;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"NSKeyedArchiver-和-NSKeyedUnarchiver\"><a href=\"#NSKeyedArchiver-和-NSKeyedUnarchiver\" class=\"headerlink\" title=\"NSKeyedArchiver 和 NSKeyedUnarchiver\"></a>NSKeyedArchiver 和 NSKeyedUnarchiver</h3><p>提供了很方便的API把对象读取&#x2F;写入磁盘。一个基于NSCoding的table view controller可以通过file manager设置它的属性集合。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:books toFile:<span class=\"string\">@&quot;/path/to/archive&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:<span class=\"string\">@&quot;/path/to/archive&quot;</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NSUserDefaults\"><a href=\"#NSUserDefaults\" class=\"headerlink\" title=\"NSUserDefaults\"></a>NSUserDefaults</h3><p>每个应用程序都有自己的user preferences，它可以存储和检索遵循NSCoding协议的对象或者是C类型数据。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:books];</span><br><span class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:data forKey:<span class=\"string\">@&quot;books&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSData</span> *data = [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] objectForKey:<span class=\"string\">@&quot;books&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *books = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</span><br></pre></td></tr></table></figure>\n\n<p>###延伸阅读：</p>\n<ul>\n<li><a href=\"http://nshipster.cn/nscoding/\">NSCoding &#x2F; NSKeyed​Archiver</a></li>\n<li><a href=\"http://nshipster.cn/nsfilemanager/\">NSFile​Manager</a></li>\n</ul>\n<h2 id=\"10-复制模式\"><a href=\"#10-复制模式\" class=\"headerlink\" title=\"10. 复制模式\"></a>10. 复制模式</h2><ul>\n<li>创建一个对象的新副本</li>\n<li>复制一个复杂对象时,保护一个一样的对象,还是包含原来对象的副本</li>\n<li>用户界面上的复制&#x2F;粘贴 有些对象封装了独一无⼆的资源,复制没有意义</li>\n<li>浅复制和深复制。顾名思义,浅复制,并不拷⻉对象本⾝,仅仅是拷贝指向对象的指针;深复制是直接拷贝整个对象内存到另⼀块内存中</li>\n</ul>\n<p><code>- initWithDictionary:copyItems</code> 就是个典型例子，可深可浅。</p>\n<p>参看 MicroCai 的文章：<a href=\"https://www.zybuluo.com/MicroCai/note/50592\">iOS 集合的深复制与浅复制 </a></p>\n"},{"title":"极客班 iOS 设计模式（三）","url":"/2015/08/28/GeekBand-iOS-Design-Patterns-3/","content":"<p>设计模式课程给我的感受是：理清各种平时固定用的 API 的背后的原理或思路，尤其是写代码时候反复去审视开发框架和思路都有一定的帮助。</p>\n<p>课件下载：<a href=\"https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Design%20Patterns\">https://github.com/gewill/GeekBand-iOS-Demo/tree/master/Design%20Patterns</a></p>\n<h2 id=\"11-层次结构\"><a href=\"#11-层次结构\" class=\"headerlink\" title=\"11. 层次结构\"></a>11. 层次结构</h2><h3 id=\"动机：\"><a href=\"#动机：\" class=\"headerlink\" title=\"动机：\"></a>动机：</h3><ul>\n<li>对象之间关系</li>\n<li>允许一组相互协作的对象当成单⼀对象处理</li>\n<li>无需⼦类化,实现⾃定义</li>\n<li>降低 parents class 复杂度</li>\n<li>使用 tree 结构,⽅便数据的存储,操作和搜索</li>\n</ul>\n<p><img src=\"http://i.imgur.com/9bGOm2k.png\" alt=\"Layers associated with a window\"></p>\n<p><img src=\"http://i.imgur.com/R7XAflX.jpg\" alt=\"View Hierarchy in Xcode\"></p>\n<blockquote>\n<p>其实还有更强大的工具：<a href=\"http://revealapp.com/\">Reveal</a>，附<a href=\"http://gewill.org/2015/08/03/Reveal/\">使用方法</a>。</p>\n</blockquote>\n<p>节选自<code>UIView.h</code>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIView</span>(<span class=\"title\">UIViewHierarchy</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIView</span>       *superview;</span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>,<span class=\"keyword\">copy</span>) <span class=\"built_in\">NSArray</span> *subviews;</span><br><span class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>,<span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIWindow</span>     *window;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)removeFromSuperview;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)insertSubview:(<span class=\"built_in\">UIView</span> *)view atIndex:(<span class=\"built_in\">NSInteger</span>)index;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)exchangeSubviewAtIndex:(<span class=\"built_in\">NSInteger</span>)index1 withSubviewAtIndex:(<span class=\"built_in\">NSInteger</span>)index2;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)addSubview:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)insertSubview:(<span class=\"built_in\">UIView</span> *)view belowSubview:(<span class=\"built_in\">UIView</span> *)siblingSubview;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)insertSubview:(<span class=\"built_in\">UIView</span> *)view aboveSubview:(<span class=\"built_in\">UIView</span> *)siblingSubview;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)bringSubviewToFront:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)sendSubviewToBack:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didAddSubview:(<span class=\"built_in\">UIView</span> *)subview;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)willRemoveSubview:(<span class=\"built_in\">UIView</span> *)subview;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)willMoveToSuperview:(<span class=\"built_in\">UIView</span> *)newSuperview;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)didMoveToSuperview;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)willMoveToWindow:(<span class=\"built_in\">UIWindow</span> *)newWindow;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)didMoveToWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)isDescendantOfView:(<span class=\"built_in\">UIView</span> *)view;  <span class=\"comment\">// returns YES for self.</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIView</span> *)viewWithTag:(<span class=\"built_in\">NSInteger</span>)tag;     <span class=\"comment\">// recursive search. includes self</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Allows you to perform layout before the drawing cycle happens. -layoutIfNeeded forces layout early</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)setNeedsLayout;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)layoutIfNeeded;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"iOS-rendering-tree\"><a href=\"#iOS-rendering-tree\" class=\"headerlink\" title=\"iOS rendering tree:\"></a>iOS rendering tree:</h3><ul>\n<li>UIView 负责界⾯显示和事件处理</li>\n<li>CALayer 负责屏幕渲染(Layer Tree)</li>\n<li>View&#x2F;Layer 的变化需要通过渲染器实时渲染到屏幕上</li>\n<li>layer.presentationLayer</li>\n</ul>\n<p><img src=\"http://i.imgur.com/W3RoHiP.png\" alt=\"The layer trees for a window\"></p>\n<h3 id=\"延伸阅读：\"><a href=\"#延伸阅读：\" class=\"headerlink\" title=\"延伸阅读：\"></a>延伸阅读：</h3><ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html\">View Programming Guide for iOS</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html\">Debug View Hierarchy</a></li>\n<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/CoreAnimationBasics/CoreAnimationBasics.html\">Core Animation Basics</a></li>\n</ul>\n<h2 id=\"12-响应链（Responder-Chain）\"><a href=\"#12-响应链（Responder-Chain）\" class=\"headerlink\" title=\"12. 响应链（Responder Chain）\"></a>12. 响应链（Responder Chain）</h2><p><img src=\"https://developer.apple.com/library/prerelease/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Art/iOS_responder_chain_2x.png\" alt=\"The responder chain on iOS\"></p>\n<p>节选自 <code>UIResponder.h</code>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NS_CLASS_AVAILABLE_IOS</span>(<span class=\"number\">2</span>_0) <span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIResponder</span> : <span class=\"title\">NSObject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@private</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">UIResponder</span>*)nextResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)canBecomeFirstResponder;    <span class=\"comment\">// default is NO</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)becomeFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)canResignFirstResponder;    <span class=\"comment\">// default is YES</span></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)resignFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)isFirstResponder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generally, all responders which do custom touch handling should override all four of these methods.</span></span><br><span class=\"line\"><span class=\"comment\">// Your responder will receive either touchesEnded:withEvent: or touchesCancelled:withEvent: for each</span></span><br><span class=\"line\"><span class=\"comment\">// touch it is handling (those touches it received in touchesBegan:withEvent:).</span></span><br><span class=\"line\"><span class=\"comment\">// *** You must handle cancelled touches to ensure correct behavior in your application.  Failure to</span></span><br><span class=\"line\"><span class=\"comment\">// do so is very likely to lead to incorrect behavior or crashes.</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)touchesBegan:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)touchesMoved:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)touchesEnded:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event;</span><br><span class=\"line\">- (<span class=\"type\">void</span>)touchesCancelled:(<span class=\"built_in\">NSSet</span> *)touches withEvent:(<span class=\"built_in\">UIEvent</span> *)event;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)motionBegan:(<span class=\"built_in\">UIEventSubtype</span>)motion withEvent:(<span class=\"built_in\">UIEvent</span> *)event <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);</span><br><span class=\"line\">- (<span class=\"type\">void</span>)motionEnded:(<span class=\"built_in\">UIEventSubtype</span>)motion withEvent:(<span class=\"built_in\">UIEvent</span> *)event <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);</span><br><span class=\"line\">- (<span class=\"type\">void</span>)motionCancelled:(<span class=\"built_in\">UIEventSubtype</span>)motion withEvent:(<span class=\"built_in\">UIEvent</span> *)event <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)remoteControlReceivedWithEvent:(<span class=\"built_in\">UIEvent</span> *)event <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">4</span>_0);</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)canPerformAction:(SEL)action withSender:(<span class=\"type\">id</span>)sender <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">3</span>_0);</span><br><span class=\"line\"><span class=\"comment\">// Allows an action to be forwarded to another target. By default checks -canPerformAction:withSender: to either return self, or go up the responder chain.</span></span><br><span class=\"line\">- (<span class=\"type\">id</span>)targetForAction:(SEL)action withSender:(<span class=\"type\">id</span>)sender <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">7</span>_0);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://i.imgur.com/iHPA7mx.png\" alt=\"UIKit Inheritance\"></p>\n<h3 id=\"延伸阅读：-1\"><a href=\"#延伸阅读：-1\" class=\"headerlink\" title=\"延伸阅读：\"></a>延伸阅读：</h3><ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Introduction/Introduction.html\">Event Handling Guide for iOS</a></li>\n</ul>\n<h2 id=\"13-Prototype\"><a href=\"#13-Prototype\" class=\"headerlink\" title=\"13. Prototype\"></a>13. Prototype</h2><p>如 UITableView 的 Prototype Cells：</p>\n<ul>\n<li>原型对象的基本特征是可以被复制 NSCopy 和 NSCoding 协议</li>\n<li>可以利用界面⼯具和支持复制的类确保互操作性</li>\n<li>原型对象使用深复制</li>\n<li>利用 NSKeyedArchiver 和 NSKeyedUnarchiver 实现深复制</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>MVC,target-action</li>\n<li>￼两步创建，模版模式 </li>\n<li>委托模式，观察者模式，消息通知，KVC&#x2F;KVO</li>\n<li>归档和解档(Serialization)，复制模式 </li>\n<li>层次结构，响应链</li>\n<li>prototype</li>\n</ul>\n<blockquote>\n<p>完</p>\n</blockquote>\n"},{"title":"君子的尊严-王小波","url":"/2015/05/04/Gentleman-s-Dignity-Wang-Xiaobo/","content":"<p>君子不若绅士般注重尊严。<br> <span id=\"more\"></span></p>\n<p><img src=\"http://i.imgur.com/aOVkLav.png\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/TRK1RW4.png\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/gAmfurM.png\" alt=\"Imgur\"></p>\n"},{"title":"Git","url":"/2015/11/12/Git/","content":"<p>Git开始使用的是 GitHub 的 GUI，基本上就是Commit和Sync，涉及项目协作是 Pull Request，基本没问题，但是整个Git的流程和原理还是不懂。</p>\n<p>最近公司项目是命令行，涉及合并冲突工作流等等，还是命令行来的清晰直接，又仔细看了Pro Git Book，这里梳理一下Git的工作原理和常用的命令。</p>\n<p> 给他的工作流程如下：</p>\n<ul>\n<li>多个分支：checkout branch</li>\n<li>上传修改：add&#x2F;commit&#x2F;push</li>\n<li>避免冲突：Xcode 每次只提交个人修改的文件，之后可以舍弃多余修改，尤其是 xib 文件，只要打开就会被修改</li>\n<li>合并分支：merge</li>\n</ul>\n<p> 其中2个概念要理清楚，一个是分支用来分版本分人员的作用，另一个是本地工作区和远程仓库。工作原理和概念理解了，常用的几个命令实践几次也就记住了，太多不常用甚至没用命令，需要时可在 Google。</p>\n"},{"title":"黑苹果安装记录 MSI Z390 和 i9-9900K","url":"/2019/03/17/Hackintosh-Installation-with-MSI-Z390-and-i9-9900K/","content":"<p>微星 MSI Z390 GAMING PRO CARBON AC 华硕 Vega64 黑苹果</p>\n<h2 id=\"机器配置\"><a href=\"#机器配置\" class=\"headerlink\" title=\"机器配置\"></a>机器配置</h2><p>主板：<a href=\"https://www.msi.com/Motherboard/MPG-Z390-GAMING-PRO-CARBON-AC\">微星 MSI MPG Z390 GAMING PRO CARBON AC</a></p>\n<p>CPU：<a href=\"https://ark.intel.com/content/www/us/en/ark/products/186605/intel-core-i9-9900k-processor-16m-cache-up-to-5-00-ghz.html\">Intel i9 9900K</a></p>\n<p>内存：Avexir DDR4 2400</p>\n<p>显卡：<a href=\"https://www.asus.com/us/Graphics-Cards/AREZ-STRIX-RXVEGA64-O8G-GAMING/\">华硕 ASUS AREZ-STRIX-RXVEGA64-O8G-GAMING</a></p>\n<p>电源：<a href=\"https://www.evga.com/products/product.aspx?pn=120-GP-0750-X1\">EVGA SuperNOVA 750 G+</a></p>\n<p>散热：<a href=\"http://www.coolermaster.com/cooling/cpu-liquid-cooler/masterliquid-ml240r-rgb/\">MASTERLIQUID ML240R RGB</a></p>\n<p>固态：三星 970 EVO 500G</p>\n<p>板载声卡：ALC S1220A</p>\n<p>板载有线网卡：Intel I219V7</p>\n<p>显示器：戴尔 P2715Q 4K显示器</p>\n<p>机箱：<a href=\"http://www.phanteks.com/Enthoo-Evolv-ATX-TemperedGlass.html\">追风者 PK-515ETG</a></p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p><strong>重要提示：已降 BIOS 至 <a href=\"https://www.msi.com/Motherboard/support/MPG-Z390-GAMING-PRO-CARBON-AC\">Version 7B17v10</a>，不在卡 no nvram variable。</strong></p>\n<ol>\n<li><a href=\"https://blog.daliansky.net/macOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html\">【黑果小兵】<strong>macOS Mojave 10.14.3 18D42</strong> 正式版 <strong>with Clover 4859</strong>原版镜像</a></li>\n<li>执行：<strong>300</strong>系列主板请于<strong>drivers64UEFI</strong>目录中移除<strong>AptioMemoryFix-64.efi</strong>添加<strong>OsxAptioFix2Drv-free2000.efi</strong>该驱动位于**&#x2F;EFI&#x2F;CLOVER&#x2F;drivers-off<strong>目录下。顺利进入</strong>macOS**安装界面</li>\n<li>系统后序安装和复制 <strong>EFI</strong> 到硬盘教程：<a href=\"https://blog.daliansky.net/Lenovo-Xiaoxin-Air-13-macOS-Mojave-installation-tutorial.html\">联想小新<strong>Air 13</strong>安装黑苹果兼<strong>macOS Mojave</strong>安装教程</a></li>\n<li>进入系统设置页面前：卡在 <strong>AppleUSBHostResources panic</strong>。解决方案是<strong>boot</strong> 添加 <strong>safe mode</strong></li>\n<li>合并 <strong>Windows</strong> 和 <strong>Clover</strong> 引导</li>\n<li>完善驱动</li>\n<li>结束</li>\n</ol>\n<h2 id=\"附图\"><a href=\"#附图\" class=\"headerlink\" title=\"附图\"></a>附图</h2><h2 id=\"Hackintosh-i9-2019-03-15-https-gewill-org-assets-Hackintosh-i9-2019-03-15-png-总结\"><a href=\"#Hackintosh-i9-2019-03-15-https-gewill-org-assets-Hackintosh-i9-2019-03-15-png-总结\" class=\"headerlink\" title=\"![Hackintosh-i9 2019-03-15](https://gewill.org/assets/Hackintosh-i9 2019-03-15.png)总结\"></a>![Hackintosh-i9 2019-03-15](<a href=\"https://gewill.org/assets/Hackintosh-i9\">https://gewill.org/assets/Hackintosh-i9</a> 2019-03-15.png)总结</h2><ol>\n<li>小兵教程很好用。</li>\n<li>就是一直卡在 BIOS 部分，所以无论做什么努力的都没有效果。所以购买主板一定要看 tonymacx86.com 的 <a href=\"https://www.tonymacx86.com/buyersguide/building-a-customac-hackintosh-the-ultimate-buyers-guide/\">Buyer’s Guide</a> 和网友的成功贴。我只之前微星 Z170A M3 安装黑苹果成功，就想当然的买了微星的这块主板。活生生的因为 BIOS 问题，至少1个月的安装时间浪费了。</li>\n<li>买主板别买带无解的无线网卡，明明可以省200块，去买同系列的微星 MPG Z390 GAMING PRO CARBON。然后去买免驱的无线蓝牙网卡：Broadcom 94360CD。</li>\n</ol>\n<h2 id=\"EFI\"><a href=\"#EFI\" class=\"headerlink\" title=\"EFI\"></a>EFI</h2><p>EFI已上传 <a href=\"https://github.com/gewill/Hackintosh-Installation-with-MSI-Z390-and-i9-9900K\">https://github.com/gewill/Hackintosh-Installation-with-MSI-Z390-and-i9-9900K</a></p>\n"},{"title":"ICF 12章 Core Data 简介","url":"/2015/08/18/ICF-12-Core-Data-Primer/","content":"<p>Core Data 有点复杂，明明一个数据库，被苹果整的这么复杂。结果了还是看翻译的书才明白，太多新的概念需要消化。</p>\n<p><a href=\"http://book.douban.com/subject/26284107/\">《iOS 组件与框架》</a> </p>\n<p>Core Data 提供了直接使用 SQLite 的大部分大部分灵活性，同时无需关心关系数据库使用机制。</p>\n<ul>\n<li><p>托管对象（Managed object）是 NSManagedObject 实例，应用主要与之交互。可视为字典。包含一组键值对。托管对象之间可以建立关系。</p>\n</li>\n<li><p>托管对象是在托管对象模型（NSManagedObjectModel）中定义的。托管对象模型包含一系列实体、实体的特性、特性和实体的有效性约束以及实体之间的关系。通常在 Xcode 中可视化模型编辑器创建的。</p>\n</li>\n<li><p>托管对象只能存在于托管对象上下文中（NSManagedObjectContext），即 Core Data 的工作区。托管对象只能在托管对象上下文中创建或获取。</p>\n</li>\n<li><p>Core Data 需要指定托管对象对应的实体，可使用 NSEntityDescription </p>\n</li>\n<li><p>对象的检索：直接使用 objectID；编写检索请求</p>\n</li>\n<li><p>检索请求可包含：排序描述符（NSSortDescriptor）、谓词（NSPredicate）、返回聚合函数（如 sum 和 count）的结果。</p>\n</li>\n<li><p>检索结果控制器（fetched results controller）可以讲检索请求与 UITableView 关联起来。使用委托方法可以更新表视图。</p>\n</li>\n<li><p>Core Data 环境</p>\n<p> <img src=\"https://developer.apple.com/library/mac/documentation/DataManagement/Devpedia-CoreData/Art/single_persistent_stack.jpg\" alt=\"Core Data stack\"></p>\n</li>\n</ul>\n"},{"title":"Introducing Password AutoFill for Apps - 笔记","url":"/2017/07/06/Introducing-Password-AutoFill-for-Apps-Notes/","content":"<p>WWDC 2017 Session 206 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/206/\">https://developer.apple.com/videos/play/wwdc2017/206/</a></p>\n<p>应用支持自动填充密码，三步搞定：</p>\n<ul>\n<li>显示QuickType工具栏</li>\n<li>提供证书：网址提供json格式证书</li>\n<li>显示对应的证书：项目中添加证书</li>\n<li>（可选）通过第三方服务授权：SafariViewController</li>\n</ul>\n<p>附 Demo: <a href=\"https://github.com/gewill/Demo/tree/PasswordAutoFill\">https://github.com/gewill/Demo/tree/PasswordAutoFill</a></p>\n"},{"title":"The Animation Tools Learn iOS Design - 笔记","url":"/2016/08/15/Learn-iOS-Design-Notes/","content":"<p><a href=\"https://designcode.io/iosdesign\">Learn iOS Design</a> 是 Design Code 第一本，详细介绍了iOS 设计的方方面面，几乎每篇都是理论加工具。总体很全面，还有待进一步的实践中得到提高。</p>\n<h2 id=\"Core-Philosophies\"><a href=\"#Core-Philosophies\" class=\"headerlink\" title=\"Core Philosophies\"></a>Core Philosophies</h2><p>讲解了设计的哲学，和最低的三个要求：consider the touch interface, make the text readable and optimize for the iPhone 5, 6 and 6 Plus.</p>\n<p>iOS is driven by 3 core philosophies: deference, clarity and depth.</p>\n<p>In Retina, typography should have a minimum size of 11pt. The optimal size for reading is around 16pt.</p>\n<h2 id=\"Designing-for-iOS-9\"><a href=\"#Designing-for-iOS-9\" class=\"headerlink\" title=\"Designing for iOS 9\"></a>Designing for iOS 9</h2><p>详细讲解了 iOS 9 上常见控件的合理布局大小。</p>\n<p>iOS uses vibrant colors to bring out the buttons. </p>\n<p>iOS often uses neutral colors to serve as the background and menu areas.</p>\n<p><img src=\"https://designcode.io/cloud/chapter1/Colors.jpg\" alt=\"iOS-Colors\"></p>\n<h2 id=\"Learn-Colors\"><a href=\"#Learn-Colors\" class=\"headerlink\" title=\"Learn Colors\"></a>Learn Colors</h2><p>色彩运用和对比是 HSB 在数值上更有易于理解和对比。<br>下面介绍了：单色系、相似色、互补色、中间色、反色等色彩运用。将用的中间色的色板、颜色的含义、原质化设计(Material Design)颜色、阶梯色(UI Gradients)。</p>\n<p>use colors only to draw attention to a button or element of importance.</p>\n<p>I suggest starting with a vibrant, pastel color that is Primary or Secondary. </p>\n<p>These are the colors used by Apple in their native apps. They’re vibrant and perfect for buttons, icons and actionable items.</p>\n<p>I can easily map in my mind how much Hue, Saturation and Brightness. Those values make a lot more sense to me.</p>\n<p>Meaning In Colors：I suggest reading this <a href=\"http://www.rocket-design.fr/color-template/\">guide</a> about colors.</p>\n<p>This is a nice collection of gradients: <a href=\"http://uigradients.com/\">http://uigradients.com</a></p>\n<h2 id=\"Learn-Typography\"><a href=\"#Learn-Typography\" class=\"headerlink\" title=\"Learn Typography\"></a>Learn Typography</h2><p>介绍了一些字体常用使用，和字体网站。</p>\n<p>字体一些基础知识：位置线、有无衬线字体</p>\n<p><img src=\"https://designcode.io/cloud/chapter1/Typography-Basics.jpg\" alt=\"Typography-Basics\"></p>\n<p>Let’s look at these <a href=\"http://practicaltypography.com/typography-in-ten-minutes.html\">5 rules of good typography</a> and apply them to modern design for mobile and for Websites.</p>\n<p>The font size should be at least <strong>11pt</strong> to be readable on the iPhone, iPad and Apple Watch. While that is the minimum value, the recommended size for the body text is actually<strong>15-18pt</strong>.</p>\n<p>At 12-18pt, use Regular. At 18-24pt, use Light, at 24-32pt, use Thin and at 32pt or more, use Ultralight. Notice that for each scale, the text remains readable while looking clean and sophisticated.</p>\n<p><img src=\"https://designcode.io/cloud/chapter1/Typography-LineHeight.jpg\" alt=\"Typography-LineHeight\"></p>\n<p>“People say design isn’t art. It isn’t. Great design is art.”</p>\n<p>字体资源网站：</p>\n<p>* <a href=\"https://www.google.com/fonts\">Google Fonts</a><br>* <a href=\"https://typekit.com/fonts\">Typekit</a><br>* <a href=\"fonts.com\">fonts.com</a></p>\n<h2 id=\"Learn-Animations\"><a href=\"#Learn-Animations\" class=\"headerlink\" title=\"Learn Animations\"></a>Learn Animations</h2><p>介绍动画在交互中的作用，和一些基本原则，以及一些做动画原型的工具。</p>\n<p>Good animations enhance, bad animations distract.</p>\n<p>Good animations should provide feedback on taps and gestures, and give a sense of direct manipulation.</p>\n<p>Modern apps tend to use Spring and Ease animations much more than Linear.</p>\n<p><img src=\"https://designcode.io/cloud/chapter1/Animation-Good.jpg\" alt=\"Animation-Good\"></p>\n<p><img src=\"https://designcode.io/cloud/chapter1/2015-10-14%2004_02_36.gif\" alt=\"Animation Curve\"></p>\n<p>On <a href=\"https://github.com/mengto/spring\">Spring</a>, an animation framework that I created for iOS, I made available a bunch of preset animations that combine many transforms at once. They can be inexpensively integrated to your app, without even learning how to code. 和 <a href=\"https://github.com/IBAnimatable/IBAnimatable\">IBAnimatable</a> 类似的一个不用代码的动画库。</p>\n<p>效果视频：<a href=\"https://designcode.io/cloud/chapter1/Animation-Spring.mp4\">https://designcode.io/cloud/chapter1/Animation-Spring.mp4</a></p>\n<p>Animations Shouldn’t Last Longer Than 1 second.</p>\n<blockquote>\n<p>“Design is the fundamental soul of a human-made creation that ends up expressing itself in successive outer layers of the product or service.” </p>\n<p>– Steve Jobs</p>\n</blockquote>\n<p>The Animation Tools:</p>\n<ul>\n<li>Principle</li>\n<li>Flinto for Mac</li>\n<li>Pixate</li>\n<li>Origami</li>\n<li>Framer</li>\n<li>After Effects</li>\n</ul>\n<h2 id=\"UI-Icons\"><a href=\"#UI-Icons\" class=\"headerlink\" title=\"UI Icons\"></a>UI Icons</h2><p>好水的一章，介绍一些图标的网站。</p>\n<p>图标要表意，避免于其他app混淆，除非故意为之。</p>\n<h2 id=\"UI-Sounds\"><a href=\"#UI-Sounds\" class=\"headerlink\" title=\"UI Sounds\"></a>UI Sounds</h2><p>音效也是应用增强体验的一个方面，可应用在通知、正操作反馈和负操作反馈。</p>\n<h2 id=\"Design-Inspiration\"><a href=\"#Design-Inspiration\" class=\"headerlink\" title=\"Design Inspiration\"></a>Design Inspiration</h2><p>介绍获取涉及灵感的方式：观察生活中的技艺，看书，和一些网站。</p>\n<p>书：</p>\n<ul>\n<li>Becoming Steve Jobs</li>\n<li>Steve Jobs by Walter Isaacson</li>\n<li>Jony Ive: The Genius Behind Apple’s Greatest Products</li>\n<li>Dieter Rams</li>\n<li>Elon Musk</li>\n<li>The Tipping Point,</li>\n<li>Outliers, </li>\n<li>Blink, </li>\n<li>David and Goliath</li>\n<li>What The Dog Saw</li>\n</ul>\n<p>网站：Twitter、Medium、<a href=\"http://sidebar.io/\">Sidebar</a></p>\n<p>it’s about 10% reading, 30% writing and collecting, and 60% design and code.</p>\n<p><img src=\"https://designcode.io/cloud/chapter1/Inspiration-Split.png\"></p>\n<h2 id=\"Design-Principles\"><a href=\"#Design-Principles\" class=\"headerlink\" title=\"Design Principles\"></a>Design Principles</h2><p>介绍了设计常见的几个原则和作者个人的一些建议：自学能力、尽可能少的设计、三原则法、一万小时法、做梦想的事、休息为强者准备的。</p>\n<h2 id=\"Getting-Your-Product-Out-There\"><a href=\"#Getting-Your-Product-Out-There\" class=\"headerlink\" title=\"Getting Your Product Out There\"></a>Getting Your Product Out There</h2><p>介绍了产品运营的一些建议。</p>\n<p>Benefits, Not Features</p>\n"},{"title":"学习曲线与 Hacking 大脑 - 郝培强","url":"/2015/05/09/Lerning-curve-and-Hacking-brain/","content":"<blockquote>\n<p>@tinyfool：《学习曲线与Hacking大脑》做一个终身学习者，不可阻挡的学习者。 </p>\n</blockquote>\n<span id=\"more\"></span>\n<p><a href=\"http://boolan.com/lecture/1000001222#0-tsina-1-25570-397232819ff9a47a7b7e80a40613cfe1\">看视频点我</a></p>\n<p>以下就为我整理的一些点：</p>\n<ul>\n<li>听 <a href=\"http://atp.fm/\">ATP</a> 等 Podcast 练习英语听力。</li>\n<li>参加 <a href=\"http://www.meetup.com/\">meetup</a> 与外国人交流练习口语。</li>\n<li>讨论以我的观点是开头，不用刻意与对方争论。</li>\n<li>尊重学习曲线，循序渐进。</li>\n<li>人脑如机器学习一样，喂够语料，自然也能学会一些。</li>\n</ul>\n"},{"title":"SwiftPM本地化方案探索","url":"/2024/01/28/Localizable-in-SwiftPM/","content":"<p>示例代码🔗<a href=\"https://github.com/gewill/BlogCodes/tree/main/Localizable%20in%20SwiftPM\">https://github.com/gewill/BlogCodes/tree/main/Localizable%20in%20SwiftPM</a></p>\n<p>在处理SwiftPM中本地化时，尝试了几种方案。先说结论Rswift preferredLanguage方案最佳。</p>\n<h2 id=\"方案一：Local\"><a href=\"#方案一：Local\" class=\"headerlink\" title=\"方案一：Local\"></a>方案一：Local</h2><p>在SwiftUI中使用local可行，但是在SwiftPM会被宿主应用中覆写。不过也是小问题，只要命名规范，按照模块页面功能前缀来的话，一般也不会出现key重复的问题。</p>\n<p>这里也是用到了Rswift自动生成的<code>key</code>，避免复制粘贴字符串类型的<code>key</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SwiftUI view\t\t\t</span></span><br><span class=\"line\"><span class=\"type\">Section</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"string\">&quot;Change locale&quot;</span>).font(.title)</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"string\">&quot;Will be overwrite by host app!&quot;</span>).foregroundColor(.pink)</span><br><span class=\"line\">  <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">    viewModel.locale <span class=\"operator\">=</span> <span class=\"type\">Locale</span>(identifier: <span class=\"type\">Language</span>.en.rawValue)</span><br><span class=\"line\">  &#125;, label: &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Change locale english&quot;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">    viewModel.locale <span class=\"operator\">=</span> <span class=\"type\">Locale</span>(identifier: <span class=\"type\">Language</span>.zh_Hans.rawValue)</span><br><span class=\"line\">  &#125;, label: &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Change locale chinese simplified&quot;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"type\">LocalizedStringKey</span>(<span class=\"type\">R</span>.string.localizable.hello_world.key.description))</span><br><span class=\"line\">&#125; header: &#123;</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"string\">&quot;Change locale&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.environment(\\.locale, viewModel.locale)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方案二：Rswift-preferredLanguage\"><a href=\"#方案二：Rswift-preferredLanguage\" class=\"headerlink\" title=\"方案二：Rswift preferredLanguage\"></a>方案二：<a href=\"https://github.com/mac-cain13/R.swift\">Rswift</a> preferredLanguage</h2><p>目前是比较完善的方案。配合 <code>AppLocale</code> 可以全局切换语言。</p>\n<p>利用Rswift可处理key和bundle的问题，还优化了<code>SwiftUI.Text</code>的使用体验，直接使用<code>init</code>即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppLocale</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> preferredLanguage <span class=\"operator\">=</span> <span class=\"type\">CurrentValueSubject</span>&lt;<span class=\"type\">Language</span>, <span class=\"type\">Never</span>&gt;(.en)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> preferredString: _R.string &#123;</span><br><span class=\"line\">    <span class=\"type\">R</span>.string(preferredLanguages: [preferredLanguage.value.rawValue])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> shared <span class=\"operator\">=</span> <span class=\"type\">AppLocale</span>()</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;&#125;</span><br><span class=\"line\">&#125; \t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SwiftUI view</span></span><br><span class=\"line\"><span class=\"type\">Section</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"string\">&quot;Preferred Languages <span class=\"subst\">\\(viewModel.preferredLanguage.displayTitle)</span>&quot;</span>)</span><br><span class=\"line\">  <span class=\"type\">Picker</span>(<span class=\"string\">&quot;Preferred Languages&quot;</span>, selection: <span class=\"variable\">$viewModel</span>.preferredLanguage) &#123;</span><br><span class=\"line\">    <span class=\"type\">ForEach</span>(<span class=\"type\">Language</span>.allCases) &#123;</span><br><span class=\"line\">      <span class=\"type\">Text</span>(<span class=\"variable\">$0</span>.displayTitle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .pickerStyle(.segmented)</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"type\">AppLocale</span>.shared.preferredString.localizable.hello_world)</span><br><span class=\"line\">&#125; header: &#123;</span><br><span class=\"line\">  <span class=\"type\">Text</span>(<span class=\"string\">&quot;Change R.string Preferred Languages&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最轻量级集成方式在ViewModel订阅<code>AppLocale.shared.preferredLanguage</code>，更新<code>self.objectWillChange.send()</code>，即可响应语言切换。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HomeViewModel</span>: <span class=\"title class_\">ObservableObject</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">  <span class=\"type\">AppLocale</span>.shared.preferredLanguage</span><br><span class=\"line\">    .removeDuplicates()</span><br><span class=\"line\">    .sink(receiveValue: &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.objectWillChange.send()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .store(in: <span class=\"operator\">&amp;</span>cancelables)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struc <span class=\"type\">HomeView</span>: <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@StateObject</span> <span class=\"keyword\">var</span> viewModel <span class=\"operator\">=</span> <span class=\"type\">HomeViewModel</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">Text</span>(<span class=\"type\">AppLocale</span>.shared.preferredString.localizable.hello_world)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"方案三：liamnichols-x2F-xcstrings-tool\"><a href=\"#方案三：liamnichols-x2F-xcstrings-tool\" class=\"headerlink\" title=\"方案三：liamnichols &#x2F; xcstrings-tool\"></a>方案三：<a href=\"https://github.com/liamnichols/xcstrings-tool\">liamnichols &#x2F; xcstrings-tool</a></h2><p>可用，但是仅支持 <code>iOS16+</code>。有个小坑SwiftPM集成时，官方教程的有错误，正确的git地址为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Add the xcstrings-tool Package dependency</span></span><br><span class=\"line\">.package(url: <span class=\"string\">&quot;https://github.com/liamnichols/xcstrings-tool.git&quot;</span>, from: <span class=\"string\">&quot;0.1.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2. Or use the repo is essentially a mirror of the main repository however the xcstrings-tool command line interface is a binary dependency that significantly simplifies your build graph and improves compile times.</span></span><br><span class=\"line\">.package(url: <span class=\"string\">&quot;https://github.com/liamnichols/xcstrings-tool-plugin.git&quot;</span>, from: <span class=\"string\">&quot;0.1.0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>具体参考官方的示例：<a href=\"https://github.com/liamnichols/xcstrings-tool-demo\">https://github.com/liamnichols/xcstrings-tool-demo</a></p>\n","tags":["Swift","SwiftUI","SwiftPM","iOS","Localizable","i18n"]},{"title":"MUST CODE","url":"/2015/05/17/MUST-CODE/","content":""},{"title":"MVVM - 笔记","url":"/2015/08/27/MVVM-Notes/","content":"<p>一句话就是剥离或轻量化 Controller 中关于 View 和 Model 的部分。</p>\n<h2 id=\"MVVM-介绍\"><a href=\"#MVVM-介绍\" class=\"headerlink\" title=\"MVVM 介绍\"></a><a href=\"http://objccn.io/issue-13-1/\">MVVM 介绍</a></h2><p>MVC 有人称之为 Massive View Controller。</p>\n<p>MVC 并没有做太多事情来解决 iOS 应用中日益增长的重量级视图控制器的问题。在典型的 MVC 应用里，许多逻辑被放在 View Controller 里。它们中的一些确实属于 View Controller，但更多的是所谓的“表示逻辑（<strong>presentation logic</strong>）”，以 MVVM 属术语来说，就是那些将 Model 数据转换为 View 可以呈现的东西的事情，例如将一个 NSDate 转换为一个格式化过的 NSString。根据 Model 属性设置 UILabel、UIButton text。 </p>\n<p><img src=\"/../assets/MVVM-Notes/mvvm.png\" alt=\"Model-View-ViewModel\"></p>\n<p>我们的图解里缺少某些东西，那些使我们可以把所有表示逻辑放进去的东西。我们打算将其称为 “View Model” —— 它位于 View&#x2F;Controller 与 Model 之间：</p>\n<p>Model-View-ViewModel 可以：</p>\n<ul>\n<li>MVVM 可以兼容你当下使用的 MVC 架构。</li>\n<li>MVVM 增加你的应用的可测试性。</li>\n<li>MVVM 配合一个绑定机制效果最好。</li>\n</ul>\n<p><strong>并没有对我们的 MVC 架构做太多改变。还是同样的代码，只不过移动了位置。它与 MVC 兼容，带来更轻量的 View Controllers。</strong></p>\n<p>Model 是不可变的，所以我们可以只在初始化的时候指定我们 View Model 的属性。对于可变 Model，我们还需要使用一些绑定机制，这样 View Model 就能在背后的 Model 改变时更新自身的属性。此外，一旦 View Model 上的 Model 发生改变，那 View 的属性也需要更新。Model 的改变应该级联向下通过 View Model 进入 View。</p>\n<h2 id=\"更轻量的-View-Controllers\"><a href=\"#更轻量的-View-Controllers\" class=\"headerlink\" title=\"更轻量的 View Controllers\"></a><a href=\"http://objccn.io/issue-1-1/\">更轻量的 View Controllers</a></h2><ul>\n<li>把 Data Source 和其他 Protocols 分离出来</li>\n<li>将 Domain Logic 移到 Model 中</li>\n<li>创建 Store 类</li>\n<li>把网络请求逻辑移到 Model 层</li>\n<li>把 View 代码移到 View 层</li>\n</ul>\n<p>我们已经看到一些用来创建更小巧的 view controllers 的技术。我们并不是想把这些技术应用到每一个可能的角落，只是我们有一个目标：写可维护的代码。知道这些模式后，我们就更有可能把那些笨重的 view controllers 变得更整洁。</p>\n<h2 id=\"延伸阅读：\"><a href=\"#延伸阅读：\" class=\"headerlink\" title=\"延伸阅读：\"></a>延伸阅读：</h2><ul>\n<li><p><a href=\"http://www.codeproject.com/Articles/100175/Model-View-ViewModel-MVVM-Explained\">Model-View-ViewModel (MVVM) Explained</a></p>\n</li>\n<li><p><a href=\"https://www.wikiwand.com/en/Model_View_ViewModel\">Model View ViewModel</a></p>\n<blockquote>\n<p><img src=\"/../assets/MVVM-Notes/MVVMPattern.png\" alt=\"img\"></p>\n</blockquote>\n</li>\n<li><p><a href=\"http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/\">Model-View-ViewModel for iOS</a></p>\n</li>\n<li><p><a href=\"http://www.teehanlax.com/blog/krush-ios-architecture/\">Krush iOS Architecture</a></p>\n</li>\n<li><p><a href=\"http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/BasicViewControllers/BasicViewControllers.html\">View Controller Programming Guide for iOS</a></p>\n</li>\n<li><p><a href=\"http://developer.apple.com/library/mac/#documentation/General/Conceptual/DevPedia-CocoaCore/ControllerObject.html\">Cocoa Core Competencies: Controller Object</a></p>\n</li>\n<li><p><a href=\"http://subjective-objective-c.blogspot.de/2011/08/writing-high-quality-view-controller.html\">Writing high quality view controllers</a></p>\n</li>\n<li><p><a href=\"http://programmers.stackexchange.com/questions/184396/mvcs-model-view-controller-store\">Stack Overflow: Model View Controller Store</a></p>\n<blockquote>\n<p>I will often create a singleton manager class that handles setting up the Core Data stack, and deals with all of the fetching&#x2F;saving that is involved with the stack. As the quote you mentioned says, this makes it very easy to not only call those methods, but to adjust them if needed, as opposed to having saving&#x2F;fetching calls all over the place in different view controllers.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://speakerdeck.com/trianglecocoa/unburdened-viewcontrollers-by-jay-thrash\">Unburdened View Controllers</a></p>\n</li>\n<li><p><a href=\"http://programmers.stackexchange.com/questions/177668/how-to-avoid-big-and-clumsy-uitableviewcontroller-on-ios\">Stack Overflow: How to avoid big and clumsy <code>UITableViewControllers</code> on iOS</a></p>\n</li>\n</ul>\n"},{"title":"Objective-C 属性的内存管理特性","url":"/2015/08/20/Memory-Management-Attribute-of-Properties-in-Objective-C/","content":"<p>当对象没有拥有者时，指针变量的内存就该被释放。故 ARC 就是为了解决什么时候释放内存的问题。对应的就是引用计数为零时。</p>\n<h3 id=\"ARC：\"><a href=\"#ARC：\" class=\"headerlink\" title=\"ARC：\"></a>ARC：</h3><ul>\n<li>strong：指针变量指向对象后，相应的对象多一个拥有者，引用计数加一。默认值，但通常会写出来。</li>\n<li>weak ：指针变量指向对象后，相应的对象拥有者个数不变，引用计数不变。相对 strong，避免循环引用问题。</li>\n<li>copy\t：属性指向的对象有可能修改的子类， 如 NSMutableString&#x2F;NSMutbaleArray，这时使用 copy，引用计数为一。</li>\n<li>unsafe_unretained：与 weak 类似，但不会指针自动设置为 nil，适合非对象属性，不需要做内存管理，如 int，也是其默认值可不写。</li>\n</ul>\n<p><strong>ARC 四个特性的典型用法：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  GWItem.h</span></span><br><span class=\"line\"><span class=\"comment\">//  RandomItems</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will Ge on 7/23/15.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2015 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GWItem</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *itemName;</span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *serialNumber;</span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"type\">int</span> valueInDollars;</span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSDate</span> *dateCreated;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) GWItem *containedItem;</span><br><span class=\"line\">    <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">weak</span>) GWItem *container;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)randomItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GWItem 类的指定初始化方法</span></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithItemName:(<span class=\"built_in\">NSString</span> *)name</span><br><span class=\"line\">                  valueInDollars:(<span class=\"type\">int</span>)value</span><br><span class=\"line\">                    serialNumber:(<span class=\"built_in\">NSString</span> *)sNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithItemName:(<span class=\"built_in\">NSString</span> *)name;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非-ARC：\"><a href=\"#非-ARC：\" class=\"headerlink\" title=\"非 ARC：\"></a>非 ARC：</h3><ul>\n<li>assign：使用基本数据类型，如 int，float，与 unsafe_unretained 类似</li>\n<li>retain：非 ARC 版本 strong</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><ul>\n<li><a href=\"http://ios-blog.co.uk/tutorials/objective-c-property-attribute-reference-guide/\">Objective-C: Property Attribute Reference Guide</a></li>\n</ul>\n"},{"title":"迁移 Swift 4","url":"/2017/09/21/Migrating-to-Swift-4/","content":"<p>直接可以参考官方的文档即可：<a href=\"https://swift.org/migration-guide-swift4/\">https://swift.org/migration-guide-swift4/</a></p>\n<h2 id=\"简单记录我的步骤：\"><a href=\"#简单记录我的步骤：\" class=\"headerlink\" title=\"简单记录我的步骤：\"></a>简单记录我的步骤：</h2><ol>\n<li>利用Xcode9的 Swift Migrator tool迁移Swift3.2</li>\n<li>利用Xcode9的 Swift Migrator tool迁移Swift4</li>\n<li>如果是<a href=\"https://cocoapods.org/\">CocoaPods</a>，目前建议保持Swift3。Xcode9支持Swift3和Swift4的target混合编译，这也是这么快能把项目迁移Swift4的原因。<a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Compatibility.html\">https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Compatibility.html</a></li>\n</ol>\n<h2 id=\"需要手动更改的地方：\"><a href=\"#需要手动更改的地方：\" class=\"headerlink\" title=\"需要手动更改的地方：\"></a>需要手动更改的地方：</h2><ol>\n<li><p><code>NSAttributedString</code> attributes 类型<code> [String: Any]</code> 改为 <code>[NSAttributedStringKey : Any]</code></p>\n</li>\n<li><p>Swift Migrator tool 会错误地转为<code>NSAttributedString.DocumentAttributeKey.documentType</code> 改为<code>NSAttributedString.DocumentReadingOptionKey.documentType</code></p>\n</li>\n<li><p>Swift 4: Cannot assign value of type ‘(_) -&gt; Void’ to type ‘(() -&gt; ())?’ 部分情况不能使用下面的简写格式。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>Method ‘initialize()’ defines Objective-C class method ‘initialize’, which is not permitted by Swift。 关于Swift4不支持initialize()这个问题，先跳过了，项目只有工具类定义且未使用。</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一次新版本迁移很轻松，API更改也不多，强烈迁移立即迁移Swift4。</p>\n"},{"title":"Minimalism in Web design: past and future 读书笔记","url":"/2015/06/08/Minimalism-in-Web-design-past-and-future/","content":"<p>原文链接 <a href=\"http://thenextweb.com/dd/2015/06/03/minimalism-in-web-design-past-and-future/\"><em>Minimalism in Web design: past and future</em></a>，偏软文但是内容是好的。并非全文翻译，取其要旨。大约翻译了4个小时，算是通篇读懂了，还多亏了 Google 的翻译，下次提取大纲好了。</p>\n<p>极简主义（Minimalist）以其永恒的优雅和清晰明确的内容显示，是网页设计最为长久的视觉架构之一。</p>\n<p><img src=\"http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/beatbox-520x310.png\" alt=\"Beatbox\"></p>\n<p>以下为几个网页设计中极简主义的几个原则：</p>\n<h2 id=\"少即是多（Less-is-More）：简史和解构\"><a href=\"#少即是多（Less-is-More）：简史和解构\" class=\"headerlink\" title=\"少即是多（Less is More）：简史和解构\"></a>少即是多（Less is More）：简史和解构</h2><p>和平面设计的起源类似的，极简主义在网页设计是通过减法做雕塑的一种最纯净方式–最完美的实现不是没有元素可以添加，而是没有元素可以删去。尽管目前极简主义围绕着负空间和黑色字体-即是极简主义的核心-该风格通过任何手段已达到最低来定义自己。</p>\n<p>最小化网页设计基于以下基础，并全部以网站内容为设计中心：</p>\n<ul>\n<li><strong>负空间</strong>- 通常是指白色空间，负空间简单来说就是在设计中没有被使用的空间。 通常极简主义设计中，你将会看到负空间被充满活力的颜色填充（或者就是简单的留白&#x2F;灰&#x2F;黑）。</li>\n<li><strong>高清照片</strong> - 因为更少的界面修饰物，用户可以更好地欣赏高清照片的惊艳的细节。通常照片上覆盖幽灵按钮（白色轮廓的按钮）和粗体的文字排版。</li>\n<li><strong>有特色的排版</strong> - 不管手写体的标题或是简洁无衬字体的正文，字体方面的极简主义设计少数的领域之一，可以包含少许修饰。如果你感兴趣，可以看一下这些优秀的字体集 <a href=\"http://www.hongkiat.com/blog/ultra-light-elegant-fonts/\">20 minimalist typefaces</a>。</li>\n<li><strong>鲜明的对比</strong> - 对比是通过独立设计元素组合而成。例如在一张黑色图片上使用72点阵的粗体字。又或者白色手写字体用在浅绿色的单色背景上。</li>\n<li><strong>简洁的导航栏</strong> - 最复杂的导航栏带有下拉菜单（即使没有没有二级菜单弹出）。更常见的是几个顶部水平的导航栏，甚至汉堡菜单。</li>\n<li><strong>视觉上的平衡</strong> - 网页设计对于人眼来说，视觉平衡通过一个明确的视觉层次，一致的对准和定位，以及灵活的利用对称和不对称来实现。</li>\n</ul>\n<p>现在你可能觉得极简主义很容易 - 毕竟更少元素的使用意味着更少工作量，对吧？ 可事实上正相反：以为你要受限于少量的元素，而这些元素必须是经过细致的关注下和有目标性低挑选出来的。粗糙地使用极简主义是很容易，但正确的使用则不然。</p>\n<p>简洁的设计是故意而为之的。它是条从一个框架的不必要的元素只留下所需要的方法。多数简洁的网站设计不会包含了很多色彩（调色板往往只有一种主色），纹理或形状或类似颜色。</p>\n<p>极简主义行之有效是因为，它做了所有设计都应该做的 - 把重心放在内容上。</p>\n<p>极简主义将继续成为一个受欢迎的选择，但很可能演变成一种少一点鲜明对比的风格。正如我们所看到的技术，如“扁平设计”演变成“全平话设计”，极简主义设计将更丰富（更可用），UI 设计师尝试纹理、颜色和效果 - 以及不在使用对称的图案。</p>\n<p><strong>以下让我们看看一些进化的元素：</strong></p>\n<ul>\n<li>最小化质感纹理(Minimal texture)<br> <img src=\"http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ezorzi-520x302.png\" alt=\"Minimal texture\"></li>\n<li>反转颜色(Reverse colors)<br> <img src=\"http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/meaningfuldesign-520x351.png\" alt=\"Reverse colors\"></li>\n<li>更多互动特效（More interactive effects）</li>\n<li>移除对称（Move away from symmetry）<br> <a href=\"http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/interactive-520x347.png\">Move away from symmetry</a></li>\n<li>提高可用性（Improved usability）<br> <a href=\"http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/uniqueflower-520x341.png\">Improved usability</a></li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>极简主义不仅仅是白色的空间和尽可能使用最少的元素。极简主义哲学的核心是在强调内容。减少元素，并使有大量的负空间追求一个结果 - 他们尽量减少干扰，使用户可以只专注于真正重要的（内容）。</p>\n<p>千万不要误解为极简的目的本身，或者你也可能发现自己删除了不可替代的元素。这不是通过减法进行雕塑（代指设计） - 这只是减法。</p>\n<p>可以下载 <a href=\"http://www.uxpin.com/web-ui-design-techniques-cards-minimalism.html\">The Curated Collection of Design Techniques: Cards &amp; Minimalism</a> 学习更多极简主义的网页设计内容。</p>\n"},{"title":"极客班项目：蓦然","url":"/2015/09/20/Mo-Ran/","content":"<h2 id=\"遇到的点\"><a href=\"#遇到的点\" class=\"headerlink\" title=\"遇到的点\"></a>遇到的点</h2><ul>\n<li>参考微信朋友圈,发布新照片后,动态插入原有的朋友圈顶部, 我的理解是存入本地缓存数据库,后台异步上次到服务器.</li>\n</ul>\n<p>源码见 GitHub：<a href=\"https://github.com/gewill/Mo-Ran\">https://github.com/gewill/Mo-Ran</a></p>\n<h2 id=\"v0-1-b1\"><a href=\"#v0-1-b1\" class=\"headerlink\" title=\"v0.1 b1\"></a>v0.1 b1</h2><p>date: 2015.09.20</p>\n<ul>\n<li>发布照片按钮 和 发布照片页面</li>\n<li>复用先峰小组的 login.StoryBoard</li>\n<li>AppDelegate 分别实现：跳转登陆和主界面方面</li>\n</ul>\n<h2 id=\"登陆按钮\"><a href=\"#登陆按钮\" class=\"headerlink\" title=\"登陆按钮\"></a>登陆按钮</h2><p>使用 AFNetworking 的 AFHTTPRequestOperationManager<br><code>- POST:parameters:success:failure: </code> 方法，提交 json<br>格式数据，收到成功或者失败的数据 json。具体格式参考文档。</p>\n<p>主要是处理 AFHTTPRequestOperation 的 responseObject 的 json 数据。</p>\n<p>遇到网络问题，直接想到 Google，但是搜索的不得要领，无果。最后想到 Charles 网络调试， Request 和 Response 一目了然。非常棒的工具。然后认真查看 API 相关参数的类型的：属性和方法。</p>\n<p>成功</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">￼<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ￼<span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ￼<span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;user_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;user_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;testProjectNew1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cec5a0a5e7a1951c87099b96d16851bf6f9f0a21&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;project_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;last_login&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2015-08-30 17:35:49&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ￼<span class=\"attr\">&quot;login_times&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span>￼</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ￼<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Login success&quot;</span>￼</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>失败</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;error_code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">400</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;No such user&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>登陆按钮</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - 登陆按钮</span></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)login:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSString</span> *url = <span class=\"string\">@&quot;http://moran.chinacloudapp.cn/moran/web/user/login&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSDictionary</span> *patameters = @&#123;</span><br><span class=\"line\">    <span class=\"string\">@&quot;email&quot;</span> : <span class=\"keyword\">self</span>.email.text,</span><br><span class=\"line\">    <span class=\"string\">@&quot;password&quot;</span> : <span class=\"keyword\">self</span>.password.text,</span><br><span class=\"line\">    <span class=\"string\">@&quot;gdid&quot;</span> : <span class=\"string\">@&quot;Ge Will&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  AFHTTPRequestOperationManager *manager =</span><br><span class=\"line\">      [AFHTTPRequestOperationManager manager];</span><br><span class=\"line\">  manager.requestSerializer = [AFJSONRequestSerializer serializer];</span><br><span class=\"line\">  manager.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class=\"line\"></span><br><span class=\"line\">  [manager POST:url</span><br><span class=\"line\">      parameters:patameters</span><br><span class=\"line\">      success:^(AFHTTPRequestOperation *_Nonnull operation,</span><br><span class=\"line\">                <span class=\"type\">id</span> _Nonnull responseObject) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Login success:%@, message:%@&quot;</span>, responseObject,</span><br><span class=\"line\">              [responseObject objectForKey:<span class=\"string\">@&quot;message&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([[responseObject objectForKey:<span class=\"string\">@&quot;status&quot;</span>] isEqual:<span class=\"string\">@&quot;1&quot;</span>]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 1 - 获取用户信息</span></span><br><span class=\"line\">          [GWUser shareUser].userID =</span><br><span class=\"line\">              [[responseObject objectForKey:<span class=\"string\">@&quot;data&quot;</span>] objectForKey:<span class=\"string\">@&quot;user_id&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 2 - 保存用户相关信息到 NSUserDefaults</span></span><br><span class=\"line\">          [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults]</span><br><span class=\"line\">              setObject:[GWUser shareUser].userID</span><br><span class=\"line\">                 forKey:<span class=\"string\">@&quot;userID&quot;</span>];</span><br><span class=\"line\">          [[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] synchronize];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 3 - 视图跳转到 Main.storyboard 主界面</span></span><br><span class=\"line\">          AppDelegate *appDelegate =</span><br><span class=\"line\">              (AppDelegate *)[<span class=\"built_in\">UIApplication</span> sharedApplication].delegate;</span><br><span class=\"line\">          [appDelegate loadMainView];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      failure:^(AFHTTPRequestOperation *_Nonnull operation,</span><br><span class=\"line\">                <span class=\"built_in\">NSError</span> *_Nonnull error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Login error:%@&quot;</span>, error);</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>, operation.responseObject);</span><br><span class=\"line\"></span><br><span class=\"line\">        __unused <span class=\"built_in\">NSString</span> *status =</span><br><span class=\"line\">            [operation.responseObject objectForKey:<span class=\"string\">@&quot;status&quot;</span>];</span><br><span class=\"line\">        __unused <span class=\"built_in\">NSString</span> *errorCode =</span><br><span class=\"line\">            [operation.responseObject objectForKey:<span class=\"string\">@&quot;error_code&quot;</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *message = [operation.responseObject objectForKey:<span class=\"string\">@&quot;message&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                        message:message</span><br><span class=\"line\">                                                       delegate:<span class=\"keyword\">self</span></span><br><span class=\"line\">                                              cancelButtonTitle:<span class=\"string\">@&quot;OK&quot;</span></span><br><span class=\"line\">                                              otherButtonTitles:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [alert show];</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>if ([[responseObject objectForKey:@&quot;status&quot;] isEqual:@&quot;1&quot;])</code>改为<br><code>if ([[responseObject objectForKey:@&quot;status&quot;] intValue] == 1) </code></p>\n<h2 id=\"v0-2-b2\"><a href=\"#v0-2-b2\" class=\"headerlink\" title=\"v0.2 b2\"></a>v0.2 b2</h2><p>date: 2015-10-11</p>\n<p>Cocoapods改为本地添加，网络不稳定也是无奈。</p>\n"},{"title":"Modern User Interaction on iOS - 笔记","url":"/2017/07/06/Modern-User-Interaction-on-iOS-Notes/","content":"<p>WWDC 2017 Session 219 地址：[<a href=\"https://developer.apple.com/videos/play/wwdc2017/219/\">https://developer.apple.com/videos/play/wwdc2017/219/</a></p>\n<p>目录：</p>\n<ul>\n<li>手势 The UIGestureRecognizer system</li>\n<li>系统手势 System gesture interaction</li>\n<li>拖拽 Drag and Drop</li>\n</ul>\n<h3 id=\"1-手势\"><a href=\"#1-手势\" class=\"headerlink\" title=\"1. 手势\"></a>1. 手势</h3><h4 id=\"基础：\"><a href=\"#基础：\" class=\"headerlink\" title=\"基础：\"></a>基础：</h4><ul>\n<li><p>UIGestureRecognizer 比 UITouch 优先级高</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UIGestureRecognizer</span>: <span class=\"title class_\">NSObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> delaysTouchesEnded: <span class=\"type\">Bool</span> <span class=\"comment\">// default is true.</span></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> cancelsTouchesInView: <span class=\"type\">Bool</span> <span class=\"comment\">// default is true.</span></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> delaysTouchesBegan: <span class=\"type\">Bool</span> <span class=\"comment\">// default is false.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>UIGestureRecognizer 只有一个的胜出相应手势</p>\n</li>\n<li><p>UIGestureRecognizer 是否允许同时响应其他手势：在delegate可控制</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">protocol</span> <span class=\"title class_\">UIGestureRecognizerDelegate</span>: <span class=\"title class_\">NSObjectProtocol</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">optional</span> <span class=\"keyword\">func</span> <span class=\"title function_\">gestureRecognizer</span>(<span class=\"keyword\">_</span> <span class=\"params\">gestureRecognizer</span>: <span class=\"type\">UIGestureRecognizer</span>, <span class=\"params\">shouldRecognizeSimultaneouslyWith</span> <span class=\"params\">otherGestureRecognizer</span>: <span class=\"type\">UIGestureRecognizer</span>) -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>UIGestureRecognizer 是否让其他手势失效</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UIGestureRecognizer</span>: <span class=\"title class_\">NSObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">func</span> <span class=\"title function_\">shouldRequireFailure</span>(<span class=\"params\">of</span> <span class=\"params\">otherGestureRecognizer</span>: <span class=\"type\">UIGestureRecognizer</span>) -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">func</span> <span class=\"title function_\">shouldBeRequiredToFail</span>(<span class=\"params\">by</span> <span class=\"params\">otherGestureRecognizer</span>: <span class=\"type\">UIGestureRecognizer</span>) -&gt; <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Hit Testing</p>\n</li>\n<li><p>新属性 name，便于调试</p>\n</li>\n</ul>\n<h4 id=\"手势系统的注意事项：\"><a href=\"#手势系统的注意事项：\" class=\"headerlink\" title=\"手势系统的注意事项：\"></a>手势系统的注意事项：</h4><ul>\n<li>复查你的构建步骤（Revisit your setups ）</li>\n<li>排除和失效的标准（Exclusion and failure requirements）</li>\n<li>手势是否在正确的视图上？（ Are your gesture recognizers on the right views?）</li>\n</ul>\n<h3 id=\"2-系统手势\"><a href=\"#2-系统手势\" class=\"headerlink\" title=\"2. 系统手势\"></a>2. 系统手势</h3><p>应用手势和系统手势之争！如非沉浸式的游戏或画画的应用，别推迟系统手势。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// override to return which screen edges to defer system gestures</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">preferredScreenEdgesDeferringSystemGestures</span>() -&gt; <span class=\"type\">UIRectEdge</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deferControlCenter <span class=\"operator\">?</span> .bottom : <span class=\"type\">UIRectEdge</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// call whenever your method would return a different screen edge</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> deferControlCenter: <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123; setNeedsUpdateOfScreenEdgesDeferringSystemGestures() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-拖拽\"><a href=\"#3-拖拽\" class=\"headerlink\" title=\"3. 拖拽\"></a>3. 拖拽</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dragInteraction <span class=\"operator\">=</span> <span class=\"type\">UIDragInteraction</span>(delegate: myDelegate) myView.addInteraction(dragInteraction)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>手势部分关于同时兼容或禁止其他的应该都很熟悉，尤其是分页加 table view经常处理。iOS可以延迟系统边缘手势很不错的选择，很多app手势经常与系统同步调出。拖拽的话，主要在iPad上应用，就不深入学习了。</p>\n"},{"title":"Objective-C id as Swift Any-笔记","url":"/2016/10/18/Objective-C-id-as-Swift-Any-Notes/","content":"<p>Apple Swift 博客原文地址：<a href=\"https://developer.apple.com/swift/blog/?id=39\">https://developer.apple.com/swift/blog/?id=39</a> </p>\n<p>主要变化：Swift 3 中 Any 映射 Objective-C 的 id </p>\n<table>\n<thead>\n<tr>\n<th>Objective-C</th>\n<th>Swift 2</th>\n<th>Swift 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>AnyObject</td>\n<td>Any</td>\n</tr>\n<tr>\n<td>NSArray *</td>\n<td>[AnyObject]</td>\n<td>[Any]</td>\n</tr>\n<tr>\n<td>NSDictionary *</td>\n<td>[NSObject: AnyObject]</td>\n<td>[AnyHashable: Any]</td>\n</tr>\n<tr>\n<td>NSSet *</td>\n<td><code>Set&lt;NSObject&gt;</code></td>\n<td><code>Set&lt;AnyHashable&gt;</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>方法和协议的中的AnyObject均改为Any</li>\n<li>调用大部分 C 和 Objective-C 需要显示类型转换，指针为 <code>UnsafePointer&lt;AnyObject&gt;</code></li>\n<li>Objective-C 协议仍是限制在 Class，而 structs 和 enums 无法符合。需要显示转换，如：String as NSString, Array as NSArray</li>\n<li>Any 没有 AnyObject 中的一些魔法查询方法可用，如：(x as AnyObject).description</li>\n<li>Swift 值类型隐式转换 id</li>\n<li>Cocoa 也紧随 Swift 进化的脚步，而变得更强大</li>\n</ul>\n"},{"title":"PaintCode-Dynamic-Bezier-Shapes","url":"/2017/02/05/PaintCode-Dynamic-Bezier-Shapes/","content":"<p>官方教程地址：<a href=\"https://www.paintcodeapp.com/examples\">https://www.paintcodeapp.com/examples</a></p>\n<p>PaintCode能够画出各种自定义的曲线图形（再也不怕设计师的各种曲线和细节实现不了），而且很方便的集成到iOS项目中，支持Swift和Objective-C。尤其是 Dynamic Shapes 支持简单约束，可以保持大小变化时图形规则变化。</p>\n<h2 id=\"软件截图：\"><a href=\"#软件截图：\" class=\"headerlink\" title=\"软件截图：\"></a>软件截图：</h2><p>操作很简单，和Sketch习惯差不多。</p>\n<p><img src=\"https://github.com/gewill/PaintCode-Dynamic-Bezier-Shapes-Demo/raw/master/Screen%20Shot/Screen%20Shot%202017-02-05%20at%2012.14.33.png\" alt=\"Screen Shot 2017-02-05 at 12.14.33\"></p>\n<h2 id=\"自定义视图代码：\"><a href=\"#自定义视图代码：\" class=\"headerlink\" title=\"自定义视图代码：\"></a>自定义视图代码：</h2><p>实现一个带有箭头的圆形边框的图片视图</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ButtonView</span>: <span class=\"title class_\">UIView</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> image: <span class=\"type\">UIImage</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> imageView <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                imageView <span class=\"operator\">=</span> <span class=\"type\">UIImageView</span>()</span><br><span class=\"line\">                imageView<span class=\"operator\">?</span>.backgroundColor <span class=\"operator\">=</span> .clear</span><br><span class=\"line\">                imageView<span class=\"operator\">?</span>.layer.masksToBounds <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span>.insertSubview(imageView<span class=\"operator\">!</span>, at: <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            imageView<span class=\"operator\">?</span>.image <span class=\"operator\">=</span> image</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> imageView: <span class=\"type\">UIImageView</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">draw</span>(<span class=\"keyword\">_</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重点代码，一行即可完成</span></span><br><span class=\"line\">        <span class=\"type\">JLXStyleKit</span>.drawBubbleButton(frame: <span class=\"keyword\">self</span>.bounds)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">layoutSubviews</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.layoutSubviews()</span><br><span class=\"line\"></span><br><span class=\"line\">        imageView<span class=\"operator\">?</span>.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"keyword\">self</span>.bounds.width <span class=\"operator\">*</span> <span class=\"number\">0.5</span> <span class=\"operator\">/</span> <span class=\"number\">38.0</span>, y: <span class=\"keyword\">self</span>.bounds.width <span class=\"operator\">*</span> <span class=\"number\">0.5</span> <span class=\"operator\">/</span> <span class=\"number\">38.0</span>, width: <span class=\"keyword\">self</span>.bounds.width <span class=\"operator\">*</span> <span class=\"number\">37</span> <span class=\"operator\">/</span> <span class=\"number\">38.0</span>, height: <span class=\"keyword\">self</span>.bounds.width <span class=\"operator\">*</span> <span class=\"number\">37</span> <span class=\"operator\">/</span> <span class=\"number\">38.0</span>)</span><br><span class=\"line\">        imageView<span class=\"operator\">?</span>.layer.cornerRadius <span class=\"operator\">=</span> bounds.width <span class=\"operator\">/</span> <span class=\"number\">2.0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行截图：\"><a href=\"#运行截图：\" class=\"headerlink\" title=\"运行截图：\"></a>运行截图：</h2><p><img src=\"https://github.com/gewill/PaintCode-Dynamic-Bezier-Shapes-Demo/raw/master/Screen%20Shot/Simulator%20Screen%20Shot%20Feb%205,%202017,%2012.16.37.png\" alt=\"Simulator Screen Shot Feb 5, 2017, 12.16.37\"></p>\n<h2 id=\"Demo-地址\"><a href=\"#Demo-地址\" class=\"headerlink\" title=\"Demo 地址\"></a>Demo 地址</h2><p><a href=\"https://github.com/gewill/PaintCode-Dynamic-Bezier-Shapes-Demo\">https://github.com/gewill/PaintCode-Dynamic-Bezier-Shapes-Demo</a></p>\n"},{"title":"Parameters Values: Default or Optional","url":"/2016/03/09/Parameters-Values-Default-or-Optional/","content":"<p>When we design function or API, have to choose parameters default values. Here are 3 common styles.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">UserType</span>: <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Weixin</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;wechat&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Weibo</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;weibo&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">QQ</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;qq&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. Like NSLayoutAnchor, call function can be like less input parameters</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testDefaultParametersValue</span>(<span class=\"params\">userType</span>: <span class=\"type\">UserType</span> <span class=\"operator\">=</span> .<span class=\"type\">Weibo</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(userType)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">testDefaultParametersValue()</span><br><span class=\"line\">testDefaultParametersValue(.<span class=\"type\">QQ</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. All parameters have to input</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testOptionalParametersValue</span>(<span class=\"params\">var</span> <span class=\"params\">userType</span>: <span class=\"type\">UserType</span>?) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Can set default value inside too</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> userType <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        userType <span class=\"operator\">=</span> .<span class=\"type\">Weibo</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(userType)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testOptionalParametersValue(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">testOptionalParametersValue(.<span class=\"type\">Weixin</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Like Kingfisher can less parameters or pass nil</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testAll</span>(<span class=\"params\">id</span>: <span class=\"type\">Int</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>, <span class=\"params\">city</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(id)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(city)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testAll(city: <span class=\"string\">&quot;Shanghai&quot;</span>)</span><br><span class=\"line\">testAll(<span class=\"literal\">nil</span>, city: <span class=\"string\">&quot;Shanghai&quot;</span>)</span><br><span class=\"line\">testAll(<span class=\"number\">12</span>, city: <span class=\"string\">&quot;Shanghai&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Photo DEMO","url":"/2015/05/24/Photo-DEMO/","content":"<p>尚有一个 BUG，真机无法加载图片，模拟器可以。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  ViewController.m</span></span><br><span class=\"line\"><span class=\"comment\">//  Photo DEMO</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will on 5/24/15.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *topLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UILabel</span> *descLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *leftBtn;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIButton</span> *rightBtn;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIImageView</span> *imageView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"type\">int</span>  index;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSArray</span> *imageDicts;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)imageDicts&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_imageDicts) &#123;</span><br><span class=\"line\">        _imageDicts = [<span class=\"built_in\">NSArray</span> arrayWithContentsOfFile:</span><br><span class=\"line\">        [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@&quot;imageDate.plist&quot;</span> ofType:<span class=\"literal\">nil</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _imageDicts;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)clickLeftBtn:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.index --;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> clickBtn];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)clickRightBtn:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.index ++;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> clickBtn];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)clickBtn&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.topLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%d/%d&quot;</span>, <span class=\"keyword\">self</span>.index+<span class=\"number\">1</span>, <span class=\"keyword\">self</span>.imageDicts.count];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.descLabel.text = <span class=\"keyword\">self</span>.imageDicts[<span class=\"keyword\">self</span>.index][<span class=\"string\">@&quot;description&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.imageView.image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"keyword\">self</span>.imageDicts[<span class=\"keyword\">self</span>.index][<span class=\"string\">@&quot;name&quot;</span>]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.leftBtn.enabled = (<span class=\"keyword\">self</span>.index != <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.rightBtn.enabled = (<span class=\"keyword\">self</span>.index != <span class=\"number\">4</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Platforms State of the Union - 笔记","url":"/2017/06/09/Platforms-State-of-the-Union-Notes/","content":"<p>WWDC 2017 Session 102 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/102/\">https://developer.apple.com/videos/play/wwdc2017/102/</a></p>\n<h3 id=\"1-Swift-Playground\"><a href=\"#1-Swift-Playground\" class=\"headerlink\" title=\"1. Swift Playground\"></a>1. Swift Playground</h3><ul>\n<li>更强大的 Playground，支持控制外设，如：机器人、无人机。</li>\n</ul>\n<h3 id=\"2-Xcode-9\"><a href=\"#2-Xcode-9\" class=\"headerlink\" title=\"2. Xcode 9\"></a>2. Xcode 9</h3><ul>\n<li>重写的代码编辑器（ Source Editor），支持Markdown，开源转换引擎（Transformation Engine）</li>\n<li>问题（Issues） 更好的提示和更智能的自动修复</li>\n<li>当然还有缺席已久的重构（Refactoring）</li>\n<li>移动文件到group，自动移动物理位置</li>\n<li>完整支持git，和github集成</li>\n</ul>\n<h3 id=\"3-Swift-4\"><a href=\"#3-Swift-4\" class=\"headerlink\" title=\"3. Swift 4\"></a>3. Swift 4</h3><h3 id=\"4-调试和分析（Debugging-and-Analysis）\"><a href=\"#4-调试和分析（Debugging-and-Analysis）\" class=\"headerlink\" title=\"4. 调试和分析（Debugging and Analysis）\"></a>4. 调试和分析（Debugging and Analysis）</h3><ul>\n<li>View Debugger</li>\n<li>Thread Sanitizer、Address Sanitizer</li>\n<li>正确的 Main Thread API Checker</li>\n</ul>\n<h3 id=\"5-Xcode-Server-Built-in\"><a href=\"#5-Xcode-Server-Built-in\" class=\"headerlink\" title=\"5. Xcode Server Built in\"></a>5. Xcode Server Built in</h3><h3 id=\"6-UITest更快，支持多应用多模拟器\"><a href=\"#6-UITest更快，支持多应用多模拟器\" class=\"headerlink\" title=\"6. UITest更快，支持多应用多模拟器\"></a>6. UITest更快，支持多应用多模拟器</h3><ul>\n<li>模拟器支持自定义大小</li>\n</ul>\n<h3 id=\"7-无线调试\"><a href=\"#7-无线调试\" class=\"headerlink\" title=\"7. 无线调试\"></a>7. 无线调试</h3><h3 id=\"8-Frameworks\"><a href=\"#8-Frameworks\" class=\"headerlink\" title=\"8. Frameworks\"></a>8. Frameworks</h3><ul>\n<li>简单介绍了主要更新的库，就不看了，和Keynote差不多，直接看感兴趣的Session好了。</li>\n</ul>\n<p>ps：不知不觉看到了凌晨一点，今天把感性的的Session都下载了。立个flag，今年争取看30个。</p>\n"},{"title":"Procrastination","url":"/2015/05/05/Procrastination/","content":"<p>Procrastination is really long word, just like I takes long time to do things.</p>\n<p>伪命题，就是我懒，贪玩，没志气。</p>\n"},{"title":"Realm 笔记 (一)","url":"/2018/04/26/Realm-Notes-1/","content":"<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*yludU713C9JyEUMDrAOAAA.png\" alt=\"img\"></p>\n<p><strong>系列文章目录：</strong></p>\n<ol>\n<li><a href=\"http://gewill.org/2018/04/26/Realm-Notes-1/\">Realm 笔记 (一)</a></li>\n<li><a href=\"http://gewill.org/2018/05/10/Realm-Notes-2/\">Realm 笔记 (二)</a></li>\n</ol>\n<p>Realm Database 基于C++编写的核心引擎，支持多平台多语言的移动端数据库。因其面向对象存取模型，高效的性能，开源的特性，不失为移动端数据库好的选择。之前项目也有使用过，基本上看官方文档和Demo，即可解决大部分问题。最近买了 <a href=\"https://store.raywenderlich.com/products/advanced-swift-spring-bundle\"><strong>Advanced Swift Spring Bundle</strong></a>，包含 <a href=\"https://store.raywenderlich.com/products/realm-building-modern-swift-apps-with-realm-database\"><strong>Realm: Building Modern Swift Apps with Realm Database</strong></a>， 故再系统学习一遍，是为此笔记。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SfLo1QJ9UlaSP9aMUXeDlQ.jpeg\" alt=\"img\"></p>\n<hr>\n<h3 id=\"第一章：介绍Realm\"><a href=\"#第一章：介绍Realm\" class=\"headerlink\" title=\"第一章：介绍Realm\"></a>第一章：介绍<strong>Realm</strong></h3><ol>\n<li>Realm API是更现代且符合最佳实践的代码，比处理C语言的API和SQLite容易的多。亦即无需使用SQL语言，而是苹果的NSPredicate。</li>\n<li>Realm 数据库的设计哲学的基础之一是现代的应用开发使用的对象。模型就是对象，Realm提供基类Object，继承自NSObject。属性也支持Swift中原始和基本类型，对集合类也进行了封装，纯面向对象编程。</li>\n</ol>\n<blockquote>\n<p>对象：是指面向对象编程中的对象，Object：文中专指Realm中模型的基类Object</p>\n</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*z94UQYxtiBuEukF1tNX9QA.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*F-lFrV14ZiWJ6KvKTpcYHA.jpeg\" alt=\"img\"></p>\n<p>3.如果你偏爱 struct，只需要添加 <code>toStruct()</code> 和 <code>fromStruct(_)</code> 方法到 object，即可快速读取struct的数据。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*xRzIP6U43If9mmRRs3_mZQ.jpeg\" alt=\"img\"></p>\n<hr>\n<h3 id=\"第三章：Object基础和数据类型\"><a href=\"#第三章：Object基础和数据类型\" class=\"headerlink\" title=\"第三章：Object基础和数据类型\"></a>第三章：<strong>Object</strong>基础和数据类型</h3><p><strong>数据类型：</strong></p>\n<ol>\n<li>对象类型属性：<code>@objc dynamic var</code> 修饰，String、Date、Data，支持可选</li>\n<li>原始类型属性：包含Bool、Int、Float、Double。<code>let allowsPublication = RealmOptional&lt;Bool&gt;()</code> 需要使用Realm封装的可选类型</li>\n<li>自定义类型：比如封装CLLocation、封装枚举值</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*GunTyiEKB1zNoiEnGSroBw.jpeg\" alt=\"img\"></p>\n<p><strong>属性速查表</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*SqX_HG9aGL54qmy1Kazz_A.png\" alt=\"img\"></p>\n<p><strong>Object支持还以下几个属性：</strong></p>\n<ol>\n<li>计算属性</li>\n<li>主键：在移动应用使用自增主键不是一个好主意，尤其是使用Realm。</li>\n<li>索引：谨慎的使用索引，仅在反复查询的属性上使用。</li>\n<li>忽略属性</li>\n</ol>\n<blockquote>\n<p>@objcMembers 修饰 Object，是非常适合使用的一个场景。</p>\n</blockquote>\n<hr>\n<h3 id=\"第四章：模式和关系\"><a href=\"#第四章：模式和关系\" class=\"headerlink\" title=\"第四章：模式和关系\"></a>第四章：模式和关系</h3><ol>\n<li>对一</li>\n<li>对多（Object）：使用List，和Swift中Array类似</li>\n<li>对多（Value）：</li>\n<li>反向关系：<code>LinkingObjects</code></li>\n</ol>\n<hr>\n<h3 id=\"第五章：读写\"><a href=\"#第五章：读写\" class=\"headerlink\" title=\"第五章：读写\"></a>第五章：读写</h3><h4 id=\"查询结果（Results）\"><a href=\"#查询结果（Results）\" class=\"headerlink\" title=\"查询结果（Results）\"></a>查询结果（Results）</h4><p>Results 是一个惰性抓取持久化数据的API。</p>\n<p>过滤结果：使用NSPredicate</p>\n<ol>\n<li>子查询谓词（Sub-query predicates）</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*kiYuU27N3RaABADVMi8t0Q.jpeg\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>谓词速查表</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ztDnH8wGK2CTDJF-NGF_Zg.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*fMvjsbdNWZzu4ejFep0p-Q.jpeg\" alt=\"img\"></p>\n<p>排序结果：单属性排序 .sorted(byKeyPath: “firstName”) 和多个属性排序</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*OF-2iPzx0DIPgYgSvi4Mvw.jpeg\" alt=\"img\"></p>\n<p>写入数据时：因为存储Object包括修改属性，都会修改硬盘文件，必须进行写入事务。</p>\n<hr>\n<h3 id=\"第六章：通知和响应式应用\"><a href=\"#第六章：通知和响应式应用\" class=\"headerlink\" title=\"第六章：通知和响应式应用\"></a>第六章：通知和响应式应用</h3><h4 id=\"更改的通知\"><a href=\"#更改的通知\" class=\"headerlink\" title=\"更改的通知\"></a>更改的通知</h4><p>Realm 的核心特征之一就是数据永不过时的理念。</p>\n<p><strong>通知三个级别：</strong></p>\n<ol>\n<li>Object</li>\n<li>Collection：list、results、linking objects</li>\n<li>Realm</li>\n</ol>\n<p><strong>通知的细节：</strong></p>\n<ol>\n<li>线程：通知回调在和订阅通知相同线程被调用。</li>\n<li>Run loop：Realm使用 run loop 发送更改通知。因此你只能在有 run loop的线程订阅通知。</li>\n<li>通知的间隔尺度（granularity）：Realm在每次成功写入事务后推送通知给观察者。因为推送使用的是订阅线程的run loop（可能有时候忙于其它事情），可能会在Realm发生了其它更改才送达。这种情况下，Realm会聚集所有更改一起推送通知。</li>\n<li>仅限持久化的 Object</li>\n<li>通知令牌（Notiﬁcation tokens）：手动invalidate()或者在内存中释放（View Controller 被释放）</li>\n</ol>\n<p><strong>响应式应用</strong></p>\n<p>响应式系统拥有以下几个关键特性：对发生的变化做出反应，使用基于消息的工作流程，具有扩展能力等等。Realm 都提供了完整的支持。</p>\n"},{"title":"Realm 笔记(二)","url":"/2018/05/10/Realm-Notes-2/","content":"<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*s1KQFE3IHyzb_PKF-q_wHA@2x.png\" alt=\"RealmsSchema\"></p>\n<p><strong>系列文章目录：</strong></p>\n<ol>\n<li><a href=\"http://gewill.org/2018/04/26/Realm-Notes-1/\">Realm 笔记 (一)</a></li>\n<li><a href=\"http://gewill.org/2018/05/10/Realm-Notes-2/\">Realm 笔记 (二)</a></li>\n</ol>\n<h3 id=\"第七章：Realm配置\"><a href=\"#第七章：Realm配置\" class=\"headerlink\" title=\"第七章：Realm配置\"></a>第七章：<strong>Realm</strong>配置</h3><p>打开一个Realm:<code>let realm = try! Realm()</code></p>\n<p>Realm没有使用单例，而是每次直接尝试新建一个Realm实例，有以下几个运行时优化：</p>\n<ol>\n<li>调用Realm()返回同一个共享实例，而不受创建该Realm实例的线程限制。而Object和Realm实例被限制在创建的线程中，所以不能跨线程分享。</li>\n<li>Realm也提供了多个安全措施，如：使用不同的密钥或文件不存在均会报错。</li>\n</ol>\n<blockquote>\n<p>书中均使用 try! ，但实际生产环境你可以进行错误处理。</p>\n</blockquote>\n<p><code>deleteRealmIfMigrationNeeded</code> 新版直接删除Realm文件，不做迁移处理。</p>\n<p>存在文件在Documents文件夹有几个好处：自动备份到用户的iCloud storage，方便用户使用iTunes备份和访问。当然苹果推荐存储文件在Library文件夹。</p>\n<p>App Bundle 文件夹是只读的，所以该目录中的Realm是能作为只读数据库。</p>\n<p>加密在Realm极为简单，只要在配置中添加一个64位的密钥即可。</p>\n<h3 id=\"第八章：多个Realm和共享Realm\"><a href=\"#第八章：多个Realm和共享Realm\" class=\"headerlink\" title=\"第八章：多个Realm和共享Realm\"></a>第八章：多个<strong>Realm</strong>和共享<strong>Realm</strong></h3><p>创建一个RealmProvider以方便操作Realm，尤其是涉及多个Realm或加密等情况。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*W8tnptm39Ixw0gvV-ub4FA.jpeg\" alt=\"img\"></p>\n<p>如需转换JSON、CSV或纯文本为Realm，并内置到App Bundle。此时可以创建一个Target和来Tools.swift，自动生成Realm文件。把生成的Realm文件拖入Xcode即可。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*PQoGupwjm1ZNHXXRjQysUA.jpeg\" alt=\"img\"></p>\n<h3 id=\"第九章：依赖注入和测试\"><a href=\"#第九章：依赖注入和测试\" class=\"headerlink\" title=\"第九章：依赖注入和测试\"></a>第九章：依赖注入和测试</h3><p>在本章中，您将学习两个重要主题：如何使用依赖注入来改进 Flash Cards 应用的架构，以及如何编写由Realm支持的同步和异步测试。</p>\n<p>本章不会深入研究诸如测试驱动开发等主题，而是专注测试使用 Realm Object的类的技巧，并且依赖于特定于Realm的功能，例如更改通知。</p>\n<h4 id=\"测试-cards-场景-Scene\"><a href=\"#测试-cards-场景-Scene\" class=\"headerlink\" title=\"测试 cards 场景(Scene)\"></a><strong>测试 cards 场景(Scene)</strong></h4><ul>\n<li>CardsViewController：设置所需的手势识别器并根据用户的输入更新UI。本章不会介绍UI测试。</li>\n<li>CardsModel：从Realm中抽象查询对象的简单封装。为它编写测试将意味着在测试中重复相同的代码并比较输出，而不提供实际值。除此之外，你真正要在这里测试的将是Realm的底层实现，它已经经过了充分测试。</li>\n<li>CardsViewModel：实现此场景的业务逻辑。它格式化Model的输出，以显示在屏幕上，并提供与模型交互的方法。这将是一些单元测试的完美候选！</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*vhkdTdhoOoY1dQW3yPescA.jpeg\" alt=\"img\"></p>\n<p>这里只是简单测试 ViewModel 初始化和更新状态。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*dmF8jn3bhAwCz7kzsys2cw.jpeg\" alt=\"img\"></p>\n<h4 id=\"测试-sets-场景\"><a href=\"#测试-sets-场景\" class=\"headerlink\" title=\"测试 sets 场景\"></a>测试 sets 场景</h4><p>在显示列表的场景中，您的视图模型依赖于Realm通知来动态更新数据。你必须：</p>\n<ul>\n<li>模拟Realm框架以测试依赖通知的 ViewModel 和其他高级Realm功能。</li>\n<li>编写依赖Realm通知的测试</li>\n</ul>\n<p>为了使测试有效，您需要稍微更改代码以提供一个方法将测试的 Realm providers 注入到Model和ViewModel中。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*gfi15_iu5vDJ-u7YgZ6dcQ.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*xnR1I5wQ3laa3dVpLMqPoQ.jpeg\" alt=\"img\"></p>\n<p>异步测试需要使用XCTestExpectation，这个期望类将帮助你等待某些条件在您的测试中得到满足，然后再转到您测试断言的部分。</p>\n<p>在使用XCTWaiter类来持有测试的执行，直到满足期望为止。 XCTWaiter是Apple的XCTest框架中的一个便捷类，它暂时停止当前代码的执行，而不会阻塞当前线程。 XCTWaiter定期检查期望的状态，因此当异步代码将执行计数增加到3时，XCTWaiter将负责恢复执行测试。</p>\n<p>步骤如下：</p>\n<ul>\n<li>初始化XCTestExpectation和expectedFulfillmentCount</li>\n<li>在异步回调中fulfill，</li>\n<li>最后添加定期检查结果的帮助类XCTWaiter。</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*dTCJ1PW8lPGR6l3_W5GBnQ.jpeg\" alt=\"img\"></p>\n<h4 id=\"测试-Word-of-Today-场景\"><a href=\"#测试-Word-of-Today-场景\" class=\"headerlink\" title=\"测试 Word of Today 场景\"></a>测试 Word of Today 场景</h4><p><img src=\"https://cdn-images-1.medium.com/max/1600/1*FDEM3iDyXtpv-Yqp3iRIIA.jpeg\" alt=\"img\"></p>\n<h4 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h4><p>在本章中，你将亲身体验用Realm编写同步和异步测试的简易性。本章中重点是：</p>\n<ul>\n<li>测试自己的逻辑，而不是Realm，因为它已经在全球数百万用户中得到了充分测试和使用。</li>\n<li>“哑”模型和视图控制器可以更轻松地测试视图模型，您通常可以在其中放置MVVM应用程序的逻辑。</li>\n<li>编写需要这些依赖项的特定测试版本的测试时，使用中央provider结构来抽取某些依赖项的检索很有用。</li>\n</ul>\n<p>通常，测试基于Realm的代码可能不会改变您构建自己的测试套件的方式。借助本章的经验，您应该能够为您的Realm项目编写可靠的测试，无论你心意哪一种架构。</p>\n<blockquote>\n<p>注意：对于单元测试，模拟Realm本身是一个偏爱的问题。如果你想模拟Realm并从测试套件中删除Realm依赖关系，你可以模拟关键的方法，比如对象（^）、过滤器（^）等等。风险是你必须增加和保持的代码量，以保持与Realm自己行为的一致，尤其是已经有了基于内存的Realm这个特别棒的方案。</p>\n</blockquote>\n<blockquote>\n<p>笔者觉得模拟Realm的唯一好处是，Realm依赖增加了CI服务器需要安装，构建和测试应用程序的时间。</p>\n</blockquote>\n<h3 id=\"第十章：高效率的多线程\"><a href=\"#第十章：高效率的多线程\" class=\"headerlink\" title=\"第十章：高效率的多线程\"></a>第十章：高效率的多线程</h3><p>Realm线程：多线程访问同一个Realm总是可以读写到最新的数据。</p>\n<p>线程间传递Object，有以下两个替代方法：</p>\n<ul>\n<li>传递Object的主键</li>\n<li>使用ThreadSafeReference：<code>let ref = ThreadSafeReference(to: myRealmObject)</code> 和 <code>let myRealmobject = realm.resolve(ref)</code></li>\n</ul>\n<p>主线程：访问带主键合适数量的数据时，无需担心性能问题。如在View Controller lifecycle 和 UIKit delegate 中直接读取Object，和更新UI。因为总是在同一个Realm文件的快照中工作，所以速度最快。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Sae-yNE-Z8AiShY1NJPY9A.jpeg\" alt=\"img\"></p>\n<p>后台线程：（不推荐）由于是异步并发执行，会因为Realm 快照之间同步问题，产生性能和体积大的问题。</p>\n<p>专用线程：（推荐）可以解决主线程影响UI，后台线程性能问题。使用Thread，自己维护一个线程的生命周期，所有读写都在该线程操作。还可以缓存任务批量提交读写事务，进一步提高性能。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*vJX_oPQhAAXBeFCDHFyIfQ.jpeg\" alt=\"img\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*qdG-8dAadridla-Oztjq5w.jpeg\" alt=\"img\"></p>\n<p>简版（无缓冲机制）</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*yaxbDhdgZUPxzFNbAIEozA.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p><em>未完待续…</em></p>\n</blockquote>\n"},{"title":"Reveal：实时查看调试 UI 布局","url":"/2015/08/03/Reveal/","content":"<h2 id=\"Reveal-介绍\"><a href=\"#Reveal-介绍\" class=\"headerlink\" title=\"Reveal 介绍\"></a>Reveal 介绍</h2><p><img src=\"http://i.imgur.com/OKKIRbq.jpg\" alt=\"Reveal\"></p>\n<p>Reveal 最早是在唐巧的《iOS 开发进阶》看到的，当时不以为然。其实书中很多内容都不以为然，因为那时候还是入门阶段，自然看不懂的。主要缺乏交流，自悟容易自误。</p>\n<p>最近 GeekBand 的段松老师的课程，纯代码的 UI 布局，就遇到了极大的困惑：布局错了不知道在哪里，控件失踪了（跑到屏幕外的 frame）。搜索了一下，重新找到 Reveal 介绍的文章，试用了一下很强大。可以实时更改控件属性、大小位置等等，同步显示在真机或 Simulator 中。和 Sketch、Photoshop 的 Mirror 功能差不多，当然只是调试，实际更改还要在 Xcode 中完成。</p>\n<h2 id=\"Reveal-使用方法\"><a href=\"#Reveal-使用方法\" class=\"headerlink\" title=\"Reveal 使用方法\"></a>Reveal 使用方法</h2><p>Reveal 官方教程：</p>\n<ul>\n<li><p><a href=\"http://support.revealapp.com/kb/getting-started/integrating-reveal-add-reveal-to-your-xcode-project\">http://support.revealapp.com/kb/getting-started/integrating-reveal-add-reveal-to-your-xcode-project</a></p>\n</li>\n<li><p><a href=\"http://support.revealapp.com/kb/getting-started/revealxcodereveal\">集成Reveal：不修改您的Xcode工程并加载Reveal</a></p>\n</li>\n</ul>\n<p><strong>推荐越狱，只要简单配置一下，还可以查看手机安装的第三方 APP。</strong></p>\n<ul>\n<li>越狱后安装 Apple File Conduit “2” 和 OpenSSH</li>\n<li>导入 libReveal.dylib ：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scp /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib root@192.168.0.X:/Library/MobileSubstrate/DynamicLibraries</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入 libReveal.plist，格式如下：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">Filter = &#123;</span><br><span class=\"line\">Bundles = (</span><br><span class=\"line\">&quot;com.apple.test&quot;,</span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scp ~/Documents/libReveal.plist root@192.168.0.X:/Library/MobileSubstrate/DynamicLibraries</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>小技巧：网上下载的 Demo 直接改 Bundle ID：com.apple.test，即可开始 Reveal 了。</p>\n</blockquote>\n<h2 id=\"Debug-View-Hierarchy-in-Xcode\"><a href=\"#Debug-View-Hierarchy-in-Xcode\" class=\"headerlink\" title=\"Debug View Hierarchy in Xcode\"></a>Debug View Hierarchy in Xcode</h2><p>Xcode 的 <a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-debugger/using_view_debugger/using_view_debugger.html\">Debug View Hierarchy</a> 只能看看，就弱爆了。而且极易造成 Xcode 崩溃。<br><img src=\"http://i.imgur.com/R7XAflX.jpg\" alt=\"Debug View Hierarchy in Xcode\"></p>\n"},{"title":"RxSwift I：开始学习 RxSwift","url":"/2018/05/18/RxSwift-I/","content":"<h1 id=\"📒RxSwift-I：开始学习-RxSwift\"><a href=\"#📒RxSwift-I：开始学习-RxSwift\" class=\"headerlink\" title=\"📒RxSwift I：开始学习 RxSwift\"></a>📒<strong>RxSwift</strong> I：开始学习 RxSwift</h1><p> <img src=\"https://gewill.org/assets/Rx_Logo_M.png\" alt=\"Rx_Logo_M.png\"></p>\n<h2 id=\"第一章：RxSwift-介绍\"><a href=\"#第一章：RxSwift-介绍\" class=\"headerlink\" title=\"第一章：RxSwift 介绍\"></a>第一章：RxSwift 介绍</h2><p>RxSwift是一个组合异步和事件驱动编程的库，通过使用可观察序列和功能样式运算符来，从而允许通过调度程序进行参数化执行。</p>\n<p>RxSwift 在本质上简化了开发异步程序，允许代码对新数据作出反应，并以顺序和孤立的方式处理它。</p>\n<h3 id=\"介绍异步编程\"><a href=\"#介绍异步编程\" class=\"headerlink\" title=\"介绍异步编程\"></a>介绍异步编程</h3><p><img src=\"https://gewill.org/assets/51526546882_.pic.jpg\" alt=\"51526546882_.pic.jpg\"></p>\n<p>使用 Cocoa 和 UIKit 异步的API的问题在于：复杂的异步代码变得非常难写，部分原因是苹果SDK提供的API种类繁多。如NotificationCenter、Delegate、GCD、闭包、Combine。</p>\n<p>异步编程词汇表：</p>\n<ol>\n<li>状态（State），具体地说：共享可变状态</li>\n<li>命令式编程（Imperative programming）</li>\n<li>副作用（Side effects）</li>\n<li>声明式编程（Declarative code）：声明式代码让您可以定义行为片段。只要有相关事件发生，RxSwift 就会运行这些行为，并提供一个不可变的、孤立的数据片段来处理。这样，您可以使用异步代码，但做出与简单 for 循环相同的假设：您正在使用不可变数据并且可以以顺序、确定的方式执行代码。</li>\n<li>响应式系统（Reactive systems）</li>\n</ol>\n<p>响应式系统（Reactive systems）是一个相当抽象的术语，它涵盖了Web或iOS应用程序，它们显示了大多数或全部以下特性：</p>\n<ul>\n<li>响应式设计（Responsive）：始终保持UI更新，代表了最新的应用程序状态。</li>\n<li>能复原的（Resilient）：每个行为都是独立定义的，并提供灵活的错误恢复。</li>\n<li>灵活的（Elastic）: 该代码处理不同的工作负载，通常实现诸如懒惰驱动数据收集、事件节流和资源共享等特性。</li>\n<li>消息驱动（Message driven）：组件使用基于消息的通信来提高可重用性和隔离性，解耦类的生命周期和实现。</li>\n</ul>\n<h3 id=\"RxSwift-基础\"><a href=\"#RxSwift-基础\" class=\"headerlink\" title=\"RxSwift 基础\"></a>RxSwift 基础</h3><p><img src=\"https://gewill.org/assets/61526549641_.pic_hd.jpg\" alt=\"61526549641_.pic_hd.jpg\"></p>\n<p>这个标志是一只电鳗。(Rx 项目曾经被称为Volta）</p>\n<p>RxSwift 是微软开源的 ReactiveX 的Swift语言的实现。</p>\n<p><strong>RxSwift</strong> 在传统的<strong>Cocoa</strong>编程和纯函数编程之间找到了最佳位置。它允许您对事件作出反应, 方法是使用不可变的代码定义以确定性的、可组合的方式处理异步输入部分。</p>\n<p>Rx代码的三个组成部分是 <code>Observable</code>, <code>Operator</code>和 <code>Scheduler</code>。</p>\n<p><code>Observable&lt;Element&gt;</code>类提供了Rx代码的基础：异步产生一系列事件的能力，它可以“携带”数据的不可变快照。简单来说，它允许类在一段时间内订阅其他类发出的值。</p>\n<p><code>ObservableType</code> 协议 (<code>Observable</code>需要遵循的) 非常简单。<code>Observable</code>可能发出 (并且<code>Observer</code>能接受) 仅三类型事件:</p>\n<p>- next 下一个事件: “携带” 最新 (或  “下一个 “) 数据值的事件。这是<code>Observer</code> “接收” 值的方式。</p>\n<p>- completed 已完成的事件: 此事件以成功终止事件序列。这意味着<code>Observable</code>完成其生命周期成功, 不会发出任何其他事件。</p>\n<p>- error 错误事件: <code>Observable</code>终止带有错误, 不会发出其他事件.</p>\n<p>两种不同的可观测序列: 有限和无限的。</p>\n<p>由于它们是高度解耦和可组合的, 所以这些方法通常称为<code>Operator</code>。比如filter。</p>\n<p><code>Operator</code>也是高度可组合的，它们总是把数据作为输入并输出它们的结果，所以你可以用许多不同的方式轻松地将它们连接起来，实现比单个<code>Operator</code>自己能做的更多的事情。</p>\n<p> <code>Scheduler</code>是<a href=\"https://developer.apple.com/documentation/DISPATCH\">GCD</a>和<a href=\"https://developer.apple.com/documentation/foundation/operationqueue\">OperationQueue</a>的Rx等价物。</p>\n<p>RxSwift将充当你的订阅（在左边）和<code>Scheduler</code>（在右边）之间的调度器，将工件发送到正确的上下文，并无缝地允许它们与彼此的输出一起工作。</p>\n<p><img src=\"https://gewill.org/assets/71526551674_.pic_hd.jpg\" alt=\"71526551674_.pic_hd.jpg\"></p>\n<p>要读取此关系图, 请在不同的计划程序中按预定的顺序 (1、2、3、…) 来执行彩色作品。例如:</p>\n<p>·蓝色网络订阅以在基于自定义 NSOperation 的计划程序上运行的一段代码 (1) 开始。</p>\n<p>·数据输出块作为下一个块 (2) 的输入, 它运行在一个不同的调度程序上, 它位于并发后台 GCD 队列中。</p>\n<p>·最后, 在主线程调度程序上计划最后一块蓝色代码 (3), 以便用新数据更新 UI。</p>\n<h3 id=\"App-architecture-应用的架构\"><a href=\"#App-architecture-应用的架构\" class=\"headerlink\" title=\"App architecture 应用的架构\"></a>App architecture 应用的架构</h3><p>值得一提的是，RxSwift并没有以任何方式改变应用程序的架构；它主要处理事件、异步数据序列和通用通信协议。</p>\n<p>通过在苹果开发文档中实现MVC体系结构，可以创建具有Rx的应用程序。如果你喜欢的话，你也可以选择实现MVP架构或MVVM。RxSwift也可以帮你实现自己的单向数据架构。</p>\n<p>微软的MVVM架构是专门针对在平台上创建的事件驱动软件开发的，该平台提供数据绑定。RxSwift和MVVM很好地结合在一起，在这本书的末尾，你会看到这个模式以及如何用RxSwift来实现它。</p>\n<p>MVVM和RxSwift结合在一起的原因是，ViewModel允许您公开<code>Observable</code>属性，这些属性可以直接绑定到View Controller 代码中的UIKit控件。这使得绑定模型数据到UI非常简单地展示和编码：</p>\n<p><img src=\"https://gewill.org/assets/81526552550_.pic.jpg\" alt=\"81526552550_.pic.jpg\"></p>\n<p>本书中的所有其他示例都使用MVC架构来保持示例代码简单易懂。</p>\n<h3 id=\"RxCocoa\"><a href=\"#RxCocoa\" class=\"headerlink\" title=\"RxCocoa\"></a>RxCocoa</h3><p>RxSwift是通用Rx API的实现。因此，它不涉及任何Cocoa或UIKit类。</p>\n<p>RxCocoa是RxSwift的配套库，所有的类都有助于UIKit和Cocoa的开发。除了具有一些高级类之外，RxCocoa还为许多UI组件添加了响应式扩展，以便您可以订阅不同的UI事件。</p>\n<p>例如，使用RxCocoa订阅UISwitch的状态变化是非常容易的，例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">toggleSwitch.rx.isOn</span><br><span class=\"line\">\t.subcribe(onNext: &#123;enabled <span class=\"keyword\">in</span></span><br><span class=\"line\">    \t<span class=\"built_in\">print</span>(enabled <span class=\"operator\">?</span> <span class=\"string\">&quot;it&#x27;s ON&quot;</span> : <span class=\"string\">&quot;it&#x27;s OFF&quot;</span>)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>RxCocoa adds the rx.isOn property (among others) to the UISwitch class so you can subscribe to generally useful event sequences.</p>\n<p>RxCocoa将rx.isOn属性（其中之一）添加到UISwitch类，这样您就可以订阅通常有用的<code>Observable</code>序列。</p>\n<p><img src=\"https://gewill.org/assets/101526552877_.pic.jpg\" alt=\"101526552877_.pic.jpg\"></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>官方git：<a href=\"https://github.com/ReactiveX/RxSwift\">https://github.com/ReactiveX/RxSwift</a></p>\n<p>使用 <a href=\"https://guides.cocoapods.org/using/using-cocoapods.html\">CocoaPods</a> 、 <a href=\"https://github.com/Carthage/Carthage\">Carthage</a> 和 <a href=\"https://github.com/apple/swift-package-manager\">Swift Package Manager</a> 均很方便集成RxSwift。</p>\n<h3 id=\"RxSwift-和-Combine\"><a href=\"#RxSwift-和-Combine\" class=\"headerlink\" title=\"RxSwift 和 Combine\"></a>RxSwift 和 Combine</h3><p>RxSwift 和 Combine（以及 Swift 中的其他相应式编程框架）共享许多通用语言和非常相似的概念。</p>\n<p>RxSwift是一个较旧的，完善的框架，具有一些自己的原始概念，运算符名称和类型多样性，这主要是由于其多平台跨语言标准，该标准也适用于Linux，这对于Server-Side Swift非常有用。它也是开源的，所以如果你愿意，你可以直接为其核心做出贡献，并确切地看到它的特定部分是如何工作的。它与所有支持 Swift 的 Apple 平台版本兼容，一直支持 iOS 8。</p>\n<p>Combine 是 Apple 新的、闪亮的框架，涵盖了类似的概念，但专门针对 Swift 和 Apple 自己的平台量身定制。它与 Swift 标准库共享许多通用语言，因此即使新手也觉得 API 非常熟悉。它仅支持从iOS 13，macOS 10.15等开始的较新的Apple平台。不幸的是，截至今天，它还没有开源，并且不支持Linux。</p>\n<p>幸运的是，由于 RxSwift 和 Combine 非常相似，因此您的 RxSwift 知识可以轻松转移到 Combine，反之亦然。RxCombine（<a href=\"https://github.com/CombineCommunity/RxCombine%EF%BC%89%E7%AD%89%E9%A1%B9%E7%9B%AE%E5%85%81%E8%AE%B8%E6%82%A8%E6%A0%B9%E6%8D%AE%E9%9C%80%E8%A6%81%E6%B7%B7%E5%90%88%E6%90%AD%E9%85%8D\">https://github.com/CombineCommunity/RxCombine）等项目允许您根据需要混合搭配</a> RxSwift Observables 和 Combine Publishers。</p>\n<p><a href=\"https://github.com/ReactiveX/RxSwift/releases/tag/6.5.0\">RxSwift 6.5.0</a> 也迎来了 Swift Concurrency 的支持。提供了互操作性：</p>\n<ol>\n<li><code>await  </code> 调用<code>Observable</code>的<code>values</code></li>\n<li>封装 <code>async</code> Task 为 <code>Observable</code></li>\n</ol>\n<h3 id=\"社区\"><a href=\"#社区\" class=\"headerlink\" title=\"社区\"></a>社区</h3><p>RxSwift社区非常友好，思想开放，并且热衷于讨论模式，常用技巧或互相帮助。</p>\n<p>更多的Rx库和实验，像雨后春笋一样的涌现，可以在这里找到：<a href=\"https://github.com/RxSwiftCommunity\">https://github.com/RxSwiftCommunity</a></p>\n<p>可能最好的方式来满足许多对RxSwift感兴趣的人，这是Slack的频道：<a href=\"http://rxswift-slack.herokuapp.com/\">http://rxswift-slack.herokuapp.com</a>。</p>\n<p>Slack频道拥有约5000名成员！ 日常的主题包括：互相帮助，讨论RxSwift或其同伴库的潜在新功能，以及共享RxSwift博客文章和会议讲座。</p>\n<h2 id=\"第二章：Observables\"><a href=\"#第二章：Observables\" class=\"headerlink\" title=\"第二章：Observables\"></a>第二章：Observables</h2><h3 id=\"Observable-是什么\"><a href=\"#Observable-是什么\" class=\"headerlink\" title=\"Observable 是什么\"></a>Observable 是什么</h3><p>Observable、observable sequence 和 sequence 在 Rx 都是一个意思。或者在其他Rx实现中称之为stream。</p>\n<blockquote>\n<p>最好称之为 Observable，不过翻译过来还是序列顺口些。</p>\n</blockquote>\n<h3 id=\"Observable-的生命周期\"><a href=\"#Observable-的生命周期\" class=\"headerlink\" title=\"Observable 的生命周期\"></a>Observable 的生命周期</h3><ul>\n<li>observable发出包含元素的<strong>next</strong>事件。 它可以继续这样做，直到它：</li>\n<li>…发出<strong>error</strong>事件并终止，或</li>\n<li>…发出<strong>completed</strong>事件并终止。</li>\n<li>一旦observable被终止，它不能再发出事件。</li>\n</ul>\n<p>将这种概念化的最佳方法之一是使用弹珠图（<strong>Marble Diagrams</strong> 基于时间轴上绘制的值）。</p>\n<p><img src=\"https://gewill.org/assets/141526623515_.pic.jpg\" alt=\"141526623515_.pic.jpg\"></p>\n<p><img src=\"https://gewill.org/assets/151526623523_.pic.jpg\" alt=\"151526623523_.pic.jpg\"></p>\n<h3 id=\"创建-Observable\"><a href=\"#创建-Observable\" class=\"headerlink\" title=\"创建 Observable\"></a><strong>创建</strong> <strong>Observable</strong></h3><p>类型擦除的ObservableType，也就是 Swift 中的泛型。</p>\n<p>它代表了一种推式风格队列。</p>\n<p>let observable: Observable<Int> &#x3D; Observable<Int>.just(one)</p>\n<h3 id=\"订阅-Observable\"><a href=\"#订阅-Observable\" class=\"headerlink\" title=\"订阅 Observable\"></a><strong>订阅</strong> <strong>Observable</strong></h3><p>订阅observable sequence的事件处理程序。</p>\n<p>func subscribe(_ on: @escaping (RxSwift.Event&lt;Self.E&gt;) -&gt; Swift.Void) -&gt; Disposable</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> one <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> two <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(one, two, three)</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(onNext: &#123; element <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在指定的范围内生成一个整数的observable sequence，使用指定的scheduler生成和发送<code>Observer</code>消息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">range</span>(<span class=\"params\">start</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">E</span>, <span class=\"params\">count</span>: <span class=\"keyword\">Self</span>.<span class=\"type\">E</span>, <span class=\"params\">scheduler</span>: <span class=\"type\">ImmediateSchedulerType</span> <span class=\"operator\">=</span> <span class=\"keyword\">default</span>) -&gt; <span class=\"type\">RxSwift</span>.<span class=\"type\">Observable</span>&lt;<span class=\"keyword\">Self</span>.<span class=\"type\">E</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.range(start: <span class=\"number\">1</span>, count: <span class=\"number\">10</span>)</span><br><span class=\"line\">observable</span><br><span class=\"line\">    .subscribe(onNext: &#123; i <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> n <span class=\"operator\">=</span> <span class=\"type\">Double</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> fibonacci <span class=\"operator\">=</span> <span class=\"type\">Int</span>(((pow(<span class=\"number\">1.61803</span>, n) <span class=\"operator\">-</span> pow(<span class=\"number\">0.61803</span>, n)) <span class=\"operator\">/</span></span><br><span class=\"line\">            <span class=\"number\">2.23606</span>).rounded())</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(fibonacci)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Disposing-和-terminating\"><a href=\"#Disposing-和-terminating\" class=\"headerlink\" title=\"Disposing 和 terminating\"></a><strong>Disposing 和 terminating</strong></h3><p>请记住, 在收到订阅之前, Observable的内容不会执行任何事情。它是触发一个Observable的开始发出事件的订阅, 直到它发出. error 或.completed完成事件并终止。您可以通过取消对它的订阅来手动终止Observable。</p>\n<p><code>subscription.dispose()</code></p>\n<p>单独管理每个订阅将是单调乏味的, 因此 RxSwift 引入 DisposeBag 类型。DisposeBag 持有 disposable协议的对象，通常是使用<code>.disposed(by:)</code> 方法, 并将调用dispose(), 当DisposeBag即将deallocated。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subscription <span class=\"operator\">=</span> observable.subscribe &#123; event <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subscription.dispose()</span><br></pre></td></tr></table></figure>\n\n<p>create操作符接受一个名为subscribe的参数。 它的工作是提供对可观察对象进行调用订阅的实现。 换句话说，它定义了将发送给订阅者的所有事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">create</span>(<span class=\"keyword\">_</span> <span class=\"params\">subscribe</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">AnyObserver</span>&lt;<span class=\"type\">String</span>&gt;) -&gt; <span class=\"type\">Disposable</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-observable-工厂类\"><a href=\"#创建-observable-工厂类\" class=\"headerlink\" title=\"创建 observable 工厂类\"></a><strong>创建 observable 工厂类</strong></h3><p>可以创建一个可观察的工厂，向每个订阅者发布一个新的Observable，而不是创建一个等待订阅者的Observable。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">deferred</span>(<span class=\"keyword\">_</span> <span class=\"params\">observableFactory</span>: <span class=\"keyword\">@escaping</span> () <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> flip <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> factory: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.deferred &#123;</span><br><span class=\"line\">    flip <span class=\"operator\">=</span> <span class=\"operator\">!</span>flip</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> flip &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span><span class=\"operator\">...</span><span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    factory.subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>, terminator: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">123 </span><br><span class=\"line\">456 </span><br><span class=\"line\">123 </span><br><span class=\"line\">456</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Traits\"><a href=\"#使用Traits\" class=\"headerlink\" title=\"使用Traits\"></a><strong>使用Traits</strong></h3><p><strong>Traits</strong>是具有比常规Observable更窄的行为集合的一种Observable。它们的使用是可选的；您可以在任何可能使用trait的地方使用常规Observable。他们的目的是提供一种给你的API或者代码的读者更清楚地表达意图的方式。 </p>\n<p>RxSwift中有三种Traits: Single, Maybe 和 Completable.</p>\n<p>Singles将发出.success(value)或.error事件。 .success(value)实际上是.next和.completed事件的组合。 这对于一次性进程非常有用，它可以成功并产生一个值或失败，例如下载数据或从磁盘加载数据。</p>\n<p>下面的例子是读取 <code>Copyright.txt</code> 的文件内容：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">FileReadError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> fileNotFound, unreadable, encodingFailed</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">loadText</span>(<span class=\"params\">from</span> <span class=\"params\">filename</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Single</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Single</span>.create &#123; single <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> path <span class=\"operator\">=</span> <span class=\"type\">Bundle</span>.main.path(forResource: filename, ofType: <span class=\"string\">&quot;txt&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            single(.error(<span class=\"type\">FileReadError</span>.fileNotFound))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> disposable</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"type\">FileManager</span>.default.contents(atPath: path) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            single(.error(<span class=\"type\">FileReadError</span>.unreadable))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> disposable</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> contents <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: data, encoding: .utf8) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            single(.error(<span class=\"type\">FileReadError</span>.encodingFailed))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> disposable</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        single(.success(contents))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> disposable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadText(from: <span class=\"string\">&quot;Copyright&quot;</span>)</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"variable\">$0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .success(<span class=\"keyword\">let</span> string):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(string)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> .error(<span class=\"keyword\">let</span> error):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a><strong>副作用</strong></h3><p> <code>do</code> Operator允许插入副作用，处理程序执行过程中并不会以任何方式更改发出的事件的操作。</p>\n<h3 id=\"打印debug-信息\"><a href=\"#打印debug-信息\" class=\"headerlink\" title=\"打印debug 信息\"></a><strong>打印debug 信息</strong></h3><p><code>debug</code> Operator, 它将打印observable的每个事件的信息。</p>\n<h2 id=\"第三章：Subjects\"><a href=\"#第三章：Subjects\" class=\"headerlink\" title=\"第三章：Subjects\"></a>第三章：Subjects</h2><h3 id=\"Subject-是什么\"><a href=\"#Subject-是什么\" class=\"headerlink\" title=\"Subject 是什么\"></a>Subject 是什么</h3><p>既可以作为<code>Observable</code>，也可以作为<code>Observer</code>，这就是所谓的 Subjects。</p>\n<blockquote>\n<p>也是最方便互操作的，<code>BehaviorRelay</code>比较常用。</p>\n</blockquote>\n<p>RxSwift 中有四个subject类型: </p>\n<ol>\n<li><code>PublishSubject</code>: 开始为空, 只向订阅者发出新元素. </li>\n<li><code>ReplaySubject</code>: 用缓冲区大小, 并将保持元素的缓冲区大小, 并将其重播到新订阅者. </li>\n<li><code>BehaviorSubject</code>: 从初始值开始, 将其重播或将最新的元素给新订阅者. </li>\n<li><code>AsyncSubject</code>：仅发出序列中的最后一个next事件，并且仅当subject收到completed事件时才发出。这是一个很少使用的主题。</li>\n</ol>\n<h3 id=\"PublishSubject\"><a href=\"#PublishSubject\" class=\"headerlink\" title=\"PublishSubject\"></a>PublishSubject</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Represents an object that is both an observable sequence as well as an observer.</span></span><br><span class=\"line\"><span class=\"comment\">/// Each notification is broadcasted to all subscribed observers.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PublishSubject</span>&lt;<span class=\"title class_\">Element</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当你只是想让订阅者只接受在订阅的时候以后发生的新的事件，直到他们unsubscribe，或者subject已经terminated以.completed或.error事件的方式，PublishSubject就可以派上用场。</p>\n<p><img src=\"https://gewill.org/assets/RxSwiftPublishSubject.jpg\" alt=\"RxSwiftPublishSubject\"></p>\n<p>第一个订阅者在将 1 添加到subject后进行订阅，因此它不会收到该事件。不过，它确实得到了2和3。由于第二个订阅者在添加2之前不会加入，因此它只能获得3。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">ObservableType</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/// 添加带有`id`的观察者并打印每个发出的事件。</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">addObserver</span>(<span class=\"keyword\">_</span> <span class=\"params\">id</span>: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Disposable</span> &#123;</span><br><span class=\"line\">        subscribe &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;观察者:&quot;</span>, id, <span class=\"string\">&quot;事件:&quot;</span>, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从订阅开始向所有观察者广播新事件。</span></span><br><span class=\"line\">example(<span class=\"string\">&quot;PublishSubject&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    subject.onCompleted()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- PublishSubject example ---</span><br><span class=\"line\">观察者: 1 事件: next(🐶)</span><br><span class=\"line\">观察者: 1 事件: next(🐱)</span><br><span class=\"line\">观察者: 1 事件: next(🅰️)</span><br><span class=\"line\">观察者: 2 事件: next(🅰️)</span><br><span class=\"line\">观察者: 1 事件: next(🅱️)</span><br><span class=\"line\">观察者: 2 事件: next(🅱️)</span><br><span class=\"line\">观察者: 1 事件: completed</span><br><span class=\"line\">观察者: 2 事件: completed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Represents an object that is both an observable sequence as well as an observer.</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReplaySubject</span>&lt;<span class=\"title class_\">Element</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>ReplaySubject将临时缓存, 或缓冲区, 它们发出的最新元素, 由您选择的 speciﬁed 大小决定。然后, 他们会将该缓冲区重播到新订阅者。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向所有观察者广播新事件，并向新观察者广播之前指定的bufferSize大小的事件数。</span></span><br><span class=\"line\">example(<span class=\"string\">&quot;ReplaySubject&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    subject.onCompleted()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- ReplaySubject example ---</span><br><span class=\"line\">观察者: 1 事件: next(🐶)</span><br><span class=\"line\">观察者: 1 事件: next(🐱)</span><br><span class=\"line\">观察者: 2 事件: next(🐱) // 相比PublishSubject多了订阅前一个事件</span><br><span class=\"line\">观察者: 1 事件: next(🅰️)</span><br><span class=\"line\">观察者: 2 事件: next(🅰️)</span><br><span class=\"line\">观察者: 1 事件: next(🅱️)</span><br><span class=\"line\">观察者: 2 事件: next(🅱️)</span><br><span class=\"line\">观察者: 1 事件: completed</span><br><span class=\"line\">观察者: 2 事件: completed</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Represents a value that changes over time.</span></span><br><span class=\"line\"><span class=\"comment\">/// Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"title class_\">Element</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当您希望使用最新数据预先填充View时, BehaviorSubject非常有用。例如, 可以将用户详情页中的控件绑定到BehaviorSubject, 以便在应用程序获取新数据时, 可以使用最新值来预先填充显示。 </p>\n<p><img src=\"https://gewill.org/assets/RxSwiftBehaviorSubject.png\" alt=\"RxSwiftBehaviorSubject\"> </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">example(<span class=\"string\">&quot;BehaviorSubject&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">    subject.onNext(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    subject.onCompleted()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- BehaviorSubject example ---</span><br><span class=\"line\">观察者: 1 事件: next(🔴) // 相比ReplaySubject多了订阅前一个事件</span><br><span class=\"line\">观察者: 1 事件: next(🐶)</span><br><span class=\"line\">观察者: 1 事件: next(🐱)</span><br><span class=\"line\">观察者: 2 事件: next(🐱)</span><br><span class=\"line\">观察者: 1 事件: next(🅰️)</span><br><span class=\"line\">观察者: 2 事件: next(🅰️)</span><br><span class=\"line\">观察者: 1 事件: next(🅱️)</span><br><span class=\"line\">观察者: 2 事件: next(🅱️)</span><br><span class=\"line\">观察者: 1 事件: completed</span><br><span class=\"line\">观察者: 2 事件: completed</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Relay\"><a href=\"#Relay\" class=\"headerlink\" title=\"Relay\"></a>Relay</h3><p>Relay在保持其replay行为的同时包装了subject。与其他subject不同，可以使用 <code>accept(_:)</code> 添加值，而非 <code>onNext(_:)</code>。这是因为Relay只能接受值，即不能向它们添加错误或已完成的事件。</p>\n<p>PublishRelay将包装PublishSubject ，而BehaviorRelay将包装BehaviorSubject。中继与包装主体的区别在于，它们可以保证永远不会终止。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RxRelay</span><br><span class=\"line\"></span><br><span class=\"line\">example(<span class=\"string\">&quot;PublishRelay&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">PublishRelay</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- PublishRelay example ---</span><br><span class=\"line\">观察者: 1 事件: next(🐶) //next事件和PublishSubject一样，少了completed事件</span><br><span class=\"line\">观察者: 1 事件: next(🐱)</span><br><span class=\"line\">观察者: 1 事件: next(🅰️)</span><br><span class=\"line\">观察者: 2 事件: next(🅰️)</span><br><span class=\"line\">观察者: 1 事件: next(🅱️)</span><br><span class=\"line\">观察者: 2 事件: next(🅱️)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RxRelay</span><br><span class=\"line\"></span><br><span class=\"line\">example(<span class=\"string\">&quot;BehaviorRelay&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subject <span class=\"operator\">=</span> <span class=\"type\">BehaviorRelay</span>&lt;<span class=\"type\">String</span>&gt;(value: <span class=\"string\">&quot;🔴&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;1&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🐶&quot;</span>)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🐱&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    subject.addObserver(<span class=\"string\">&quot;2&quot;</span>).disposed(by: disposeBag)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🅰️&quot;</span>)</span><br><span class=\"line\">    subject.accept(<span class=\"string\">&quot;🅱️&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- BehaviorRelay example ---</span><br><span class=\"line\">观察者: 1 事件: next(🔴)  //next事件和BehaviorSubject，少了completed事件</span><br><span class=\"line\">观察者: 1 事件: next(🐶)</span><br><span class=\"line\">观察者: 1 事件: next(🐱)</span><br><span class=\"line\">观察者: 2 事件: next(🐱)</span><br><span class=\"line\">观察者: 1 事件: next(🅰️)</span><br><span class=\"line\">观察者: 2 事件: next(🅰️)</span><br><span class=\"line\">观察者: 1 事件: next(🅱️)</span><br><span class=\"line\">观察者: 2 事件: next(🅱️)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"第四章：Observables-和-Subjects-实践\"><a href=\"#第四章：Observables-和-Subjects-实践\" class=\"headerlink\" title=\"第四章：Observables 和 Subjects 实践\"></a>第四章：Observables 和 Subjects 实践</h2><p>本章重点是在一个完整的应用开发中使用RxSwift，一步一步的学会如何把概念应用到实际项目中。</p>\n<h3 id=\"在-view-controller-中使用-subject-x2F-relay\"><a href=\"#在-view-controller-中使用-subject-x2F-relay\" class=\"headerlink\" title=\"在 view controller 中使用 subject&#x2F;relay\"></a>在 view controller 中使用 subject&#x2F;relay</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\"></span><br><span class=\"line\">  images</span><br><span class=\"line\">    .subscribe(onNext: &#123; [<span class=\"keyword\">weak</span> imagePreview] photos <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> preview <span class=\"operator\">=</span> imagePreview <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      preview.image <span class=\"operator\">=</span> photos.collage(size: preview.frame.size)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  images</span><br><span class=\"line\">    .subscribe(onNext: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] photos <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span><span class=\"operator\">?</span>.updateUI(photos: photos)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-subject-在-view-controller-之间传值\"><a href=\"#使用-subject-在-view-controller-之间传值\" class=\"headerlink\" title=\"使用 subject 在 view controller 之间传值\"></a>使用 subject 在 view controller 之间传值</h3><p>view controller 之间传值可以通过 delegate，但是用 subject 更好。</p>\n<p><img src=\"https://gewill.org/assets/Talkingtootherviewcontrollersviadelegate.jpg\" alt=\"Talkingtootherviewcontrollersviadelegate\"></p>\n<p><img src=\"https://gewill.org/assets/Talkingtootherviewcontrollersviasubjects.jpg\" alt=\"Talkingtootherviewcontrollersviasubjects\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">actionAdd</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> photosViewController <span class=\"operator\">=</span> storyboard<span class=\"operator\">!</span>.instantiateViewController(</span><br><span class=\"line\">        withIdentifier: <span class=\"string\">&quot;PhotosViewController&quot;</span>) <span class=\"keyword\">as!</span> <span class=\"type\">PhotosViewController</span></span><br><span class=\"line\"></span><br><span class=\"line\">    navigationController<span class=\"operator\">!</span>.pushViewController(photosViewController, animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    photosViewController.selectedPhotos</span><br><span class=\"line\">        .subscribe(</span><br><span class=\"line\">            onNext: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] newImage <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> images <span class=\"operator\">=</span> <span class=\"keyword\">self</span><span class=\"operator\">?</span>.images <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">                images.accept(images.value <span class=\"operator\">+</span> [newImage])</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            onDisposed: &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;completed photo selection&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .disposed(by: bag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装已有API为Observable\"><a href=\"#封装已有API为Observable\" class=\"headerlink\" title=\"封装已有API为Observable\"></a>封装已有API为Observable</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> Photos</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxSwift</span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PhotoWriter</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Errors</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> couldNotSavePhoto</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">save</span>(<span class=\"keyword\">_</span> <span class=\"params\">image</span>: <span class=\"type\">UIImage</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> savedAssetId: <span class=\"type\">String</span>?</span><br><span class=\"line\">      <span class=\"type\">PHPhotoLibrary</span>.shared().performChanges(&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request <span class=\"operator\">=</span> <span class=\"type\">PHAssetChangeRequest</span>.creationRequestForAsset(from: image)</span><br><span class=\"line\">        savedAssetId <span class=\"operator\">=</span> request.placeholderForCreatedAsset<span class=\"operator\">?</span>.localIdentifier</span><br><span class=\"line\">      &#125;, completionHandler: &#123; success, error <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> success, <span class=\"keyword\">let</span> id <span class=\"operator\">=</span> savedAssetId &#123;</span><br><span class=\"line\">            observer.onNext(id)</span><br><span class=\"line\">            observer.onCompleted()</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            observer.onError(error <span class=\"operator\">??</span> <span class=\"type\">Errors</span>.couldNotSavePhoto)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RxSwift-traits-实践\"><a href=\"#RxSwift-traits-实践\" class=\"headerlink\" title=\"RxSwift traits 实践\"></a>RxSwift traits 实践</h3><h4 id=\"Single\"><a href=\"#Single\" class=\"headerlink\" title=\"Single\"></a>Single</h4><p>Single 只有<code>.success</code> 或 <code>.error</code> 两种事件 。适合作为封装网络接口的返回值，要么成功，要么失败。<img src=\"https://gewill.org/assets/single.jpg\" alt=\"single\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">PhotoWriter</span>.save(image)</span><br><span class=\"line\">      .asSingle()</span><br><span class=\"line\">      .subscribe(onSuccess: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] id <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Saved with id: <span class=\"subst\">\\(id)</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span><span class=\"operator\">?</span>.actionClear()</span><br><span class=\"line\">        &#125;, onError: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] error <span class=\"keyword\">in</span></span><br><span class=\"line\">          <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Error&quot;</span>, description: error.localizedDescription)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .disposed(by: bag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><p>Maybe 有三种事件：<code>.success</code>、<code>.completed</code> 和 <code>.error</code> 。</p>\n<p>和 Single 一样，你既可以通过 <code>Maybe.create(&#123; ... &#125;)</code> 直接创建，也可以使用 <code>.asMaybe()</code></p>\n<p><img src=\"https://gewill.org/assets/maybe.jpg\" alt=\"maybe\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">PhotoWriter</span>.save(image)</span><br><span class=\"line\">    .asMaybe()</span><br><span class=\"line\">    .subscribe(</span><br><span class=\"line\">        onSuccess: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] id <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Saved with id: <span class=\"subst\">\\(id)</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">self</span><span class=\"operator\">?</span>.actionClear()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onError: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] error <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Error&quot;</span>, description: error.localizedDescription)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onCompleted: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Saved&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .disposed(by: bag)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Completable\"><a href=\"#Completable\" class=\"headerlink\" title=\"Completable\"></a>Completable</h4><p>Completable 只有<code>.completed</code> 和 <code>.error</code> 两种事件。适合只关心是否完成，而不需要传递value的情况。使用方法：<code>Completable.create(&#123; ... &#125;)</code></p>\n<p><img src=\"https://gewill.org/assets/completable.jpg\" alt=\"completable\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PhotoWriter</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Errors</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> couldNotSavePhoto</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">save</span>(<span class=\"keyword\">_</span> <span class=\"params\">image</span>: <span class=\"type\">UIImage</span>) -&gt; <span class=\"type\">Completable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Completable</span>.create &#123; completable <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"type\">PHPhotoLibrary</span>.shared().performChanges(&#123;</span><br><span class=\"line\">        <span class=\"type\">PHAssetChangeRequest</span>.creationRequestForAsset(from: image)</span><br><span class=\"line\">      &#125;, completionHandler: &#123; success, error <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">            completable(.completed)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            completable(.error(error <span class=\"operator\">??</span> <span class=\"type\">Errors</span>.couldNotSavePhoto))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">PhotoWriter</span>.save(image)</span><br><span class=\"line\">  .subscribe(</span><br><span class=\"line\">    onCompleted: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Saved&quot;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onError: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] error <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span><span class=\"operator\">?</span>.showMessage(<span class=\"string\">&quot;Error&quot;</span>, description: error.localizedDescription)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .disposed(by: bag)</span><br></pre></td></tr></table></figure>","categories":["RxSwift"],"tags":["Swift","RxSwift"]},{"title":"RxSwift Ⅱ：操作符和最佳实践","url":"/2018/08/01/RxSwift-%E2%85%A1/","content":"<h2 id=\"第五章：Filtering-Operator\"><a href=\"#第五章：Filtering-Operator\" class=\"headerlink\" title=\"第五章：Filtering Operator\"></a>第五章：Filtering Operator</h2><h3 id=\"Ignoring\"><a href=\"#Ignoring\" class=\"headerlink\" title=\"Ignoring\"></a>Ignoring</h3><p>忽略所有event，转化为一个 Comletable。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">ignoreElements</span>() -&gt; <span class=\"type\">Completable</span></span><br></pre></td></tr></table></figure>\n\n<p>仅发射指定index的event，其余都忽略。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">elementAt</span>(<span class=\"keyword\">_</span> <span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者直接使用 <code>.filter</code> ，是 RxSwift 对 Swift 标准库中 <code>.filter</code> 对应版本。具体用法很简单，和 Swift 版一样。</p>\n<h3 id=\"Skipping\"><a href=\"#Skipping\" class=\"headerlink\" title=\"Skipping\"></a>Skipping</h3><p><code>.skip(n) 即可跳过前</code> n 个 event。</p>\n<p><code>.skipWhile</code> 跳过符合条件的 event，但是遇到不符合条件的 event 后，不再跳过该 event 以及后面的event。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    .skipWhile &#123; integer <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(integer)</span> skipWhile&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> integer <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2 skipWhile</span><br><span class=\"line\">2 skipWhile</span><br><span class=\"line\">3 skipWhile</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><code>.skipUntil(trigger)</code> 持续跳过直到另一个Observable生成元素。</p>\n<h3 id=\"Taking\"><a href=\"#Taking\" class=\"headerlink\" title=\"Taking\"></a>Taking</h3><p>Taking 和 Skipping 是相反的。</p>\n<p><code>.take(n)</code> 只发射前 n 个 event 。</p>\n<p><code>.takeWhile &#123; &#125;</code>  放射符合条件的event，直到遇到不符合条件的元素，不再发射。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .enumerated()</span><br><span class=\"line\">    .takeWhile &#123; index, integer <span class=\"keyword\">in</span></span><br><span class=\"line\">        integer <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> index <span class=\"operator\">&lt;</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .map &#123; <span class=\"variable\">$0</span>.element &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n\n<p><code>.takeUntil(trigger)</code>  类似的，持续发射，直到另一个Observable生成元素，后面不再发射。</p>\n<h3 id=\"Distinct\"><a href=\"#Distinct\" class=\"headerlink\" title=\"Distinct\"></a>Distinct</h3><p><code>.distinctUntilChanged()</code> 只发射不同于前一个的元素。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    .distinctUntilChanged()</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p> Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p><code>distinctUntilChanged(_:)</code> 对阻止重复发射不符合 <code>Equatable</code> 类型的元素时很有用。因为你可以控制前后两个元素是否相等。</p>\n<h2 id=\"第六章：Filtering-实践\"><a href=\"#第六章：Filtering-实践\" class=\"headerlink\" title=\"第六章：Filtering 实践\"></a>第六章：Filtering 实践</h2><p>上一章介绍了RxSwift中函数式编程的观念。操作符操作一个Observable，输出一个心得Observable。得益于此，我么可以链式调用操作符。</p>\n<h3 id=\"改进-Combinestagram-项目\"><a href=\"#改进-Combinestagram-项目\" class=\"headerlink\" title=\"改进 Combinestagram 项目\"></a>改进 Combinestagram 项目</h3><p>就是把上一章的 filtering 操作符应用在项目中。</p>\n<h3 id=\"基于时间的操作符\"><a href=\"#基于时间的操作符\" class=\"headerlink\" title=\"基于时间的操作符\"></a>基于时间的操作符</h3><p>基于时间的操作符使用 <strong>Scheduler</strong> 。</p>\n<p><code>take(_:scheduler:)</code> 是一个过滤操作符，和 <code>take(1)</code> 和 <code>takeWhile(...)</code> 类似。</p>\n<p>只会发送指定时间段内的元素。一旦时间点过了，就会发送 <code>.complete</code> 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">func</span> <span class=\"title function_\">errorMessage</span>() &#123;</span><br><span class=\"line\">  alert(title: <span class=\"string\">&quot;No access to Camera Roll&quot;</span>,</span><br><span class=\"line\">        text: <span class=\"string\">&quot;You can grant access to Combinestagram from the Settings app&quot;</span>)</span><br><span class=\"line\">    .asObservable()</span><br><span class=\"line\">    .take(<span class=\"number\">5.0</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .subscribe(onCompleted: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span><span class=\"operator\">?</span>.dismiss(animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">      <span class=\"keyword\">_</span> <span class=\"operator\">=</span> <span class=\"keyword\">self</span><span class=\"operator\">?</span>.navigationController<span class=\"operator\">?</span>.popViewController(animated: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以下是一些合适使用 <code>throttle</code> 的场景：</p>\n<ul>\n<li>搜索输入框的订阅，然后发送当前文本内容的API请求。通过 <code>throttle</code> , 你可以让用户快速输入，同时仅在用户完成输入时才你的向服务器发送请求。</li>\n<li>当用户点击按钮来展示一个 modal view controller 时，你可以阻止双击以及展示两次 modal view controller。通过 <code>throttle</code> 点击事件，可以现实只接收最后一次点击事件，不论用户双击或三击。</li>\n<li>如果你只关心用户拖动手势时停留的地方。你可以使用 <code>throttle</code> 当前触摸位置，只考虑那些停止改变的位置的元素。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">images.asObservable()</span><br><span class=\"line\">    .throttle(<span class=\"number\">0.5</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .subscribe(onNext: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] photos <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> preview <span class=\"operator\">=</span> <span class=\"keyword\">self</span><span class=\"operator\">?</span>.imagePreview <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      preview.image <span class=\"operator\">=</span> <span class=\"type\">UIImage</span>.collage(images: photos,</span><br><span class=\"line\">                                      size: preview.frame.size)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第七章：Transforming-Operator\"><a href=\"#第七章：Transforming-Operator\" class=\"headerlink\" title=\"第七章：Transforming Operator\"></a>第七章：Transforming Operator</h2><p>当你决定学习 RxSwift，或许会觉得它是深奥的库。也许让你想起来当初学习 iOS 或者 Swift 的时候。但学习到第七章你应该意识到 RxSwift 并非魔法。它是精心构建的API，能让极大地提升效率和简化代码。学到这里你应该会感觉不错。</p>\n<p>本章你将学习运算符中最重要的一类：transforming 运算符。你将一直使用 transforming，准备Observable数据以供订阅者使用。需要强调的是，RxSwift 中的 transforming 运算符与 Swift 标准库之间有相似之处 ，如 <code>map (_:)</code> 和 <code>flatMap (_:)</code> 。 </p>\n<h3 id=\"Transforming-元素\"><a href=\"#Transforming-元素\" class=\"headerlink\" title=\"Transforming 元素\"></a>Transforming 元素</h3><p>将可观察到的单个元素转换为所有这些元素的数组的一种简便方法是使用 <code>toArray</code>。<img src=\"https://gewill.org/assets/toArray.jpg\" alt=\"toArray\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">  .toArray()</span><br><span class=\"line\">  .subscribe(onNext: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<p><code>map</code> 可将每个元素进行 transforming 。<img src=\"https://gewill.org/assets/map.jpg\" alt=\"map\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> formatter <span class=\"operator\">=</span> <span class=\"type\">NumberFormatter</span>()</span><br><span class=\"line\">formatter.numberStyle <span class=\"operator\">=</span> .spellOut</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Observable</span>&lt;<span class=\"type\">NSNumber</span>&gt;.of(<span class=\"number\">123</span>, <span class=\"number\">4</span>, <span class=\"number\">56</span>)</span><br><span class=\"line\">    .map &#123;</span><br><span class=\"line\">        formatter.string(from: <span class=\"variable\">$0</span>) <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    .enumerated()</span><br><span class=\"line\">    .map &#123; index, integer <span class=\"keyword\">in</span></span><br><span class=\"line\">        index <span class=\"operator\">&gt;</span> <span class=\"number\">2</span> <span class=\"operator\">?</span> integer <span class=\"operator\">*</span> <span class=\"number\">2</span> : integer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Transforming-内部-Observable\"><a href=\"#Transforming-内部-Observable\" class=\"headerlink\" title=\"Transforming 内部 Observable\"></a>Transforming 内部 Observable</h3><p>RxSwift 包含 <code>flatMap</code> 系列中的几个运算符, 允许你深入Observable,处理其Observable类型的属性。<img src=\"https://gewill.org/assets/flatMap.jpg\" alt=\"flatMap\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> score: <span class=\"type\">BehaviorSubject</span>&lt;<span class=\"type\">Int</span>&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ryan <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">80</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> charlotte <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">90</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> student <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Student</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">student</span><br><span class=\"line\">    .flatMap &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span>.score</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">student.onNext(ryan)</span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">85</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">student.onNext(charlotte)</span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">95</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">charlotte.score.onNext(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<p>What makes</p>\n<p>flatMapLatest different is that it will automatically switch to the latest observable and</p>\n<p>unsubscribe from the the previous one.</p>\n<p><code>flatMapLatest</code> 和 <code>flatMap</code> 略有不同之处是它会自动切换到最后一个 Observable，注销订阅之前的 Observable。</p>\n<p><img src=\"https://gewill.org/assets/flatMapLatest.jpg\" alt=\"flatMapLatest\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ryan <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">80</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> charlotte <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">90</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> student <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Student</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">student</span><br><span class=\"line\">    .flatMapLatest &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span>.score</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">student.onNext(ryan)</span><br><span class=\"line\"></span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">85</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">student.onNext(charlotte)</span><br><span class=\"line\"></span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">95</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">charlotte.score.onNext(<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Only one thing to point out here that’s different from the previous example of flatMap:</span></span><br><span class=\"line\"><span class=\"comment\">// Changing ryan’s score here will have no effect. It will not be printed out. This is because flatMapLatest has already switched to the latest observable, for charlotte.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"观察事件\"><a href=\"#观察事件\" class=\"headerlink\" title=\"观察事件\"></a>观察事件</h3><p>使用具体化运算符 <code>materialize</code>, 可以将 Observable 发射的每个事件包装成 Observable。比如下面的例子中 <code>$0.score.materialize()</code>  将 <code>BehaviorSubject&lt;Int&gt;</code> 封装为  <code>Observable&lt;Event&lt;Int&gt;&gt;</code> 。这样的话，我的就可以自己处理 .error 和 .complete 事件，而不终结该 Observable 。</p>\n<p>对应的我们再使用 <code>.dematerialize()</code>  转回 <code>Observable&lt;Int&gt;</code> ，即可正常订阅。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">MyError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> anError</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ryan <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">80</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> charlotte <span class=\"operator\">=</span> <span class=\"type\">Student</span>(score: <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> student: <span class=\"type\">BehaviorSubject</span>&lt;<span class=\"type\">Student</span>&gt; <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: ryan)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> studentScore: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Event</span>&lt;<span class=\"type\">Int</span>&gt;&gt; <span class=\"operator\">=</span> student</span><br><span class=\"line\">    .flatMapLatest &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span>.score.materialize()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">studentScore</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"variable\">$0</span>.error <span class=\"operator\">==</span> <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>.error<span class=\"operator\">!</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .dematerialize()</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;subscribe: <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">85</span>)</span><br><span class=\"line\">ryan.score.onError(<span class=\"type\">MyError</span>.anError)</span><br><span class=\"line\">ryan.score.onNext(<span class=\"number\">90</span>)</span><br><span class=\"line\">student.onNext(charlotte)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">subscribe: 80</span><br><span class=\"line\">subscribe: 85</span><br><span class=\"line\">anError</span><br><span class=\"line\">subscribe: 100</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第八章：Transforming-实践\"><a href=\"#第八章：Transforming-实践\" class=\"headerlink\" title=\"第八章：Transforming 实践\"></a>第八章：Transforming 实践</h2><p>在上一章中学习了 RxSwift 的主要功能，包括：map 和 flatMap 。</p>\n<h3 id=\"开始-GitFeed-项目\"><a href=\"#开始-GitFeed-项目\" class=\"headerlink\" title=\"开始 GitFeed 项目\"></a>开始 GitFeed 项目</h3><p>本章中要处理的项目将显示 GitHub 仓库的动态, 如所有最新的 like, fork 和 comment.。</p>\n<p>该项目将有两个不同的故事情节:</p>\n<ul>\n<li>主要的情节是要接触到 GitHub 的 JSON API, 接收 JSON 响应, 并最终将其转换为对象集合.    </li>\n<li>次要将提取的对象保存到磁盘并在 “新” 活动列表之前的表中显示它们。从服务器获取事件。</li>\n</ul>\n<h3 id=\"网络获取数据\"><a href=\"#网络获取数据\" class=\"headerlink\" title=\"网络获取数据\"></a>网络获取数据</h3><p>我们将会将 URLSession 添加个响应式拓展。</p>\n<p><img src=\"https://gewill.org/assets/CocoaAPIToRxAPI.jpeg\" alt=\"CocoaAPIToRxAPI\"></p>\n<p>具体就是把网络API的请求和响应分别封装起来：</p>\n<p>其中 <code>share(replay:, scope:)</code> ，可以避免 <code>URLSession.rx.response(request:)</code> 因过早 .complete 造成订阅时重新发送网络请求。原理就是封装多个 Observable 的元素为一个新的 Observable，并指定缓冲区最大元素数量，生命周期。定义如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">share</span>(<span class=\"params\">replay</span>: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"keyword\">default</span>, <span class=\"params\">scope</span>: <span class=\"type\">SubjectLifetimeScope</span> <span class=\"operator\">=</span> <span class=\"keyword\">default</span>)</span><br></pre></td></tr></table></figure>\n\n<p>代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchEvents</span>(<span class=\"params\">repo</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 1. 使用 map 构造一个请求</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.from([repo])</span><br><span class=\"line\">            .map &#123; urlString -&gt; <span class=\"type\">URL</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;https://api.github.com/repos/<span class=\"subst\">\\(urlString)</span>/events&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .map &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] url -&gt; <span class=\"type\">URLRequest</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> request <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: url)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> modifiedHeader <span class=\"operator\">=</span> <span class=\"keyword\">self</span><span class=\"operator\">?</span>.lastModified.value &#123;</span><br><span class=\"line\">                    request.addValue(modifiedHeader <span class=\"keyword\">as</span> <span class=\"type\">String</span>,</span><br><span class=\"line\">                        forHTTPHeaderField: <span class=\"string\">&quot;Last-Modified&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> request</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .flatMap &#123; request -&gt; <span class=\"type\">Observable</span>&lt;(response: <span class=\"type\">HTTPURLResponse</span>, data: <span class=\"type\">Data</span>)&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">URLSession</span>.shared.rx.response(request: request)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .share(replay: <span class=\"number\">1</span>, scope: .whileConnected)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 转换响应</span></span><br><span class=\"line\">        response</span><br><span class=\"line\">            .filter &#123; response, <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                 <span class=\"comment\">// 检查右边的值是否在左边的 range 内</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">200</span><span class=\"operator\">..&lt;</span><span class=\"number\">300</span> <span class=\"operator\">~=</span> response.statusCode</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .map &#123; <span class=\"keyword\">_</span>, data -&gt; [[<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>]] <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> jsonObject <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSONSerialization</span>.jsonObject(with: data, options: []),</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> jsonObject <span class=\"keyword\">as?</span> [[<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>]] <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .filter &#123; objects <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> objects.count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .map &#123; objects <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> objects.flatMap(<span class=\"type\">Event</span>.<span class=\"keyword\">init</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .subscribe(onNext: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] newEvents <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">self</span><span class=\"operator\">?</span>.processEvents(newEvents)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">        response</span><br><span class=\"line\">            .filter &#123; response, <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">200</span><span class=\"operator\">..&lt;</span><span class=\"number\">400</span> <span class=\"operator\">~=</span> response.statusCode</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .flatMap &#123; response, <span class=\"keyword\">_</span> -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">NSString</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value <span class=\"operator\">=</span> response.allHeaderFields[<span class=\"string\">&quot;Last-Modified&quot;</span>] <span class=\"keyword\">as?</span> <span class=\"type\">NSString</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.empty()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.just(value)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .subscribe(onNext: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] modifiedHeader <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf <span class=\"operator\">=</span> <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">                strongSelf.lastModified.value <span class=\"operator\">=</span> modifiedHeader</span><br><span class=\"line\">                <span class=\"keyword\">try?</span> modifiedHeader.write(to: strongSelf.modifiedFileURL, atomically: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    encoding: <span class=\"type\">String</span>.<span class=\"type\">Encoding</span>.utf8.rawValue)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .disposed(by: bag)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第九章：合并Operator\"><a href=\"#第九章：合并Operator\" class=\"headerlink\" title=\"第九章：合并Operator\"></a>第九章：合并Operator</h2><p>在前面的章节中, 你学习了如何创建、ﬁlter 和转换可观察序列。RxSwift ﬁltering 和转换运算符的行为与 Swift 的标准集合运算符非常相似。你看到了 RxSwift 与 flatMap 的真正力量, 它让你用很少的代码执行很多任务.   </p>\n<p>这一章将向你展示几种不同的组合序列的方法, 以及如何在每个序列中组合数据。你将使用的一些操作员与 Swift 集合操作员非常相似。它们有助于结合异步序列中的元素, 就像使用 Swift 数组一样。</p>\n<h3 id=\"前缀和串联\"><a href=\"#前缀和串联\" class=\"headerlink\" title=\"前缀和串联\"></a>前缀和串联</h3><p>从 <code>startWith(_:)</code> 运算符赋值给定初始值的可观察序列。此值必须与可观察元素的类型相同。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> numbers.startWith(<span class=\"number\">1</span>) observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(value) &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>类似地 <code>.concat(_:)</code> 可以合并两个序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> first <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"keyword\">let</span> second <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.concat([first, second])</span><br><span class=\"line\">observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span> <span class=\"built_in\">print</span>(value) &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h3><p>Merge 也是合并，不过会按照顺序发射事件。</p>\n<p><img src=\"https://gewill.org/assets/merge.jpg\" alt=\"merge\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> left <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> right <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> source <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(left.asObservable(), right.asObservable())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> source.merge()</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> leftValues <span class=\"operator\">=</span> [<span class=\"string\">&quot;Berlin&quot;</span>, <span class=\"string\">&quot;Munich&quot;</span>, <span class=\"string\">&quot;Frankfurt&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> rightValues <span class=\"operator\">=</span> [<span class=\"string\">&quot;Madrid&quot;</span>, <span class=\"string\">&quot;Barcelona&quot;</span>, <span class=\"string\">&quot;Valencia&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">repeat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> arc4random_uniform(<span class=\"number\">2</span>) <span class=\"operator\">==</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"operator\">!</span>leftValues.isEmpty &#123;</span><br><span class=\"line\">            left.onNext(<span class=\"string\">&quot;Left:  &quot;</span> <span class=\"operator\">+</span> leftValues.removeFirst())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"operator\">!</span>rightValues.isEmpty &#123;</span><br><span class=\"line\">        right.onNext(<span class=\"string\">&quot;Right: &quot;</span> <span class=\"operator\">+</span> rightValues.removeFirst())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> <span class=\"operator\">!</span>leftValues.isEmpty <span class=\"operator\">||</span> <span class=\"operator\">!</span>rightValues.isEmpty</span><br><span class=\"line\"></span><br><span class=\"line\">disposable.dispose()</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Right: Madrid</span><br><span class=\"line\">Right: Barcelona</span><br><span class=\"line\">Left:  Berlin</span><br><span class=\"line\">Left:  Munich</span><br><span class=\"line\">Left:  Frankfurt</span><br><span class=\"line\">Right: Valencia</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Combining-元素\"><a href=\"#Combining-元素\" class=\"headerlink\" title=\"Combining 元素\"></a>Combining 元素</h3><p>RxSwift中一组基本的运算符是 <code>combineLatest</code> 。他们组合来自几个序列的值：</p>\n<p><img src=\"https://gewill.org/assets/Combining%20elements.jpg\" alt=\"Combining elements\"></p>\n<p>Every time one of the inner (combined) sequences emits a value, it calls a closure you provide. You receive the last value from each of the inner sequences. This has many concrete applications, such as observing several text ﬁelds at once and combining their value, watching the status of multiple sources, and so on.</p>\n<p>每当内部（组合）序列中的一个发出一个值时，它会调用您提供的闭包。 你会收到每个内部序列的最后一个值。 这里有很多具体的应用场景，例如一次观察几个文本字段并结合它们的价值，观察多个来源的状态等等。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> left <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> right <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.combineLatest(left, right, resultSelector: &#123;</span><br><span class=\"line\">    lastLeft, lastRight <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;<span class=\"subst\">\\(lastLeft)</span> <span class=\"subst\">\\(lastRight)</span>&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt; Sending a value to Left&quot;</span>)</span><br><span class=\"line\">left.onNext(<span class=\"string\">&quot;Hello,&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt; Sending a value to Right&quot;</span>)</span><br><span class=\"line\">right.onNext(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt; Sending another value to Right&quot;</span>)</span><br><span class=\"line\">right.onNext(<span class=\"string\">&quot;RxSwift&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt; Sending another value to Left&quot;</span>)</span><br><span class=\"line\">left.onNext(<span class=\"string\">&quot;Have a good day,&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">disposable.dispose()</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; Sending a value to Left</span><br><span class=\"line\">&gt; Sending a value to Right</span><br><span class=\"line\">Hello, world</span><br><span class=\"line\">&gt; Sending another value to Right</span><br><span class=\"line\">Hello, RxSwift</span><br><span class=\"line\">&gt; Sending another value to Left</span><br><span class=\"line\">Have a good day, RxSwift</span><br></pre></td></tr></table></figure>\n\n<p><code>zip</code> 总是按照顺序一对一对的组合。类似把两个数组按照相同的下标进行组合。</p>\n<p> <img src=\"https://gewill.org/assets/zip.jpg\" alt=\"zip\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Weather</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> cloudy</span><br><span class=\"line\">    <span class=\"keyword\">case</span> sunny</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> left: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Weather</span>&gt; <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(.sunny, .cloudy, .cloudy, .sunny)</span><br><span class=\"line\"><span class=\"keyword\">let</span> right <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"string\">&quot;Lisbon&quot;</span>, <span class=\"string\">&quot;Copenhagen&quot;</span>, <span class=\"string\">&quot;London&quot;</span>, <span class=\"string\">&quot;Madrid&quot;</span>, <span class=\"string\">&quot;Vienna&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.zip(left, right) &#123; weather, city <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;It&#x27;s <span class=\"subst\">\\(weather)</span> in <span class=\"subst\">\\(city)</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">It&#x27;s sunny in Lisbon</span><br><span class=\"line\">It&#x27;s cloudy in Copenhagen</span><br><span class=\"line\">It&#x27;s cloudy in London</span><br><span class=\"line\">It&#x27;s sunny in Madrid</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h3><p>应用程序有不同的需求，必须管理多个输入源。 你经常需要立即接受来自多个观察对象的输入。 有些会简单地在代码中触发行为，而其他的将提供数据。 RxSwift 已经覆盖了强大的运算符这会让你的生活更轻松。 或者，至少你的编码生活！</p>\n<p>首先看看 <code>withLatestFrom(_:)</code>。 经常被初学者忽略，它在处理用户界面等方面是一个有用的配套工具。<img src=\"https://gewill.org/assets/trigger.jpg\" alt=\"trigger\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> button <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Void</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> textField <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> button.withLatestFrom(textField)</span><br><span class=\"line\"><span class=\"keyword\">_</span> <span class=\"operator\">=</span> observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">textField.onNext(<span class=\"string\">&quot;Par&quot;</span>)</span><br><span class=\"line\">textField.onNext(<span class=\"string\">&quot;Pari&quot;</span>)</span><br><span class=\"line\">textField.onNext(<span class=\"string\">&quot;Paris&quot;</span>)</span><br><span class=\"line\">button.onNext(())</span><br><span class=\"line\">button.onNext(())</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Paris</span><br><span class=\"line\">Paris</span><br></pre></td></tr></table></figure>\n\n<p><code>sample(_:)</code> 和 几乎只有一个变化：每当触发器observable发射一个值时，<code>sample(_:)</code> 从其它的可观察值发出最新值，但只有在自上一次元素后才到达。 如果没有新的数据到达，<code>sample(_:)</code> 将不会发射任何东西。<img src=\"https://gewill.org/assets/sample.jpg\" alt=\"sample\"></p>\n<h3 id=\"Switches\"><a href=\"#Switches\" class=\"headerlink\" title=\"Switches\"></a>Switches</h3><p><img src=\"https://gewill.org/assets/Switches.jpg\" alt=\"Switches\"></p>\n<p><code>amb(_:)</code> 运算符订阅左侧和右侧的可观察序列。 它等待其中任何一个发出一个元素，然后退订另一个序列。 之后，它只传递第一个活动可观察元素。 它可以从模棱两可中选出一个：首先，你不知道你感兴趣的是哪一个序列，等其中先发射一个序列再做决定。</p>\n<p>这个运算符经常被忽视。 它有一些精选的实际应用场景，如连接到冗余服务器，并坚持使用第一个响应的服务器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> left <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> right <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> left.amb(right)</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">left.onNext(<span class=\"string\">&quot;Lisbon&quot;</span>)</span><br><span class=\"line\">right.onNext(<span class=\"string\">&quot;Copenhagen&quot;</span>)</span><br><span class=\"line\">left.onNext(<span class=\"string\">&quot;London&quot;</span>)</span><br><span class=\"line\">left.onNext(<span class=\"string\">&quot;Madrid&quot;</span>)</span><br><span class=\"line\">right.onNext(<span class=\"string\">&quot;Vienna&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">disposable.dispose()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>更流行的选项是 <code>switchLatest()</code> 运算符：</p>\n<p>可以自由切换偏爱那个子序列发射的元素。<img src=\"https://gewill.org/assets/switchLatest.jpg\" alt=\"switchLatest\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> one <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> two <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">let</span> three <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> source <span class=\"operator\">=</span> <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> source.switchLatest()</span><br><span class=\"line\"><span class=\"keyword\">let</span> disposable <span class=\"operator\">=</span> observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">source.onNext(one)</span><br><span class=\"line\">one.onNext(<span class=\"string\">&quot;Some text from sequence one&quot;</span>)</span><br><span class=\"line\">two.onNext(<span class=\"string\">&quot;Some text from sequence two&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">source.onNext(two)</span><br><span class=\"line\">two.onNext(<span class=\"string\">&quot;More text from sequence two&quot;</span>)</span><br><span class=\"line\">one.onNext(<span class=\"string\">&quot;and also from sequence one&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">source.onNext(three)</span><br><span class=\"line\">two.onNext(<span class=\"string\">&quot;Why don&#x27;t you seem me?&quot;</span>)</span><br><span class=\"line\">one.onNext(<span class=\"string\">&quot;I&#x27;m alone, help me&quot;</span>)</span><br><span class=\"line\">three.onNext(<span class=\"string\">&quot;Hey it&#x27;s three. I win.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">source.onNext(one)</span><br><span class=\"line\">one.onNext(<span class=\"string\">&quot;Nope. It&#x27;s me, one!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">disposable.dispose()</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Some text from sequence one</span><br><span class=\"line\">More text from sequence two</span><br><span class=\"line\">Hey it&#x27;s three. I win.</span><br><span class=\"line\">Nope. It&#x27;s me, one!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>形成可观察序列的心智模型可能很困难。 别担心， 你会习惯它。 <strong>练习是顺序理解序列的关键</strong>。 随着您的体验增长，请随时审查这些示例！ 你将在下一章中更好地了解如何使用它。</p>\n<h3 id=\"Combining-一个序列中元素\"><a href=\"#Combining-一个序列中元素\" class=\"headerlink\" title=\"Combining 一个序列中元素\"></a>Combining 一个序列中元素</h3><p>所有的厨师都知道你减少得越多，酱汁就越美味。 虽然不是针对厨师，但 RxSwift 拥有将酱汁减少到最有味道的组分的工具。</p>\n<p><code>reduce(_:_:)</code> 和 Swift 标准库中类似。<img src=\"https://gewill.org/assets/reduce.jpg\" alt=\"reduce\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> source.reduce(<span class=\"number\">0</span>, accumulator: &#123; summary, newValue <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> summary <span class=\"operator\">+</span> newValue</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">25</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>scan(_:accumulator:)</code> 和<code>reduce(_:_:)</code> 只有一个最终结果不同：每次发射事件，都会计算结果并发射。<img src=\"https://gewill.org/assets/scan.jpg\" alt=\"scan\"></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> source.scan(<span class=\"number\">0</span>, accumulator: <span class=\"operator\">+</span>)</span><br><span class=\"line\">observable.subscribe(onNext: &#123; value <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Console 输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">9</span><br><span class=\"line\">16</span><br><span class=\"line\">25</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十章：合并Operator实践\"><a href=\"#第十章：合并Operator实践\" class=\"headerlink\" title=\"第十章：合并Operator实践\"></a>第十章：合并Operator实践</h2><p>在前一章中，你学习了将操作符合并，并通过对一些相当令人头脑灵活的概念进行越来越详细的练习。 一些运算符可能会让你对这些反应性概念的真实应用感到疑惑。<br>在“……实践”一章中，你将有机会尝试一些最强大的运算符。 你将学会解决类似于你在自己的应用程序中遇到的问题。</p>\n<h3 id=\"准备网络后端服务\"><a href=\"#准备网络后端服务\" class=\"headerlink\" title=\"准备网络后端服务\"></a>准备网络后端服务</h3><p>这里使用NASA的EONET服务。</p>\n<p>我们称之为EONET服务。 它抽象访问由EONET服务器公开的数据，将它们作为服务提供给你的应用程序。 你会看到，结合Rx，这种模式将找到许多应用程序。 它可以让你在应用程序内清晰地分离数据生产和消耗。 你可以轻松替换或模拟生产环境，而不会对用户方面产生任何影响。</p>\n<p>先封装一个通用网络请求，然后把 categories 封装为单例，方便所有订阅者订阅。</p>\n<h3 id=\"Categories-view-controller\"><a href=\"#Categories-view-controller\" class=\"headerlink\" title=\"Categories view controller\"></a>Categories view controller</h3><p>categories view controller 显示 categories 列表。</p>\n<h3 id=\"Adding-the-event-download-service\"><a href=\"#Adding-the-event-download-service\" class=\"headerlink\" title=\"Adding the event download service\"></a>Adding the event download service</h3><h3 id=\"Getting-events-for-categories\"><a href=\"#Getting-events-for-categories\" class=\"headerlink\" title=\"Getting events for categories\"></a>Getting events for categories</h3><h3 id=\"Events-view-controller\"><a href=\"#Events-view-controller\" class=\"headerlink\" title=\"Events view controller\"></a>Events view controller</h3><h3 id=\"Wiring-the-days-selector\"><a href=\"#Wiring-the-days-selector\" class=\"headerlink\" title=\"Wiring the days selector\"></a>Wiring the days selector</h3><h3 id=\"Splitting-event-downloads\"><a href=\"#Splitting-event-downloads\" class=\"headerlink\" title=\"Splitting event downloads\"></a>Splitting event downloads</h3><h2 id=\"第十一章：基于时间的Operator\"><a href=\"#第十一章：基于时间的Operator\" class=\"headerlink\" title=\"第十一章：基于时间的Operator\"></a>第十一章：基于时间的Operator</h2><p>时间就是一切。响应式编程背后的核心思想是基于时间异步数据流的模型。在这方面, RxSwift 提供了一系列操作, 使你能够处理时间和序列在一段时间内的响应和转换方式。正如你将在本章中看到的, 管理序列的时间维度是简单而直接的。</p>\n"},{"title":"RxSwift Ⅲ：iOS 应用程序与 RxCocoa","url":"/2018/08/01/RxSwift-%E2%85%A2/","content":"<p>由于Rx是一个多平台框架，因此它不会对您的Rx驱动的应用程序运行的设备做出任何假设。 RxSwift严格遵循RxPython，RxRuby，RxJS和所有其他平台所遵循的通用API设计，因此它不包含任何特定功能或与UIKit或Cocoa的集成，以帮助您开发iOS或macOS。</p>\n<p>RxCocoa是一个独立的库（尽管它与RxSwift捆绑在一起），它允许您使用许多预构建的功能来更好地与UIKit和Cocoa集成。</p>\n<p>RxCocoa将为您提供开箱即用的类来进行反应式网络，对用户交互作出反应，将数据模型绑定到UI控件等等。</p>\n<h2 id=\"第十二章：开始学习-RxCocoa\"><a href=\"#第十二章：开始学习-RxCocoa\" class=\"headerlink\" title=\"第十二章：开始学习 RxCocoa\"></a>第十二章：开始学习 RxCocoa</h2><p>更新天气信息界面，根据API获取的数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApiController</span>.shared.currentWeather(city: <span class=\"string\">&quot;RxSwift&quot;</span>)</span><br><span class=\"line\">      .observeOn(<span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">      .subscribe(onNext: &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.tempLabel.text <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\(data.temperature)</span>° C&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.iconLabel.text <span class=\"operator\">=</span> data.icon</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.humidityLabel.text <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\(data.humidity)</span>%&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cityNameLabel.text <span class=\"operator\">=</span> data.cityName</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> search <span class=\"operator\">=</span> searchCityName.rx.controlEvent(.editingDidEndOnExit).asObservable()</span><br><span class=\"line\">      .map &#123; <span class=\"keyword\">self</span>.searchCityName.text &#125;</span><br><span class=\"line\">      .filter &#123; (<span class=\"variable\">$0</span> <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span>).characters.count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">      .flatMapLatest &#123; text <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.currentWeather(city: text <span class=\"operator\">??</span> <span class=\"string\">&quot;Error&quot;</span>)</span><br><span class=\"line\">          .catchErrorJustReturn(<span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.empty)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .asDriver(onErrorJustReturn: <span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.empty)</span><br><span class=\"line\"></span><br><span class=\"line\">    search.map &#123; <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>.temperature)</span>° C&quot;</span> &#125;</span><br><span class=\"line\">      .drive(tempLabel.rx.text)</span><br><span class=\"line\">      .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\">    search.map &#123; <span class=\"variable\">$0</span>.icon &#125;</span><br><span class=\"line\">      .drive(iconLabel.rx.text)</span><br><span class=\"line\">      .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\">    search.map &#123; <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>.humidity)</span>%&quot;</span> &#125;</span><br><span class=\"line\">      .drive(humidityLabel.rx.text)</span><br><span class=\"line\">      .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\">    search.map &#123; <span class=\"variable\">$0</span>.cityName &#125;</span><br><span class=\"line\">      .drive(cityNameLabel.rx.text)</span><br><span class=\"line\">      .disposed(by:bag)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十三章：RxCocoa-中级\"><a href=\"#第十三章：RxCocoa-中级\" class=\"headerlink\" title=\"第十三章：RxCocoa 中级\"></a>第十三章：RxCocoa 中级</h2><p>添加搜索框支持</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">  style()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> searchInput <span class=\"operator\">=</span> searchCityName.rx.controlEvent(.editingDidEndOnExit).asObservable()</span><br><span class=\"line\">    .map &#123; <span class=\"keyword\">self</span>.searchCityName.text &#125;</span><br><span class=\"line\">    .filter &#123; (<span class=\"variable\">$0</span> <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span>).count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> textSearch <span class=\"operator\">=</span> searchInput.flatMap &#123; text <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.currentWeather(city: text <span class=\"operator\">??</span> <span class=\"string\">&quot;Error&quot;</span>)</span><br><span class=\"line\">      .catchErrorJustReturn(<span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.dummy)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mapInput <span class=\"operator\">=</span> mapView.rx.regionDidChangeAnimated</span><br><span class=\"line\">    .skip(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.mapView.centerCoordinate &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> mapSearch <span class=\"operator\">=</span> mapInput.flatMap &#123; coordinate <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.currentWeather(lat: coordinate.latitude, lon: coordinate.longitude)</span><br><span class=\"line\">      .catchErrorJustReturn(<span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.dummy)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentLocation <span class=\"operator\">=</span> locationManager.rx.didUpdateLocations</span><br><span class=\"line\">    .map &#123; locations <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> locations[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .filter &#123; location <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> location.horizontalAccuracy <span class=\"operator\">&lt;</span> kCLLocationAccuracyHundredMeters</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> geoInput <span class=\"operator\">=</span> geoLocationButton.rx.tap.asObservable()</span><br><span class=\"line\">    .do(onNext: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.locationManager.requestWhenInUseAuthorization()</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.locationManager.startUpdatingLocation()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> geoLocation <span class=\"operator\">=</span> geoInput.flatMap &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentLocation.take(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> geoSearch <span class=\"operator\">=</span> geoLocation.flatMap &#123; location <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.currentWeather(lat: location.coordinate.latitude, lon: location.coordinate.longitude)</span><br><span class=\"line\">      .catchErrorJustReturn(<span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.dummy)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> search <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.from([geoSearch, textSearch, mapSearch])</span><br><span class=\"line\">  .merge()</span><br><span class=\"line\">  .asDriver(onErrorJustReturn: <span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.dummy)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> running <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.from([searchInput.map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">                                 geoInput.map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">                                 mapInput.map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">                                 search.map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">false</span> &#125;.asObservable()])</span><br><span class=\"line\">  .merge()</span><br><span class=\"line\">  .startWith(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  .asDriver(onErrorJustReturn: <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  running</span><br><span class=\"line\">    .skip(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .drive(activityIndicator.rx.isAnimating)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\">  </span><br><span class=\"line\">  running</span><br><span class=\"line\">    .drive(tempLabel.rx.isHidden)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  running</span><br><span class=\"line\">    .drive(iconLabel.rx.isHidden)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  running</span><br><span class=\"line\">    .drive(humidityLabel.rx.isHidden)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  running</span><br><span class=\"line\">    .drive(cityNameLabel.rx.isHidden)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\">  </span><br><span class=\"line\">  search.map &#123; <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>.temperature)</span>° C&quot;</span> &#125;</span><br><span class=\"line\">    .drive(tempLabel.rx.text)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  search.map &#123; <span class=\"variable\">$0</span>.icon &#125;</span><br><span class=\"line\">    .drive(iconLabel.rx.text)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  search.map &#123; <span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>.humidity)</span>%&quot;</span> &#125;</span><br><span class=\"line\">    .drive(humidityLabel.rx.text)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  search.map &#123; <span class=\"variable\">$0</span>.cityName &#125;</span><br><span class=\"line\">    .drive(cityNameLabel.rx.text)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  locationManager.rx.didUpdateLocations</span><br><span class=\"line\">    .subscribe(onNext: &#123; locations <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(locations)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  mapButton.rx.tap</span><br><span class=\"line\">    .subscribe(onNext: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.mapView.isHidden <span class=\"operator\">=</span> <span class=\"operator\">!</span><span class=\"keyword\">self</span>.mapView.isHidden</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  mapView.rx.setDelegate(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\"></span><br><span class=\"line\">  search.map &#123; [<span class=\"variable\">$0</span>.overlay()] &#125;</span><br><span class=\"line\">    .drive(mapView.rx.overlays)</span><br><span class=\"line\">    .disposed(by: bag)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"RxSwift Ⅳ：RxSwift 和 RxCocoa 进阶","url":"/2018/08/01/RxSwift-%E2%85%A3/","content":"<p>一旦你开始编写完整的应用程序与 RxSwift 和 RxCocoa, 你也需要照顾更多的中间主题比简单地观察事件和处理他们与 Rx。</p>\n<p>在一个完整的生产质量应用程序中, 您需要构建一个错误处理策略, 执行更高级的多线程处理, 创建一个坚实的测试套件等等。</p>\n<p>在这部分, 你将通过学习四个挑战性的章节, 这将解除您的 Rx 从一个菜鸟级的状态到一个实战经验的战士。</p>\n<h2 id=\"第十四章：错误处理实践\"><a href=\"#第十四章：错误处理实践\" class=\"headerlink\" title=\"第十四章：错误处理实践\"></a>第十四章：错误处理实践</h2><p>生活将是美好的, 如果我们生活在一个完美的世界, 但不幸的事情往往不像预期的那样去。即使是最好的 RxSwift 开发人员也不能避免遇到错误, 因此他们需要知道如何优雅和高效地处理它们。在本章中, 您将学习如何处理错误, 如何通过重试来管理错误恢复, 或者只是向整个宇宙投降, 让错误继续。</p>\n<h3 id=\"管理错误\"><a href=\"#管理错误\" class=\"headerlink\" title=\"管理错误\"></a>管理错误</h3><p>常见错误类型：网络连接失败、无效的输入和API错误或者HTTP错误。</p>\n<p>在 RxSwift 中, 错误处理是框架的一部分, 可以通过两种方式进行处理:    </p>\n<ul>\n<li><strong>Catch</strong>: 从错误中恢复并使用默认值。   </li>\n<li><strong>Retry</strong>: 重试有限 (或无限制) 次数。</li>\n</ul>\n<p>本章项目的起始版本没有任何实际的错误处理。所有错误都是用一个返回虚拟版本的 <code>catchErrorJustReturn</code> 捕获的。这听起来像是一个方便的解决方案, 但是在 RxSwift 中有更好的处理方法。在任何一流的应用程序中, 都应该有一个一致的、信息错误处理方法。</p>\n<h4 id=\"抛出错误\"><a href=\"#抛出错误\" class=\"headerlink\" title=\"抛出错误\"></a>抛出错误</h4><p>一个好的起点是处理 RxCocoa 错误，它包装底层 Apple 框架返回的系统错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">data</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Data</span>&gt; &#123;<span class=\"operator\">...</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">200</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">300</span> <span class=\"operator\">~=</span> response.statusCode &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"type\">RxCocoaURLError</span>.httpRequestFailed(response: response, data: data) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用-catch-处理错误\"><a href=\"#用-catch-处理错误\" class=\"headerlink\" title=\"用 catch 处理错误\"></a>用 catch 处理错误</h3><p>在解释如何抛出错误之后, 是时候看看如何处理错误了。最基本的方法是使用 catch。catch 的工作方式很像在Swift 中的 <code>do-try-catch</code> 流程。执行可观察的操作, 如果出现错误, 则返回包装错误的事件。</p>\n<p>在 RxSwift 中有两个主要的运算符来捕获错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">catchError</span>(<span class=\"keyword\">_</span> <span class=\"params\">handler</span>:) -&gt; <span class=\"type\">RxSwift</span>.<span class=\"type\">Observable</span>&lt;<span class=\"keyword\">Self</span>.<span class=\"type\">E</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">catchErrorJustReturn</span>(<span class=\"keyword\">_</span> <span class=\"params\">element</span>:) -&gt; <span class=\"type\">RxSwift</span>.<span class=\"type\">Observable</span>&lt;<span class=\"keyword\">Self</span>.<span class=\"type\">E</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一个常见的陷阱\"><a href=\"#一个常见的陷阱\" class=\"headerlink\" title=\"一个常见的陷阱\"></a>一个常见的陷阱</h4><p>链式调用时候，一个错误就会导致整个订阅以错误结束。有的时候我们想知道错误的仅有一步细节，如 HTTP 404 错误，属于 API 返回错误的具体信息的约定，就需要移除 <code>.catchErrorJustReturn(ApiController.Weather.empty)</code> 来避免出现不期望的错误事件发射。</p>\n<h3 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h3><p>我们先定义一个属性来缓存天气数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cache <span class=\"operator\">=</span> [<span class=\"type\">String</span>: <span class=\"type\">Weather</span>]()</span><br></pre></td></tr></table></figure>\n\n<p>再把输入框的序列改为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> textSearch <span class=\"operator\">=</span> searchInput.flatMap &#123; text <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.currentWeather(city: text <span class=\"operator\">??</span> <span class=\"string\">&quot;Error&quot;</span>)</span><br><span class=\"line\">    .do(onNext: &#123; data <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text <span class=\"operator\">=</span> text &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.cache[text] <span class=\"operator\">=</span> data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, onError: &#123; [<span class=\"keyword\">weak</span> <span class=\"keyword\">self</span>] e <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> strongSelf <span class=\"operator\">=</span> <span class=\"keyword\">self</span> <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\">        strongSelf.showError(error: e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .retryWhen(retryHandler)</span><br><span class=\"line\">    .catchError &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text <span class=\"operator\">=</span> text, <span class=\"keyword\">let</span> cachedData <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.cache[text] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.just(cachedData)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.just(<span class=\"type\">ApiController</span>.<span class=\"type\">Weather</span>.empty)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误的重试机制\"><a href=\"#错误的重试机制\" class=\"headerlink\" title=\"错误的重试机制\"></a>错误的重试机制</h3><p>关于重试上面已经设计到了 <code>.retryWhen(retryHandler)</code>，具体处理实现如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> retryHandler: (<span class=\"type\">Observable</span>&lt;<span class=\"type\">Error</span>&gt;) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"operator\">=</span> &#123; e <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> e.enumerated().flatMap &#123; (attempt, error) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> attempt <span class=\"operator\">&gt;=</span> maxAttempts <span class=\"operator\">-</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.error(error)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> casted <span class=\"operator\">=</span> error <span class=\"keyword\">as?</span> <span class=\"type\">ApiController</span>.<span class=\"type\">ApiError</span>, casted <span class=\"operator\">==</span> .invalidKey &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">ApiController</span>.shared.apiKey.filter &#123;<span class=\"variable\">$0</span> <span class=\"operator\">!=</span> <span class=\"string\">&quot;&quot;</span>&#125;.map &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;== retrying after <span class=\"subst\">\\(attempt <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span> seconds ==&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt;.timer(<span class=\"type\">Double</span>(attempt <span class=\"operator\">+</span> <span class=\"number\">1</span>), scheduler: \t\t\t\t<span class=\"type\">MainScheduler</span>.instance).take(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者简化版：<code>.retry(3)</code></p>\n<h3 id=\"自定义错误\"><a href=\"#自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h3><p>创建自定义错误遵循一般的 Swift 原则, 所以没有一个好的 Swift 程序员不会知道, 但它仍然是好的, 看看如何处理错误和创建定制的操作符。</p>\n<h4 id=\"创建自定义错误\"><a href=\"#创建自定义错误\" class=\"headerlink\" title=\"创建自定义错误\"></a>创建自定义错误</h4><p>先定义错误枚举，然后在结果过滤中抛出定义的错误即可。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ApiError</span>: <span class=\"title class_\">Error</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> cityNotFound</span><br><span class=\"line\">  <span class=\"keyword\">case</span> serverFailure</span><br><span class=\"line\">  <span class=\"keyword\">case</span> invalidKey</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> session.rx.response(request: request).map() &#123; response, data <span class=\"keyword\">in</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"number\">200</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">300</span> <span class=\"operator\">~=</span> response.statusCode &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> <span class=\"type\">JSON</span>(data: data)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> response.statusCode <span class=\"operator\">==</span> <span class=\"number\">401</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"type\">ApiError</span>.invalidKey</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"number\">400</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">500</span> <span class=\"operator\">~=</span> response.statusCode &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"type\">ApiError</span>.cityNotFound</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"type\">ApiError</span>.serverFailure</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>订阅者可以根据实际场景把错误展示给用户，这部分和 Swift 中自定义错误一致，就不展开讲了。</p>\n<h3 id=\"错误处理进阶\"><a href=\"#错误处理进阶\" class=\"headerlink\" title=\"错误处理进阶\"></a>错误处理进阶</h3><p>比如处理API 中 401 类型，需要提示用户授权失败，需要重新登录或授权。本例中需要是指API Key 失效，需要用户填写新的有效的API Key。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> response.statusCode <span class=\"operator\">==</span> <span class=\"number\">401</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"type\">ApiError</span>.invalidKey</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Materialize-和-dematerialize\"><a href=\"#Materialize-和-dematerialize\" class=\"headerlink\" title=\"Materialize 和 dematerialize\"></a>Materialize 和 dematerialize</h4><p>materialize 和 dematerialize 通常一起使用, 并且有能力完全打破原始可观察的合同。当没有其他选择来处理特定的情况时, 请小心地使用它们, 并且只有在必要的时候。</p>\n<p>常见的应用是：进行日志记录</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">observableToLog.materialize()</span><br><span class=\"line\">\t.do(onNext: &#123; (event) <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t\tmyAdvancedLogEvent(event) </span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">\t.dematerialize()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十五章：介绍调度程序\"><a href=\"#第十五章：介绍调度程序\" class=\"headerlink\" title=\"第十五章：介绍调度程序\"></a>第十五章：介绍调度程序</h2><p>到目前为止，您已经设法使用调度程序，同时避免任何有关它们如何处理线程或并发的解释。 在前面的章节中，您使用了隐式使用某种并发&#x2F;线程级别的方法，例如<code>buffer</code>，<code>delaySubscription</code>或<code>interval</code>运算符。</p>\n<p>您可能感觉调度程序有一些神奇的东西，但在您了解调度程序之前，您还需要了解那些<code>observeOn</code>函数的全部内容。</p>\n<p>本章将介绍调度程序背后的美观，在这里您将了解为什么Rx抽象如此强大以及为什么使用异步编程远比使用锁或队列更省心。</p>\n<h3 id=\"调度程序到底是什么？\"><a href=\"#调度程序到底是什么？\" class=\"headerlink\" title=\"调度程序到底是什么？\"></a>调度程序到底是什么？</h3><p>在你着手学习时调度程序, 了解他们是什么和他们不是什么是很重要的。总而言之, 调度程序是一个过程发生的上下文。此上下文可以是线程、调度队列或类似的实体, 甚至是在 OperationQueueScheduler 内部使用的 NSOperation。</p>\n<p>下图是个好的例子：</p>\n<p><img src=\"https://gewill.org/assets/schedulerExample.png\" alt=\"schedulerExample\"></p>\n<p>在此图中，具有缓存运算符的概念。 observable向服务器发出请求并检索一些数据。此数据由名为cache的自定义运算符处理，该运算符将数据存储在某处。 在此之后，数据被传递给不同调度程序中的所有订阅者，很可能是位于主线程之上的MainScheduler，使得UI的更新成为可能。</p>\n<h4 id=\"揭开调度程序\"><a href=\"#揭开调度程序\" class=\"headerlink\" title=\"揭开调度程序\"></a>揭开调度程序</h4><p>调度程序虽然工作方式和GCD类似，却不是等价的。</p>\n<p>要记住的重要一点是, 调度程序不是线程, 并且它们没有与线程的一对一关系。始终检查计划程序执行操作的上下文, 而不是线程。在本章的后面部分, 您将遇到一些好的例子来帮助您理解这一点。</p>\n<h3 id=\"设置项目\"><a href=\"#设置项目\" class=\"headerlink\" title=\"设置项目\"></a>设置项目</h3><p>编写两个函数打印当前调度程序所在线程。</p>\n<h3 id=\"切换调度程序\"><a href=\"#切换调度程序\" class=\"headerlink\" title=\"切换调度程序\"></a>切换调度程序</h3><p>Rx 中最重要的事情之一是随时切换调度程序的能力, 没有任何限制, 除了内部进程生成事件所强加的约束之外。</p>\n<p><code>fruit</code> 是在主线程上生成的, 但是将它移动到后台线程是很好的。要在后台线程中创建 <code>fruit</code> , 必须使用 <code>subscribeOn</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fruit <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[apple]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[pineapple]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[strawberry]&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fruit</span><br><span class=\"line\">  .subscribeOn(globalScheduler)</span><br><span class=\"line\">  .dump()</span><br><span class=\"line\">  .observeOn(<span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">  .dumpingSubscription()</span><br><span class=\"line\">  .disposed(by: bag)</span><br></pre></td></tr></table></figure>\n\n<p>观察是 Rx 的三基本概念之一。它涉及实体生成事件, 以及这些事件的观察者。在这种情况下, 在对应 <code>subscribeOn</code> 的情况下, 操作符 <code>observeOn</code> 改变了观察发生的调度程序。</p>\n<p>这是一个非常常见的模式。您使用后台进程从服务器检索数据并处理接收的数据, 只切换到 MainScheduler 处理 <code>ﬁnal</code> 事件并在用户界面中显示数据。</p>\n<h3 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> globalScheduler <span class=\"operator\">=</span> <span class=\"type\">ConcurrentDispatchQueueScheduler</span>(queue: <span class=\"type\">DispatchQueue</span>.global())</span><br><span class=\"line\"><span class=\"keyword\">let</span> bag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> animal <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;[dog]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animalsThread <span class=\"operator\">=</span> <span class=\"type\">Thread</span>() &#123;</span><br><span class=\"line\">  sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">  animal.onNext(<span class=\"string\">&quot;[cat]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">  animal.onNext(<span class=\"string\">&quot;[tiger]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">  animal.onNext(<span class=\"string\">&quot;[fox]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">  animal.onNext(<span class=\"string\">&quot;[leopard]&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">animalsThread.name <span class=\"operator\">=</span> <span class=\"string\">&quot;Animals Thread&quot;</span></span><br><span class=\"line\">animalsThread.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">animal.subscribeOn(<span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">  .dump()</span><br><span class=\"line\">  .observeOn(globalScheduler)</span><br><span class=\"line\">  .dumpingSubscription()</span><br><span class=\"line\">  .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">RunLoop</span>.main.run(until: <span class=\"type\">Date</span>(timeIntervalSinceNow: <span class=\"number\">13</span>))</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00s | [D] [dog] received on Main Thread</span><br><span class=\"line\">00s | [S] [dog] received on Anonymous Thread</span><br><span class=\"line\">03s | [D] [cat] received on Animals Thread</span><br><span class=\"line\">03s | [S] [cat] received on Anonymous Thread</span><br><span class=\"line\">06s | [D] [tiger] received on Animals Thread</span><br><span class=\"line\">06s | [S] [tiger] received on Anonymous Thread</span><br><span class=\"line\">09s | [D] [fox] received on Animals Thread</span><br><span class=\"line\">09s | [S] [fox] received on Anonymous Thread</span><br><span class=\"line\">12s | [D] [leopard] received on Animals Thread</span><br><span class=\"line\">12s | [S] [leopard] received on Anonymous Thread</span><br></pre></td></tr></table></figure>\n\n<p>结果出人意料，并没有如愿发生在主线程上。这是一个常见的和危险的陷阱, 它来自于在默认情况下认为 Rx 是异步的或多线程的，但这不是事实。</p>\n<p>Rx 和一般抽象是自由线程的;在处理数据时, 没有发生魔术般的线程切换。如果不指定其他的线程, 则始终在原始线程上执行计算。</p>\n<blockquote>\n<p>任何线程切换都是在程序员使用运算符 <code>subscribeOn</code> 和 <code>observeOn</code> 的显式请求之后发生的。</p>\n</blockquote>\n<p>认为 Rx 做一些线程处理默认会陷入一个常见的陷阱。上面发生的事情是对 Subject 的误用。原始计算在指定的线程上发生, 并且这些事件使用 <code>Thread() &#123; ... &#125;</code> 在该线程中被推入。由于 Subject 的性质, Rx 没有能力切换原始的计算调度程序, 并移动到另一个线程, 因为没有直接控制的 Subject 被推出。</p>\n<p>但是下面的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> globalScheduler <span class=\"operator\">=</span> <span class=\"type\">ConcurrentDispatchQueueScheduler</span>(queue: <span class=\"type\">DispatchQueue</span>.global())</span><br><span class=\"line\"><span class=\"keyword\">let</span> bag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> animal <span class=\"operator\">=</span> <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">&quot;[dog]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fruit <span class=\"operator\">=</span> <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt;.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[apple]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[pineapple]&quot;</span>)</span><br><span class=\"line\">  sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">  observer.onNext(<span class=\"string\">&quot;[strawberry]&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fruit.subscribeOn(globalScheduler)</span><br><span class=\"line\">  .dump()</span><br><span class=\"line\">  .observeOn(<span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">  .dumpingSubscription()</span><br><span class=\"line\">  .disposed(by:bag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">RunLoop</span>.main.run(until: <span class=\"type\">Date</span>(timeIntervalSinceNow: <span class=\"number\">13</span>))</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">00s | [D] [apple] received on Anonymous Thread</span><br><span class=\"line\">00s | [S] [apple] received on Main Thread</span><br><span class=\"line\">02s | [D] [pineapple] received on Anonymous Thread</span><br><span class=\"line\">02s | [S] [pineapple] received on Main Thread</span><br><span class=\"line\">04s | [D] [strawberry] received on Anonymous Thread</span><br><span class=\"line\">04s | [S] [strawberry] received on Main Thread</span><br></pre></td></tr></table></figure>\n\n<p>为什么这适用于fruit 线程呢？ 这是因为使用<code>Observable.create</code>可以让Rx控制Thread块内部发生的事情，这样你就可以更加精确地定制线程处理。<br>这种意想不到的结果通常被称为“冷和热”可观测问题。<br>在上面的例子中，你正在处理热观察。 observable在订阅期间没有任何副作用，但它确实有自己的上下文，其中生成事件并且RxSwift无法控制它（即，它运行自己的Thread）。<br>相反，冷观察不会在任何观察者订阅之前产生任何元素。 这实际上意味着它没有自己的上下文，直到订阅时，它创建一些上下文并开始生成元素。</p>\n<h4 id=\"热-vs-冷\"><a href=\"#热-vs-冷\" class=\"headerlink\" title=\"热 vs 冷\"></a>热 vs 冷</h4><p>上面的部分谈到了冷热观测量的话题。冷热观测量的话题是相当固执己见的, 产生了很多争论, 所以让我们简单在这里看看。这个概念可以归结为一个非常简单的问题:</p>\n<p><img src=\"https://gewill.org//assets/HotVSCold.png\" alt=\"HotVSCold\"></p>\n<p>一些副作用的例子是：</p>\n<ul>\n<li>向服务器发送请求</li>\n<li>编辑本地数据库</li>\n<li>写入文件系统</li>\n<li>发射火箭</li>\n</ul>\n<h2 id=\"最佳实践和内置调度程序\"><a href=\"#最佳实践和内置调度程序\" class=\"headerlink\" title=\"最佳实践和内置调度程序\"></a>最佳实践和内置调度程序</h2><p>调度程序是一个非平凡的主题, 因此它们会为最常见的用例提供一些最佳实践。在本节中, 您将获得串行和并发调度程序的快速介绍, 了解它们如何处理数据并查看哪种类型对特定上下文更有效。</p>\n<h4 id=\"串行与并发调度程序\"><a href=\"#串行与并发调度程序\" class=\"headerlink\" title=\"串行与并发调度程序\"></a>串行与并发调度程序</h4><p>虑到调度程序只是一个上下文, 它可以是任何东西 (调度队列、线程、自定义上下文), 并且所有转换序列的运算符都需要保留隐式保证, 因此需要确保您使用的是正确的计划程序。</p>\n<ul>\n<li><p>如果您使用的是串行调度程序, Rx 将按顺序进行计算。对于串行调度队列, 调度程序还可以在底层执行自己的优化。</p>\n</li>\n<li><p>在并发计划程序中, Rx 将尝试同时运行代码, 但 <code>observeOn</code> 和 <code>subscribeOn</code> 将保留执行任务所需的顺序, 并确保订阅代码在正确的计划程序上结束。</p>\n<h4 id=\"MainScheduler\"><a href=\"#MainScheduler\" class=\"headerlink\" title=\"MainScheduler\"></a>MainScheduler</h4></li>\n</ul>\n<p>MainScheduler 位于主线程的顶端。此计划程序用于处理用户界面上的更改并执行其他高优先级任务。作为在 iOS、tvOS 或 macOS 上开发应用程序的一般做法, 不应使用此计划程序执行长时间运行的任务, 因此应避免诸如服务器请求或其他繁重任务之类的事情。</p>\n<p>MainScheduler 还用于在使用单位和更多特定的（如：Driver）执行所有计算。如前一章所述, Driver 确保始终在 MainScheduler 中执行计算, 以使您能够将数据直接绑定到应用程序的用户界面。</p>\n<h4 id=\"SerialDispatchQueueScheduler\"><a href=\"#SerialDispatchQueueScheduler\" class=\"headerlink\" title=\"SerialDispatchQueueScheduler\"></a>SerialDispatchQueueScheduler</h4><p>SerialDispatchQueueScheduler 负责在串行 DispatchQueue 。这个调度程序在使用 <code>observeOn</code> 时，有很多优化的优势。</p>\n<p>你可以使用此计划程序来处理以串行方式更好地安排的后台作业。例如, 如果应用程序与服务器的单个路径 (如Firebase 或 GraphQL 应用程序) 进行对话, 则可能需要避免调度多个同时请求, 这会给接收端造成太大的压力。这个调度程序是你绝对想要的, 像串行任务队列一样先进。</p>\n<h4 id=\"ConcurrentDispatchQueueScheduler\"><a href=\"#ConcurrentDispatchQueueScheduler\" class=\"headerlink\" title=\"ConcurrentDispatchQueueScheduler\"></a>ConcurrentDispatchQueueScheduler</h4><p>ConcurrentDispatchQueueScheduler 与 SerialDispatchQueueScheduler类似，负责在DispatchQueue上抽象工作。 主要区别在于，调度程序使用并行队列而不是串行队列。</p>\n<p>此类调度程序在使用 <code>observeOn</code> 时没有进行优化, 因此在决定使用哪种调度程序时, 请记住说明这一点。</p>\n<p>对于需要同时结束的多个长时间运行的任务，并发的调度程序可能是一个不错的选择。 将多个可观察对象与阻塞运算符组合在一起，以便在准备好时将所有结果组合在一起，可以防止串行调度程序以最佳状态执行。 相反，并发调度程序可以执行多个并发任务并优化结果的收集。</p>\n<h4 id=\"OperationQueueScheduler\"><a href=\"#OperationQueueScheduler\" class=\"headerlink\" title=\"OperationQueueScheduler\"></a>OperationQueueScheduler</h4><p>OperationQueueScheduler类似于ConcurrentDispatchQueueScheduler，但不是通过DispatchQueue抽象工作，它在NSOperationQueue上执行工作。 有时你需要对正在运行的并发作业进行更多控制，而对于并发DispatchQueue则无法做到这一点。</p>\n<p>如果需要调整最大并发作业数，则这是作业的调度程序。 您可以定义<code>maxConcurrentOperationCount</code>来限制并发操作的数量以满足您的应用程序的需要。</p>\n<h4 id=\"TestScheduler\"><a href=\"#TestScheduler\" class=\"headerlink\" title=\"TestScheduler\"></a>TestScheduler</h4><p>TestScheduler是一种特殊的野兽。 它仅用于测试，因此尽量不要在生产代码中使用此调度程序。 这种特殊的调度程序简化了操作员测试; 它是RxTest库的一部分。 您将在关于测试的专用章节中了解如何使用此调度程序，但是让我们快速浏览一下，因为您正在进行调度程序的全程浏览。</p>\n<h2 id=\"第十六章：使用-RxTest-进行测试\"><a href=\"#第十六章：使用-RxTest-进行测试\" class=\"headerlink\" title=\"第十六章：使用 RxTest 进行测试\"></a>第十六章：使用 RxTest 进行测试</h2><p>本章将向您介绍 RxTest, 以及以后的 RxBlocking, 通过编写针对多个 RxSwift 操作的测试, 还可以编写针对生产 RxSwift 代码的测试。</p>\n<p>本章例子是：一个将Hex颜色值转换为RGB值的应用。架构是MVVM。</p>\n<h3 id=\"使用-RxTest-测试操作符\"><a href=\"#使用-RxTest-测试操作符\" class=\"headerlink\" title=\"使用 RxTest 测试操作符\"></a>使用 RxTest 测试操作符</h3><p> RxTest 是 RxSwift 外一个独立的库。它是托管在 RxSwift 仓库, 但需要一个单独的 pod 安装和导入。RxTest 为测试 RxSwift 代码提供了许多有用的补充, 如 TestScheduler, 它是一个虚拟时间计划程序, 它使你可以对测试的时间线性操作进行粒状控制, 并且包括 <code>next(_:_:)</code>, <code>completed(_:_:)</code> 和 <code>error(_:_:)</code> 在测试中 speciﬁed 时间启用将这些事件添加到观测量中。它还增加了热和冷的观测量, 你可以想到的热和冷三明治。当然, 不是真的三明治。</p>\n<h4 id=\"热和冷的序列是什么？\"><a href=\"#热和冷的序列是什么？\" class=\"headerlink\" title=\"热和冷的序列是什么？\"></a>热和冷的序列是什么？</h4><p>RxSwift 很长的时间来简化和简化你的 Rx 代码, 并且有热和冷的序列的区别, 当它涉及到观测量, 在 RxSwift 可以被认为是可观测的特征而不是具体的类型。</p>\n<p><strong>热序列：</strong></p>\n<ul>\n<li>使用资源，无论是否有订阅者。</li>\n<li>生成元素，无论是否有订阅者。</li>\n<li>主要用于有状态类型，如变量。</li>\n</ul>\n<p><strong>冷序列：</strong></p>\n<ul>\n<li>仅在订阅时消耗资源。</li>\n<li>仅在有订阅者时才生成元素。</li>\n<li>主要用于网络等异步操作。</li>\n</ul>\n<p>下面是 <code>amb</code> 的测试用例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testAmb</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> observer <span class=\"operator\">=</span> scheduler.createObserver(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> observableA <span class=\"operator\">=</span> scheduler.createHotObservable([</span><br><span class=\"line\">        next(<span class=\"number\">100</span>, <span class=\"string\">&quot;a&quot;</span>),</span><br><span class=\"line\">        next(<span class=\"number\">110</span>, <span class=\"string\">&quot;b&quot;</span>),</span><br><span class=\"line\">        next(<span class=\"number\">300</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> observableB <span class=\"operator\">=</span> scheduler.createHotObservable([</span><br><span class=\"line\">        next(<span class=\"number\">90</span>, <span class=\"string\">&quot;1&quot;</span>),</span><br><span class=\"line\">        next(<span class=\"number\">200</span>, <span class=\"string\">&quot;2&quot;</span>),</span><br><span class=\"line\">        next(<span class=\"number\">300</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ambObservable <span class=\"operator\">=</span> observableA.amb(observableB)</span><br><span class=\"line\"></span><br><span class=\"line\">    scheduler.scheduleAt(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.subscription <span class=\"operator\">=</span> ambObservable.subscribe(observer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    scheduler.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> results <span class=\"operator\">=</span> observer.events.map &#123;</span><br><span class=\"line\">        <span class=\"variable\">$0</span>.value.element<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">XCTAssertEqual</span>(results, [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是同步测试，如果想测试异步错误，最简单地是使用 <code>RxBlocking</code>。</p>\n<h4 id=\"使用-RxBlocking\"><a href=\"#使用-RxBlocking\" class=\"headerlink\" title=\"使用 RxBlocking\"></a>使用 RxBlocking</h4><p>RxBlocking 是另一个库, 寄存在 RxSwift 仓库。它的主要目的是通过它的 <code>toBlocking(timeout:)</code> 方法将 <code>observable</code> 转换为 <code>BlockingObservable</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testToArray</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">ConcurrentDispatchQueueScheduler</span>(qos: .default)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> toArrayObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>).subscribeOn(scheduler)</span><br><span class=\"line\">    <span class=\"type\">XCTAssertEqual</span>(<span class=\"keyword\">try!</span> toArrayObservable.toBlocking().toArray(), [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">testToArrayMaterialized</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> scheduler <span class=\"operator\">=</span> <span class=\"type\">ConcurrentDispatchQueueScheduler</span>(qos: .default)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> toArrayObservable <span class=\"operator\">=</span> <span class=\"type\">Observable</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>).subscribeOn(scheduler)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> toArrayObservable</span><br><span class=\"line\">        .toBlocking()</span><br><span class=\"line\">        .materialize()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> result &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .completed(elements: <span class=\"keyword\">let</span> elements):</span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(elements, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .failed(<span class=\"keyword\">_</span>, error: <span class=\"keyword\">let</span> error):</span><br><span class=\"line\">        <span class=\"type\">XCTFail</span>(error.localizedDescription)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试-RxSwift-生产代码\"><a href=\"#测试-RxSwift-生产代码\" class=\"headerlink\" title=\"测试 RxSwift 生产代码\"></a>测试 RxSwift 生产代码</h3><p>下面例子是测试MVVM中VM层：</p>\n<p>使用 <code>toBlocking</code>  很方便编写异步测试。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> XCTest</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxSwift</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxCocoa</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxTest</span><br><span class=\"line\"><span class=\"keyword\">@testable</span> <span class=\"keyword\">import</span> Testing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestingViewModel</span>: <span class=\"title class_\">XCTestCase</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> viewModel: <span class=\"type\">ViewModel</span>!</span><br><span class=\"line\">    <span class=\"keyword\">var</span> scheduler: <span class=\"type\">ConcurrentDispatchQueueScheduler</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">setUp</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setUp()</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel <span class=\"operator\">=</span> <span class=\"type\">ViewModel</span>()</span><br><span class=\"line\">        scheduler <span class=\"operator\">=</span> <span class=\"type\">ConcurrentDispatchQueueScheduler</span>(qos: .default)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">testColorIsRedWhenHexStringIsFF0000_async</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> disposeBag <span class=\"operator\">=</span> <span class=\"type\">DisposeBag</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> expect <span class=\"operator\">=</span> expectation(description: <span class=\"keyword\">#function</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> expectedColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>(red: <span class=\"number\">1.0</span>, green: <span class=\"number\">0.0</span>, blue: <span class=\"number\">0.0</span>, alpha: <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result: <span class=\"type\">UIColor</span>!</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel.color.asObservable()</span><br><span class=\"line\">            .skip(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .subscribe(onNext: &#123;</span><br><span class=\"line\">                result <span class=\"operator\">=</span> <span class=\"variable\">$0</span></span><br><span class=\"line\">                expect.fulfill()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .disposed(by: disposeBag)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel.hexString.value <span class=\"operator\">=</span> <span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        waitForExpectations(timeout: <span class=\"number\">1.0</span>) &#123; error <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> error <span class=\"operator\">==</span> <span class=\"literal\">nil</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">XCTFail</span>(error<span class=\"operator\">!</span>.localizedDescription)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">XCTAssertEqual</span>(expectedColor, result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">testColorIsRedWhenHexStringIsFF0000</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> colorObservable <span class=\"operator\">=</span> viewModel.color.asObservable().subscribeOn(scheduler)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel.hexString.value <span class=\"operator\">=</span> <span class=\"string\">&quot;#ff0000&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try</span> colorObservable.toBlocking(timeout: <span class=\"number\">1.0</span>).first() <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">XCTAssertEqual</span>(result, .red)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">testRgbIs010WhenHexStringIs00FF00</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> rgbObservable <span class=\"operator\">=</span> viewModel.rgb.asObservable().subscribeOn(scheduler)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel.hexString.value <span class=\"operator\">=</span> <span class=\"string\">&quot;#00ff00&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> rgbObservable.toBlocking().first()<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(<span class=\"number\">0</span> <span class=\"operator\">*</span> <span class=\"number\">255</span>, result.<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(<span class=\"number\">1</span> <span class=\"operator\">*</span> <span class=\"number\">255</span>, result.<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(<span class=\"number\">0</span> <span class=\"operator\">*</span> <span class=\"number\">255</span>, result.<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">testColorNameIsRayWenderlichGreenWhenHexStringIs006636</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> colorNameObservable <span class=\"operator\">=</span> viewModel.colorName.asObservable().subscribeOn(scheduler)</span><br><span class=\"line\"></span><br><span class=\"line\">        viewModel.hexString.value <span class=\"operator\">=</span> <span class=\"string\">&quot;#006636&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">XCTAssertEqual</span>(<span class=\"keyword\">try!</span> colorNameObservable.toBlocking().first()<span class=\"operator\">!</span>, <span class=\"string\">&quot;rayWenderlichGreen&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十七章：创建自定义响应式拓展\"><a href=\"#第十七章：创建自定义响应式拓展\" class=\"headerlink\" title=\"第十七章：创建自定义响应式拓展\"></a>第十七章：创建自定义响应式拓展</h2><p>在学习了RxSwift和RxCocoa，以及如何编写测试，这里我们将学习如何给Apple和第三方库编写RxSwift的拓展。本章例子是给NSURLSession编写拓展，来实现网络请求、缓存。但却是一个教学实例，如果生产项目可以有很多网络库可以直接使用，如RxAlamofire、RxMoya等。</p>\n<h3 id=\"如何创建拓展\"><a href=\"#如何创建拓展\" class=\"headerlink\" title=\"如何创建拓展\"></a>如何创建拓展</h3><p>创建一个Cocoa或库的拓展不是一个简单的任务。你会发现这个过程可能很棘手，你的解决方案在继续之前可能需要一些前期思考。</p>\n<p>这里我们将学习如何拓展URLSession，加上Rx的命名空间。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Reactive</span> <span class=\"title class_\">where</span> <span class=\"title class_\">Base</span>: <span class=\"title class_\">URLSession</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">response</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;(<span class=\"type\">HTTPURLResponse</span>, <span class=\"type\">Data</span>)&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.create &#123; observer <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"comment\">// content goes here</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> task <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.base.dataTask(with: request) &#123; (data, response, error) <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> response, <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> data <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          observer.on(.error(error <span class=\"operator\">??</span> <span class=\"type\">RxURLSessionError</span>.unknown))</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> httpResponse <span class=\"operator\">=</span> response <span class=\"keyword\">as?</span> <span class=\"type\">HTTPURLResponse</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          observer.on(.error(<span class=\"type\">RxURLSessionError</span>.invalidResponse(response: response)))</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.onNext((httpResponse, data))</span><br><span class=\"line\">        observer.on(.completed)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      task.resume()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Disposables</span>.create(with: task.cancel)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">data</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Data</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> request.url<span class=\"operator\">?</span>.absoluteString, <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> internalCache[url] &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">Observable</span>.just(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response(request: request).cache().map &#123; (response, data) -&gt; <span class=\"type\">Data</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"number\">200</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">300</span> <span class=\"operator\">~=</span> response.statusCode &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"type\">RxURLSessionError</span>.requestFailed(response: response, data: data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">string</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data(request: request).map &#123; d <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">String</span>(data: d, encoding: .utf8) <span class=\"operator\">??</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">json</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">JSON</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data(request: request).map &#123; d <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> <span class=\"type\">JSON</span>(data: d)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">image</span>(<span class=\"params\">request</span>: <span class=\"type\">URLRequest</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">UIImage</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data(request: request).map &#123; d <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">UIImage</span>(data: d) <span class=\"operator\">??</span> <span class=\"type\">UIImage</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何创建自定义运算符\"><a href=\"#如何创建自定义运算符\" class=\"headerlink\" title=\"如何创建自定义运算符\"></a>如何创建自定义运算符</h3><p>这里我们演示如何使用运算符进行缓存网络请求结果（HTTPURLResponse、Data）的序列，简单起见使用字典。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fileprivate</span> <span class=\"keyword\">var</span> internalCache <span class=\"operator\">=</span> [<span class=\"type\">String</span>: <span class=\"type\">Data</span>]()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">ObservableType</span> <span class=\"title class_\">where</span> <span class=\"title class_\">E</span> == (<span class=\"title class_\">HTTPURLResponse</span>, <span class=\"title class_\">Data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">cache</span>() -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">E</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.do(onNext: &#123; (response, data) <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> response.url<span class=\"operator\">?</span>.absoluteString, <span class=\"number\">200</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">300</span> <span class=\"operator\">~=</span> response.statusCode &#123;</span><br><span class=\"line\">        internalCache[url] <span class=\"operator\">=</span> data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何使用封装的拓展\"><a href=\"#如何使用封装的拓展\" class=\"headerlink\" title=\"如何使用封装的拓展\"></a>如何使用封装的拓展</h3><p>在cell中更具给定url下载gif并显示出来。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">downloadAndDisplay</span>(<span class=\"params\">gif</span> <span class=\"params\">stringUrl</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"type\">URL</span>(string: stringUrl) <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> request <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: url)</span><br><span class=\"line\">  activityIndicator.startAnimating()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> s <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.rx.data(request: request)</span><br><span class=\"line\">    .observeOn(<span class=\"type\">MainScheduler</span>.instance)</span><br><span class=\"line\">    .subscribe(onNext: &#123; imageData <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">self</span>.gifImageView.animate(withGIFData: imageData)</span><br><span class=\"line\">      <span class=\"keyword\">self</span>.activityIndicator.stopAnimating()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  disposable.setDisposable(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试封装的拓展\"><a href=\"#测试封装的拓展\" class=\"headerlink\" title=\"测试封装的拓展\"></a>测试封装的拓展</h3><p>这里我们使用RxNimble来辅助我们编写测试。RxNimble 使测试更容易编写, 并有助于代码更简明。</p>\n<p>RxBlocking版本：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> observable.toBlocking().first()</span><br><span class=\"line\">expect(result) <span class=\"operator\">==</span> <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n\n<p>RxNimble版本：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">expect(observable).first <span class=\"operator\">==</span> <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n\n<p>完整测试代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> XCTest</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxSwift</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxBlocking</span><br><span class=\"line\"><span class=\"keyword\">import</span> Nimble</span><br><span class=\"line\"><span class=\"keyword\">import</span> RxNimble</span><br><span class=\"line\"><span class=\"keyword\">import</span> OHHTTPStubs</span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftyJSON</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@testable</span> <span class=\"keyword\">import</span> iGif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">iGifTests</span>: <span class=\"title class_\">XCTestCase</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj <span class=\"operator\">=</span> [<span class=\"string\">&quot;array&quot;</span>:[<span class=\"string\">&quot;foo&quot;</span>,<span class=\"string\">&quot;bar&quot;</span>], <span class=\"string\">&quot;foo&quot;</span>:<span class=\"string\">&quot;bar&quot;</span>] <span class=\"keyword\">as</span> [<span class=\"type\">String</span> : <span class=\"keyword\">Any</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> request <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;http://raywenderlich.com&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> errorRequest <span class=\"operator\">=</span> <span class=\"type\">URLRequest</span>(url: <span class=\"type\">URL</span>(string: <span class=\"string\">&quot;http://rw.com&quot;</span>)<span class=\"operator\">!</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">setUp</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.setUp()</span><br><span class=\"line\">    <span class=\"comment\">// Put setup code here. This method is called before the invocation of each test method in the class.</span></span><br><span class=\"line\">    stub(condition: isHost(<span class=\"string\">&quot;raywenderlich.com&quot;</span>)) &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">OHHTTPStubsResponse</span>(jsonObject: <span class=\"keyword\">self</span>.obj, statusCode: <span class=\"number\">200</span>, headers: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stub(condition: isHost(<span class=\"string\">&quot;rw.com&quot;</span>)) &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">OHHTTPStubsResponse</span>(error: <span class=\"type\">RxURLSessionError</span>.unknown)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">tearDown</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Put teardown code here. This method is called after the invocation of each test method in the class.</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.tearDown()</span><br><span class=\"line\">    <span class=\"type\">OHHTTPStubs</span>.removeAllStubs()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">testData</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.rx.data(request: <span class=\"keyword\">self</span>.request)</span><br><span class=\"line\">    expect(observable.toBlocking().firstOrNil()).toNot(beNil())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">testString</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.rx.string(request: <span class=\"keyword\">self</span>.request)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> string <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;<span class=\"subst\">\\&quot;</span>array<span class=\"subst\">\\&quot;</span>:[<span class=\"subst\">\\&quot;</span>foo<span class=\"subst\">\\&quot;</span>,<span class=\"subst\">\\&quot;</span>bar<span class=\"subst\">\\&quot;</span>],<span class=\"subst\">\\&quot;</span>foo<span class=\"subst\">\\&quot;</span>:<span class=\"subst\">\\&quot;</span>bar<span class=\"subst\">\\&quot;</span>&#125;&quot;</span></span><br><span class=\"line\">    expect(observable.toBlocking().firstOrNil()) <span class=\"operator\">==</span> string</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">testJSON</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.rx.json(request: <span class=\"keyword\">self</span>.request)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> string <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;<span class=\"subst\">\\&quot;</span>array<span class=\"subst\">\\&quot;</span>:[<span class=\"subst\">\\&quot;</span>foo<span class=\"subst\">\\&quot;</span>,<span class=\"subst\">\\&quot;</span>bar<span class=\"subst\">\\&quot;</span>],<span class=\"subst\">\\&quot;</span>foo<span class=\"subst\">\\&quot;</span>:<span class=\"subst\">\\&quot;</span>bar<span class=\"subst\">\\&quot;</span>&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSON</span>(data: string.data(using: .utf8)<span class=\"operator\">!</span>)</span><br><span class=\"line\">    expect(observable.toBlocking().firstOrNil()) <span class=\"operator\">==</span> json</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">testError</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> erroredCorrectly <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> observable <span class=\"operator\">=</span> <span class=\"type\">URLSession</span>.shared.rx.json(request: <span class=\"keyword\">self</span>.errorRequest)</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"keyword\">_</span> <span class=\"operator\">=</span> <span class=\"keyword\">try</span> observable.toBlocking().first()</span><br><span class=\"line\">      <span class=\"built_in\">assertionFailure</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">RxURLSessionError</span>.unknown) &#123;</span><br><span class=\"line\">      erroredCorrectly <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">assertionFailure</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    expect(erroredCorrectly) <span class=\"operator\">==</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">BlockingObservable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">firstOrNil</span>() -&gt; <span class=\"type\">E</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> first()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用封装\"><a href=\"#常用封装\" class=\"headerlink\" title=\"常用封装\"></a>常用封装</h3><p>RxSwift社区非常活跃，并且已经有很多扩展和封装。 一些基于Apple组件，而另一些则基于许多iOS和macOS项目中广泛使用的第三方库。<br>你可以在 <a href=\"http://community.rxswift.org/\">http://community.rxswift.org</a> 找到最新的封装列表。</p>\n<p>下面几个常用的封装：</p>\n<ul>\n<li>RxDataSources</li>\n<li>RxAlamofire</li>\n<li>RxBluetoothKit</li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>关于何时需要抽象，没有真正明确的规则，但建议如果框架满足以下一个或多个条件，则应用此策略：</p>\n<ul>\n<li>使用带有完成和失败信息的回调</li>\n<li>使用大量委托异步返回信息</li>\n<li>需要与应用程序的其他RxSwift部分进行互操作</li>\n</ul>\n"},{"title":"SF Symbols 对于旧版iOS可用性的问题","url":"/2023/01/31/SF-Symbols-Availability-Issue/","content":"<p><strong>一句话使用SF Symbols复制一份，导出为Symbol，导入Xcode Asset即可。</strong></p>\n<h3 id=\"SF-Symbols复制一份\"><a href=\"#SF-Symbols复制一份\" class=\"headerlink\" title=\"SF Symbols复制一份\"></a>SF Symbols复制一份</h3><img src=\"https://gewill.org/assets/SF-Symbols-Availability-Issue/Duplicate as Custom Symbol.jpg\" alt=\"Duplicate as Custom Symbol\"   >\n\n<h3 id=\"导出为Symbol\"><a href=\"#导出为Symbol\" class=\"headerlink\" title=\"导出为Symbol\"></a>导出为Symbol</h3>  <img src=\"https://gewill.org/assets/SF-Symbols-Availability-Issue/Export Symbol.jpg\" alt=\"Export Symbol\" style=\"zoom:50%;\" />\n\n<h3 id=\"导入Xcode-Asset\"><a href=\"#导入Xcode-Asset\" class=\"headerlink\" title=\"导入Xcode Asset\"></a>导入Xcode Asset</h3><p>这里显示Symbol Image，同样支持symbol样式调整。</p>\n<img src=\"https://gewill.org/assets/SF-Symbols-Availability-Issue/Import Xcode Asset.png\" alt=\"Import Xcode Asset\"  />\n\n<h3 id=\"SwiftUI-示例代码\"><a href=\"#SwiftUI-示例代码\" class=\"headerlink\" title=\"SwiftUI 示例代码\"></a>SwiftUI 示例代码</h3><img src=\"https://gewill.org/assets/SF-Symbols-Availability-Issue/SwiftUI Code.png\" alt=\"SwiftUI Code\"  />\n\n<h3 id=\"预览：成功🎉\"><a href=\"#预览：成功🎉\" class=\"headerlink\" title=\"预览：成功🎉\"></a>预览：成功🎉</h3><img src=\"https://gewill.org/assets/SF-Symbols-Availability-Issue/Preview.png\" alt=\"SwiftUI Code\" style=\"zoom:50%;\" />\n","tags":["Swift","SwiftUI"]},{"title":"Self-learning is so hard","url":"/2015/05/21/Self-learning-is-so-hard/","content":"<p>Time is not enough, and always not do as schedule.</p>\n"},{"title":"Show and Hide Bottom Toolbar in Swift - Xcode 6 iOS 8 Tutorial","url":"/2015/08/12/Show-and-Hide-Bottom-Toolbar-in-Swift-Xcode-6-iOS-8-Tutorial/","content":"<iframe width=\"700\" height=\"393\" src=\"https://www.youtube.com/embed/zlZLjQN-kTc?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"Video-Tutorial\"><a href=\"#Video-Tutorial\" class=\"headerlink\" title=\"Video Tutorial\"></a>Video Tutorial</h2><ol>\n<li>Add first View Controller Segue to new View Controller</li>\n<li>Add Bar Button Item on first View Controller and set target-action</li>\n<li>code in <code>action:</code>method add <code>self.porformSegueWithIdentifier</code></li>\n<li><code>setToolbarHidden(_ hidden: Bool, animated animated: Bool)</code> </li>\n<li>Or set in interface builder</li>\n</ol>\n<p><img src=\"http://i.imgur.com/4BnA20B.jpg\" alt=\"Show and Hide Bottom by code\"><br><img src=\"http://i.imgur.com/YLFy79G.jpg\" alt=\"Show and Hide Bottom set in interface builder\"></p>\n<p>Demo Project on <a href=\"https://github.com/gewill/test-projects/tree/master/test%20Show%20Toobar\">GitHub</a></p>\n<h2 id=\"More-in-Segue\"><a href=\"#More-in-Segue\" class=\"headerlink\" title=\"More in Segue\"></a>More in Segue</h2><p>Simpler way：</p>\n<p><a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-IB_storyboard/chapters/StoryboardSegue.html\">Adding a Segue Between Scenes in a Storyboard</a></p>\n<p>Another way：View Controller segue to View Controller,<br>your can something more in target-action method.</p>\n<p><a href=\"http://stackoverflow.com/questions/21205485/ios7-segue-and-storyboards-how-to-create-without-a-button\">IOS7, Segue and storyboards - How to create without a button?</a></p>\n"},{"title":"Kitura Swift后端开发-笔记","url":"/2019/08/05/Server-Side-Swift-with-Kitura-Notes/","content":"<h2 id=\"第一章：引言\"><a href=\"#第一章：引言\" class=\"headerlink\" title=\"第一章：引言\"></a>第一章：引言</h2><p><strong>Kitura是什么？</strong></p>\n<p>在词源学上，Kitura这个词松散地源于希伯来语Keturah，字面意思是“香”。</p>\n<p><strong>为什么选择Swift写后端？</strong></p>\n<p>支持为服务器编写Swift的核心论点是在应用程序的前端和后端之间共享代码和知识。如果你是一个团队，这种精简可以说是更加关键和赋权。这包括但不限于模型对象代码。</p>\n<p>BFF（Backonnd for Frontend）是一种设计模式，很快就会成为你最好的朋友（永远？）。</p>\n<p>这个模式在这个特定用例中起作用的几个原因：</p>\n<ol>\n<li><p>你可以确定从此API发出请求的唯一设备将是iOS设备。这意味着你可以更少担心平衡请求负载。</p>\n</li>\n<li><p>你可以更好地控制对iOS设备的响应中的数据。在此之前，你可能已经等待后端开发人员最终帮助你，并根据User-Agent首部有条件地修剪响应数据。现在，你可以让后端开发人员不间断地工作，并通过将响应数据解析为你的BFF设备所需的内容来解决你的问题。</p>\n</li>\n<li><p>在我们的特定用例中，你可以在发送响应之前保存一个用户可能对数据库进行的查询的响应。这意味着，如果其他人在相同的位置请求餐馆信息（例子是请求包含地理位置的餐馆信息），并且存储的数据足够新以满足你的刷新策略，你甚至不必向主服务器发送查询！你只需发送缓存的数据，并相信它对你的用户来说足够新。</p>\n</li>\n<li><p>你可以使用你已经知道如何在Swift中编写代码的语言完成1-3！</p>\n</li>\n</ol>\n<h2 id=\"第二章：Hello-World\"><a href=\"#第二章：Hello-World\" class=\"headerlink\" title=\"第二章：Hello, World!\"></a>第二章：Hello, World!</h2><p>如何Kitura项目</p>\n<p>先安装Kitura macOS App和Kitura CLI</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap ibm-swift/kitura</span><br><span class=\"line\">brew install kitura</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kitura</span><br><span class=\"line\">Usage: kitura [options] [command]</span><br><span class=\"line\"></span><br><span class=\"line\">Kitura command-line interface</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -V, --version  output the version number</span><br><span class=\"line\">  -h, --help     output usage information</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  build          build the project in a local container</span><br><span class=\"line\">  create         interactively create a Kitura project</span><br><span class=\"line\">  idt            install IBM Cloud Developer Tools</span><br><span class=\"line\">  init           scaffold a bare-bones Kitura project</span><br><span class=\"line\">  kit            print Cocoapods boilerplate for KituraKit</span><br><span class=\"line\">  run            run the project in a local container</span><br><span class=\"line\">  sdk            generate a client SDK from an OpenAPI/Swagger spec</span><br><span class=\"line\">  help [cmd]     display help for [cmd]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建的Kitura项目提供了一个开箱即用的全功能Kitura应用程序。 它提供了在生产环境中运行的任何应用程序可能需要的一些功能，包括：</p>\n<ul>\n<li><p>使用HeliumLogger记录信息，警告和错误消息。</p>\n</li>\n<li><p>使用CloudEnvironment进行动态配置查找和设置。</p>\n</li>\n<li><p>使用Health查看和报告应用程序健康状况。</p>\n</li>\n<li><p>使用SwiftMetrics进行App和Kitura框架指标和监控。</p>\n</li>\n</ul>\n<p>项目使用SPM管理依赖</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swift-tools-version:4.0</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> PackageDescription</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> package <span class=\"operator\">=</span> <span class=\"type\">Package</span>(</span><br><span class=\"line\">    name: <span class=\"string\">&quot;EmojiJournalServer&quot;</span>,</span><br><span class=\"line\">    dependencies: [</span><br><span class=\"line\">      .package(url: <span class=\"string\">&quot;https://github.com/IBM-Swift/Kitura.git&quot;</span>, .upToNextMinor(from: <span class=\"string\">&quot;2.5.0&quot;</span>)),</span><br><span class=\"line\">      .package(url: <span class=\"string\">&quot;https://github.com/IBM-Swift/HeliumLogger.git&quot;</span>, from: <span class=\"string\">&quot;1.7.1&quot;</span>),</span><br><span class=\"line\">      .package(url: <span class=\"string\">&quot;https://github.com/IBM-Swift/CloudEnvironment.git&quot;</span>, from: <span class=\"string\">&quot;9.0.0&quot;</span>),</span><br><span class=\"line\">      .package(url: <span class=\"string\">&quot;https://github.com/RuntimeTools/SwiftMetrics.git&quot;</span>, from: <span class=\"string\">&quot;2.0.0&quot;</span>),</span><br><span class=\"line\">      .package(url: <span class=\"string\">&quot;https://github.com/IBM-Swift/Health.git&quot;</span>, from: <span class=\"string\">&quot;1.0.0&quot;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    targets: [</span><br><span class=\"line\">      .target(name: <span class=\"string\">&quot;EmojiJournalServer&quot;</span>, dependencies: [ .target(name: <span class=\"string\">&quot;Application&quot;</span>), <span class=\"string\">&quot;Kitura&quot;</span> , <span class=\"string\">&quot;HeliumLogger&quot;</span>]),</span><br><span class=\"line\">      .target(name: <span class=\"string\">&quot;Application&quot;</span>, dependencies: [ <span class=\"string\">&quot;Kitura&quot;</span>, <span class=\"string\">&quot;CloudEnvironment&quot;</span>,<span class=\"string\">&quot;SwiftMetrics&quot;</span>,<span class=\"string\">&quot;Health&quot;</span>,      ]),</span><br><span class=\"line\"></span><br><span class=\"line\">      .testTarget(name: <span class=\"string\">&quot;ApplicationTests&quot;</span> , dependencies: [.target(name: <span class=\"string\">&quot;Application&quot;</span>), <span class=\"string\">&quot;Kitura&quot;</span>,<span class=\"string\">&quot;HeliumLogger&quot;</span> ])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Application.swift包含应用程序的生命周期处理，提供emojiJournalServer目标中main.swift使用的核心<code>init()</code>和<code>run()</code>方法来启动应用程序。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> Kitura</span><br><span class=\"line\"><span class=\"keyword\">import</span> LoggerAPI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Configuration</span><br><span class=\"line\"><span class=\"keyword\">import</span> CloudEnvironment</span><br><span class=\"line\"><span class=\"keyword\">import</span> KituraContracts</span><br><span class=\"line\"><span class=\"keyword\">import</span> Health</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">let</span> projectPath <span class=\"operator\">=</span> <span class=\"type\">ConfigurationManager</span>.<span class=\"type\">BasePath</span>.project.path</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">let</span> health <span class=\"operator\">=</span> <span class=\"type\">Health</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> router <span class=\"operator\">=</span> <span class=\"type\">Router</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloudEnv <span class=\"operator\">=</span> <span class=\"type\">CloudEnv</span>()</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Run the metrics initializer</span></span><br><span class=\"line\">    initializeMetrics(router: router)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">postInit</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Endpoints</span></span><br><span class=\"line\">    initializeHealthRoutes(app: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    router.get(<span class=\"string\">&quot;/&quot;</span>, handler: helloWorldHandler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">helloWorldHandler</span>(<span class=\"params\">request</span>: <span class=\"type\">RouterRequest</span>, <span class=\"params\">response</span>: <span class=\"type\">RouterResponse</span>, <span class=\"params\">next</span>: ()-&gt;()) &#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    next()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">run</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> postInit()</span><br><span class=\"line\">    <span class=\"type\">Kitura</span>.addHTTPServer(onPort: cloudEnv.port, with: router)</span><br><span class=\"line\">    <span class=\"type\">Kitura</span>.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行后</p>\n<p>欢迎页：<a href=\"http://localhost:8090/\">http://localhost:8090</a></p>\n<p>健康：<a href=\"http://localhost:8090/health\">http://localhost:8090/health</a></p>\n<p>监控仪表板：<a href=\"http://localhost:8090/swiftmetrics-dash\">http://localhost:8090/swiftmetrics-dash</a></p>\n<p>HTTP吞吐量视图使用每秒请求（RPS）度量标准显示在任何时间点发生的请求量。</p>\n<p><a href=\"http://localhost:8090/metrics\">http://localhost:8090/metrics</a></p>\n<p><strong>使用Docker在Linux上运行应用程序</strong></p>\n<p>Docker和Kubernetes是Kitura部署的核心，它们提供了重要的性能和扩展优势。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kitura build</span><br><span class=\"line\">kitura run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三章：RESTful-APIs\"><a href=\"#第三章：RESTful-APIs\" class=\"headerlink\" title=\"第三章：RESTful APIs\"></a>第三章：RESTful APIs</h2><p>在开始构建这些RESTful API之前，将了解RESTful API本身，包括它们的架构方法和设计原则。</p>\n<h3 id=\"REpresentational-State-Transfer-REST\"><a href=\"#REpresentational-State-Transfer-REST\" class=\"headerlink\" title=\"REpresentational State Transfer (REST)\"></a>REpresentational State Transfer (REST)</h3><p>REpresentational State Transfer（REST）是一种架构风格或设计模式的API。 如果一个API符合Roy Fielding博士在他的2000年论文“架构风格和基于网络的软件架构设计”中提出的一系列约束，那么它就是RESTful。</p>\n<h4 id=\"Fielding提出了以下六个限制：\"><a href=\"#Fielding提出了以下六个限制：\" class=\"headerlink\" title=\"Fielding提出了以下六个限制：\"></a>Fielding提出了以下六个限制：</h4><ol>\n<li>客户端 - 服务器</li>\n</ol>\n<p>RESTful API在客户端和服务器之间提供明确的分离，允许客户端和服务器彼此独立地开发。这种分离使得为同一服务器实现多个客户端成为可能，就像你为EmojiJournal创建iOS和Web应用程序客户端时所做的那样。</p>\n<ol start=\"2\">\n<li>无状态</li>\n</ol>\n<p>RESTful API应该是无状态的。每个请求都应该是自包含的，并且不应该依赖于存储在服务器上的先前请求的任何会话上下文。</p>\n<ol start=\"3\">\n<li>可缓存</li>\n</ol>\n<p>由于RESTful API是无状态和自包含的，因此可以将请求的结果缓存到RESTful API。这可以由客户端或诸如web代理之类的中介来完成。</p>\n<p>设计良好的RESTful API应该鼓励尽可能存储可缓存的数据，对请求的响应被隐式或显式标记为可缓存，可缓存到特定时间（expires-at）或不可缓存。</p>\n<ol start=\"4\">\n<li>分层系统</li>\n</ol>\n<p>RESTful API可以是分层的，因此客户端不知道它是直接连接到API本身还是通过代理或负载均衡器间接连接。另外，API本身可以由服务器系统本身内的若干层或源组成和构建。</p>\n<ol start=\"5\">\n<li>按需代码（可选）</li>\n</ol>\n<p>RESTful API可以提供可以直接在客户端上运行的功能。实际上，这通常仅限于在浏览器中运行的JavaScript或Java Applet。</p>\n<ol start=\"6\">\n<li>统一界面</li>\n</ol>\n<p>RESTful API最重要的概念之一是资源的使用。资源可以是API可以提供有关信息的任何对象，例如你将使用的JournalEntry资源。</p>\n<h4 id=\"提供统一接口的RESTful-API必须满足以下四个约束：\"><a href=\"#提供统一接口的RESTful-API必须满足以下四个约束：\" class=\"headerlink\" title=\"提供统一接口的RESTful API必须满足以下四个约束：\"></a>提供统一接口的RESTful API必须满足以下四个约束：</h4><ul>\n<li>请求必须确定他们采取行动的资源。 </li>\n<li>请求和响应必须使用资源的表示。 </li>\n<li>消息必须是自描述的，自包含的，并且只能使用标准操作。</li>\n<li>资源必须通过链接连接到其他资源。</li>\n</ul>\n<p>另请注意，没有提及HTTP和Web请求。虽然RESTful API最常使用HTTP实现，但这不是必需的。也就是说，我们将仅介绍如何使用标准HTTP操作构建RESTful API，我们接下来将简要介绍HTTP本身。</p>\n<h3 id=\"HyperText-Transfer-Protocol-HTTP\"><a href=\"#HyperText-Transfer-Protocol-HTTP\" class=\"headerlink\" title=\"HyperText Transfer Protocol (HTTP)\"></a>HyperText Transfer Protocol (HTTP)</h3><p>超文本传输协议（HTTP）是一种客户端 - 服务器，基于请求 - 响应的协议，是网站和基于Web的流量的基础。 因此，它受到客户端和服务器的普遍支持。</p>\n<h3 id=\"HTTP-based-RESTful-APIs\"><a href=\"#HTTP-based-RESTful-APIs\" class=\"headerlink\" title=\"HTTP-based RESTful APIs\"></a>HTTP-based RESTful APIs</h3><h4 id=\"URL作为资源\"><a href=\"#URL作为资源\" class=\"headerlink\" title=\"URL作为资源\"></a>URL作为资源</h4><p>统一接口的第一个要求是请求标识它们所依赖的资源。在HTTP中，这是通过RESTful API使用请求的URL实现的。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/entries</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特定资源的URL编码标识符\"><a href=\"#特定资源的URL编码标识符\" class=\"headerlink\" title=\"特定资源的URL编码标识符\"></a>特定资源的URL编码标识符</h4><p>将提供这些URL以使客户端能够与所有日记帐分录和特定日记帐分录进行交互：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/entries </span><br><span class=\"line\">/entries/&lt;identifier&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用于资源组的URL编码查询参数\"><a href=\"#用于资源组的URL编码查询参数\" class=\"headerlink\" title=\"用于资源组的URL编码查询参数\"></a>用于资源组的URL编码查询参数</h4><p>你可能还希望提供与资源子集的API。 这再次通过URL完成，这次使用URL查询参数。</p>\n<p>URL查询参数以<code>?</code>开头。 他们可以使用<code>&lt;key&gt; = &lt;value&gt;</code>格式的键值对传递有关资源的任何其他信息。 可以使用键值对之间的<code>＆</code>分隔符聚合和传递多个键值对。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/entries </span><br><span class=\"line\">/entries?emoji=&lt;emoji&gt;&amp;date=&lt;date&gt; </span><br><span class=\"line\">/entries/&lt;idenfifier&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分层API的分层URL\"><a href=\"#分层API的分层URL\" class=\"headerlink\" title=\"分层API的分层URL\"></a>分层API的分层URL</h4><p>RESTful URL也可以是分层的。 在你的EmojiJournal应用程序中，你只会支持拥有单个EmojiJournal的用户。 但是，假设你希望支持拥有多个期刊的用户，每个期刊都有自己的日记帐分录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/journals </span><br><span class=\"line\">/journals/&lt;identifier&gt; </span><br><span class=\"line\">/journals/&lt;identifier&gt;/entries </span><br><span class=\"line\">/journals/&lt;identifier&gt;/entries?emoji=&lt;emoji&gt;&amp;date=&lt;date&gt; /journals/&lt;identifier&gt;/entries/&lt;identifier&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如，对以下URL的客户端请求将与日记2中的条目20进行交互：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/journals/2/entries/20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"资源表示\"><a href=\"#资源表示\" class=\"headerlink\" title=\"资源表示\"></a>资源表示</h4><p>回想一下，统一接口的第二个概念是请求和响应应该使用资源的表示。 这是通过在HTTP正文数据中编码资源的表示，在基于HTTP的RESTful API中实现的。</p>\n<p>HTTP消息，无论是请求还是响应，基本上由两部分组成：一组标题和正文数据。 为了完整性，响应还包含一个状态代码，用于报告请求的状态。</p>\n<h4 id=\"HTTP首部和正文数据\"><a href=\"#HTTP首部和正文数据\" class=\"headerlink\" title=\"HTTP首部和正文数据\"></a>HTTP首部和正文数据</h4><p>HTTP首部为请求和响应提供了额外的元数据。 首部在请求或响应开始时传输，并存储为键值对，一些首部允许多个值。</p>\n<p>你可以使用HTTP首部存储你希望的任何其他信息。 你应该了解两个正式定义的标准标题，请参阅<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html</a>（由正式的核心RFC规范定义），以及不太正式但广泛使用的非标准的首部，请参阅<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields\">https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields</a>。</p>\n<p>标准头用于传递诸如Cookie，授权，ContentType（描述正文数据的媒体类型）和Content-Length（以字节为单位描述正文数据长度）等信息。</p>\n<p>HTTP消息正文包含与请求或响应关联的数据。 在响应对网页的请求的情况下，正文数据包含网页本身的来源。 看一下对Hello，World的请求生成的HTTP响应！ 你在上一章中创建的应用程序。</p>\n<h4 id=\"正文数据中的资源表示\"><a href=\"#正文数据中的资源表示\" class=\"headerlink\" title=\"正文数据中的资源表示\"></a>正文数据中的资源表示</h4><p>如前所述，RESTful API对返回的HTTP正文数据中的资源表示进行编码。 身体通常由三部分组成：</p>\n<ol>\n<li>Content-Type首部</li>\n</ol>\n<p>Content-Type首部表示用于表示正文数据中的资源的编码。最常用的方法是使用JavaScript Object Notation（JSON）对表示进行编码，并将Content-Type首部设置为<code>application/json</code>。有时与RESTful API一起使用的身体数据编码的其他示例包括Protobuf，Thrift和Avro。</p>\n<ol start=\"2\">\n<li>接受首部（仅限请求）</li>\n</ol>\n<p>接受首部指示客户端将接受响应的编码。这通常是<code>application/json</code>，但它也可以包含编码列表。例如，如果客户端在JSON和Protobuf中都接受了响应，则此值可能设置为：<code>application/json;application/protobuf</code>。</p>\n<ol start=\"3\">\n<li>编码的正文数据</li>\n</ol>\n<p>最后，使用Content-Type首部中设置的编码将资源本身编码为正文数据。在最常见的<code>application/json</code>场景中，这是资源的JSON表示。 JSON的细节取决于特定资源的模型。例如，在本书后面稍后，JournalEntry的资源将包含id，emoji和date，类似于：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">\t<span class=\"attr\">&quot;emoji&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;😊 &quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">\t<span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;2018-09-18T00:07:01Z&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自我描述性的信息\"><a href=\"#自我描述性的信息\" class=\"headerlink\" title=\"自我描述性的信息\"></a>自我描述性的信息</h4><p>你已经了解了资源的识别和表示，但你如何对这些资源进行操作？</p>\n<p>统一接口的第三个原则解决了这个问题。 它规定请求和响应都应该是自描述的，并且它们仅使用客户端和服务器都理解的标准操作。 在基于HTML的RESTful API中，这是通过使用特定的HTTP方法实现的。</p>\n<p>RFC 2616概述了八种HTTP方法：OPTIONS，GET，HEAD，POST，PUT，DELETE，TRACE和CONNECT。</p>\n<h4 id=\"通过链接连接资源\"><a href=\"#通过链接连接资源\" class=\"headerlink\" title=\"通过链接连接资源\"></a>通过链接连接资源</h4><p>统一接口的第四个也是最后一个概念是资源应该通过链接连接到其他资源。</p>\n<p>如你所见，基于HTTP的RESTful API使用URL和基于URL的标识符来提供对资源的访问并指定单个资源。 因此，资源之间的链接只是进一步的RESTful URL和链接到连接资源的基于URL的标识符。</p>\n<p>有两种常见的场景需要URL或标识资源：</p>\n<ul>\n<li>请求的资源引用另一个（子或相关）资源。</li>\n<li>你需要知道资源的标识符。</li>\n</ul>\n<h3 id=\"构建RESTful-API\"><a href=\"#构建RESTful-API\" class=\"headerlink\" title=\"构建RESTful API\"></a>构建RESTful API</h3><p><img src=\"/../assets/image-20190806103823282.png\" alt=\"image-20190806103823282\"></p>\n<p>到目前为止，你已经学会了所有基础知识。 当你了解有关设计和实现RESTful API的更多信息时，你会发现除了我们在此处介绍的范围之外还有其他最佳实践。 这包括设置正确的Content-Type和Accepts标头，为成功创建设置Location标头，并为请求中的任何故障设置正确的HTTP状态代码。</p>\n<p>此外，需要对请求和响应主体进行编码和解码，最常见的是来自JSON。 这曾经是一项艰巨的任务。 由于强大的Codable协议，Swift使JSON优雅且无痛。</p>\n<h2 id=\"第四章：Codable简介\"><a href=\"#第四章：Codable简介\" class=\"headerlink\" title=\"第四章：Codable简介\"></a>第四章：Codable简介</h2><p>Codable协议是Swift编程语言最强大的功能之一。 在一个句子中，当你扩展对象以符合Codable时，你可以使该对象自动序列化为任何外部可读格式，例如JSON，XML或协议缓冲区。</p>\n<h3 id=\"The-bare-necessities\"><a href=\"#The-bare-necessities\" class=\"headerlink\" title=\"The bare necessities\"></a>The bare necessities</h3><p>直接看一个例子</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 Cadabe 是一个组合的协议：Decodable &amp; Encodable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Song</span>: <span class=\"title class_\">Codable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">CodingKeys</span>: <span class=\"title class_\">String</span>, <span class=\"title class_\">CodingKey</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> title <span class=\"operator\">=</span> <span class=\"string\">&quot;songTitle&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> length <span class=\"operator\">=</span> <span class=\"string\">&quot;songLength&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Animal</span>: <span class=\"title class_\">Codable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isFriendly: <span class=\"type\">Bool</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> birthday: <span class=\"type\">Date</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> songs: [<span class=\"type\">Song</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2 嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> baloo <span class=\"operator\">=</span> <span class=\"type\">Animal</span>(name: <span class=\"string\">&quot;Baloo&quot;</span>,</span><br><span class=\"line\">                   age: <span class=\"number\">5</span>,</span><br><span class=\"line\">                   isFriendly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                   birthday: <span class=\"type\">Date</span>(),</span><br><span class=\"line\">                   songs: [<span class=\"type\">Song</span>(title: <span class=\"string\">&quot;The Bare Necessities&quot;</span>, length: <span class=\"number\">180</span>)])</span><br><span class=\"line\"><span class=\"keyword\">let</span> bagheera <span class=\"operator\">=</span> <span class=\"type\">Animal</span>(name: <span class=\"string\">&quot;Bagheera&quot;</span>,</span><br><span class=\"line\">                      age: <span class=\"literal\">nil</span>,</span><br><span class=\"line\">                      isFriendly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                      birthday: <span class=\"type\">Date</span>(),</span><br><span class=\"line\">                      songs: [<span class=\"type\">Song</span>(title: <span class=\"string\">&quot;Jungle&#x27;s No Place For A Boy&quot;</span>, length: <span class=\"number\">95</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3 处理日期格式，驼峰式与蛇式转换</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">encoder.keyEncodingStrategy <span class=\"operator\">=</span> .convertToSnakeCase</span><br><span class=\"line\">encoder.dateEncodingStrategy <span class=\"operator\">=</span> .iso8601</span><br><span class=\"line\"><span class=\"keyword\">let</span> decoder <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>()</span><br><span class=\"line\">decoder.keyDecodingStrategy <span class=\"operator\">=</span> .convertFromSnakeCase</span><br><span class=\"line\">decoder.dateDecodingStrategy <span class=\"operator\">=</span> .iso8601</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 4</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> encodedBaloo <span class=\"operator\">=</span> <span class=\"keyword\">try</span> encoder.encode(baloo)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> balooString <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: encodedBaloo, encoding: .utf8) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(balooString)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> encodedBagheera <span class=\"operator\">=</span> <span class=\"keyword\">try</span> encoder.encode(bagheera)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bagheeraString <span class=\"operator\">=</span> <span class=\"type\">String</span>(data: encodedBagheera, encoding: .utf8) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(bagheeraString)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 5</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> decodedBaloo <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.decode(<span class=\"type\">Animal</span>.<span class=\"keyword\">self</span>, from: encodedBaloo)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(decodedBaloo)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> decodedBagheera <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.decode(<span class=\"type\">Animal</span>.<span class=\"keyword\">self</span>, from: encodedBagheera)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(decodedBagheera)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error occurred: <span class=\"subst\">\\(error.localizedDescription)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第五章：Codable-Routing\"><a href=\"#第五章：Codable-Routing\" class=\"headerlink\" title=\"第五章：Codable Routing\"></a>第五章：Codable Routing</h2><p>Codable Routing支持以完全类型安全的方式在你的应用程序的结构和类以及HTTP请求和响应中使用的正文数据之间自动转换。 它大大减少了构建路由处理程序时需要编写的代码，并使Kitura能够代表你执行数据验证和错误处理。</p>\n<p>看Model和Route的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JournalEntry</span>: <span class=\"title class_\">Codable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id: <span class=\"type\">String</span>?</span><br><span class=\"line\">  <span class=\"keyword\">var</span> emoji: <span class=\"type\">String</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> date: <span class=\"type\">Date</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> LoggerAPI</span><br><span class=\"line\"><span class=\"keyword\">import</span> Kitura</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> entries: [<span class=\"type\">JournalEntry</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">initializeEntryRoutes</span>(<span class=\"params\">app</span>: <span class=\"type\">App</span>) &#123;</span><br><span class=\"line\">  app.router.get(<span class=\"string\">&quot;/entries&quot;</span>, handler: getAllEntries)</span><br><span class=\"line\">  app.router.post(<span class=\"string\">&quot;/entries&quot;</span>, handler: addEntry)</span><br><span class=\"line\">  app.router.delete(<span class=\"string\">&quot;/entries&quot;</span>, handler: deleteEntry)</span><br><span class=\"line\">  <span class=\"type\">Log</span>.info(<span class=\"string\">&quot;Journal entry routes created&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addEntry</span>(<span class=\"params\">entry</span>: <span class=\"type\">JournalEntry</span>, <span class=\"params\">completion</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">JournalEntry</span>?, <span class=\"type\">RequestError</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> storedEntry <span class=\"operator\">=</span> entry</span><br><span class=\"line\">  storedEntry.id <span class=\"operator\">=</span> entries.count.value</span><br><span class=\"line\">  entries.append(storedEntry)</span><br><span class=\"line\">  completion(storedEntry, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">getAllEntries</span>(<span class=\"params\">completion</span>: <span class=\"keyword\">@escaping</span> ([<span class=\"type\">JournalEntry</span>]<span class=\"operator\">?</span>, <span class=\"type\">RequestError</span>?) -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"type\">Void</span> &#123;</span><br><span class=\"line\">  completion(entries, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">deleteEntry</span>(<span class=\"params\">id</span>: <span class=\"type\">String</span>, <span class=\"params\">completion</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">RequestError</span>?) -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> index <span class=\"operator\">=</span> entries.index(where: &#123; <span class=\"variable\">$0</span>.id <span class=\"operator\">==</span> id &#125;) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> completion(.notFound)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  entries.remove(at: index)</span><br><span class=\"line\">  completion(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Codable Routing的一个独特功能是它只需要你在处理函数中定义你希望从请求中接收的值，以及你将通过完成处理程序添加到响应中的值。</p>\n<blockquote>\n<p>目前，Kitura仅支持从<code>application/json</code>解码。 这意味着，实际上，Content-Type当前必须始终设置为<code>application/json</code>。 但是，Kitura团队计划在即将发布的版本中支持其他编码类型。</p>\n</blockquote>\n<h2 id=\"第六章：OpenAPI规范\"><a href=\"#第六章：OpenAPI规范\" class=\"headerlink\" title=\"第六章：OpenAPI规范\"></a>第六章：OpenAPI规范</h2><h3 id=\"Swagger的目标\"><a href=\"#Swagger的目标\" class=\"headerlink\" title=\"Swagger的目标\"></a>Swagger的目标</h3><p>在Tony Tam开创性的开源项目的基础上，其他公司开始做出贡献。 最终，Linux基金会承担了该项目的赞助，并将其名称更改为OpenAPI Initiative。 这种广泛的支持使OpenAPI规范在开源软件开发中占据了非常突出的位置。</p>\n<p>当Tony开始研究Swagger API项目时，他确定了三个关键目标：</p>\n<ul>\n<li>API开发</li>\n<li>API文档</li>\n<li>API交互</li>\n</ul>\n<h3 id=\"生成你的规格\"><a href=\"#生成你的规格\" class=\"headerlink\" title=\"生成你的规格\"></a>生成你的规格</h3><p>通过添加<code>Kitura-OpenAPI</code>依赖</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.package(url: <span class=\"string\">&quot;https://github.com/IBM-Swift/Kitura-OpenAPI.git&quot;</span>, from: <span class=\"string\">&quot;1.1.1&quot;</span>),</span><br></pre></td></tr></table></figure>\n\n<p> 运行后</p>\n<p><a href=\"http://localhost:8080/openapi\">http://localhost:8080/openapi</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;schemes&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;swagger&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;info&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;Kitura Project&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;Generated by Kitura&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;paths&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;\\/entries&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;get&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;responses&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;200&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;schema&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;type&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;array&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;items&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;$ref&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;#\\/definitions\\/JournalEntry&quot;</span></span><br><span class=\"line\">              <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;successful response&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;consumes&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;produces&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;post&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;consumes&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;produces&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;responses&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;200&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;schema&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;$ref&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;#\\/definitions\\/JournalEntry&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;successful response&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parameters&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;in&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;body&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;input&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span> <span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;schema&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;$ref&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;#\\/definitions\\/JournalEntry&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;\\/health&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;get&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;responses&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;200&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;schema&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">              <span class=\"attr\">&quot;$ref&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;#\\/definitions\\/Status&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;successful response&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;consumes&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;produces&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;\\/entries\\/&#123;id&#125;&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;delete&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;consumes&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;produces&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"string\">&quot;application\\/json&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;responses&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;200&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;successful response&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parameters&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;in&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;path&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;id&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;required&quot;</span> <span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;basePath&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;\\/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;definitions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;JournalEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;date&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;emoji&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;emoji&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;number&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Status&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;status&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;details&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;timestamp&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;details&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;items&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;array&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;timestamp&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此代码段的顶部表示你正在查看路径<code>/entries</code>的GET路由。 三个子节点描述了这条路线：</p>\n<ul>\n<li><p>“responses”提供用户可以接收的一系列响应。</p>\n</li>\n<li><p>“consumes”指定必须给出此方法的数据类型。</p>\n</li>\n<li><p>“produces”描述响应将包含的数据类型。</p>\n</li>\n</ul>\n<h3 id=\"使用Kitura-OpenAPI-UI\"><a href=\"#使用Kitura-OpenAPI-UI\" class=\"headerlink\" title=\"使用Kitura OpenAPI UI\"></a>使用Kitura OpenAPI UI</h3><p>同步生成的还有UI调试界面</p>\n<p><a href=\"http://localhost:8080/openapi/ui\">http://localhost:8080/openapi/ui</a></p>\n<p><img src=\"https://gewill.org/assets/image-20190807140446505.png\" alt=\"image-20190807140446505\"></p>\n<p>这对于你需要进行快速而肮脏的测试的情况非常有用 - 或者如果你无法让顽固的队友相信这个模块真的有用！</p>\n<h3 id=\"为你的iOS应用生成SDK\"><a href=\"#为你的iOS应用生成SDK\" class=\"headerlink\" title=\"为你的iOS应用生成SDK\"></a>为你的iOS应用生成SDK</h3><p>终端运行，即可生成SDK，一个功能齐全的Swift SDK，可以处理与此特定服务器的所有网络通信。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull swaggerapi/swagger-codegen-cli</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v <span class=\"variable\">$&#123;PWD&#125;</span>:/local swaggerapi/swagger-codegen-cli langs</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> GeneratedSDK </span><br><span class=\"line\"><span class=\"built_in\">touch</span> specification.json </span><br><span class=\"line\">//  复制http://localhost:8080/openapi的内容到specification.json</span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v <span class=\"variable\">$&#123;PWD&#125;</span>:/local swaggerapi/swagger-codegen-cli generate -i /local/specification.json -l swift -o /local/GeneratedSDK</span><br></pre></td></tr></table></figure>\n\n<p>在实践中，这不仅可以节省时间并让你快速启动和运行，还可以节省错误，并且对于那些没有（喘气）在Swift工作的人来说尤其有用！</p>\n"},{"title":"Simple Calculator","url":"/2015/05/24/Simple-Calculator/","content":"<p>一个简单地计算器，可以加减乘除，除法还有问题，待解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  ViewController.swift</span><br><span class=\"line\">//  Simple Calculator</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by Will on 5/24/15.</span><br><span class=\"line\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">class ViewController: UIViewController &#123;</span><br><span class=\"line\">    @IBOutlet weak var text1: UITextField!</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBOutlet weak var text2: UITextField!</span><br><span class=\"line\">    @IBOutlet weak var result: UITextField!</span><br><span class=\"line\">    </span><br><span class=\"line\">    @IBAction func BeZero(sender: AnyObject) &#123;</span><br><span class=\"line\">        self.result.text = &quot;0&quot;</span><br><span class=\"line\">        self.text1.text = &quot; &quot;</span><br><span class=\"line\">        self.text2.text = &quot; &quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @IBAction func plus(sender: AnyObject) &#123;</span><br><span class=\"line\">        // 三目运算符简洁，但是没有 if 逻辑清晰。</span><br><span class=\"line\">        var num1 = self.text1.text.isEmpty ? 0 : self.text1.text.toInt()</span><br><span class=\"line\">        var num2 = self.text2.text.isEmpty ? 0 : self.text2.text.toInt()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        var resultNum:Double = Double(num1!) + Double(num2!)</span><br><span class=\"line\">        println(resultNum)</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.result.text = &quot;\\(resultNum)&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.text1.resignFirstResponder()</span><br><span class=\"line\">        self.text2.resignFirstResponder()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @IBAction func minus(sender: AnyObject) &#123;</span><br><span class=\"line\">        // 三目运算符简洁，但是没有 if 逻辑清晰。</span><br><span class=\"line\">        var num1 = self.text1.text.isEmpty ? 0 : self.text1.text.toInt()</span><br><span class=\"line\">        var num2 = self.text2.text.isEmpty ? 0 : self.text2.text.toInt()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        var resultNum = num1! - num2!</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.result.text = &quot;\\(resultNum)&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.text1.resignFirstResponder()</span><br><span class=\"line\">        self.text2.resignFirstResponder()</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @IBAction func multiply(sender: AnyObject) &#123;</span><br><span class=\"line\">        // 三目运算符简洁，但是没有 if 逻辑清晰。</span><br><span class=\"line\">        var num1 = self.text1.text.isEmpty ? 0 : self.text1.text.toInt()</span><br><span class=\"line\">        var num2 = self.text2.text.isEmpty ? 0 : self.text2.text.toInt()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        var resultNum = num1! * num2!</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.result.text = &quot;\\(resultNum)&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.text1.resignFirstResponder()</span><br><span class=\"line\">        self.text2.resignFirstResponder()</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @IBAction func division(sender: AnyObject) &#123;</span><br><span class=\"line\">        // 三目运算符简洁，但是没有 if 逻辑清晰。</span><br><span class=\"line\">        var num1 = self.text1.text.isEmpty ? 0 : self.text1.text.toInt()</span><br><span class=\"line\">        var num2 = self.text2.text.isEmpty ? 0 : self.text2.text.toInt()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        var resultNum = num1! / num2!</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.result.text = &quot;\\(resultNum)&quot;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.text1.resignFirstResponder()</span><br><span class=\"line\">        self.text2.resignFirstResponder()</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    override func viewDidLoad() &#123;</span><br><span class=\"line\">        super.viewDidLoad()</span><br><span class=\"line\">        // Do any additional setup after loading the view, typically from a nib.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func didReceiveMemoryWarning() &#123;</span><br><span class=\"line\">        super.didReceiveMemoryWarning()</span><br><span class=\"line\">        // Dispose of any resources that can be recreated.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://i.imgur.com/96q8Eay.png\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/7kHLTc4.png\" alt=\"Imgur\"></p>\n"},{"title":"Sketch 3 Tutorials by LevelUpTuts","url":"/2015/08/17/Sketch-3-Tutorials-by-LevelUpTuts/","content":"<p>Sketch 3 Tutorials by LevelUpTuts: <a href=\"https://www.youtube.com/watch?v=-1BMzQLq7zk\">https://www.youtube.com/watch?v=-1BMzQLq7zk</a></p>\n<p>A very basic tutorial, and very detailed. But lots of plugins usage.</p>\n<h2 id=\"6-Using-Text-Styles\"><a href=\"#6-Using-Text-Styles\" class=\"headerlink\" title=\"6. Using Text Styles\"></a>6. Using Text Styles</h2><p>Just like CSS style, change it every text in the style will update.</p>\n<h2 id=\"9-Shapes-in-Sketch-3\"><a href=\"#9-Shapes-in-Sketch-3\" class=\"headerlink\" title=\"9. Shapes in Sketch 3\"></a>9. Shapes in Sketch 3</h2><p>Star and Polygon can change Points.</p>\n<h2 id=\"10-Creating-and-Using-Symbols\"><a href=\"#10-Creating-and-Using-Symbols\" class=\"headerlink\" title=\"10. Creating and Using Symbols\"></a>10. Creating and Using Symbols</h2><blockquote>\n<p>Symbols is one of the brand new features in Sketch 3.0 and it allows you to re-use Groups, Layer and Text Styles in your document. Once added, simply insert them via Insert &gt; Symbol in the toolbar.</p>\n</blockquote>\n<h2 id=\"11-iOS-Design-UI-Tools\"><a href=\"#11-iOS-Design-UI-Tools\" class=\"headerlink\" title=\"11. iOS Design UI Tools\"></a>11. iOS Design UI Tools</h2><p>We use collections of symbols and text styles inside Sketch: File -&gt; New From Template.</p>\n<h2 id=\"19-Extending-Sketch-With-Free-Resources\"><a href=\"#19-Extending-Sketch-With-Free-Resources\" class=\"headerlink\" title=\"19. Extending Sketch With Free Resources\"></a>19. Extending Sketch With Free Resources</h2><blockquote>\n<p>Sketch App Sources is a website that focuses on providing resources for Sketch 3 by Bohemian Coding.<br>We aim to provide top quality resources that designers love to use, and make their workflow simpler and more enjoyable.</p>\n</blockquote>\n<p><a href=\"http://www.sketchappsources.com/\">http://www.sketchappsources.com/</a> </p>\n<h2 id=\"20-Create-Animated-GIFs\"><a href=\"#20-Create-Animated-GIFs\" class=\"headerlink\" title=\"20. Create Animated GIFs\"></a>20. Create Animated GIFs</h2><p>Generate-GIF: plugin for generating animated GIFs</p>\n"},{"title":"Sketch improvements and skills","url":"/2015/05/25/Sketch-improvements-and-skills/","content":"<h1 id=\"Sketch-进阶与技巧\"><a href=\"#Sketch-进阶与技巧\" class=\"headerlink\" title=\"Sketch 进阶与技巧\"></a><a href=\"http://www.jikexueyuan.com/course/704.html\">Sketch 进阶与技巧</a></h1><h2 id=\"一：App-设计标准\"><a href=\"#一：App-设计标准\" class=\"headerlink\" title=\"一：App 设计标准\"></a>一：App 设计标准</h2><ol>\n<li>Point (PT)</li>\n</ol>\n<ul>\n<li>Point (PT) - 表示独立于设备的<br>像素点 (在 Android 上叫 DP)</li>\n</ul>\n<ol start=\"2\">\n<li>Point (PT)和像素的关系</li>\n</ol>\n<ul>\n<li>像素点: 相同 Point 的按钮, 在 Retina 屏幕上的图片像素是非Retina屏幕的两倍 </li>\n<li>通过 @2x 后缀标识</li>\n</ul>\n<ol start=\"3\">\n<li><p>iPhone 分辨率的终极指南</p>\n<ul>\n<li><a href=\"http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\">http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></li>\n</ul>\n</li>\n<li><p>iOS App 设计尺寸标准</p>\n</li>\n</ol>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html#//apple_ref/doc/uid/TP40006556-CH66-SW1\">Apple HIG</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\">Icon and Image Sizes</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTA0NjY4MA==&amp;mid=204122367&amp;idx=2&amp;sn=8e24fbbfd81cf56991cf1714a175ae02&amp;scene=0#rd\">手把手带你入门 iOS 8人机界面设计</a></p>\n</li>\n</ul>\n"},{"title":"Sketch interface design","url":"/2015/05/25/Sketch-interface-design/","content":"<h1 id=\"Sketch-界面设计入门和实战\"><a href=\"#Sketch-界面设计入门和实战\" class=\"headerlink\" title=\"Sketch 界面设计入门和实战\"></a>Sketch 界面设计入门和实战</h1><p>极客学院的视频教程，<a href=\"http://www.jikexueyuan.com/course/543_2.html?ss=2\">地址点我</a>。总体上算是入门了，有待熟练要多做几个练习。</p>\n<h2 id=\"一：Sketch-概述\"><a href=\"#一：Sketch-概述\" class=\"headerlink\" title=\"一：Sketch 概述\"></a>一：Sketch 概述</h2><p>Sketch 的优点</p>\n<ul>\n<li>1.矢量</li>\n<li>2.文件小</li>\n<li>3.画布无限大</li>\n<li>4.每个图层都支持多种填充模式</li>\n<li>5.Symbol 和 Style</li>\n<li>6.强大的文件导出工具</li>\n<li>7.自动保留所有历史版本</li>\n</ul>\n<p>Sketch 的弱点</p>\n<ul>\n<li>位图处理能力弱</li>\n</ul>\n<h2 id=\"二：Sketch-界面功能布局\"><a href=\"#二：Sketch-界面功能布局\" class=\"headerlink\" title=\"二：Sketch 界面功能布局\"></a>二：Sketch 界面功能布局</h2><ul>\n<li>1.软件布局</li>\n<li>2.画布</li>\n<li>3.检查器</li>\n<li>4.图形列表</li>\n</ul>\n<h2 id=\"三：Sketch-基础工具-图层\"><a href=\"#三：Sketch-基础工具-图层\" class=\"headerlink\" title=\"三：Sketch 基础工具-图层\"></a>三：Sketch 基础工具-图层</h2><ul>\n<li><p>1.添加图层</p>\n</li>\n<li><p>Shift 和 Option 的使用</p>\n</li>\n<li><p>2.选择图层</p>\n</li>\n<li><p>同时选择多个图层</p>\n</li>\n<li><p>重叠图层 </p>\n</li>\n<li><p>3.移动图层</p>\n<ul>\n<li>Shift、Alt、Cmd+D</li>\n<li>隐藏图层</li>\n</ul>\n</li>\n<li><p>4.改变大小</p>\n<ul>\n<li>Cmd+方向键</li>\n<li>Cmd+Shift+方向键</li>\n</ul>\n</li>\n<li><p>5.锁定图层</p>\n</li>\n</ul>\n<h2 id=\"四：Sketch-基础工具-图形\"><a href=\"#四：Sketch-基础工具-图形\" class=\"headerlink\" title=\"四：Sketch 基础工具-图形\"></a>四：Sketch 基础工具-图形</h2><ul>\n<li><p>1.基本图形</p>\n</li>\n<li><p>2.图形编辑</p>\n</li>\n<li><p>点的控制手柄</p>\n</li>\n<li><p>矢量工具</p>\n</li>\n<li><p>封闭路径 VS 开发路径</p>\n</li>\n<li><p>Shift</p>\n<ul>\n<li>选中多个点</li>\n</ul>\n</li>\n<li><p>添加锚点</p>\n</li>\n<li><p>3.布尔运算</p>\n</li>\n<li><p>4.变形工具</p>\n</li>\n<li><p>5.蒙版</p>\n<ul>\n<li>限制蒙版</li>\n<li>图形蒙版</li>\n<li>ALPHA 蒙版</li>\n</ul>\n</li>\n<li><p>6.剪刀工具</p>\n</li>\n<li><p>7.复制旋转</p>\n</li>\n</ul>\n<h2 id=\"五：Sketch-基础工具-文本\"><a href=\"#五：Sketch-基础工具-文本\" class=\"headerlink\" title=\"五：Sketch 基础工具-文本\"></a>五：Sketch 基础工具-文本</h2><ul>\n<li><p>1.添加文本</p>\n</li>\n<li><p>2.文本检查器</p>\n</li>\n<li><p>Text Style </p>\n</li>\n<li><p>3.文本转换问轮廓</p>\n</li>\n<li><p>渐变效果</p>\n</li>\n<li><p>4.文本字体的技巧</p>\n</li>\n<li><p>Fonts：找了半天，原来</p>\n</li>\n</ul>\n<h2 id=\"六：Sketch-基础工具-图片\"><a href=\"#六：Sketch-基础工具-图片\" class=\"headerlink\" title=\"六：Sketch 基础工具-图片\"></a>六：Sketch 基础工具-图片</h2><ul>\n<li><p>1.位图编辑</p>\n</li>\n<li><p>高斯模糊</p>\n</li>\n<li><p>Color Adjust</p>\n</li>\n<li><p>反选</p>\n</li>\n<li><p>剪裁</p>\n</li>\n<li><p>填充</p>\n</li>\n<li><p>2.九宫格</p>\n</li>\n</ul>\n<h2 id=\"七：App-登陆界面制作完整步骤\"><a href=\"#七：App-登陆界面制作完整步骤\" class=\"headerlink\" title=\"七：App 登陆界面制作完整步骤\"></a>七：App 登陆界面制作完整步骤</h2><p><img src=\"http://i.imgur.com/HVAhSXP.png\" alt=\"Imgur\"></p>\n"},{"title":"Sketch：效率提高篇","url":"/2015/08/17/Sketch-more-efficient/","content":"<p>视频课程地址：<a href=\"http://www.jikexueyuan.com/course/1420.html\">http://www.jikexueyuan.com/course/1420.html\n</a></p>\n<p>快捷键的使用只是操作提高速度，还需要学习更多的设计方面的技巧。视频学习确实速度够快，就像看电影，不容暂停分心才能跟上进度。</p>\n<ul>\n<li>常用快捷键和自定义快捷键</li>\n<li>快速导出图片资源</li>\n<li>使用快捷键控制定位视图</li>\n</ul>\n"},{"title":"Swift 2.1 Examples - Classes and Structures","url":"/2015/11/03/Swift-2-1-Examples-Classes-and-Structures/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类和结构体对比</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Resolution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> height <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VideoMode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> resolution <span class=\"operator\">=</span> <span class=\"type\">Resolution</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> interlaced <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> frameRate <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类和结构体实例 </span></span><br><span class=\"line\"><span class=\"comment\">//: 一个引用类型一个值类型 Classes are reference types, Structures and Enumerations are value types</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> someResolution <span class=\"operator\">=</span> <span class=\"type\">Resolution</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> someVideoMode <span class=\"operator\">=</span> <span class=\"type\">VideoMode</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">someResolution.height</span><br><span class=\"line\">someVideoMode.frameRate</span><br><span class=\"line\">someVideoMode.resolution.height</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vga <span class=\"operator\">=</span> <span class=\"type\">Resolution</span>(width: <span class=\"number\">640</span>, height: <span class=\"number\">480</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> hd <span class=\"operator\">=</span> <span class=\"type\">Resolution</span>(width: <span class=\"number\">1920</span>, height: <span class=\"number\">1080</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cinema <span class=\"operator\">=</span> hd</span><br><span class=\"line\">cinema.height <span class=\"operator\">=</span> <span class=\"number\">3096</span></span><br><span class=\"line\">cinema.width</span><br><span class=\"line\">hd</span><br><span class=\"line\"><span class=\"keyword\">let</span> tenEighty <span class=\"operator\">=</span> <span class=\"type\">VideoMode</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> asloTenEighty <span class=\"operator\">=</span> tenEighty</span><br><span class=\"line\">asloTenEighty.frameRate <span class=\"operator\">=</span> <span class=\"number\">30.0</span></span><br><span class=\"line\">tenEighty.frameRate</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 恒等运算符 Identity Operators : === !==</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> tenEighty <span class=\"operator\">===</span> asloTenEighty &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;These two variables refer to the same instance&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 指针 Pointers </span></span><br><span class=\"line\"><span class=\"comment\">//: Swift指针类型不用带 *</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类和结构体的选择: 结构体适合存储简单数据值和拷贝行为, 不需要继承另一个类型属性或者行为</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: String/Array/Dictionary 类型的赋值和复制行为：Assignment and copy behaviors on Strings, Arrays and Dicitonaries</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Swift 均以结构体形式实现，值拷贝，但是处于性能优化，只哟确有必要时才会实际执行拷贝；Objective-C是类，传递的是实例的引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Closures","url":"/2015/10/29/Swift-2-1-Examples-Closures/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 闭包是自包含的函数代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Swift 的闭包表达式有简洁的风格，带来很多便利：利用上下文类型推断/隐式返回单表达式/参数名缩写/尾随</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 闭包表达式（Closure Expressions）</span></span><br><span class=\"line\"><span class=\"comment\">//: &#123; (parameters) -&gt; returnType in statements &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> names <span class=\"operator\">=</span> [<span class=\"string\">&quot;Chris&quot;</span>, <span class=\"string\">&quot;Alex&quot;</span>, <span class=\"string\">&quot;Ewa&quot;</span>, <span class=\"string\">&quot;Barry&quot;</span>, <span class=\"string\">&quot;Daniella&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> reversed <span class=\"operator\">=</span> names.sort( &#123; (s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2 &#125; )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reversed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 根据上下文推断类型（Inferring Type From Context）</span></span><br><span class=\"line\">reversed <span class=\"operator\">=</span> names.sort( &#123; s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 <span class=\"operator\">&gt;</span> s2 &#125; )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reversed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 单表达式闭包隐式返回（Implicit Return From Single-Expression Closures），但是表达不够直接不建议</span></span><br><span class=\"line\">reversed <span class=\"operator\">=</span> names.sort( &#123; s1, s2 <span class=\"keyword\">in</span> s1 <span class=\"operator\">&gt;</span> s2 &#125; )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reversed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 参数名缩写（shorthand Argument Names）,简洁到这种形式还叫闭包？</span></span><br><span class=\"line\">reversed <span class=\"operator\">=</span> names.sort( &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span> &#125; )</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reversed)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 运算符函数（Operator Functions）, 到这个时候就完全是Swift来推断或者来猜了，而作为代码给人看过于抽象化了</span></span><br><span class=\"line\">reversed <span class=\"operator\">=</span> names.sort(<span class=\"operator\">&gt;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 尾随闭包（Trailing Closures），就是把闭包的大括号放在小括号外面，形式上更像一个函数，或者结构上大段的闭包放在后面更符合一般的书写习惯而已，这个用法是一个语法糖，避免头重脚轻。让懂的人看的舒服，不懂的人可能莫名其妙。记得Swfit调用 AFNetworking 就会智能补全成尾随闭包。</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunction</span>(<span class=\"params\">closure</span>: () -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// function do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someFunction ( &#123;</span><br><span class=\"line\">    <span class=\"comment\">// closure do something</span></span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Magic Time</span></span><br><span class=\"line\">someFunction() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// closure can alse do something at here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">reversed <span class=\"operator\">=</span> names.sort() &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reversed)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 捕获值（Capturing Values）</span></span><br><span class=\"line\"><span class=\"comment\">//: 闭包是引用类型（Closure Are Reference Types），函数和闭包都可以赋值给变量或常量</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Collection Types","url":"/2015/10/29/Swift-2-1-Examples-Collection-Types/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 <span class=\"operator\">=</span> [<span class=\"type\">Double</span>](count: <span class=\"number\">3</span>, repeatedValue: <span class=\"number\">4.3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(array1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 <span class=\"operator\">=</span> array1 <span class=\"operator\">+</span> array1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> array1.isEmpty &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;array1 is empty.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;array1 is not empty, have <span class=\"subst\">\\(array1.count)</span> numbers.&quot;</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">array1.insert(<span class=\"number\">3.2</span>, atIndex: <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(array1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> array1 &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> letters <span class=\"operator\">=</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">Character</span>&gt;()</span><br><span class=\"line\">letters.insert(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">letters <span class=\"operator\">=</span> []</span><br><span class=\"line\"><span class=\"keyword\">var</span> set1: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> [<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> set2: <span class=\"type\">Set</span>  <span class=\"operator\">=</span> [<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\">set2.count</span><br><span class=\"line\">set2.insert(<span class=\"string\">&quot;33&quot;</span>)</span><br><span class=\"line\">set2.remove(<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\">set2</span><br><span class=\"line\"><span class=\"keyword\">for</span> genre <span class=\"keyword\">in</span> set2.sort() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(genre)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set1.union(set2)</span><br><span class=\"line\">set1.subtract(set2)</span><br><span class=\"line\">set1.exclusiveOr(set2)</span><br><span class=\"line\">set1.intersect(set2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> set3: <span class=\"type\">Set</span>&lt;<span class=\"type\">String</span>&gt;  <span class=\"operator\">=</span> [<span class=\"string\">&quot;33&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">set3.isDisjointWith(set2)</span><br><span class=\"line\">set3.isStrictSubsetOf(set2)</span><br><span class=\"line\">set3.isSubsetOf(set2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字典</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dict <span class=\"operator\">=</span> [<span class=\"type\">Int</span>: <span class=\"type\">String</span>]()</span><br><span class=\"line\">dict[<span class=\"number\">12</span>] <span class=\"operator\">=</span> <span class=\"string\">&quot;12222&quot;</span></span><br><span class=\"line\">dict <span class=\"operator\">=</span> [:]</span><br><span class=\"line\">dict <span class=\"operator\">=</span> [<span class=\"number\">12</span>: <span class=\"string\">&quot;1222&quot;</span>, <span class=\"number\">23</span>: <span class=\"string\">&quot;232423&quot;</span>, <span class=\"number\">322</span>: <span class=\"string\">&quot;23dsfsaf&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (num, value) <span class=\"keyword\">in</span> dict &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(num)</span> is <span class=\"subst\">\\(value)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dict[<span class=\"number\">12</span>] <span class=\"operator\">=</span> <span class=\"string\">&quot;tw&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> dict.values &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制流</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i <span class=\"operator\">&lt;</span> <span class=\"number\">0</span>  &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//元组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> somePoint <span class=\"operator\">=</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">_</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;is on the x-axis&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"keyword\">_</span>):</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;is on the y-axis&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;is outside of the box&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//检测API是否可用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">9</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//if</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temperatureInFahrenheit <span class=\"operator\">=</span> <span class=\"number\">90</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> temperatureInFahrenheit <span class=\"operator\">&lt;=</span> <span class=\"number\">32</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;It&#x27;s very cold. Consider wearing a scarf.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> temperatureInFahrenheit <span class=\"operator\">&gt;=</span> <span class=\"number\">86</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;It&#x27;s really warm. Don&#x27;t forget to wear sunscreen.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;It&#x27;s not that cold. Wear a t-shirt.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//switch 默认遇到符合case，立即终止</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> someCharacter: <span class=\"type\">Character</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> someCharacter &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;i&quot;</span>, <span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;u&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(someCharacter)</span> is a vowel&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;f&quot;</span>, <span class=\"string\">&quot;g&quot;</span>, <span class=\"string\">&quot;h&quot;</span>, <span class=\"string\">&quot;j&quot;</span>, <span class=\"string\">&quot;k&quot;</span>, <span class=\"string\">&quot;l&quot;</span>, <span class=\"string\">&quot;m&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;n&quot;</span>, <span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;q&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, <span class=\"string\">&quot;s&quot;</span>, <span class=\"string\">&quot;t&quot;</span>, <span class=\"string\">&quot;v&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;z&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(someCharacter)</span> is a consonant&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(someCharacter)</span> is not a vowel or a consonant&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//where</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint <span class=\"operator\">=</span> (<span class=\"number\">1</span>, <span class=\"operator\">-</span><span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x <span class=\"operator\">==</span> y:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(<span class=\"subst\">\\(x)</span>, <span class=\"subst\">\\(y)</span>) is on the line x == y&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x <span class=\"operator\">==</span> <span class=\"operator\">-</span>y:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(<span class=\"subst\">\\(x)</span>, <span class=\"subst\">\\(y)</span>) is on the line x == -y&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(<span class=\"subst\">\\(x)</span>, <span class=\"subst\">\\(y)</span>) is just some arbitrary point&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Continue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> puzzleInput <span class=\"operator\">=</span> <span class=\"string\">&quot;great minds think alike&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> puzzleOutput <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> puzzleInput.characters &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> character &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"string\">&quot;i&quot;</span>, <span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;u&quot;</span>, <span class=\"string\">&quot; &quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    puzzleOutput.append(character)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(puzzleOutput)</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;grtmndsthnklk”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//break</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberSymbol: <span class=\"type\">Character</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;二&quot;</span>  <span class=\"comment\">// Simplified Chinese for the number 3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> possibleIntegerValue: <span class=\"type\">Int</span>?</span><br><span class=\"line\"><span class=\"keyword\">switch</span> numberSymbol &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;١&quot;</span>, <span class=\"string\">&quot;一&quot;</span>, <span class=\"string\">&quot;๑&quot;</span>:</span><br><span class=\"line\">  possibleIntegerValue <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;٢&quot;</span>, <span class=\"string\">&quot;二&quot;</span>, <span class=\"string\">&quot;๒&quot;</span>:</span><br><span class=\"line\">  possibleIntegerValue <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;٣&quot;</span>, <span class=\"string\">&quot;三&quot;</span>, <span class=\"string\">&quot;๓&quot;</span>:</span><br><span class=\"line\">  possibleIntegerValue <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;٤&quot;</span>, <span class=\"string\">&quot;四&quot;</span>, <span class=\"string\">&quot;๔&quot;</span>:</span><br><span class=\"line\">  possibleIntegerValue <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">  <span class=\"keyword\">break</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> integerValue <span class=\"operator\">=</span> possibleIntegerValue &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The integer value of <span class=\"subst\">\\(numberSymbol)</span> is <span class=\"subst\">\\(integerValue)</span>.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An integer value could not be found for <span class=\"subst\">\\(numberSymbol)</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;The integer value of 三 is 3.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> integerToDescribe <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> description <span class=\"operator\">=</span> <span class=\"string\">&quot;The number <span class=\"subst\">\\(integerToDescribe)</span> is&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> integerToDescribe &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</span><br><span class=\"line\">    description <span class=\"operator\">+=</span> <span class=\"string\">&quot; a prime number, and also&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    description <span class=\"operator\">+=</span> <span class=\"string\">&quot; an integer.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(description)</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//提前退出</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">greet</span>(<span class=\"params\">person</span>: [<span class=\"params\">String</span>: <span class=\"type\">String</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> name <span class=\"operator\">=</span> person[<span class=\"string\">&quot;name&quot;</span>] <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> location <span class=\"operator\">=</span> person[<span class=\"string\">&quot;location&quot;</span>] <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I hope the weather is nice near you.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I hope the weather is nice in <span class=\"subst\">\\(location)</span>.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">greet([<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;John&quot;</span>])</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello John!&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// prints &quot;I hope the weather is nice near you.&quot;</span></span><br><span class=\"line\">greet([<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Jane&quot;</span>, <span class=\"string\">&quot;location&quot;</span>: <span class=\"string\">&quot;Cupertino&quot;</span>])</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Hello Jane!&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// prints &quot;I hope the weather is nice in Cupertino.&quot;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Enumerations","url":"/2015/11/02/Swift-2-1-Examples-Enumerations/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Xcode集成了git，还是非常简单方便的diff&#x2F;add&#x2F;commit&#x2F;push<br><img src=\"http://i.imgur.com/SoMPSKv.png\"></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 枚举语法，成员类型为CompassPoint，而非1.2.3.4</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">CompassPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">North</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">South</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">East</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">West</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Something</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">One</span>, <span class=\"type\">Two</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> directionToHead <span class=\"operator\">=</span> <span class=\"type\">CompassPoint</span>.<span class=\"type\">West</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 相关值（Associated Values）存储相关信息如何条形码和二维码相关信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">BarCode</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">UPCA</span>(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">QRCode</span>(<span class=\"type\">String</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> productBarcode <span class=\"operator\">=</span> <span class=\"type\">BarCode</span>.<span class=\"type\">UPCA</span>(<span class=\"number\">8</span>, <span class=\"number\">21212</span>, <span class=\"number\">3223</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">productBarcode <span class=\"operator\">=</span> <span class=\"type\">BarCode</span>.<span class=\"type\">QRCode</span>(<span class=\"string\">&quot;AAAAAAAAA&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Switch 可以定义相关值的变量或常量的名称</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> productBarcode &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">UPCA</span>(<span class=\"keyword\">let</span> a, <span class=\"keyword\">let</span> b, <span class=\"keyword\">let</span> c, <span class=\"keyword\">let</span> d):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(a <span class=\"operator\">+</span> b <span class=\"operator\">+</span> c <span class=\"operator\">+</span> d)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">QRCode</span>(<span class=\"keyword\">let</span> e):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 原始值（Raw Values）</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ASCIIControlCharacter</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Tab</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\t</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">LineFeed</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">CarriageReturn</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\r</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">ASCIIControlCharacter</span>.<span class=\"type\">Tab</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">ASCIIControlCharacter</span>.<span class=\"type\">Tab</span>.rawValue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 隐式赋值0...n，但仅仅是原始值</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Planet</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Mercury</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"type\">Venus</span>, <span class=\"type\">Earth</span>, <span class=\"type\">Mars</span>, <span class=\"type\">Jupiter</span>, <span class=\"type\">Saturn</span>, <span class=\"type\">Uranus</span>, <span class=\"type\">Nepture</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">Planet</span>.<span class=\"type\">Earth</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">Planet</span>.<span class=\"type\">Earth</span>.rawValue)</span><br><span class=\"line\"><span class=\"keyword\">let</span> possiblePlanet <span class=\"operator\">=</span> <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> possiblePlanet1 <span class=\"operator\">=</span> <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 递归枚举（Recursive Enumerations）</span></span><br><span class=\"line\"><span class=\"keyword\">indirect</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">AE</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Number</span>(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Addition</span>(<span class=\"type\">AE</span>, <span class=\"type\">AE</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Multiplicaiton</span>(<span class=\"type\">AE</span>, <span class=\"type\">AE</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 函数也是一个递归函数</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">evaluate</span>(<span class=\"params\">expression</span>: <span class=\"type\">AE</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> expression &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Number</span>(<span class=\"keyword\">let</span> value):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Addition</span>(<span class=\"keyword\">let</span> left, <span class=\"keyword\">let</span> right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">+</span> evaluate(right)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .<span class=\"type\">Multiplicaiton</span>(<span class=\"keyword\">let</span> left, <span class=\"keyword\">let</span> right):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evaluate(left) <span class=\"operator\">*</span> evaluate(right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 计算 5 + （4 * 7）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> exp <span class=\"operator\">=</span> <span class=\"type\">AE</span>.<span class=\"type\">Addition</span>(<span class=\"type\">AE</span>.<span class=\"type\">Number</span>(<span class=\"number\">5</span>), <span class=\"type\">AE</span>.<span class=\"type\">Multiplicaiton</span>(<span class=\"type\">AE</span>.<span class=\"type\">Number</span>(<span class=\"number\">4</span>), <span class=\"type\">AE</span>.<span class=\"type\">Number</span>(<span class=\"number\">7</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(evaluate(exp))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Functions","url":"/2015/10/29/Swift-2-1-Examples-Functions/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 函数参数名称（Function Parameter Names）</span></span><br><span class=\"line\"><span class=\"comment\">//: 一个参数可以有内部参数和外部参数的区别，就是外部调用时要不要写的那个参数，如上面的 arr：。默认情况下：第一个参数没有外部参数名，后面的内外一致。</span></span><br><span class=\"line\"><span class=\"comment\">//: 指定外部参数名(Specifying External Parameter Names)</span></span><br><span class=\"line\"><span class=\"comment\">//: 均可指定外部参数名：自定义或者可以用 _ 表示可以省略</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">minMax</span>(<span class=\"params\">arr</span> <span class=\"params\">array</span>: [<span class=\"type\">Int</span>], <span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Int</span>, <span class=\"params\">t</span>: <span class=\"type\">Double</span>) -&gt; (min: <span class=\"type\">Int</span>, max: <span class=\"type\">Int</span>)<span class=\"operator\">?</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> array.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMin <span class=\"operator\">=</span> array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMax <span class=\"operator\">=</span> array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span><span class=\"operator\">..&lt;</span>array.count]&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"operator\">&lt;</span> currentMin &#123;</span><br><span class=\"line\">    currentMin <span class=\"operator\">=</span> value</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>  value <span class=\"operator\">&gt;</span> currentMax &#123;</span><br><span class=\"line\">    currentMax <span class=\"operator\">=</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">minMax(arr: [<span class=\"number\">1</span>, <span class=\"operator\">-</span><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">934</span>, <span class=\"operator\">-</span><span class=\"number\">234</span>], <span class=\"number\">3</span>, t: <span class=\"number\">2.0</span>)</span><br><span class=\"line\">minMax(arr: [], <span class=\"number\">2</span>, t: <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 默认参数值（Default Parameter Values）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">someFunciton</span>(<span class=\"params\">x</span>: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someFunciton()</span><br><span class=\"line\">someFunciton(<span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 可变参数（Variadic Parameters）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">arithmeticMean</span>(<span class=\"params\">numbers</span>: <span class=\"type\">Double</span>...) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        total <span class=\"operator\">+=</span> number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">32.232432</span>, <span class=\"number\">32432.32423</span>)</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">3</span>)</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 常量参数和变量参数（Constant and Variable Parameters）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">alignRight</span>(<span class=\"params\">var</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>, <span class=\"params\">var</span> <span class=\"params\">totalLength</span>: <span class=\"type\">Int</span>, <span class=\"params\">pad</span>: <span class=\"type\">Character</span>) -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    totalLength<span class=\"operator\">++</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> amountToPad <span class=\"operator\">=</span> totalLength <span class=\"operator\">-</span> string.characters.count</span><br><span class=\"line\">    <span class=\"keyword\">if</span> amountToPad <span class=\"operator\">&lt;</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> padString <span class=\"operator\">=</span> <span class=\"type\">String</span>(pad)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"operator\">...</span>amountToPad &#123;</span><br><span class=\"line\">        string <span class=\"operator\">=</span> padString <span class=\"operator\">+</span> string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alignRight(<span class=\"string\">&quot;fdsf&quot;</span>, totalLength: <span class=\"number\">8</span>, pad: <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 输入输出参数（In-Out Patameters）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">swapTwoInts</span>(<span class=\"params\">inout</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">inout</span> <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmporaryA <span class=\"operator\">=</span> a</span><br><span class=\"line\">    a <span class=\"operator\">=</span> b</span><br><span class=\"line\">    b <span class=\"operator\">=</span> tmporaryA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b <span class=\"operator\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">swapTwoInts(<span class=\"operator\">&amp;</span>a, <span class=\"operator\">&amp;</span>b)</span><br><span class=\"line\">a <span class=\"operator\">-</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 函数类型（Funciton Types）</span></span><br><span class=\"line\"><span class=\"comment\">//: (Int, Int) -&gt; Int</span></span><br><span class=\"line\"><span class=\"comment\">//: () -&gt; Void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addTwoInts</span>(<span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"operator\">+</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">multiplyTwoInts</span>(<span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a <span class=\"operator\">*</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printHelloWorld</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 使用函数类型（Using Function Types)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mathFunction: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> <span class=\"operator\">=</span> addTwoInts</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result: <span class=\"subst\">\\(mathFunction(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mathFunction <span class=\"operator\">=</span> multiplyTwoInts</span><br><span class=\"line\">mathFunction(<span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 函数类型作为参数类型（Function Types as Parameter Types）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">printMathResult</span>(<span class=\"params\">mathFunction</span>: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">Int</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Result: <span class=\"subst\">\\(mathFunction(a, b))</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printMathResult(addTwoInts, <span class=\"number\">3</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 函数类型作为返回类型（Function Types as Return Types）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">stepForward</span>(<span class=\"params\">input</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">stepBackward</span>(<span class=\"params\">input</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">chooseStepFunction</span>(<span class=\"params\">backwards</span>: <span class=\"type\">Bool</span>) -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backwards <span class=\"operator\">?</span> stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero <span class=\"operator\">=</span> chooseStepFunction(currentValue <span class=\"operator\">&gt;</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counting to zero:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> currentValue <span class=\"operator\">!=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(currentValue)</span>... &quot;</span>)</span><br><span class=\"line\">    currentValue <span class=\"operator\">=</span> moveNearerToZero(currentValue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;zero!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 嵌套函数（Nested Functions）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">chooseStepFunction1</span>(<span class=\"params\">backwards</span>: <span class=\"type\">Bool</span>) -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stepForward</span>(<span class=\"params\">input</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">stepBackward</span>(<span class=\"params\">input</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input <span class=\"operator\">-</span> <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backwards <span class=\"operator\">?</span> stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue1 <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero1 <span class=\"operator\">=</span> chooseStepFunction1(currentValue <span class=\"operator\">&gt;</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Counting to zero:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> currentValue1 <span class=\"operator\">!=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(currentValue1)</span>... &quot;</span>)</span><br><span class=\"line\">    currentValue1 <span class=\"operator\">=</span> moveNearerToZero1(currentValue1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;zero!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - The Basics","url":"/2015/10/29/Swift-2-1-Examples-The-Basics/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>大纲和都写着在注释里，废话不多说，咱们看代码 -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 元组（Tuples）把多个值组合成一个复合值，类似数组加字典混合体</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http404Error <span class=\"operator\">=</span> (<span class=\"number\">404</span>, <span class=\"string\">&quot;Not Found&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 可以分解取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) <span class=\"operator\">=</span> http404Error</span><br><span class=\"line\"><span class=\"comment\">//: 下标访问</span></span><br><span class=\"line\">http404Error.<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">//: 单个元素命名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http200Status <span class=\"operator\">=</span> (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">http200Status.description</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: nil</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serverResponseCode: <span class=\"type\">Int</span>? <span class=\"operator\">=</span> <span class=\"number\">404</span></span><br><span class=\"line\">serverResponseCode <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 声明可选的变量或常量，没有赋值则自动设置nil</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> surveyAnswer: <span class=\"type\">String</span>?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: if语句和强制解析</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> convertedNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> convertedNumber <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(convertedNumber<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 可选绑定（Optional Binding）</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualNumber <span class=\"operator\">=</span> <span class=\"type\">Int</span>(<span class=\"string\">&quot;32431&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(actualNumber)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 隐式解析可选类型: 你可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> possibleString: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"string\">&quot;An apple&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> forcedString: <span class=\"type\">String</span> <span class=\"operator\">=</span> possibleString<span class=\"operator\">!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> assumedString: <span class=\"type\">String</span>! <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> implicitString: <span class=\"type\">String</span> <span class=\"operator\">=</span> assumedString</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 错误处理（error handling）</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">canThrowAnErrow</span>() <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnErrow()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Properties","url":"/2015/11/25/Swift-2-1-Properties/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 属性将值和特定的类、结构或枚举关联。存储属性存储常量或变量作为实例的一部分，而计算属性计算一个值。计算属性可以用于类、结构体和枚举，存储属性只能用于类和结构体。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 存储属性（Stored Properties）</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FiexdLengthRange</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstValue: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"type\">FiexdLengthRange</span>(firstValue: <span class=\"number\">1</span>, length: <span class=\"number\">3</span>)</span><br><span class=\"line\">x.firstValue <span class=\"operator\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 常量结构体的存储属性均为常量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y <span class=\"operator\">=</span> <span class=\"type\">FiexdLengthRange</span>(firstValue: <span class=\"number\">4</span>, length: <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 延迟存储属性</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DataImporter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName <span class=\"operator\">=</span> <span class=\"string\">&quot;data.txt&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DataManager</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> importer <span class=\"operator\">=</span> <span class=\"type\">DataImporter</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data <span class=\"operator\">=</span> [<span class=\"type\">String</span>]()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> manager <span class=\"operator\">=</span> <span class=\"type\">DataManager</span>()</span><br><span class=\"line\">manager.data.append(<span class=\"string\">&quot;New&quot;</span>)</span><br><span class=\"line\">manager.data.append(<span class=\"string\">&quot;Two&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 存储属性没有实例变量，属性的全部信息——包括命名、类型和内存管理特征——都在唯一一个地方（类型定义中）定义。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 计算属性（Computed Properties）: 除存储属性外，类、结构体和枚举可以定义计算属性。计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Size</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, height <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin <span class=\"operator\">=</span> <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size <span class=\"operator\">=</span> <span class=\"type\">Size</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">mutating</span> <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> centerX <span class=\"operator\">=</span> origin.x <span class=\"operator\">+</span> size.width <span class=\"operator\">/</span> <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> centerY <span class=\"operator\">=</span> origin.y <span class=\"operator\">+</span> size.height <span class=\"operator\">/</span> <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Point</span>(x: centerX, y: centerY)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newCenter) &#123;</span><br><span class=\"line\">            origin.x <span class=\"operator\">=</span> newCenter.x <span class=\"operator\">-</span> size.width <span class=\"operator\">/</span> <span class=\"number\">2</span></span><br><span class=\"line\">            origin.y <span class=\"operator\">=</span> newCenter.y <span class=\"operator\">-</span> size.height <span class=\"operator\">/</span> <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rect0 <span class=\"operator\">=</span> <span class=\"type\">Rect</span>(origin: <span class=\"type\">Point</span>(), size: <span class=\"type\">Size</span>(width: <span class=\"number\">3.0</span>, height: <span class=\"number\">4.0</span>))</span><br><span class=\"line\">rect0.center</span><br><span class=\"line\">rect0.center <span class=\"operator\">=</span> <span class=\"type\">Point</span>(x: <span class=\"number\">50</span>, y: <span class=\"number\">50</span>)</span><br><span class=\"line\">rect0.center</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 只读计算属性（Read-Only Computed Properties）</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Cuboid</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, height <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, depth <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> volume: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width <span class=\"operator\">*</span> height <span class=\"operator\">*</span> depth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Cuboid</span>(width: <span class=\"number\">4.0</span>, height: <span class=\"number\">5.0</span>, depth: <span class=\"number\">2.0</span>).volume</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 属性观察器（Property Observers）</span></span><br><span class=\"line\"><span class=\"comment\">//: 属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新值和当前值相同的时候也不例外。不需要为非重写的计算属性添加属性观察器，因为可以通过它的 setter 直接监控和响应值的变化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StepCounter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalSteps: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span>(newTotolSteps) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> totalSteps <span class=\"operator\">!=</span> newTotolSteps &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The totalSteps will change value to <span class=\"subst\">\\(totalSteps)</span>.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> totalSteps <span class=\"operator\">&gt;</span> oldValue &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The totalSteps add <span class=\"subst\">\\(totalSteps <span class=\"operator\">-</span> oldValue)</span> steps. &quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">StepCounter</span>().totalSteps <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stepCounter <span class=\"operator\">=</span> <span class=\"type\">StepCounter</span>()</span><br><span class=\"line\">stepCounter.totalSteps <span class=\"operator\">=</span> <span class=\"number\">33</span></span><br><span class=\"line\">stepCounter.totalSteps <span class=\"operator\">=</span> <span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 全局变量和局部变量（Global and Local Variables）</span></span><br><span class=\"line\"><span class=\"comment\">//: 全局的常量或变量都是延迟计算的，跟延迟存储属性相似，不同的地方在于，全局的常量或变量不需要标记lazy修饰符。局部范围的常量或变量从不延迟计算。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类型属性（Type Properties）</span></span><br><span class=\"line\"><span class=\"comment\">//: 使用关键字static/class来定义类型属性，必须指定默认值，延迟初始化的。类型属性是通过类型本身来访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SomeStructure</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypedProperty <span class=\"operator\">=</span> <span class=\"string\">&quot;some value&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypedProperty: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">SomeEnumeration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypedProperty <span class=\"operator\">=</span> <span class=\"string\">&quot;some value&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypedProperty: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypedProperty <span class=\"operator\">=</span> <span class=\"string\">&quot;some value&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypedProperty: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">7</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">var</span> <span class=\"title class_\">overrideableComputedTypeProperty</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">109</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AudioChannel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> threshoudLevel <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> maxInputLevelForAllChannels <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentLevel: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> currentLevel <span class=\"operator\">&gt;</span> <span class=\"type\">AudioChannel</span>.threshoudLevel &#123;</span><br><span class=\"line\">                currentLevel <span class=\"operator\">=</span> <span class=\"type\">AudioChannel</span>.threshoudLevel</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> currentLevel <span class=\"operator\">&gt;</span> <span class=\"type\">AudioChannel</span>.maxInputLevelForAllChannels &#123;</span><br><span class=\"line\">                <span class=\"type\">AudioChannel</span>.maxInputLevelForAllChannels <span class=\"operator\">=</span> currentLevel</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> leftChannel <span class=\"operator\">=</span> <span class=\"type\">AudioChannel</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> rightChannel <span class=\"operator\">=</span> <span class=\"type\">AudioChannel</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">leftChannel.currentLevel <span class=\"operator\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(leftChannel.currentLevel)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">AudioChannel</span>.maxInputLevelForAllChannels)</span><br><span class=\"line\"></span><br><span class=\"line\">rightChannel.currentLevel <span class=\"operator\">=</span> <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(rightChannel.currentLevel)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">AudioChannel</span>.maxInputLevelForAllChannels)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift 2.1 Examples - Methods","url":"/2015/11/26/Swift-2-1-Methods/","content":"<p>The Swift Programming Language 2.1 Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 方法（Methods）</span></span><br><span class=\"line\"><span class=\"comment\">//: 方法是与某些特定类型相关联的函数。类、结构体、枚举都可以定义实例方法；实例方法为给定类型的实例封装了具体的任务与功能。类、结构体、枚举也可以定义类型方法；类型方法与类型本身相关联。类型方法与 Objective-C 中的类方法（class methods）相似。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 实例方法 (Instance Methods)</span></span><br><span class=\"line\"><span class=\"comment\">//: 实例方法是属于某个特定类、结构体或者枚举类型实例的方法。实例方法提供访问和修改实例属性的方法或提供与实例目的相关的功能，并以此来支撑实例的功能。实例方法的语法与函数完全一致.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: self 属性(The self Property)</span></span><br><span class=\"line\"><span class=\"comment\">//: 类型的每一个实例都有一个隐含属性叫做self，self完全等同于该实例本身。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 在实例方法中修改值类型(Modifying Value Types from Within Instance Methods)</span></span><br><span class=\"line\"><span class=\"comment\">//: 结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。但是，如果你确实需要在某个特定的方法中修改结构体或者枚举的属性，你可以选择变异(mutating)这个方法，然后方法就可以从方法内部改变它的属性；并且它做的任何改变在方法结束时还会保留在原始结构中。方法还可以给它隐含的self属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例。</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveByX</span>(<span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        x <span class=\"operator\">+=</span> deltaX</span><br><span class=\"line\">        y <span class=\"operator\">+=</span> deltaY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> somePoint <span class=\"operator\">=</span> <span class=\"type\">Point</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">3.0</span>)</span><br><span class=\"line\">somePoint.moveByX(<span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 在可变方法中给 self 赋值(Assigning to self Within a Mutating Method)</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveByX</span>(<span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"type\">Point1</span>(x: x <span class=\"operator\">+</span> deltaX, y: y <span class=\"operator\">+</span> deltaY)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//: 这里不仅仅学习一个语法，而是思考为什么费劲把默认不可变的枚举变成可变，是因为提供一个可能结合枚举特性，写出简洁表达能力强的代码。 </span></span><br><span class=\"line\"><span class=\"comment\">//: Ash Furrow: Ideas vs Syntax. Watch video here: https://youtu.be/YsUTuwpbURA</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">TriStateSwitch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Off</span>, <span class=\"type\">Low</span>, <span class=\"type\">High</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">next</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Off</span>: <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"type\">Low</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Low</span>: <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"type\">High</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">High</span>: <span class=\"keyword\">self</span> <span class=\"operator\">=</span> <span class=\"type\">Off</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ovenLight <span class=\"operator\">=</span> <span class=\"type\">TriStateSwitch</span>.<span class=\"type\">Low</span></span><br><span class=\"line\">ovenLight.next()</span><br><span class=\"line\">ovenLight.next()</span><br><span class=\"line\"><span class=\"comment\">//: 类型方法 (Type Methods)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 实例方法是被类型的某个实例调用的方法。你也可以定义类型本身调用的方法，这种方法就叫做类型方法。声明结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的方法实现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 在 Objective-C 中，你只能为 Objective-C 的类定义类型方法（type-level methods）。在 Swift 中，你可以为所有的类、结构体和枚举定义类型方法。每一个类型方法都被它所支持的类型显式包含。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">someTypeMethod</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This is a type method&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">SomeClass</span>.someTypeMethod()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 下面的例子定义了一个名为LevelTracker结构体。它监测玩家的游戏发展情况（游戏的不同层次或阶段）</span></span><br><span class=\"line\"><span class=\"comment\">//: 也就是定结构体类型方法的用途，可以直接把逻辑加到定义的数据类型中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LevelTracker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> highestunlockedLevel <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">unlockLevel</span>(<span class=\"params\">level</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> level <span class=\"operator\">&gt;</span> highestunlockedLevel &#123; highestunlockedLevel <span class=\"operator\">=</span> level &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">levelIsUnlocked</span>(<span class=\"params\">level</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> level <span class=\"operator\">&lt;=</span> highestunlockedLevel</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentLevel <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">advanceToLevel</span>(<span class=\"params\">level</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"type\">LevelTracker</span>.levelIsUnlocked(level) &#123;</span><br><span class=\"line\">            currentLevel <span class=\"operator\">=</span> level</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tracker <span class=\"operator\">=</span> <span class=\"type\">LevelTracker</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> playName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">compeletedLevel</span>(<span class=\"params\">level</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">LevelTracker</span>.unlockLevel(level <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">        tracker.advanceToLevel(level <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>:<span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        playName <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> player <span class=\"operator\">=</span> <span class=\"type\">Player</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">&quot;Will&quot;</span>)</span><br><span class=\"line\">player.compeletedLevel(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">LevelTracker</span>.highestunlockedLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">player <span class=\"operator\">=</span> <span class=\"type\">Player</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">&quot;Ge&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> player.tracker.advanceToLevel(<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Level 6 has been unlocked.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Level 6 has not yet been unlocked.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Automatic Reference Counting","url":"/2016/03/02/Swift-2-Automatic-Reference-Counting/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 自动引用计数（Automatic Reference Counting）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自动引用计数实践</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being initialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reference1: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> reference2: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> reference3: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">reference1 <span class=\"operator\">=</span> <span class=\"type\">Person0</span>(name: <span class=\"string\">&quot;John Appleseed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">reference2 <span class=\"operator\">=</span> reference1</span><br><span class=\"line\">reference3 <span class=\"operator\">=</span> reference1</span><br><span class=\"line\"></span><br><span class=\"line\">reference1 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">reference2 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">reference3 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 解决实例之间的循环强引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（weak reference）和无主引用（unowned reference）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//弱引用和无主引用允许循环引用中的一个实例引用另外一个实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于生命周期中会变为nil的实例使用弱引用。相反地，对于初始化赋值后再也不会被赋值为nil的实例，使用无主引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。因此，无主引用总是被定义为非可选类型（non-optional type）。你可以在声明属性或者变量时，在前面加上关键字unowned表示这是一个无主引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 1 - Person和Apartment的例子展示了两个属性的值都允许为nil，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apartment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unit: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">unit</span>: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.unit <span class=\"operator\">=</span> unit &#125;</span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Apartment <span class=\"subst\">\\(unit)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> unit4A: <span class=\"type\">Apartment</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">john <span class=\"operator\">=</span> <span class=\"type\">Person</span>(name: <span class=\"string\">&quot;John Appleseed&quot;</span>)</span><br><span class=\"line\">unit4A <span class=\"operator\">=</span> <span class=\"type\">Apartment</span>(unit: <span class=\"string\">&quot;4A&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">john<span class=\"operator\">!</span>.apartment <span class=\"operator\">=</span> unit4A</span><br><span class=\"line\">unit4A<span class=\"operator\">!</span>.tenant <span class=\"operator\">=</span> john</span><br><span class=\"line\"></span><br><span class=\"line\">john <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">unit4A <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 2 - Customer和CreditCard的例子展示了一个属性的值允许为nil，而另一个属性的值不允许为nil，这也可能会产生循环强引用。这种场景最适合通过无主引用来解决。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CreditCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">UInt64</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">number</span>: <span class=\"type\">UInt64</span>, <span class=\"params\">customer</span>: <span class=\"type\">Customer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.number <span class=\"operator\">=</span> number</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.customer <span class=\"operator\">=</span> customer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Card #<span class=\"subst\">\\(number)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lee: <span class=\"type\">Customer</span>?</span><br><span class=\"line\">lee <span class=\"operator\">=</span> <span class=\"type\">Customer</span>(name: <span class=\"string\">&quot;Brunce Lee&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> card <span class=\"operator\">=</span> <span class=\"type\">CreditCard</span>(number: <span class=\"number\">1234567890123456</span>, customer: lee<span class=\"operator\">!</span>)</span><br><span class=\"line\">lee <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">card</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 3 - 两个属性都必须有值，并且初始化完成后永远不会为nil。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Country</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> capitalCity: <span class=\"type\">City</span>!</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">capitalName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.capitalCity <span class=\"operator\">=</span> <span class=\"type\">City</span>(name: capitalName, country: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">City</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> country: <span class=\"type\">Country</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">country</span>: <span class=\"type\">Country</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.country <span class=\"operator\">=</span> country</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> country: <span class=\"type\">Country</span>?</span><br><span class=\"line\">country <span class=\"operator\">=</span> <span class=\"type\">Country</span>(name: <span class=\"string\">&quot;Canada&quot;</span>, capitalName: <span class=\"string\">&quot;Ottawa&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(country<span class=\"operator\">!</span>.name)</span>&#x27;s capital city is called <span class=\"subst\">\\(country<span class=\"operator\">!</span>.capitalCity.name)</span>&quot;</span>)</span><br><span class=\"line\">country <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 解决闭包引起的循环强引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> lazy var someClosure: (Int, String) -&gt; String = &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -&gt; String in</span></span><br><span class=\"line\"><span class=\"comment\"> // 这里是闭包的函数体</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HTMLElement</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> asHTML: <span class=\"type\">Void</span> -&gt; <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.text &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span>&gt;<span class=\"subst\">\\(text)</span>&lt;/<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span>&gt;&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span> /&gt;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">text</span>: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.text <span class=\"operator\">=</span> text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? <span class=\"operator\">=</span> <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">&quot;p&quot;</span>, text: <span class=\"string\">&quot;hello, world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(paragraph<span class=\"operator\">!</span>.asHTML())</span><br><span class=\"line\">paragraph <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Deinitialization","url":"/2016/03/02/Swift-2-Deinitialization/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 析构过程（Deinitialization）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//析构器只适用于类类型，当一个类的实例被释放之前，析构器会被立即调用。析构器用关键字deinit来标示，类似于构造器要用init来标示。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有点像 UIViewController 的 func ViewWillDisappear</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bank</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> coinsInBank <span class=\"operator\">=</span> <span class=\"number\">10_000</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">vendCoins</span>(<span class=\"params\">var</span> <span class=\"params\">numberOfCoinsToVend</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        numberOfCoinsToVend <span class=\"operator\">=</span> <span class=\"built_in\">min</span>(numberOfCoinsToVend, coinsInBank)</span><br><span class=\"line\">        coinsInBank <span class=\"operator\">-=</span> numberOfCoinsToVend</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numberOfCoinsToVend</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">receiveCoins</span>(<span class=\"params\">coins</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        coinsInBank <span class=\"operator\">+=</span> coins</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coinsInPurse: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">coins</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        coinsInPurse <span class=\"operator\">=</span> <span class=\"type\">Bank</span>.vendCoins(coins)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">winCoins</span>(<span class=\"params\">coins</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        coinsInPurse <span class=\"operator\">+=</span> <span class=\"type\">Bank</span>.vendCoins(coins)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Bank</span>.receiveCoins(coinsInPurse)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> playerOne: <span class=\"type\">Player</span>? <span class=\"operator\">=</span> <span class=\"type\">Player</span>(coins: <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;A new player has joined the game with <span class=\"subst\">\\(playerOne<span class=\"operator\">!</span>.coinsInPurse)</span> coins&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;There are now <span class=\"subst\">\\(Bank.coinsInBank)</span> coins left in the bank&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">playerOne<span class=\"operator\">?</span>.winCoins(<span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The player has <span class=\"subst\">\\(playerOne<span class=\"operator\">!</span>.coinsInPurse)</span> coins&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;There are now <span class=\"subst\">\\(Bank.coinsInBank)</span> coins left in the bank&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">playerOne <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;The player has <span class=\"subst\">\\(playerOne<span class=\"operator\">?</span>.coinsInPurse)</span> coins&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;There are now <span class=\"subst\">\\(Bank.coinsInBank)</span> coins left in the bank&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Error Handling","url":"/2016/03/04/Swift-2-Error-Handling/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 错误处理（Error Handling）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//说实话错误处理这里，习惯了 AFNetworking 方式的闭包或者 block。因为闭包可以返回更过参数如：错误类型/错误内容/其他参数</span></span><br><span class=\"line\"><span class=\"comment\">//这里学会三种调用方法即可，try? 最方便，如不打算考虑处理错误信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">VendingMachineError</span>: <span class=\"title class_\">ErrorType</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">InvalidSelection</span>                    <span class=\"comment\">//选择无效</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">InsufficientFunds</span>(coinsNeeded: <span class=\"type\">Int</span>) <span class=\"comment\">//金额不足</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">OutOfStock</span>                          <span class=\"comment\">//缺货</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> price: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VendingMachine</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inventory <span class=\"operator\">=</span> [</span><br><span class=\"line\">        <span class=\"string\">&quot;Candy Bar&quot;</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">12</span>, count: <span class=\"number\">7</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;Chips&quot;</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">10</span>, count: <span class=\"number\">4</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;Pretzels&quot;</span>: <span class=\"type\">Item</span>(price: <span class=\"number\">7</span>, count: <span class=\"number\">11</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coinsDeposited <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">dispenseSnack</span>(<span class=\"params\">snack</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dispensing <span class=\"subst\">\\(snack)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">vend</span>(<span class=\"params\">itemNamed</span> <span class=\"params\">name</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">var</span> item <span class=\"operator\">=</span> inventory[name] <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">InvalidSelection</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> item.count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">OutOfStock</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">guard</span> item.price <span class=\"operator\">&lt;=</span> coinsDeposited <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">InsufficientFunds</span>(coinsNeeded: item.price <span class=\"operator\">-</span> coinsDeposited)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        coinsDeposited <span class=\"operator\">-=</span> item.price</span><br><span class=\"line\">        <span class=\"operator\">--</span>item.count</span><br><span class=\"line\">        inventory[name] <span class=\"operator\">=</span> item</span><br><span class=\"line\">        dispenseSnack(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> favoriteSnacks <span class=\"operator\">=</span> [</span><br><span class=\"line\">    <span class=\"string\">&quot;Alice&quot;</span>: <span class=\"string\">&quot;Chips&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Bob&quot;</span>: <span class=\"string\">&quot;Licorice&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Eve&quot;</span>: <span class=\"string\">&quot;Pretzels&quot;</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">buyFavoriteSnack</span>(<span class=\"params\">person</span>: <span class=\"type\">String</span>, <span class=\"params\">vendingMachine</span>: <span class=\"type\">VendingMachine</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> snackName <span class=\"operator\">=</span> favoriteSnacks[person] <span class=\"operator\">??</span> <span class=\"string\">&quot;Candy Bar&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> vendingMachine.vend(itemNamed: snackName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 用 Do-Catch 处理错误</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vendingMachine <span class=\"operator\">=</span> <span class=\"type\">VendingMachine</span>()</span><br><span class=\"line\">vendingMachine.coinsDeposited <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> buyFavoriteSnack(<span class=\"string\">&quot;Alice&quot;</span>, vendingMachine: vendingMachine)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">InvalidSelection</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Invalid Selection.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">OutOfStock</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Out of Stock.&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> <span class=\"type\">VendingMachineError</span>.<span class=\"type\">InsufficientFunds</span>(<span class=\"keyword\">let</span> coinsNeeded) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Insufficient funds. Please insert an additional <span class=\"subst\">\\(coinsNeeded)</span> coins.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印 “Insufficient funds. Please insert an additional 2 coins.”</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 将错误转换成可选值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">fetchData</span>() -&gt; <span class=\"type\">Data</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> fetchDataFromDisk() &#123; <span class=\"keyword\">return</span> data &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> fetchDataFromServer() &#123; <span class=\"keyword\">return</span> data &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 禁用错误传递</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//有时你知道某个 throwing 函数实际上在运行时是不会抛出错误的，在这种情况下，你可以在表达式前面写try!来禁用错误传递，这会把调用包装在一个断言不会有错误抛出的运行时断言中。如果实际上抛出了错误，你会得到一个运行时错误。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例如，下面的代码使用了loadImage(_:)函数，该函数从给定的路径加载图片资源，如果图片无法载入则抛出一个错误。在这种情况下，因为图片是和应用绑定的，运行时不会有错误抛出，所以适合禁用错误传递：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> photo <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> loadImage(<span class=\"string\">&quot;./Resources/John Appleseed.jpg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 指定清理操作</span></span><br><span class=\"line\"><span class=\"comment\">//可以使用defer语句在即将离开当前代码块时执行一系列语句。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">processFile</span>(<span class=\"params\">filename</span>: <span class=\"type\">String</span>) <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> exists(filename) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> file <span class=\"operator\">=</span> <span class=\"keyword\">open</span>(filename)</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> &#123;</span><br><span class=\"line\">            close(file)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> line <span class=\"operator\">=</span> <span class=\"keyword\">try</span> file.readline() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理文件。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// close(file) 会在这里被调用，即作用域的最后。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Inheritance","url":"/2016/02/29/Swift-2-Inheritance/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 继承（Inheritance）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Swift 中的类并不是从一个通用的基类继承而来。如果你不为你定义的类指定一个超类的话，这个类就自动成为基类。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 子类可以为继承来的实例方法（instance method），类方法（class method），实例属性（instance property），或下标（subscript）提供自己定制的实现（implementation）。我们把这种行为叫重写（overriding）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentSpeed <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;traveling at <span class=\"subst\">\\(currentSpeed)</span> miles per hour&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">makeNoise</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 什么也不做-因为车辆不一定会有噪音</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>: <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gear <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.description <span class=\"operator\">+</span> <span class=\"string\">&quot; in gear <span class=\"subst\">\\(gear)</span>&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AutomaticCar</span>: <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> currentSpeed: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            gear <span class=\"operator\">=</span> <span class=\"type\">Int</span>(currentSpeed <span class=\"operator\">/</span> <span class=\"number\">10.0</span>) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 你可以通过把方法，属性或下标标记为final来防止它们被重写，只需要在声明关键字前加上final修饰符即可（例如：final var，final func，final class func，以及final subscript）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Initialization","url":"/2016/03/01/Swift-2-Initialization/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 构造过程（Initialization）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 通过定义构造器（Initializers）来实现构造过程，这些构造器可以看做是用来创建特定类型新实例的特殊方法。与 Objective-C 中的构造器不同，Swift 的构造器无需返回值，它们的主要任务是保证新实例在第一次使用前完成正确的初始化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类的实例也可以通过定义析构器（deinitializer）在实例释放之前执行特定的清除工作。想了解更多关于析构器的内容，请参考析构过程。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类和结构体在创建实例时，必须为所有存储型属性设置合适的初始值。存储型属性的值不能处于一个未知的状态。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fahrenheit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temperature: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        temperature <span class=\"operator\">=</span> <span class=\"number\">32.0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fahrenheit1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temperature <span class=\"operator\">=</span> <span class=\"number\">32.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 如果你在定义构造器时没有提供参数的外部名字，Swift 会为构造器的每个参数自动生成一个跟内部名字相同的外部名。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> red, green, blue: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">red</span>: <span class=\"type\">Double</span>, <span class=\"params\">green</span>: <span class=\"type\">Double</span>, <span class=\"params\">blue</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.red <span class=\"operator\">=</span> red</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.green <span class=\"operator\">=</span> green</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.blue <span class=\"operator\">=</span> blue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">white</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        red <span class=\"operator\">=</span> white</span><br><span class=\"line\">        green <span class=\"operator\">=</span> white</span><br><span class=\"line\">        blue <span class=\"operator\">=</span> white</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> green <span class=\"operator\">=</span> <span class=\"type\">Color</span>(red: <span class=\"number\">1</span>, green: <span class=\"number\">1</span>, blue: <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Celsius</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temperatureInCelsius: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">fromFahrenheit</span> <span class=\"params\">fahrenheit</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        temperatureInCelsius <span class=\"operator\">=</span> (fahrenheit <span class=\"operator\">-</span> <span class=\"number\">32.0</span>) <span class=\"operator\">/</span> <span class=\"number\">1.8</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">fromKelvin</span> <span class=\"params\">kelvin</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        temperatureInCelsius <span class=\"operator\">=</span> kelvin <span class=\"operator\">-</span> <span class=\"number\">273.15</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">celsius</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        temperatureInCelsius <span class=\"operator\">=</span> celsius</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bodyTemperature <span class=\"operator\">=</span> <span class=\"type\">Celsius</span>(<span class=\"number\">37.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 可选类型的属性将自动初始化为nil，表示这个属性是有意在初始化时设置为空的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 如果结构体或类的所有属性都有默认值，同时没有自定义的构造器，那么 Swift 会给这些结构体或类提供一个默认构造器（default initializers）。这个默认构造器将简单地创建一个所有属性值都设置为默认值的实例。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShoppingListItem</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\">    <span class=\"keyword\">var</span> quantity <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> item <span class=\"operator\">=</span> <span class=\"type\">ShoppingListItem</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 结构体的逐一成员构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Size</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, height <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> size <span class=\"operator\">=</span> <span class=\"type\">Size</span>(width: <span class=\"number\">3</span>, height: <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 构造器可以通过调用其它构造器来完成实例的部分构造过程。这一过程称为构造器代理，它能减少多个构造器间的代码重复。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin <span class=\"operator\">=</span> <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size <span class=\"operator\">=</span> <span class=\"type\">Size</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">origin</span>: <span class=\"type\">Point</span>, <span class=\"params\">size</span>: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.origin <span class=\"operator\">=</span> origin</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.size <span class=\"operator\">=</span> size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">center</span>: <span class=\"type\">Point</span>, <span class=\"params\">size</span>: <span class=\"type\">Size</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originX <span class=\"operator\">=</span> center.x <span class=\"operator\">-</span> (size.width <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> originY <span class=\"operator\">=</span> center.y <span class=\"operator\">-</span> (size.height <span class=\"operator\">/</span> <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rect <span class=\"operator\">=</span> <span class=\"type\">Rect</span>(origin: <span class=\"type\">Point</span>(x: <span class=\"number\">3</span>, y: <span class=\"number\">3</span>), size: <span class=\"type\">Size</span>(width: <span class=\"number\">5</span>, height: <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> rect1 <span class=\"operator\">=</span> <span class=\"type\">Rect</span>(center: <span class=\"type\">Point</span>(), size: <span class=\"type\">Size</span>(width: <span class=\"number\">4</span>, height: <span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 如果你想用另外一种不需要自己定义init()和init(origin:size:)的方式来实现这个例子，请参考扩展。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Swift 为类类型提供了两种构造器来确保实例中所有存储型属性都能获得初始值，它们分别是指定构造器和便利构造器。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 两段式构造过程: Swift 中类的构造过程包含两个阶段。第一个阶段，每个存储型属性被引入它们的类指定一个初始值。当每个存储型属性的初始值被确定后，第二阶段开始，它给每个类一次机会，在新实例准备使用之前进一步定制它们的存储型属性。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: Swift 的两段式构造过程跟 Objective-C 中的构造过程类似。最主要的区别在于阶段 1，Objective-C 给每一个属性赋值0或空值（比如说0或nil）。Swift 的构造流程则更加灵活，它允许你设置定制的初始值，并自如应对某些属性不能以0或nil作为合法默认值的情况。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//阶段 1</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//某个指定构造器或便利构造器被调用。</span></span><br><span class=\"line\"><span class=\"comment\">//完成新实例内存的分配，但此时内存还没有被初始化。</span></span><br><span class=\"line\"><span class=\"comment\">//指定构造器确保其所在类引入的所有存储型属性都已赋初值。存储型属性所属的内存完成初始化。</span></span><br><span class=\"line\"><span class=\"comment\">//指定构造器将调用父类的构造器，完成父类属性的初始化。</span></span><br><span class=\"line\"><span class=\"comment\">//这个调用父类构造器的过程沿着构造器链一直往上执行，直到到达构造器链的最顶部。</span></span><br><span class=\"line\"><span class=\"comment\">//当到达了构造器链最顶部，且已确保所有实例包含的存储型属性都已经赋值，这个实例的内存被认为已经完全初始化。此时阶段 1 完成。</span></span><br><span class=\"line\"><span class=\"comment\">//阶段 2</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//从顶部构造器链一直往下，每个构造器链中类的指定构造器都有机会进一步定制实例。构造器此时可以访问self、修改它的属性并调用实例方法等等。</span></span><br><span class=\"line\"><span class=\"comment\">//最终，任意构造器链中的便利构造器可以有机会定制实例和使用self。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 构造器的继承和重写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跟 Objective-C 中的子类不同，Swift 中的子类默认情况下不会继承父类的构造器。Swift 的这种机制可以防止一个父类的简单构造器被一个更专业的子类继承，并被错误地用来创建子类的实例。</span></span><br><span class=\"line\"><span class=\"comment\">//你在子类中“重写”一个父类便利构造器时，不需要加override前缀。</span></span><br><span class=\"line\"><span class=\"comment\">//当你在编写一个和父类中指定构造器相匹配的子类构造器时，你实际上是在重写父类的这个指定构造器。因此，你必须在定义子类构造器时带上override修饰符。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 构造器的自动继承</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如上所述，子类在默认情况下不会继承父类的构造器。但是如果满足特定条件，父类构造器是可以被自动继承的。在实践中，这意味着对于许多常见场景你不必重写父类的构造器，并且可以在安全的情况下以最小的代价继承父类的构造器。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//假设你为子类中引入的所有新属性都提供了默认值，以下 2 个规则适用：</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//规则 1</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//规则 2</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//如果子类提供了所有父类指定构造器的实现——无论是通过规则 1 继承过来的，还是提供了自定义实现——它将自动继承所有父类的便利构造器。</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//即使你在子类中添加了更多的便利构造器，这两条规则仍然适用。</span></span><br><span class=\"line\"><span class=\"comment\">//对于规则 2，子类可以将父类的指定构造器实现为便利构造器。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单总结就是：None or All</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 指定构造器和便利构造器实践</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Food</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">&quot;[Unnamed]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//All</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RecipeIngredient</span>: <span class=\"title class_\">Food</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> quantity: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">quantity</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.quantity <span class=\"operator\">=</span> quantity</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, quantity: <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//None</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShoppingListItem1</span>: <span class=\"title class_\">RecipeIngredient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> purchased <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> output <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\(quantity)</span> x <span class=\"subst\">\\(name)</span>&quot;</span></span><br><span class=\"line\">        output <span class=\"operator\">+=</span> purchased <span class=\"operator\">?</span> <span class=\"string\">&quot; ✔&quot;</span> : <span class=\"string\">&quot; ✘&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 可失败构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建自定义的可选类型</span></span><br><span class=\"line\"><span class=\"comment\">//如果一个类、结构体或枚举类型的对象，在构造过程中有可能失败，则为其定义一个可失败构造器。这里所指的“失败”是指，如给构造器传入无效的参数值，或缺少某种所需的外部资源，又或是不满足某种必要的条件等。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> species: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">species</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> species.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.species <span class=\"operator\">=</span> species</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> someCreature <span class=\"operator\">=</span> <span class=\"type\">Animal</span>(species: <span class=\"string\">&quot;Gigg&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(someCreature)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//枚举类型的可失败构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">TemperatureUnit</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span>, <span class=\"type\">Celsius</span>, <span class=\"type\">Fahrenheit</span></span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">symbol</span>: <span class=\"type\">Character</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> symbol &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;K&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .<span class=\"type\">Kelvin</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;C&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .<span class=\"type\">Celsius</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;F&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .<span class=\"type\">Fahrenheit</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit <span class=\"operator\">=</span> <span class=\"type\">TemperatureUnit</span>(symbol: <span class=\"string\">&quot;F&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This is a defined temperature unit, so initialization succeeded.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带原始值的枚举类型会自带一个可失败构造器init?(rawValue:)，该可失败构造器有一个名为rawValue的参数，其类型和枚举类型的原始值类型一致，如果该参数的值能够和某个枚举成员的原始值匹配，则该构造器会构造相应的枚举成员，否则构造失败。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">TemperatureUnit1</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;K&quot;</span>, <span class=\"type\">Celsius</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;C&quot;</span>, <span class=\"type\">Fahrenheit</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;F&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit1 <span class=\"operator\">=</span> <span class=\"type\">TemperatureUnit1</span>(rawValue: <span class=\"string\">&quot;K&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit1 <span class=\"operator\">!=</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This is a defined temperature unit, so initialization succeeded.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 类的可失败构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值类型（也就是结构体或枚举）的可失败构造器，可以在构造过程中的任意时间点触发构造失败。比如在前面的例子中，结构体Animal的可失败构造器在构造过程一开始就触发了构造失败，甚至在species属性被初始化前。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//而对类而言，可失败构造器只能在类引入的所有存储型属性被初始化后，以及构造器代理调用完成后，才能触发构造失败。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个很好理解因为继承和构造器代理调用的原因，只能在最后一步判断是否构造失败</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span>!</span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可失败构造器也可以代理到其它的非可失败构造器。通过这种方式，你可以增加一个可能的失败状态到现有的构造过程中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如同其它的构造器，你可以在子类中重写父类的可失败构造器。或者你也可以用子类的非可失败构造器重写一个父类的可失败构造器。这使你可以定义一个不会构造失败的子类，即使父类的构造器允许构造失败。</span></span><br><span class=\"line\"><span class=\"comment\">//你可以用非可失败构造器重写可失败构造器，但反过来却不行。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Document</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AutomoticallyNamedDocument</span>: <span class=\"title class_\">Document</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> <span class=\"string\">&quot;[Untitiled]&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> <span class=\"string\">&quot;[Untitiled]&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newDoc <span class=\"operator\">=</span> <span class=\"type\">AutomoticallyNamedDocument</span>()</span><br><span class=\"line\">newDoc.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你可以在init?中代理到init!，反之亦然。你也可以用init?重写init!，反之亦然。你还可以用init代理到init!，不过，一旦init!构造失败，则会触发一个断言</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 必要构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在类的构造器前添加required修饰符表明所有该类的子类都必须实现该构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 通过闭包或函数设置属性的默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//提供了一种便利</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> someProperty: <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这个闭包中给 someProperty 创建一个默认值</span></span><br><span class=\"line\">        <span class=\"comment\">// someValue 必须和 SomeType 类型相同</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Lee&quot;</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">some</span> <span class=\"operator\">=</span> <span class=\"type\">SomeClass</span>()</span><br><span class=\"line\"><span class=\"keyword\">some</span>.someProperty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Checkerboard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> boardColors: [<span class=\"type\">Bool</span>] <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> tempColors <span class=\"operator\">=</span> [<span class=\"type\">Bool</span>]()</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isBlack <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"operator\">...</span> <span class=\"number\">10</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"operator\">...</span> <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">                tempColors.append(isBlack)</span><br><span class=\"line\">                isBlack <span class=\"operator\">=</span> <span class=\"operator\">!</span>isBlack</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            isBlack <span class=\"operator\">=</span> <span class=\"operator\">!</span>isBlack</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempColors</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">squareIsBlackAtRow</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">column</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> boardColors[(row <span class=\"operator\">*</span> <span class=\"number\">10</span>) <span class=\"operator\">+</span> column]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> board <span class=\"operator\">=</span> <span class=\"type\">Checkerboard</span>()</span><br><span class=\"line\">board.squareIsBlackAtRow(<span class=\"number\">0</span>, column: <span class=\"number\">10</span>) <span class=\"comment\">//bug 此处仅为示范代码</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Nested Types","url":"/2016/03/04/Swift-2-Nested-Types/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 嵌套类型（Nested Types）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//嵌套让我们可以为常数生成一个命名空间（namespace）。例如：我们可以使用Constants.FoursquareApi.BaseUrl来访问Foursquare的BaseUrl常数，这样会使得数据可读性更高，并为相关的常数提供一系列封装。</span></span><br><span class=\"line\"><span class=\"comment\">//http://geek.csdn.net/news/detail/58593</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Constants</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">FoursquareApi</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> <span class=\"type\">BaseUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.foursquare.com/v2/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TwitterApi</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> <span class=\"type\">BaseUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.twitter.com/1.1/&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Configuration</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> <span class=\"type\">UseWorkaround</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面的嵌套是不错的实践，当然扑克牌作为例子是非常合适的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">BlackjackCard</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 嵌套的 Suit 枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"title class_\">Suit</span>: <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Spades</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;♠&quot;</span>, <span class=\"type\">Hearts</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;♡&quot;</span>, <span class=\"type\">Diamonds</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;♢&quot;</span>, <span class=\"type\">Clubs</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;♣&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 嵌套的 Rank 枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"title class_\">Rank</span>: <span class=\"title class_\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Two</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>, <span class=\"type\">Three</span>, <span class=\"type\">Four</span>, <span class=\"type\">Five</span>, <span class=\"type\">Six</span>, <span class=\"type\">Seven</span>, <span class=\"type\">Eight</span>, <span class=\"type\">Nine</span>, <span class=\"type\">Ten</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Jack</span>, <span class=\"type\">Queen</span>, <span class=\"type\">King</span>, <span class=\"type\">Ace</span></span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Values</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> first: <span class=\"type\">Int</span>, second: <span class=\"type\">Int</span>?</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values: <span class=\"type\">Values</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .<span class=\"type\">Ace</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">1</span>, second: <span class=\"number\">11</span>)</span><br><span class=\"line\">            <span class=\"keyword\">case</span> .<span class=\"type\">Jack</span>, .<span class=\"type\">Queen</span>, .<span class=\"type\">King</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">10</span>, second: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"keyword\">self</span>.rawValue, second: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// BlackjackCard 的属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rank: <span class=\"type\">Rank</span>, suit: <span class=\"type\">Suit</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> output <span class=\"operator\">=</span> <span class=\"string\">&quot;suit is <span class=\"subst\">\\(suit.rawValue)</span>,&quot;</span></span><br><span class=\"line\">        output <span class=\"operator\">+=</span> <span class=\"string\">&quot; value is <span class=\"subst\">\\(rank.values.first)</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> second <span class=\"operator\">=</span> rank.values.second &#123;</span><br><span class=\"line\">            output <span class=\"operator\">+=</span> <span class=\"string\">&quot; or <span class=\"subst\">\\(second)</span>&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BlackjackCard</span>(rank: .<span class=\"type\">Ace</span>, suit: .<span class=\"type\">Spades</span>).description</span><br><span class=\"line\"><span class=\"keyword\">let</span> heartsSymbol <span class=\"operator\">=</span> <span class=\"type\">BlackjackCard</span>.<span class=\"type\">Suit</span>.<span class=\"type\">Hearts</span>.rawValue</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Optional Chaining","url":"/2016/03/04/Swift-2-Optional-Chaining/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 自动引用计数（Automatic Reference Counting）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自动引用计数实践</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being initialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reference1: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> reference2: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> reference3: <span class=\"type\">Person0</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">reference1 <span class=\"operator\">=</span> <span class=\"type\">Person0</span>(name: <span class=\"string\">&quot;John Appleseed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">reference2 <span class=\"operator\">=</span> reference1</span><br><span class=\"line\">reference3 <span class=\"operator\">=</span> reference1</span><br><span class=\"line\"></span><br><span class=\"line\">reference1 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">reference2 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">reference3 <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 解决实例之间的循环强引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Swift 提供了两种办法用来解决你在使用类的属性时所遇到的循环强引用问题：弱引用（weak reference）和无主引用（unowned reference）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//弱引用和无主引用允许循环引用中的一个实例引用另外一个实例而不保持强引用。这样实例能够互相引用而不产生循环强引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于生命周期中会变为nil的实例使用弱引用。相反地，对于初始化赋值后再也不会被赋值为nil的实例，使用无主引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的。因此，无主引用总是被定义为非可选类型（non-optional type）。你可以在声明属性或者变量时，在前面加上关键字unowned表示这是一个无主引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 1 - Person和Apartment的例子展示了两个属性的值都允许为nil，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apartment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unit: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">unit</span>: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.unit <span class=\"operator\">=</span> unit &#125;</span><br><span class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Apartment <span class=\"subst\">\\(unit)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</span><br><span class=\"line\"><span class=\"keyword\">var</span> unit4A: <span class=\"type\">Apartment</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">john <span class=\"operator\">=</span> <span class=\"type\">Person</span>(name: <span class=\"string\">&quot;John Appleseed&quot;</span>)</span><br><span class=\"line\">unit4A <span class=\"operator\">=</span> <span class=\"type\">Apartment</span>(unit: <span class=\"string\">&quot;4A&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">john<span class=\"operator\">!</span>.apartment <span class=\"operator\">=</span> unit4A</span><br><span class=\"line\">unit4A<span class=\"operator\">!</span>.tenant <span class=\"operator\">=</span> john</span><br><span class=\"line\"></span><br><span class=\"line\">john <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">unit4A <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 2 - Customer和CreditCard的例子展示了一个属性的值允许为nil，而另一个属性的值不允许为nil，这也可能会产生循环强引用。这种场景最适合通过无主引用来解决。</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CreditCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">UInt64</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">number</span>: <span class=\"type\">UInt64</span>, <span class=\"params\">customer</span>: <span class=\"type\">Customer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.number <span class=\"operator\">=</span> number</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.customer <span class=\"operator\">=</span> customer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Card #<span class=\"subst\">\\(number)</span> is being deinitialized&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lee: <span class=\"type\">Customer</span>?</span><br><span class=\"line\">lee <span class=\"operator\">=</span> <span class=\"type\">Customer</span>(name: <span class=\"string\">&quot;Brunce Lee&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> card <span class=\"operator\">=</span> <span class=\"type\">CreditCard</span>(number: <span class=\"number\">1234567890123456</span>, customer: lee<span class=\"operator\">!</span>)</span><br><span class=\"line\">lee <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">card</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 3 - 两个属性都必须有值，并且初始化完成后永远不会为nil。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Country</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> capitalCity: <span class=\"type\">City</span>!</span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">capitalName</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.capitalCity <span class=\"operator\">=</span> <span class=\"type\">City</span>(name: capitalName, country: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">City</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> country: <span class=\"type\">Country</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">country</span>: <span class=\"type\">Country</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.country <span class=\"operator\">=</span> country</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> country: <span class=\"type\">Country</span>?</span><br><span class=\"line\">country <span class=\"operator\">=</span> <span class=\"type\">Country</span>(name: <span class=\"string\">&quot;Canada&quot;</span>, capitalName: <span class=\"string\">&quot;Ottawa&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(country<span class=\"operator\">!</span>.name)</span>&#x27;s capital city is called <span class=\"subst\">\\(country<span class=\"operator\">!</span>.capitalCity.name)</span>&quot;</span>)</span><br><span class=\"line\">country <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 解决闭包引起的循环强引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在定义闭包时同时定义捕获列表作为闭包的一部分，通过这种方式可以解决闭包和类实例之间的循环强引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> lazy var someClosure: (Int, String) -&gt; String = &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -&gt; String in</span></span><br><span class=\"line\"><span class=\"comment\"> // 这里是闭包的函数体</span></span><br><span class=\"line\"><span class=\"comment\"> &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HTMLElement</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> asHTML: <span class=\"type\">Void</span> -&gt; <span class=\"type\">String</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.text &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span>&gt;<span class=\"subst\">\\(text)</span>&lt;/<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span>&gt;&quot;</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;<span class=\"subst\">\\(<span class=\"keyword\">self</span>.name)</span> /&gt;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">name</span>: <span class=\"type\">String</span>, <span class=\"params\">text</span>: <span class=\"type\">String</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.text <span class=\"operator\">=</span> text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(name)</span> is being deinitialized&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? <span class=\"operator\">=</span> <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">&quot;p&quot;</span>, text: <span class=\"string\">&quot;hello, world&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(paragraph<span class=\"operator\">!</span>.asHTML())</span><br><span class=\"line\">paragraph <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift Examples - Subscripts","url":"/2016/02/29/Swift-2-Subscripts/","content":"<p>The Swift Programming Language  Examples</p>\n<p>源码在 GitHub：<a href=\"https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples\">https://github.com/gewill/The-Swift-Programming-Language-2.1-Examples</a></p>\n<p>写了一段时间的 Swift 后，又来恶补基础知识了。</p>\n<p>Playground -&gt;</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 下标（Subscripts）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: 下标允许你通过在实例名称后面的方括号中传入一个或者多个索引值来对实例进行存取。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Matrix</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> grid: [<span class=\"type\">Double</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">rows</span>: <span class=\"type\">Int</span>, <span class=\"params\">columns</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.rows <span class=\"operator\">=</span> rows</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.columns <span class=\"operator\">=</span> columns</span><br><span class=\"line\">        grid <span class=\"operator\">=</span> <span class=\"type\">Array</span>(count: rows <span class=\"operator\">*</span> columns, repeatedValue: <span class=\"number\">0.0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">indexIsValidForRow</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">column</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> row <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> row <span class=\"operator\">&lt;</span> rows <span class=\"operator\">&amp;&amp;</span> column <span class=\"operator\">&gt;=</span> <span class=\"number\">0</span> <span class=\"operator\">&amp;&amp;</span> column <span class=\"operator\">&lt;</span> columns</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"params\">row</span>: <span class=\"type\">Int</span>, <span class=\"params\">column</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">precondition</span>(indexIsValidForRow(row, column: column), <span class=\"string\">&quot;Index out of range&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">precondition</span>(indexIsValidForRow(row, column: column), <span class=\"string\">&quot;Index out of range&quot;</span>)</span><br><span class=\"line\">            grid[(row <span class=\"operator\">*</span> columns) <span class=\"operator\">+</span> column] <span class=\"operator\">=</span> newValue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> matrix <span class=\"operator\">=</span> <span class=\"type\">Matrix</span>(rows: <span class=\"number\">2</span>, columns: <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix[<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">matrix[<span class=\"number\">1</span>, <span class=\"number\">1</span>] <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(matrix)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Swift API Design Guidelines｜Swift API设计指南","url":"/2015/12/12/Swift-API-Design-Guidelines/","content":"<p>原文地址：<a href=\"https://swift.org/documentation/api-design-guidelines.html\">https://swift.org/documentation/api-design-guidelines.html</a></p>\n<blockquote>\n<p>These are draft API guidelines being developed as part of the <a href=\"https://github.com/apple/swift-evolution\">Swift 3.0 effort</a>. 这些 API 指南草稿将作为 Swift 3.0的成果的一部分。</p>\n</blockquote>\n<h2 id=\"1-Fundamentals-最基本的\"><a href=\"#1-Fundamentals-最基本的\" class=\"headerlink\" title=\"1. Fundamentals 最基本的\"></a>1. Fundamentals 最基本的</h2><h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1.\"></a>1.1.</h3><p><strong>Clarity at the point of use</strong> is your most important goal. Code is read far more than it is written. 用法的清晰是最重要的目标。阅读代码远远比写重要。</p>\n<h3 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2.\"></a>1.2.</h3><p><strong>Clarity is more important than brevity</strong>. Although Swift code can be compact, it is a<em>non-goal</em> to enable the smallest possible code with the fewest characters. Brevity in Swift code, where it occurs, is a side-effect of the strong type system and features that naturally reduce boilerplate. 清晰比简洁更重要。尽管 Swift 代码可以很简洁，但是目标却不是以最可能少的单词完成尽少量的代码。Swift 代码中，简洁它是存在的，但也仅仅是强类型系统和特性自然而然产生的意外效果。</p>\n<h3 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3.\"></a>1.3.</h3><p><strong>Write a Documentation Comment</strong> for every method or property in Swift’s <a href=\"https://developer.apple.com/library/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/\">dialect of Markdown</a>. Ideally, the API’s meaning can be understood from its signature and its one- or two-sentence summary: 为每个方法和属性书写注释，并符合<a href=\"https://developer.apple.com/library/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/Headings.html#//apple_ref/doc/uid/TP40016497-CH8-SW1\">Swift 版的Markdown语法</a>，通过签名和一两句概要即可理解 API 的含义。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Returns the first index where `element` appears in `self`, </span></span><br><span class=\"line\"><span class=\"comment\">/// or `nil` if `element` is not found. </span></span><br><span class=\"line\"><span class=\"comment\">/// </span></span><br><span class=\"line\"><span class=\"comment\">/// - Complexity: O(`self.count`). </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">indexOf</span>(<span class=\"params\">element</span>: <span class=\"type\">Generator</span>.<span class=\"type\">Element</span>) -&gt; <span class=\"type\">Index</span>? &#123; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Insights gained by writing documentation can have such a profound impact on your API’s design that it’s a good idea to do it early on. 通过写文档获得的洞察力，可以对你设计 API 产生巨大的影响，因此最好今早的开始做。</p>\n<blockquote>\n<p>If you are having trouble describing your API’s functionality in simple terms, you may have designed the wrong API. 如果你尝试用简单的术语来描述的你的 API 的功能时都有问题，可能你设计的错误的 API。</p>\n</blockquote>\n<h2 id=\"2-Naming-命名\"><a href=\"#2-Naming-命名\" class=\"headerlink\" title=\"2. Naming 命名\"></a>2. Naming 命名</h2><h3 id=\"2-1-Promote-Clear-Usage-提高清晰的使用方法\"><a href=\"#2-1-Promote-Clear-Usage-提高清晰的使用方法\" class=\"headerlink\" title=\"2.1. Promote Clear Usage 提高清晰的使用方法\"></a>2.1. Promote Clear Usage 提高清晰的使用方法</h3><h4 id=\"2-1-1-Include-all-the-words-needed-to-avoid-ambiguity-for-a-person-reading-code-where-the-name-is-used-包含所有必需的单词以避免歧义，当读者看到名字时。\"><a href=\"#2-1-1-Include-all-the-words-needed-to-avoid-ambiguity-for-a-person-reading-code-where-the-name-is-used-包含所有必需的单词以避免歧义，当读者看到名字时。\" class=\"headerlink\" title=\"2.1.1. Include all the words needed to avoid ambiguity for a person reading code where the name is used. 包含所有必需的单词以避免歧义，当读者看到名字时。\"></a>2.1.1. <strong>Include all the words needed to avoid ambiguity</strong> for a person reading code where the name is used. 包含所有必需的单词以避免歧义，当读者看到名字时。</h4><p>For example, consider a method that removes the element at a given position within a collection 例如，考虑一个方法用来删除集合类的指定位置的元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">removeAt</span>(<span class=\"params\">position</span>: <span class=\"type\">Index</span>) -&gt; <span class=\"type\">Element</span></span><br></pre></td></tr></table></figure>\n<p>used as follows: 用法如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">empliyees.removeAt(x)</span><br></pre></td></tr></table></figure>\n<p>If we were to omit the word <code>At</code> from the method name, it could imply to the reader that the method searches for and removes an element equal to <code>x</code>, rather than using <code>x</code> to indicate the position of the element to remove. 如果省略方法名中的单词<code>At</code>，对于读者将意味着这个方法可以搜索并移除一个等于<code>x</code>的元素，而非表示使用<code>x</code>定位将要移除的元素的位置。</p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">employees.remove(x) <span class=\"comment\">// unclear: are we removing x?</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-1-2-Omit-Needless-Words-Every-word-in-a-name-should-convey-salient-information-at-the-use-site-删除多余的单词。名字中每一个单词都表达出使用时的主要信息。\"><a href=\"#2-1-2-Omit-Needless-Words-Every-word-in-a-name-should-convey-salient-information-at-the-use-site-删除多余的单词。名字中每一个单词都表达出使用时的主要信息。\" class=\"headerlink\" title=\"2.1.2.  Omit Needless Words. Every word in a name should convey salient information at the use site. 删除多余的单词。名字中每一个单词都表达出使用时的主要信息。\"></a>2.1.2.  <a href=\"undefined\"><strong>Omit Needless Words</strong></a>. Every word in a name should convey salient information at the use site. 删除多余的单词。名字中每一个单词都表达出使用时的主要信息。</h4><p>More words may be needed to clarify intent or disambiguate meaning, but those that are redundant with information the reader already possesses should be omitted. In particular, omit words that merely repeat type information: 可能需要更多单词来明确意图或消除歧义，但是多余的信息读者可能会忽略。尤其要删除那些仅仅指明类型信息的单词。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">removeElement</span>(<span class=\"params\">member</span>: <span class=\"type\">Element</span>) -&gt; <span class=\"type\">Element</span>?  allViews.removeElement(cancelButton) </span><br></pre></td></tr></table></figure>\n\n\n<p>In this case, the word Element adds nothing salient at the call site. This API would be better: 本例中，Element 这个单词在调用时并没有显著的作用。下面这个 API 可能更好。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">remove</span>(<span class=\"params\">member</span>: <span class=\"type\">Element</span>) -&gt; <span class=\"type\">Element</span>?  allViews.remove(cancelButton) <span class=\"comment\">// clearer </span></span><br></pre></td></tr></table></figure>\n\n\n<p>Occasionally, repeating type information is necessary to avoid ambiguity, but in general it is better to use a word that describes a parameter’s role rather than its type. See the next item for details. 个别情况下，重复类型信息室必要的，以避免歧义。但通常来说，使用表示参数的作用单词要比类型信息的单词的更好。下一条项目将会详细讲解。</p>\n<h4 id=\"2-1-3-Compensate-For-Weak-Type-Information-as-needed-to-clarify-a-parameter’s-role-对弱类型的补充说明参数的作用描述信息。\"><a href=\"#2-1-3-Compensate-For-Weak-Type-Information-as-needed-to-clarify-a-parameter’s-role-对弱类型的补充说明参数的作用描述信息。\" class=\"headerlink\" title=\"2.1.3.  Compensate For Weak Type Information as needed to clarify a parameter’s role. 对弱类型的补充说明参数的作用描述信息。\"></a>2.1.3.  <a href=\"undefined\"><strong>Compensate For Weak Type Information</strong></a> as needed to clarify a parameter’s <strong>role</strong>. 对弱类型的补充说明参数的作用描述信息。</h4><p>Especially when a parameter type is <code>NSObject</code>, <code>Any</code>, <code>AnyObject</code>, or a fundamental type such <code>Int</code> or <code>String</code>, type information and context at the point of use may not fully convey intent. 尤其是当参数类型是<code>NSObject</code>，<code>Any</code>，<code>AnyObject</code> 或者最基本的类型如  <code>Int</code> 或 <code>String</code>，这时候类型信息和使用时的上下文可能不能完全表达出意图。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addObserver</span>(<span class=\"keyword\">_</span> <span class=\"params\">observer</span>: <span class=\"type\">NSObject</span>, <span class=\"params\">forKeyPath</span> <span class=\"params\">path</span>: <span class=\"type\">String</span>) </span><br><span class=\"line\">grid.addObserver(<span class=\"keyword\">self</span>, forKeyPath: graphics) <span class=\"comment\">// clear</span></span><br></pre></td></tr></table></figure>\n<p>To restore clarity, precede each weakly-typed parameter with a noun describing its role: 回归到清晰，优先添加描述作用的名词来命名弱类型参数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">addObserver</span>(<span class=\"keyword\">_</span> <span class=\"params\">observer</span>: <span class=\"type\">NSObject</span>, <span class=\"params\">forKeyPath</span> <span class=\"params\">path</span>: <span class=\"type\">String</span>) </span><br><span class=\"line\">grid.addObserver(<span class=\"keyword\">self</span>, forKeyPath: graphics) <span class=\"comment\">// clear</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-2-Be-Grammatical-遵循语法规则\"><a href=\"#2-2-Be-Grammatical-遵循语法规则\" class=\"headerlink\" title=\"2.2. Be Grammatical 遵循语法规则\"></a>2.2. Be Grammatical 遵循语法规则</h3><h4 id=\"2-2-1-Uses-of-mutating-methods-should-read-as-imperative-verb-phrases-e-g-x-reverse-x-sort-x-append-y-变异的方法应该使用命令式的动词短语。\"><a href=\"#2-2-1-Uses-of-mutating-methods-should-read-as-imperative-verb-phrases-e-g-x-reverse-x-sort-x-append-y-变异的方法应该使用命令式的动词短语。\" class=\"headerlink\" title=\"2.2.1. Uses of mutating methods should read as imperative verb phrases, e.g.,x.reverse(), x.sort(), x.append(y). 变异的方法应该使用命令式的动词短语。\"></a>2.2.1. Uses of <strong>mutating methods should read as imperative verb phrases</strong>, e.g.,<code>x.reverse()</code>, <code>x.sort()</code>, <code>x.append(y)</code>. 变异的方法应该使用命令式的动词短语。</h4><h4 id=\"2-2-2-Uses-of-non-mutating-methods-should-read-as-noun-phrases-when-possible-e-g-x-distanceTo-y-i-successor-非变异的方法尽可能的使用名词短语。\"><a href=\"#2-2-2-Uses-of-non-mutating-methods-should-read-as-noun-phrases-when-possible-e-g-x-distanceTo-y-i-successor-非变异的方法尽可能的使用名词短语。\" class=\"headerlink\" title=\"2.2.2. Uses of non-mutating methods should read as noun phrases when possible, e.g. x.distanceTo(y), i.successor(). 非变异的方法尽可能的使用名词短语。\"></a>2.2.2. Uses of <strong>non-mutating methods should read as noun phrases</strong> when possible, e.g. <code>x.distanceTo(y)</code>, <code>i.successor()</code>. 非变异的方法尽可能的使用名词短语。</h4><p>Imperative verbs are acceptable when there is no good alternative that reads as a noun phrase: 必要的使用动词也是可接受的，当没有其他好的可以读起来像一个名字短语的选项。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> firstAndLast <span class=\"operator\">=</span> fullName.split() <span class=\"comment\">// acceptable</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-When-a-mutating-method-is-described-by-a-verb-name-its-non-mutating-counterpart-according-to-the-“ed-x2F-ing”-rule-e-g-the-non-mutating-versions-ofx-sort-and-x-append-y-are-x-sorted-and-x-appending-y-与变异之对应的非变异自己的变异方法通常是动词加“ed-x2F-ing”\"><a href=\"#2-2-3-When-a-mutating-method-is-described-by-a-verb-name-its-non-mutating-counterpart-according-to-the-“ed-x2F-ing”-rule-e-g-the-non-mutating-versions-ofx-sort-and-x-append-y-are-x-sorted-and-x-appending-y-与变异之对应的非变异自己的变异方法通常是动词加“ed-x2F-ing”\" class=\"headerlink\" title=\"2.2.3. When a mutating method is described by a verb, name its non-mutating counterpart according to the “ed&#x2F;ing” rule, e.g. the non-mutating versions ofx.sort() and x.append(y) are x.sorted() and x.appending(y). 与变异之对应的非变异自己的变异方法通常是动词加“ed&#x2F;ing”\"></a>2.2.3. When <strong>a mutating method is described by a verb, name its non-mutating counterpart</strong> according to the <strong>“ed&#x2F;ing” rule</strong>, e.g. the non-mutating versions of<code>x.sort()</code> and <code>x.append(y)</code> are <code>x.sorted()</code> and <code>x.appending(y)</code>. 与变异之对应的非变异自己的变异方法通常是动词加“ed&#x2F;ing”</h4><p>Often, a mutating method will have a non-mutating variant returning the same, or a similar, type as the receiver. 通常，一个非变异自己的变异的方法返回值是一个相同或者相似类型。</p>\n<p>Prefer to name the non-mutating variant using the verb’s past tense (usually appending “ed”): 偏爱用动词过去式（通常是结尾添加“ed”）命名一个非变异体</p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Reverses `self` in-place. </span></span><br><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">reverse</span>()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Returns a reversed copy of `self`. </span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">reversed</span>() -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\"><span class=\"operator\">...</span> </span><br><span class=\"line\">x.reverse() </span><br><span class=\"line\"><span class=\"keyword\">let</span> y <span class=\"operator\">=</span> x.reversed()</span><br></pre></td></tr></table></figure>\n<p>When adding “ed” is not grammatical because the verb has a direct object, name the non-mutating variant using the verb’s gerund form (usually appending “ing”): 当因为及物动词添加“ed”不和语法时，就使用动名词形式（通常结尾添加“ing”）来命名</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Strips all the newlines from \\`self\\` </span></span><br><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">stripNewlines</span>()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Returns a copy of \\`self\\` with all the newlines stripped. </span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">strippingNewlines</span>() -&gt; <span class=\"type\">String</span> </span><br><span class=\"line\"><span class=\"operator\">...</span> </span><br><span class=\"line\">s.stripNewlines() </span><br><span class=\"line\"><span class=\"keyword\">let</span> oneLine <span class=\"operator\">=</span> t.strippingNewlines() </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-Uses-of-non-mutating-Boolean-methods-and-properties-should-read-as-assertions-about-the-receiver-e-g-x-isEmpty-line1-intersects-line2-非变异的布尔方法和属性应使用断言作为接收器。\"><a href=\"#2-2-4-Uses-of-non-mutating-Boolean-methods-and-properties-should-read-as-assertions-about-the-receiver-e-g-x-isEmpty-line1-intersects-line2-非变异的布尔方法和属性应使用断言作为接收器。\" class=\"headerlink\" title=\"2.2.4.  Uses of non-mutating Boolean methods and properties should read as assertions about the receiver, e.g. x.isEmpty, line1.intersects(line2). 非变异的布尔方法和属性应使用断言作为接收器。\"></a>2.2.4.  <a href=\"undefined\">Uses</a> of non-mutating <strong>Boolean methods and properties should read as assertions about the receiver</strong>, e.g. <code>x.isEmpty</code>, <code>line1.intersects(line2)</code>. 非变异的布尔方法和属性应使用断言作为接收器。</h4><h4 id=\"2-2-5-Protocols-that-describe-what-something-is-should-read-as-nouns-e-g-Collection-Protocols-that-describe-a-capability-should-be-named-using-the-suffixes-able-ible-or-ing-e-g-Equatable-ProgressReporting-描述是什么的协议用名词。描述能力的用-able-ible-or-ing-等后缀。\"><a href=\"#2-2-5-Protocols-that-describe-what-something-is-should-read-as-nouns-e-g-Collection-Protocols-that-describe-a-capability-should-be-named-using-the-suffixes-able-ible-or-ing-e-g-Equatable-ProgressReporting-描述是什么的协议用名词。描述能力的用-able-ible-or-ing-等后缀。\" class=\"headerlink\" title=\"2.2.5.  Protocols that describe what something is should read as nouns (e.g. Collection). Protocols that describe a capability should be named using the suffixes able,ible, or ing (e.g. Equatable, ProgressReporting). 描述是什么的协议用名词。描述能力的用 able,ible, or ing 等后缀。\"></a>2.2.5.  <strong>Protocols</strong> that describe what something <strong>is</strong> should read as nouns (e.g. <code>Collection</code>). Protocols that describe a <strong>capability</strong> should be named using the suffixes <code>able</code>,<code>ible</code>, or <code>ing</code> (e.g. <code>Equatable</code>, <code>ProgressReporting</code>). 描述是什么的协议用名词。描述能力的用 <code>able</code>,<code>ible</code>, or <code>ing</code> 等后缀。</h4><h4 id=\"2-2-6-The-names-of-other-types-properties-variables-and-constants-should-read-as-nouns-其余类型，属性，变量和常量用名词。\"><a href=\"#2-2-6-The-names-of-other-types-properties-variables-and-constants-should-read-as-nouns-其余类型，属性，变量和常量用名词。\" class=\"headerlink\" title=\"2.2.6. The names of other types, properties, variables, and constants should read as nouns. 其余类型，属性，变量和常量用名词。\"></a>2.2.6. The names of other <strong>types, properties, variables, and constants should read as nouns.</strong> 其余类型，属性，变量和常量用名词。</h4><h3 id=\"2-3-Use-Terminology-Well-恰当地使用术语\"><a href=\"#2-3-Use-Terminology-Well-恰当地使用术语\" class=\"headerlink\" title=\"2.3. Use Terminology Well 恰当地使用术语\"></a>2.3. Use Terminology Well 恰当地使用术语</h3><p><strong>Term of Art</strong></p>\n<p><em>noun</em> - a word or phrase that has a precise, specialized meaning within a particular field or profession. 一个单词或短语，有明确的特定的含义在某一特定领域或专业。</p>\n<h4 id=\"2-3-1-Avoid-obscure-terms-if-a-more-common-word-conveys-meaning-just-as-well-Don’t-say-“epidermis”-if-“skin”-will-serve-your-purpose-Terms-of-art-are-an-essential-communication-tool-but-should-only-be-used-to-capture-crucial-meaning-that-would-otherwise-be-lost-避免使用生僻词。\"><a href=\"#2-3-1-Avoid-obscure-terms-if-a-more-common-word-conveys-meaning-just-as-well-Don’t-say-“epidermis”-if-“skin”-will-serve-your-purpose-Terms-of-art-are-an-essential-communication-tool-but-should-only-be-used-to-capture-crucial-meaning-that-would-otherwise-be-lost-避免使用生僻词。\" class=\"headerlink\" title=\"2.3.1. Avoid obscure terms if a more common word conveys meaning just as well. Don’t say “epidermis” if “skin” will serve your purpose. Terms of art are an essential communication tool, but should only be used to capture crucial meaning that would otherwise be lost. 避免使用生僻词。\"></a>2.3.1. <strong>Avoid obscure terms</strong> if a more common word conveys meaning just as well. Don’t say “epidermis” if “skin” will serve your purpose. Terms of art are an essential communication tool, but should only be used to capture crucial meaning that would otherwise be lost. 避免使用生僻词。</h4><p>The only reason to use a technical term rather than a more common word is that it precisely expresses something that would otherwise be ambiguous or unclear. Therefore, an API should use the term strictly in accordance with its accepted meaning.</p>\n<ul>\n<li><p><strong>Don’t surprise an expert</strong>: anyone already familiar with the term will be surprised and probably angered if we appear to have invented a new meaning for it.</p>\n</li>\n<li><p><strong>Don’t confuse a beginner</strong>: anyone trying to learn the term is likely to do a web search and find its traditional meaning.</p>\n</li>\n</ul>\n<h4 id=\"2-3-2-Stick-to-the-established-meaning-if-you-do-use-a-term-of-art-Avoid-abbreviations-Abbreviations-especially-non-standard-ones-are-effectively-terms-of-art-because-understanding-depends-on-correctly-translating-them-into-their-non-abbreviated-forms-坚持使用明确的单词。避免缩写，除非很容易搜索到原意。\"><a href=\"#2-3-2-Stick-to-the-established-meaning-if-you-do-use-a-term-of-art-Avoid-abbreviations-Abbreviations-especially-non-standard-ones-are-effectively-terms-of-art-because-understanding-depends-on-correctly-translating-them-into-their-non-abbreviated-forms-坚持使用明确的单词。避免缩写，除非很容易搜索到原意。\" class=\"headerlink\" title=\"2.3.2. Stick to the established meaning if you do use a term of art.Avoid abbreviations. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms. 坚持使用明确的单词。避免缩写，除非很容易搜索到原意。\"></a>2.3.2. <strong>Stick to the established meaning</strong> if you do use a term of art.<strong>Avoid abbreviations</strong>. Abbreviations, especially non-standard ones, are effectively terms-of-art, because understanding depends on correctly translating them into their non-abbreviated forms. 坚持使用明确的单词。避免缩写，除非很容易搜索到原意。</h4><pre><code>&gt;The intended meaning for any abbreviation you use should be easily found by a web search. \n</code></pre>\n<h4 id=\"2-3-3-Embrace-precedent-Don’t-optimize-terms-for-the-total-beginner-at-the-expense-of-conformance-to-existing-culture-拥抱先例：不要为了新手，以顺应先前的文化为代价去优化术语。\"><a href=\"#2-3-3-Embrace-precedent-Don’t-optimize-terms-for-the-total-beginner-at-the-expense-of-conformance-to-existing-culture-拥抱先例：不要为了新手，以顺应先前的文化为代价去优化术语。\" class=\"headerlink\" title=\"2.3.3. Embrace precedent: Don’t optimize terms for the total beginner at the expense of conformance to existing culture. 拥抱先例：不要为了新手，以顺应先前的文化为代价去优化术语。\"></a>2.3.3. <strong>Embrace precedent:</strong> Don’t optimize terms for the total beginner at the expense of conformance to existing culture. 拥抱先例：不要为了新手，以顺应先前的文化为代价去优化术语。</h4><blockquote>\n<p>译者注：#Swift3 Remove the ++ and – operators<br>Author: Chris Lattner <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md</a> </p>\n</blockquote>\n<h2 id=\"3-Conventions-约定\"><a href=\"#3-Conventions-约定\" class=\"headerlink\" title=\"3. Conventions 约定\"></a>3. Conventions 约定</h2><h3 id=\"3-1-General-Conventions-一般约定\"><a href=\"#3-1-General-Conventions-一般约定\" class=\"headerlink\" title=\"3.1. General Conventions 一般约定\"></a>3.1. General Conventions 一般约定</h3><ul>\n<li><p><strong>Document the complexity of any computed property that is not O(1)</strong>. People often assume that property access involves no significant computation, because they have stored properties as a mental model. Be sure to alert them when that assumption may be violated. 指出任何复杂度非O(1)的计算属性。因为人们通常假设属性访问并非复杂计算量。</p>\n</li>\n<li><p><strong>Prefer methods and properties to free functions</strong>. Free functions are used only in special cases. 偏爱方法和属性，而非相对独立的函数。</p>\n</li>\n<li><p><strong>Follow case conventions:</strong> names of types, protocols and enum cases are <code>UpperCamelCase</code>. Everything else is <code>lowerCamelCase</code>. 遵循驼峰大小写法：类型，协议和枚举用大驼峰法，其余小驼峰法。</p>\n</li>\n<li><p><strong>Methods can share a base name when they share the same basic meaning</strong>but operate on different types, or are in different domains.  方法可以共用一个通用名，如果均指一个基本含义时，用于不同的类型或者不同的作用域。</p>\n<p>For example, the following is encouraged, since the methods do essentially the same things:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Shape</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">/// Returns true iff other is within the area of self. </span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">contains</span>(<span class=\"params\">other</span>: <span class=\"type\">Point</span>) -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"operator\">...</span> &#125;  </span><br><span class=\"line\"><span class=\"comment\">/// Returns true iff other is entirely within the area of self. </span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">contains</span>(<span class=\"params\">other</span>: <span class=\"type\">Shape</span>) -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"operator\">...</span> &#125;  </span><br><span class=\"line\"><span class=\"comment\">/// Returns true iff other is within the area of self. </span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">contains</span>(<span class=\"params\">other</span>: <span class=\"type\">LineSegment</span>) -&gt; <span class=\"type\">Bool</span> &#123; <span class=\"operator\">...</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"3-2-Parameters\"><a href=\"#3-2-Parameters\" class=\"headerlink\" title=\"3.2. Parameters\"></a>3.2. Parameters</h3><ul>\n<li><p>3.2.1. <strong>Take advantage of defaulted arguments</strong> when it simplifies common uses. Any parameter with a single commonly-used value is a candidate for defaulting. 充分利用参数的默认值。</p>\n</li>\n<li><p>3.2.2. <strong>Prefer to locate parameters with defaults towards the end</strong> of the parameter list. Parameters without defaults are usually more essential to the semantics of a method, and provide a stable initial pattern of use where methods are invoked. 尽量含默认值参数置于参数列表后面。</p>\n</li>\n<li><p>3.2.3. <strong>Prefer to follow the language’s defaults for the presence of argument labels</strong> 遵循语言习惯填写外部参数标签。</p>\n<p> In other words, usually: 换言之</p>\n<ul>\n<li><p>First parameters to methods and functions should not have required argument labels. 第一参数不必指明外部参数。</p>\n</li>\n<li><p>Other parameters to methods and functions should have required argument labels. 后面的外部参数必须填写。</p>\n</li>\n<li><p>All parameters to initializers should have required argument labels. 所有涉及初始化的参数均需外部参数。</p>\n<pre><code>The above corresponds to where the language would require argument labels if each parameter was declared with the form: 如果符合上述需要外部参数标签，应该向下面这么声明\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t<code>swift ​\t     identifier: Type ​\t</code><br>​\t<br>    &gt;译者注：参看 <a href=\"http://stackoverflow.com/questions/24815832/when-are-argument-labels-required-in-swift\">http://stackoverflow.com/questions/24815832/when-are-argument-labels-required-in-swift</a></p>\n<p>There are only a few exceptions: 也有例外</p>\n<ul>\n<li><p><strong>In initializers that should be seen as “full-width type conversions,”</strong> the initial argument should be the source of the conversion, and should be unlabelled.  包含全角的类型转换的初始化应该使用原始指，而且不包含外部参数标签。</p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">String</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">// Convert `x` into its textual representation in the given radix init(_ x: BigInt, radix: Int = 10) // Note the initial separate underscore </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">text <span class=\"operator\">=</span> <span class=\"string\">&quot;The value is: &quot;</span> </span><br><span class=\"line\">text <span class=\"operator\">+=</span> <span class=\"type\">String</span>(veryLargeNumber) </span><br><span class=\"line\">text <span class=\"operator\">+=</span> <span class=\"string\">&quot; and in hexadecimal, it&#x27;s&quot;</span> </span><br><span class=\"line\">text <span class=\"operator\">+=</span> <span class=\"type\">String</span>(veryLargeNumber, radix: <span class=\"number\">16</span>)</span><br><span class=\"line\">​\t```</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"type\">In</span> “narrowing” type conversions, though, a label that describes the narrowing <span class=\"keyword\">is</span> recommended:</span><br><span class=\"line\"></span><br><span class=\"line\">\t```<span class=\"type\">Swift</span></span><br><span class=\"line\">\t<span class=\"keyword\">extension</span> <span class=\"title class_\">UInt32</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">value</span>: <span class=\"type\">Int16</span>) <span class=\"comment\">// widening, so no label </span></span><br><span class=\"line\">\t<span class=\"keyword\">init</span>(<span class=\"params\">truncating</span> <span class=\"params\">bits</span>: <span class=\"type\">UInt64</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">init</span>(<span class=\"params\">saturating</span> <span class=\"params\">value</span>: <span class=\"type\">UInt64</span>) &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>When all parameters are peers that can’t be usefully distinguished</strong>, none should be labelled. Well-known examples include <code>min(number1, number2)</code> and<code>zip(sequence1, sequence2)</code>. 如果所有参数是平等不易区分重要性，不用加外部参数标签。</p>\n</li>\n<li><p><a href=\"undefined\"><strong>When the first argument is defaulted, it should have a distinct argument label</strong></a>. 如果第一个参数是值可空，那么就应该添加一个清晰的外表参数标签。</p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Document</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">close</span>(<span class=\"params\">completionHandler</span> <span class=\"params\">completion</span>: ((<span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Void</span>)<span class=\"operator\">?</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">doc1.close() </span><br><span class=\"line\">doc2.close(completionHandler: app.quit) </span><br></pre></td></tr></table></figure>\n<p>  As you can see, this practice makes calls read correctly regardless of whether the argument is passed explicitly. If instead you omit the parameter description, the call may incorrectly imply the argument is the direct object of the “sentence:”</p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Document</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">close</span>(<span class=\"params\">completion</span>: ((<span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Void</span>)<span class=\"operator\">?</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">doc.close(app.quit) <span class=\"comment\">// Closing the quit function?</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>  If you attach the parameter description to the function’s base name, it will “dangle” when the default is used:\n  \n</code></pre>\n  <figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">Document</span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">closeWithCompletionHandler</span>(<span class=\"params\">completion</span>: ((<span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Void</span>)<span class=\"operator\">?</span> <span class=\"operator\">=</span> <span class=\"literal\">nil</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">doc.closeWithCompletionHandler() <span class=\"comment\">// What completion handler?</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"4-Special-Instructions-特别说明\"><a href=\"#4-Special-Instructions-特别说明\" class=\"headerlink\" title=\"4. Special Instructions 特别说明\"></a>4. Special Instructions 特别说明</h2><h3 id=\"4-1-Take-extra-care-with-unconstrained-polymorphism-e-g-Any-AnyObject-and-unconstrained-generic-parameters-to-avoid-ambiguities-in-overload-sets-特别注意不受约束类型的多态。\"><a href=\"#4-1-Take-extra-care-with-unconstrained-polymorphism-e-g-Any-AnyObject-and-unconstrained-generic-parameters-to-avoid-ambiguities-in-overload-sets-特别注意不受约束类型的多态。\" class=\"headerlink\" title=\"4.1. Take extra care with unconstrained polymorphism (e.g. Any, AnyObject, and unconstrained generic parameters) to avoid ambiguities in overload sets. 特别注意不受约束类型的多态。\"></a>4.1. <strong>Take extra care with unconstrained polymorphism</strong> (e.g. <code>Any</code>, <code>AnyObject</code>, and unconstrained generic parameters) to avoid ambiguities in overload sets. 特别注意不受约束类型的多态。</h3><p>For example, consider this overload set:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Array</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">/// Inserts `newElement` at `self.endIndex`. </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">append</span>(<span class=\"params\">newElement</span>: <span class=\"type\">Element</span>) </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/// Inserts the contents of `newElements`, in order, at </span></span><br><span class=\"line\"> <span class=\"comment\">/// `self.endIndex`. </span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">append</span>&lt;</span><br><span class=\"line\"> <span class=\"type\">S</span> : <span class=\"type\">SequenceType</span> where <span class=\"type\">S</span>.<span class=\"type\">Generator</span>.<span class=\"type\">Element</span> == <span class=\"type\">Element</span> </span><br><span class=\"line\"> &gt;(<span class=\"params\">newElements</span>: <span class=\"type\">S</span>) &#125; </span><br></pre></td></tr></table></figure>\n\n<p>These methods form a semantic family, and the argument types appear at first to be sharply distinct. However, when <code>Element</code> is <code>Any</code>, a single element can have the same type as a sequence of elements:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var values: [Any] = [1, &quot;a&quot;] values.append([2, 3, 4]) // [1, &quot;a&quot;, [2, 3, 4]] or [1, &quot;a&quot;, 2, 3, 4]? </span><br></pre></td></tr></table></figure>\n\n<p>To eliminate the ambiguity, name the second overload more explicitly: 为了排除歧义，重新命名时更加明确含义。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Array</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">/// Inserts `newElement` at `self.endIndex`. </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">append</span>(<span class=\"params\">newElement</span>: <span class=\"type\">Element</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// Inserts the contents of `newElements`, in order, at </span></span><br><span class=\"line\"><span class=\"comment\">/// `self.endIndex`. </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">appendContentsOf</span>&lt; </span><br><span class=\"line\"><span class=\"type\">S</span> : <span class=\"type\">SequenceType</span> where <span class=\"type\">S</span>.<span class=\"type\">Generator</span>.<span class=\"type\">Element</span> == <span class=\"type\">Element</span> </span><br><span class=\"line\">&gt;(<span class=\"params\">newElements</span>: <span class=\"type\">S</span>) &#125; </span><br></pre></td></tr></table></figure>\n\n<p>Notice how the new name better matches the documentation comment. In this case, the act of writing the documentation comment actually brought the issue to the API author’s attention.</p>\n<h3 id=\"4-2-Make-documentation-comments-tool-friendly-they-will-be-automatically-extracted-to-generate-richly-formatted-public-documentation-and-they-appear-in-Xcode-in-generated-interfaces-quick-help-and-code-completion-文档注释对工具优化，方便地自动提取富文本的文档，自动显示在-Xcode，生成界面，快速帮助，代码补全中。\"><a href=\"#4-2-Make-documentation-comments-tool-friendly-they-will-be-automatically-extracted-to-generate-richly-formatted-public-documentation-and-they-appear-in-Xcode-in-generated-interfaces-quick-help-and-code-completion-文档注释对工具优化，方便地自动提取富文本的文档，自动显示在-Xcode，生成界面，快速帮助，代码补全中。\" class=\"headerlink\" title=\"4.2. Make documentation comments tool-friendly; they will be automatically extracted to generate richly-formatted public documentation, and they appear in Xcode, in generated interfaces, quick help, and code completion. 文档注释对工具优化，方便地自动提取富文本的文档，自动显示在 Xcode，生成界面，快速帮助，代码补全中。\"></a>4.2. <strong>Make documentation comments tool-friendly</strong>; they will be automatically extracted to generate richly-formatted public documentation, and they appear in Xcode, in generated interfaces, quick help, and code completion. 文档注释对工具优化，方便地自动提取富文本的文档，自动显示在 Xcode，生成界面，快速帮助，代码补全中。</h3><p>Our Markdown processor gives special treatment to the following bullet list keywords: Swift 版 Markdown 会特殊处理下面列出的关键词</p>\n<table>\n<thead>\n<tr>\n<th><code>-Attention:</code></th>\n<th><code>-Important:</code></th>\n<th><code>-Requires:</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-Author:</code></td>\n<td><code>-Invariant:</code></td>\n<td><code>-See:</code></td>\n</tr>\n<tr>\n<td><code>-Authors:</code></td>\n<td><code>-Note:</code></td>\n<td><code>-Since:</code></td>\n</tr>\n<tr>\n<td><code>-Bug:</code></td>\n<td><code>-Postcondition:</code></td>\n<td><code>-Throws:</code></td>\n</tr>\n<tr>\n<td><code>-Complexity:</code></td>\n<td><code>-Precondition:</code></td>\n<td><code>-TODO:</code></td>\n</tr>\n<tr>\n<td><code>-Copyright:</code></td>\n<td><code>-Remark:</code></td>\n<td><code>-Version:</code></td>\n</tr>\n<tr>\n<td><code>-Date:</code></td>\n<td><code>-Remarks:</code></td>\n<td><code>-Warning:</code></td>\n</tr>\n<tr>\n<td><code>-Experiment:</code></td>\n<td><code>-Returns:</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>Writing a great summary is more important</strong> than leveraging keywords. 写一个很棒的概要远比仅仅添加关键词重要的多。</p>\n<p>You can omit separate documentation for each parameter and the return type if it wouldn’t add useful information beyond what’s already conveyed by the method signature and its summary line. For example: 除方法签名和概要信息外，如果不能添加有用的信息，就可以省略参数和返回类型的注释文档。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Append `newContent` to this stream. </span></span><br><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">write</span>(<span class=\"params\">newContent</span>: <span class=\"type\">String</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Swift 指针","url":"/2015/12/14/Swift-Pointer/","content":"<p>Swift中的内存指针讲解的很清楚：<a href=\"http://onevcat.com/2015/01/swift-pointer/\">http://onevcat.com/2015/01/swift-pointer/</a>。<br>Apple期望在Swift中指针能够尽量减少登场几率，因此在Swift中指针被映射为了一个泛型类型，并且还比较抽象。Swift中，指针都使用一个特殊的类型来表示，那就是UnsafePointer<T>。总的来说还是为了方便处理 C API，平时并不需要深入了解。</p>\n<p>还有苹果官方博客：<a href=\"https://developer.apple.com/swift/blog/?id=6\">Interacting with C Pointers</a>。</p>\n<p>下面代码是数组指针用法：</p>\n<pre><code class=\"swift\">    // Swift Memory UnsafePointer\n    var array = [1, 2, 3, 4, 5]\n    var arrayPtr = UnsafeMutableBufferPointer&lt;Int&gt;(start: &amp;array, count: array.count)\n    // baseAddress 是第一个元素的指针\n    var basePtr = arrayPtr.baseAddress as UnsafeMutablePointer&lt;Int&gt;\n    print(basePtr.memory) // 1\n    basePtr.memory = 10\n    print(basePtr.memory) // 10\n    //下一个元素\n    var nextPtr = basePtr.successor()\n    print(nextPtr.memory) // 2\n    print(array) // [10, 2, 3, 4, 5]\n    \n</code></pre>\n"},{"title":"Swift Tutorial - Core Data - Notes","url":"/2015/08/21/Swift-Tutorial-Core-Data-Notes/","content":"<h2 id=\"Swift-Tutorial-Core-Data\"><a href=\"#Swift-Tutorial-Core-Data\" class=\"headerlink\" title=\"Swift Tutorial - Core Data\"></a>Swift Tutorial - Core Data</h2><p>From <a href=\"https://www.youtube.com/watch?v=3IDfgATVqHw\">Swift Tutorial - Core Data</a> by rm2kdev</p>\n<iframe width=\"700\" height=\"394\" src=\"https://www.youtube.com/embed/3IDfgATVqHw?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"https://github.com/gewill/test-projects/tree/master/test%20Core%20Data\">Project on GitHub</a></p>\n<p>Add some comments into the project.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  ViewController.swift</span></span><br><span class=\"line\"><span class=\"comment\">//  test Core Data</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will Ge on 8/21/15.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"keyword\">import</span> CoreData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ViewController</span>: <span class=\"title class_\">UIViewController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">viewDidLoad</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.viewDidLoad()</span><br><span class=\"line\">        <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">didReceiveMemoryWarning</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.didReceiveMemoryWarning()</span><br><span class=\"line\">        <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> textUserName: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    <span class=\"keyword\">@IBOutlet</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> textPassword: <span class=\"type\">UITextField</span>!</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">saveButton</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Cora Data already settled done in AppDelegate.swift</span></span><br><span class=\"line\">        <span class=\"comment\">// get the ManagedObjectContext</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> appDel <span class=\"operator\">=</span> <span class=\"type\">UIApplication</span> .sharedApplication().delegate <span class=\"keyword\">as!</span> <span class=\"type\">AppDelegate</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> context: <span class=\"type\">NSManagedObjectContext</span> <span class=\"operator\">=</span> appDel.managedObjectContext<span class=\"operator\">!</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// get the ManagedObject</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> newUser <span class=\"operator\">=</span> <span class=\"type\">NSEntityDescription</span>.insertNewObjectForEntityForName(<span class=\"string\">&quot;Users&quot;</span>, inManagedObjectContext: context) <span class=\"keyword\">as!</span> <span class=\"type\">NSManagedObject</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// set value for key</span></span><br><span class=\"line\">        newUser.setValue(<span class=\"string\">&quot;&quot;</span> <span class=\"operator\">+</span> textUserName.text, forKey: <span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">        newUser.setValue(<span class=\"string\">&quot;&quot;</span> <span class=\"operator\">+</span> textPassword.text, forKey: <span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// save</span></span><br><span class=\"line\">        context.save(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;New username: <span class=\"subst\">\\(textPassword.text)</span> and password: <span class=\"subst\">\\(textPassword.text)</span> saved successfully.<span class=\"subst\">\\n</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">@IBAction</span> <span class=\"keyword\">func</span> <span class=\"title function_\">loadButton</span>(<span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> appDel <span class=\"operator\">=</span> <span class=\"type\">UIApplication</span> .sharedApplication().delegate <span class=\"keyword\">as!</span> <span class=\"type\">AppDelegate</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> context: <span class=\"type\">NSManagedObjectContext</span> <span class=\"operator\">=</span> appDel.managedObjectContext<span class=\"operator\">!</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// add FetchRequest and add Predicate/ SortDescriptor etc.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> request <span class=\"operator\">=</span> <span class=\"type\">NSFetchRequest</span>(entityName: <span class=\"string\">&quot;Users&quot;</span>)</span><br><span class=\"line\">        request.returnsObjectsAsFaults <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        request.predicate <span class=\"operator\">=</span> <span class=\"type\">NSPredicate</span>(format: <span class=\"string\">&quot;username = %@&quot;</span>, <span class=\"string\">&quot;&quot;</span> <span class=\"operator\">+</span> textUserName.text)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> requests: <span class=\"type\">NSArray</span> <span class=\"operator\">=</span> context.executeFetchRequest(request, error: <span class=\"literal\">nil</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requests.count <span class=\"operator\">&gt;</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> res <span class=\"operator\">=</span> requests[<span class=\"number\">0</span>] <span class=\"keyword\">as!</span> <span class=\"type\">NSManagedObject</span></span><br><span class=\"line\">            textUserName.text <span class=\"operator\">=</span> res.valueForKeyPath(<span class=\"string\">&quot;username&quot;</span>) <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\">            textPassword.text <span class=\"operator\">=</span> res.valueForKeyPath(<span class=\"string\">&quot;password&quot;</span>) <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;0 Results Returned... Poterial Error.<span class=\"subst\">\\n</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww4.sinaimg.cn/large/5369602egw1evalz3mz5lj21kg0tqagy.jpg\" alt=\"test_Core_Data.xcdatamodeld settings\"></p>\n<h2 id=\"Discovry-Core-Data-stack\"><a href=\"#Discovry-Core-Data-stack\" class=\"headerlink\" title=\"Discovry - Core Data stack\"></a>Discovry - Core Data stack</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  AppDelegate.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - Core Data stack</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> applicationDocumentsDirectory: <span class=\"type\">NSURL</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The directory the application uses to store the Core Data store file. This code uses a directory named &quot;org.gewill.test_Core_Data&quot; in the application&#x27;s documents Application Support directory.</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> urls <span class=\"operator\">=</span> <span class=\"type\">NSFileManager</span>.defaultManager().<span class=\"type\">URLsForDirectory</span>(.<span class=\"type\">DocumentDirectory</span>, inDomains: .<span class=\"type\">UserDomainMask</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urls[urls.count<span class=\"operator\">-</span><span class=\"number\">1</span>] <span class=\"keyword\">as!</span> <span class=\"type\">NSURL</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> managedObjectModel: <span class=\"type\">NSManagedObjectModel</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The managed object model for the application. This property is not optional. It is a fatal error for the application not to be able to find and load its model.</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> modelURL <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle().<span class=\"type\">URLForResource</span>(<span class=\"string\">&quot;test_Core_Data&quot;</span>, withExtension: <span class=\"string\">&quot;momd&quot;</span>)<span class=\"operator\">!</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NSManagedObjectModel</span>(contentsOfURL: modelURL)<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> persistentStoreCoordinator: <span class=\"type\">NSPersistentStoreCoordinator</span>? <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it. This property is optional since there are legitimate error conditions that could cause the creation of the store to fail.</span></span><br><span class=\"line\">        <span class=\"comment\">// Create the coordinator and store</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> coordinator: <span class=\"type\">NSPersistentStoreCoordinator</span>? <span class=\"operator\">=</span> <span class=\"type\">NSPersistentStoreCoordinator</span>(managedObjectModel: <span class=\"keyword\">self</span>.managedObjectModel)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.applicationDocumentsDirectory.<span class=\"type\">URLByAppendingPathComponent</span>(<span class=\"string\">&quot;test_Core_Data.sqlite&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> error: <span class=\"type\">NSError</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> failureReason <span class=\"operator\">=</span> <span class=\"string\">&quot;There was an error creating or loading the application&#x27;s saved data.&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> coordinator<span class=\"operator\">!</span>.addPersistentStoreWithType(<span class=\"type\">NSSQLiteStoreType</span>, configuration: <span class=\"literal\">nil</span>, URL: url, options: <span class=\"literal\">nil</span>, error: <span class=\"operator\">&amp;</span>error) <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            coordinator <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            <span class=\"comment\">// Report any error we got.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dict <span class=\"operator\">=</span> [<span class=\"type\">String</span>: <span class=\"type\">AnyObject</span>]()</span><br><span class=\"line\">            dict[<span class=\"type\">NSLocalizedDescriptionKey</span>] <span class=\"operator\">=</span> <span class=\"string\">&quot;Failed to initialize the application&#x27;s saved data&quot;</span></span><br><span class=\"line\">            dict[<span class=\"type\">NSLocalizedFailureReasonErrorKey</span>] <span class=\"operator\">=</span> failureReason</span><br><span class=\"line\">            dict[<span class=\"type\">NSUnderlyingErrorKey</span>] <span class=\"operator\">=</span> error</span><br><span class=\"line\">            error <span class=\"operator\">=</span> <span class=\"type\">NSError</span>(domain: <span class=\"string\">&quot;YOUR_ERROR_DOMAIN&quot;</span>, code: <span class=\"number\">9999</span>, userInfo: dict)</span><br><span class=\"line\">            <span class=\"comment\">// Replace this with code to handle the error appropriately.</span></span><br><span class=\"line\">            <span class=\"comment\">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span></span><br><span class=\"line\">            <span class=\"type\">NSLog</span>(<span class=\"string\">&quot;Unresolved error <span class=\"subst\">\\(error)</span>, <span class=\"subst\">\\(error<span class=\"operator\">!</span>.userInfo)</span>&quot;</span>)</span><br><span class=\"line\">            abort()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coordinator</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> managedObjectContext: <span class=\"type\">NSManagedObjectContext</span>? <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> coordinator <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.persistentStoreCoordinator</span><br><span class=\"line\">        <span class=\"keyword\">if</span> coordinator <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> managedObjectContext <span class=\"operator\">=</span> <span class=\"type\">NSManagedObjectContext</span>()</span><br><span class=\"line\">        managedObjectContext.persistentStoreCoordinator <span class=\"operator\">=</span> coordinator</span><br><span class=\"line\">        <span class=\"keyword\">return</span> managedObjectContext</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - Core Data Saving support</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">saveContext</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> moc <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.managedObjectContext &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> error: <span class=\"type\">NSError</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> moc.hasChanges <span class=\"operator\">&amp;&amp;</span> <span class=\"operator\">!</span>moc.save(<span class=\"operator\">&amp;</span>error) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Replace this implementation with code to handle the error appropriately.</span></span><br><span class=\"line\">                <span class=\"comment\">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span></span><br><span class=\"line\">                <span class=\"type\">NSLog</span>(<span class=\"string\">&quot;Unresolved error <span class=\"subst\">\\(error)</span>, <span class=\"subst\">\\(error<span class=\"operator\">!</span>.userInfo)</span>&quot;</span>)</span><br><span class=\"line\">                abort()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Debug:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p applicationDocumentsDirectory</span><br><span class=\"line\">(NSURL) $R0 = 0x00000001740a8b20 &quot;file:///var/mobile/Containers/Data/Application/601088B9-EB64-4E8D-9817-96E23D0D5D7E/Documents/&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh root@192.168.0.101</span><br><span class=\"line\"><span class=\"meta prompt_\">root# </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /var/mobile/Containers/Data/Application/601088B9-EB64-4E8D-9817-96E23D0D5D7E/Documents/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">root# </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -la</span></span><br><span class=\"line\">total 192</span><br><span class=\"line\">drwxr-xr-x 2 mobile mobile    170 Aug 21 22:16 ./</span><br><span class=\"line\">drwxr-xr-x 5 mobile mobile    204 Aug 21 22:16 ../</span><br><span class=\"line\">-rw-r--r-- 1 mobile mobile  20480 Aug 21 22:16 test_Core_Data.sqlite</span><br><span class=\"line\">-rw-r--r-- 1 mobile mobile  32768 Aug 21 22:24 test_Core_Data.sqlite-shm</span><br><span class=\"line\">-rw-r--r-- 1 mobile mobile 140112 Aug 21 22:24 test_Core_Data.sqlite-wal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Read-More\"><a href=\"#Read-More\" class=\"headerlink\" title=\"Read More\"></a>Read More</h3><ul>\n<li><a href=\"http://www.wikiwand.com/en/LLDB_(debugger)\">LLDB (debugger)</a></li>\n</ul>\n"},{"title":"Scipio打包SwiftPM为XCFramework教程","url":"/2024/07/05/SwiftPM-to-XCFramework/","content":"<h1 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1 安装\"></a>1 安装</h1><h2 id=\"1-1-使用命令行\"><a href=\"#1-1-使用命令行\" class=\"headerlink\" title=\"1.1 使用命令行\"></a><strong>1.1</strong> 使用命令行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/giginet/Scipio.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Scipio</span><br><span class=\"line\">$ swift run -c release scipio --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># Add reference .build/release/scipio to the PATH variable.</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=/path/to/scipio:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-作为Package使用\"><a href=\"#1-2-作为Package使用\" class=\"headerlink\" title=\"1.2 作为Package使用\"></a><strong>1.2 作为<code>Package</code>使用</strong></h2><p>推荐使用这种方式，较少命令行中参数，在Swift代码中<code>EntryPoint</code>配置方便。</p>\n<h1 id=\"2-准备您应用程序的所有依赖项\"><a href=\"#2-准备您应用程序的所有依赖项\" class=\"headerlink\" title=\"2 准备您应用程序的所有依赖项\"></a>2 准备您应用程序的所有依赖项</h1><h2 id=\"2-1-创建一个新的Swift包来描述依赖关系\"><a href=\"#2-1-创建一个新的Swift包来描述依赖关系\" class=\"headerlink\" title=\"2.1 创建一个新的Swift包来描述依赖关系\"></a><strong>2.1 创建一个新的Swift包来描述依赖关系</strong></h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> MyAppDependencies</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> MyAppDependencies</span><br><span class=\"line\">$ swift package init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-编辑-Package-swift-以描述应用程序的依赖关系下一步\"><a href=\"#2-2-编辑-Package-swift-以描述应用程序的依赖关系下一步\" class=\"headerlink\" title=\"2.2 编辑 Package.swift 以描述应用程序的依赖关系下一步\"></a>2.2 编辑 <code>Package.swift</code> 以描述应用程序的依赖关系下一步</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swift-tools-version: 5.6</span></span><br><span class=\"line\"><span class=\"comment\">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> PackageDescription</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> package <span class=\"operator\">=</span> <span class=\"type\">Package</span>(</span><br><span class=\"line\">    name: <span class=\"string\">&quot;MyAppDependencies&quot;</span>,</span><br><span class=\"line\">    platforms: [</span><br><span class=\"line\">        <span class=\"comment\">// Specify platforms to build</span></span><br><span class=\"line\">        .iOS(.v14),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    products: [],</span><br><span class=\"line\">    dependencies: [</span><br><span class=\"line\">        <span class=\"comment\">// Add dependencies</span></span><br><span class=\"line\">        .package(url: <span class=\"string\">&quot;https://github.com/onevcat/APNGKit.git&quot;</span>, exact: <span class=\"string\">&quot;2.2.1&quot;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    targets: [</span><br><span class=\"line\">        .target(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;MyAppDependency&quot;</span>,</span><br><span class=\"line\">            dependencies: [</span><br><span class=\"line\">                <span class=\"comment\">// List all dependencies to build</span></span><br><span class=\"line\">                .product(name: <span class=\"string\">&quot;APNGKit&quot;</span>, package: <span class=\"string\">&quot;APNGKit&quot;</span>),</span><br><span class=\"line\">            ]),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-手动Rswift-generate到项目中\"><a href=\"#3-手动Rswift-generate到项目中\" class=\"headerlink\" title=\"3 手动Rswift generate到项目中\"></a>3 手动Rswift generate到项目中</h1><p>如何找到R文件：<code>R.generated.swift</code>：</p>\n<p>任意找到一个<code>_R</code>，点击定义，<code>File</code>，<code>Show in Finder</code></p>\n<h1 id=\"4a-命令行打包\"><a href=\"#4a-命令行打包\" class=\"headerlink\" title=\"4a 命令行打包\"></a>4a 命令行打包</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ scipio prepare path/to/MyAppDependencies</span><br><span class=\"line\">&gt; 🔁 Resolving Dependencies...</span><br><span class=\"line\">&gt; 🗑️ Cleaning MyAppDependencies...</span><br><span class=\"line\">&gt; 📦 Building APNGKit <span class=\"keyword\">for</span> iOS</span><br><span class=\"line\">&gt; 🚀 Combining into XCFramework...</span><br><span class=\"line\">&gt; 📦 Building Delegate <span class=\"keyword\">for</span> iOS</span><br><span class=\"line\">&gt; 🚀 Combining into XCFramework...</span><br><span class=\"line\">&gt; ❇️ Succeeded.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4b-自定义打包配置\"><a href=\"#4b-自定义打包配置\" class=\"headerlink\" title=\"4b 自定义打包配置\"></a>4b 自定义打包配置</h1><h2 id=\"4b-1-创建可执行包\"><a href=\"#4b-1-创建可执行包\" class=\"headerlink\" title=\"4b.1 创建可执行包\"></a>4b.1 创建可执行包</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> my-build-tool</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-build-tool</span><br><span class=\"line\">$ swift package init --<span class=\"built_in\">type</span> executable</span><br><span class=\"line\">Creating executable package: my-build-tool</span><br><span class=\"line\">Creating Package.swift</span><br><span class=\"line\">Creating .gitignore</span><br><span class=\"line\">Creating Sources/</span><br><span class=\"line\">Creating Sources/main.swift</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4b-2-编辑Package\"><a href=\"#4b-2-编辑Package\" class=\"headerlink\" title=\"4b.2 编辑Package\"></a>4b.2 编辑Package</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swift-tools-version: 5.8</span></span><br><span class=\"line\"><span class=\"comment\">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> PackageDescription</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> package <span class=\"operator\">=</span> <span class=\"type\">Package</span>(</span><br><span class=\"line\">    name: <span class=\"string\">&quot;my-build-tool&quot;</span>,</span><br><span class=\"line\">    platforms: [</span><br><span class=\"line\">        .macOS(.v12)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    dependencies: [</span><br><span class=\"line\">        .package(</span><br><span class=\"line\">            url: <span class=\"string\">&quot;https://github.com/giginet/Scipio.git&quot;</span>, </span><br><span class=\"line\">            revision: <span class=\"string\">&quot;0.15.0&quot;</span> <span class=\"comment\">// Use the latest version</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    targets: [</span><br><span class=\"line\">        .executableTarget(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;my-build-tool&quot;</span>, </span><br><span class=\"line\">            dependencies: [</span><br><span class=\"line\">                .product(name: <span class=\"string\">&quot;ScipioKit&quot;</span>, package: <span class=\"string\">&quot;Scipio&quot;</span>),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            path: <span class=\"string\">&quot;Sources&quot;</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4b-3-实现构建脚本\"><a href=\"#4b-3-实现构建脚本\" class=\"headerlink\" title=\"4b.3 实现构建脚本\"></a>4b.3 实现构建脚本</h2><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> ScipioKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@main</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">EntryPoint</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> myPackageDirectory <span class=\"operator\">=</span> <span class=\"type\">URL</span>(fileURLWithPath: <span class=\"string\">&quot;/path/to/MyPackage&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">main</span>() <span class=\"keyword\">async</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> runner <span class=\"operator\">=</span> <span class=\"type\">Runner</span>(</span><br><span class=\"line\">            mode: .prepareDependencies,</span><br><span class=\"line\">            options: .<span class=\"keyword\">init</span>(</span><br><span class=\"line\">                baseBuildOptions: .<span class=\"keyword\">init</span>(</span><br><span class=\"line\">                    buildConfiguration: .release,</span><br><span class=\"line\">                    isSimulatorSupported: <span class=\"literal\">true</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> <span class=\"keyword\">await</span> runner.run(</span><br><span class=\"line\">            packageDirectory: myPackageDirectory,</span><br><span class=\"line\">            frameworkOutputDir: .default</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4b-4-命令行打包\"><a href=\"#4b-4-命令行打包\" class=\"headerlink\" title=\"4b.4 命令行打包\"></a>4b.4 命令行打包</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ swift run -c release my-build-tool</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ol>\n<li><a href=\"https://github.com/giginet/Scipio.git\">https://github.com/giginet/Scipio.git</a></li>\n<li><a href=\"https://github.com/mac-cain13/R.swift/blob/main/Plugins/RswiftGeneratePublicResources/RswiftGeneratePublicResources.swift\">https://github.com/mac-cain13/R.swift/blob/main/Plugins/RswiftGeneratePublicResources/RswiftGeneratePublicResources.swift</a></li>\n</ol>\n","tags":["Swift","SwiftUI","SwiftPM","iOS","XCFramework"]},{"title":"SwiftUI By Example 笔记","url":"/2019/06/14/SwiftUI-By-Example-Notes/","content":"<p>原文为 <a href=\"https://click.pg.mlsend.com/link/c/YT0xMTc1OTUxMzkxNzkzODc4OTYyJmM9djB0OCZlPTE5MjgmYj0yNTYyNzIyMDImZD1xMWs3eDlr.F1niXtzxMJPvGR0n5OkwVQKdeuMBcqaV_PH83g6F9CQ\">@twostraws</a> 的 <a href=\"https://click.pg.mlsend.com/link/c/YT0xMTc1OTUxMzkxNzkzODc4OTYyJmM9djB0OCZlPTE5MjgmYj0yNTYyNzIyMDYmZD12NmowZzZl.r3cdqNyvWJ5dIgoCiFs_1q8hUT3njlEH6fEv1rWAXGo\">SwiftUI By Example</a>，就是简单记录一些主要内容。</p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><strong>A brief explanation of the basics of SwiftUI</strong></p>\n<h3 id=\"What-is-SwiftUI\"><a href=\"#What-is-SwiftUI\" class=\"headerlink\" title=\"What is SwiftUI?\"></a>What is SwiftUI?</h3><ol>\n<li>声明式对比命令式，能够更好地处理不同状态的UI</li>\n<li>跨平台：支持 iOS, macOS, tvOS, watchOS</li>\n</ol>\n<h3 id=\"SwiftUI-vs-Interface-Builder-and-storyboards\"><a href=\"#SwiftUI-vs-Interface-Builder-and-storyboards\" class=\"headerlink\" title=\"SwiftUI vs Interface Builder and storyboards\"></a>SwiftUI vs Interface Builder and storyboards</h3><ol>\n<li>IB难以阅读和修改</li>\n<li>IB难以看出修改了内容</li>\n<li>IB和Swift交互不够友好，充满了Objective-C设计</li>\n<li>SwiftUI是个仅支持Swift 的库，这样才可以充分利用Swift的特性</li>\n</ol>\n<p>Anyway, we’ll get onto exactly how SwiftUI works soon. For now, the least you need to know is that SwiftUI fixes many problems people had with the old Swift + Interface Builder approach:</p>\n<ul>\n<li>We no longer have to argue about programmatic or storyboard-based design, because SwiftUI gives us both at the same time.</li>\n<li>We no longer have to worry about creating source control problems when committing user interface work, because code is much easier to read and manage than storyboard XML.</li>\n<li>We no longer need to worry so much about stringly typed APIs – there are still some, but significantly fewer.</li>\n<li>We no longer need to worry about calling functions that don’t exist, because our user interface gets checked by the Swift compiler.</li>\n</ul>\n<p>So, I hope you’ll agree there are lots of benefits to be had from moving to SwiftUI!</p>\n<h3 id=\"Frequently-asked-questions-about-SwiftUI\"><a href=\"#Frequently-asked-questions-about-SwiftUI\" class=\"headerlink\" title=\"Frequently asked questions about SwiftUI\"></a>Frequently asked questions about SwiftUI</h3><h4 id=\"Does-SwiftUI-replace-UIKit\"><a href=\"#Does-SwiftUI-replace-UIKit\" class=\"headerlink\" title=\"Does SwiftUI replace UIKit?\"></a>Does SwiftUI replace UIKit?</h4><p>No. Many parts of SwiftUI directly build on top of existing UIKit components, such as UITableView. Of course, many other parts don’t – they are new controls rendered by SwiftUI and not UIKit.</p>\n<p>But the point isn’t to what extent UIKit is involved. Instead, the point is that we don’t <em>care</em>. SwiftUI more or less completely masks UIKit’s behavior, so if you write your app for SwiftUI and Apple replaces UIKit with a singing elephant in two years you don’t have to care – as long as Apple makes the elephant compatible with the same methods and properties that UIKit exposed to SwiftUI, your code doesn’t change.</p>\n<h4 id=\"Is-SwiftUI-fast\"><a href=\"#Is-SwiftUI-fast\" class=\"headerlink\" title=\"Is SwiftUI fast?\"></a>Is SwiftUI fast?</h4><p>SwiftUI is <em>screamingly</em> fast – in all my tests so far it seems to outpace UIKit. Having spoken to the team who made it I’m starting to get an idea why: first, they aggressively flatten their layer hierarchy so the system has to do less drawing, but second many operations bypass Core Animation entirely and go straight to Metal for extra speed.</p>\n<p>So, yes: SwiftUI is incredibly fast, and all without us having to do any extra work.</p>\n<h3 id=\"How-to-follow-this-quick-start-guide\"><a href=\"#How-to-follow-this-quick-start-guide\" class=\"headerlink\" title=\"How to follow this quick start guide\"></a>How to follow this quick start guide</h3><p>最好顺序阅读该教程</p>\n<h3 id=\"Migrating-from-UIKit-to-SwiftUI\"><a href=\"#Migrating-from-UIKit-to-SwiftUI\" class=\"headerlink\" title=\"Migrating from UIKit to SwiftUI\"></a>Migrating from UIKit to SwiftUI</h3><p>如果你用过UIKit，不难发现SwiftUI就是把UI前缀去掉既是对应的组件。</p>\n<p>Here’s a list to get you started, with UIKit class names followed by SwiftUI names:</p>\n<ul>\n<li><code>UITableView</code>: <code>List</code></li>\n<li><code>UICollectionView</code>: No SwiftUI equivalent</li>\n<li><code>UILabel</code>: <code>Text</code></li>\n<li><code>UITextField</code>: <code>TextField</code></li>\n<li><code>UITextField</code> with <code>isSecureTextEntry</code> set to true: <code>SecureField</code></li>\n<li><code>UITextView</code>: No SwiftUI equivalent</li>\n<li><code>UISwitch</code>: <code>Toggle</code></li>\n<li><code>UISlider</code>: <code>Slider</code></li>\n<li><code>UIButton</code>: <code>Button</code></li>\n<li><code>UINavigationController</code>: <code>NavigationView</code></li>\n<li><code>UIAlertController</code> with style <code>.alert</code>: <code>Alert</code></li>\n<li><code>UIAlertController</code> with style <code>.actionSheet</code>: <code>ActionSheet</code></li>\n<li><code>UIStackView</code> with horizontal axis: <code>HStack</code></li>\n<li><code>UIStackView</code> with vertical axis: <code>VStack</code></li>\n<li><code>UIImageView</code>: <code>Image</code></li>\n<li><code>UISegmentedControl</code>: <code>SegmentedControl</code></li>\n<li><code>UIStepper</code>: <code>Stepper</code></li>\n<li><code>UIDatePicker</code>: <code>DatePicker</code></li>\n<li><code>NSAttributedString</code>: Incompatible with SwiftUI; use <code>Text</code> instead.</li>\n</ul>\n<h2 id=\"Text-and-images\"><a href=\"#Text-and-images\" class=\"headerlink\" title=\"Text and images\"></a>Text and images</h2><p><strong>Getting started with basic controls</strong></p>\n<h3 id=\"What’s-in-the-basic-template\"><a href=\"#What’s-in-the-basic-template\" class=\"headerlink\" title=\"What’s in the basic template?\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/whats-in-the-basic-template\">What’s in the basic template?</a></h3><p>SceneDelegate.swift is responsible for managing the way your app is shown.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> window <span class=\"operator\">=</span> <span class=\"type\">UIWindow</span>(frame: <span class=\"type\">UIScreen</span>.main.bounds)</span><br><span class=\"line\">window.rootViewController <span class=\"operator\">=</span> <span class=\"type\">UIHostingController</span>(rootView: <span class=\"type\">ContentView</span>())</span><br><span class=\"line\"><span class=\"keyword\">self</span>.window <span class=\"operator\">=</span> window</span><br><span class=\"line\">window.makeKeyAndVisible()</span><br></pre></td></tr></table></figure>\n\n<p>Open ContentView.swift and let’s look at some actual SwiftUI code.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView_Previews</span> : <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br></pre></td></tr></table></figure>\n\n<p>First, notice how <code>ContentView</code> is a struct.</p>\n<p>Second, <code>ContentView</code> conforms to the <code>View</code> protocol.</p>\n<p>第三，<code>body</code>的返回类型是<code>some view</code>。 <code>some</code>关键字是Swift 5.1中的新关键字，是名为<a href=\"https://www.youtube.com/watch?v=DvHkeUxiwYY\">opaque return types</a>的功能的一部分，在这种情况下，就是字面意思：”这将返回某种<code>View</code>，但SwiftUI不需要知道（或关心）什么。”</p>\n<p>Finally, below <code>ContentView</code> is a similar-but-different struct called <code>ContentView_Previews</code>.</p>\n<h3 id=\"How-to-create-static-labels-with-a-Text-view\"><a href=\"#How-to-create-static-labels-with-a-Text-view\" class=\"headerlink\" title=\"How to create static labels with a Text view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-static-labels-with-a-text-view\">How to create static labels with a Text view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .lineLimit(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;This is an extremely long string that will never fit even the widest of Phones&quot;</span>)</span><br><span class=\"line\">    .truncationMode(.middle)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-style-text-views-with-fonts-colors-line-spacing-and-more\"><a href=\"#How-to-style-text-views-with-fonts-colors-line-spacing-and-more\" class=\"headerlink\" title=\"How to style text views with fonts, colors, line spacing, and more\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-style-text-views-with-fonts-colors-line-spacing-and-more\">How to style text views with fonts, colors, line spacing, and more</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;This is an extremely long string that will never fit even the widest of Phones&quot;</span>)</span><br><span class=\"line\">        .truncationMode(.middle)</span><br><span class=\"line\">        .font(<span class=\"type\">Font</span>.body)</span><br><span class=\"line\">        .foregroundColor(<span class=\"type\">Color</span>.green)</span><br><span class=\"line\">        .background(<span class=\"type\">Color</span>.gray)</span><br><span class=\"line\">        .lineLimit(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">        .lineSpacing(<span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-format-text-inside-text-views\"><a href=\"#How-to-format-text-inside-text-views\" class=\"headerlink\" title=\"How to format text inside text views\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-format-text-inside-text-views\">How to format text inside text views</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> taskDateFormat: <span class=\"type\">DateFormatter</span> <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> formatter <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>()</span><br><span class=\"line\">        formatter.dateStyle <span class=\"operator\">=</span> .long</span><br><span class=\"line\">        <span class=\"keyword\">return</span> formatter</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dueDate <span class=\"operator\">=</span> <span class=\"type\">Date</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Task due date: <span class=\"subst\">\\(dueDate, formatter: <span class=\"keyword\">Self</span>.taskDateFormat)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-draw-images-using-Image-views\"><a href=\"#How-to-draw-images-using-Image-views\" class=\"headerlink\" title=\"How to draw images using Image views\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-draw-images-using-image-views\">How to draw images using Image views</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(systemName: <span class=\"string\">&quot;cloud.heavyrain.fill&quot;</span>)</span><br><span class=\"line\">    .foregroundColor(.red)</span><br><span class=\"line\">\t\t.font(.largeTitle)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-adjust-the-way-an-image-is-fitted-to-its-space\"><a href=\"#How-to-adjust-the-way-an-image-is-fitted-to-its-space\" class=\"headerlink\" title=\"How to adjust the way an image is fitted to its space\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-adjust-the-way-an-image-is-fitted-to-its-space\">How to adjust the way an image is fitted to its space</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .aspectRatio(contentMode: .fill)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-render-a-gradient\"><a href=\"#How-to-render-a-gradient\" class=\"headerlink\" title=\"How to render a gradient\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-render-a-gradient\">How to render a gradient</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .foregroundColor(.white)</span><br><span class=\"line\">    .background(<span class=\"type\">LinearGradient</span>(gradient: <span class=\"type\">Gradient</span>(colors: [.white, .black]), startPoint: .top, endPoint: .bottom), cornerRadius: <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>支持更多颜色的渐变</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .foregroundColor(.white)</span><br><span class=\"line\">    .background(<span class=\"type\">LinearGradient</span>(gradient: <span class=\"type\">Gradient</span>(colors: [.white, .red, .black]), startPoint: .leading, endPoint: .trailing), cornerRadius: <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-display-solid-shapes\"><a href=\"#How-to-display-solid-shapes\" class=\"headerlink\" title=\"How to display solid shapes\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-display-solid-shapes\">How to display solid shapes</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Rectangle</span>()</span><br><span class=\"line\">    .fill(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">200</span>, height: <span class=\"number\">200</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-use-images-and-other-views-as-a-backgrounds\"><a href=\"#How-to-use-images-and-other-views-as-a-backgrounds\" class=\"headerlink\" title=\"How to use images and other views as a backgrounds\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-images-and-other-views-as-a-backgrounds\">How to use images and other views as a backgrounds</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">    .font(.largeTitle)</span><br><span class=\"line\">    .background(</span><br><span class=\"line\">        <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">            .resizable()</span><br><span class=\"line\">            .frame(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"View-layout\"><a href=\"#View-layout\" class=\"headerlink\" title=\"View layout\"></a>View layout</h2><p><strong>Position views in a grid structure and more</strong></p>\n<h3 id=\"How-to-create-stacks-using-VStack-and-HStack\"><a href=\"#How-to-create-stacks-using-VStack-and-HStack\" class=\"headerlink\" title=\"How to create stacks using VStack and HStack\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-stacks-using-vstack-and-hstack\">How to create stacks using VStack and HStack</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;rocks&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-customize-stack-layouts-with-alignment-and-spacing\"><a href=\"#How-to-customize-stack-layouts-with-alignment-and-spacing\" class=\"headerlink\" title=\"How to customize stack layouts with alignment and spacing\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-customize-stack-layouts-with-alignment-and-spacing\">How to customize stack layouts with alignment and spacing</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span>(alignment: .leading, spacing: <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;rocks&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-control-spacing-around-individual-views-using-padding\"><a href=\"#How-to-control-spacing-around-individual-views-using-padding\" class=\"headerlink\" title=\"How to control spacing around individual views using padding\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-control-spacing-around-individual-views-using-padding\">How to control spacing around individual views using padding</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">    .padding(.bottom, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-layer-views-on-top-of-each-other-using-ZStack\"><a href=\"#How-to-layer-views-on-top-of-each-other-using-ZStack\" class=\"headerlink\" title=\"How to layer views on top of each other using ZStack\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-layer-views-on-top-of-each-other-using-zstack\">How to layer views on top of each other using ZStack</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ZStack</span> &#123;</span><br><span class=\"line\">           <span class=\"type\">Rectangle</span>()</span><br><span class=\"line\">               .fill(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">           <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-return-different-view-types\"><a href=\"#How-to-return-different-view-types\" class=\"headerlink\" title=\"How to return different view types\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-return-different-view-types\">How to return different view types</a></h3><p>第一种方案</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"type\">Bool</span>.random() &#123;</span><br><span class=\"line\">            <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Better luck next time&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种方案</p>\n<p>If you haven’t heard of this concept, it effectively forces Swift to forget about what specific type is inside the <code>AnyView</code>, allowing them to look like they are the same thing. This has a performance cost, though, so don’t use it often.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"type\">AnyView</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"type\">Bool</span>.random() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">AnyView</span>(<span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">AnyView</span>(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Better luck next time&quot;</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-create-views-in-a-loop-using-ForEach\"><a href=\"#How-to-create-views-in-a-loop-using-ForEach\" class=\"headerlink\" title=\"How to create views in a loop using ForEach\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-views-in-a-loop-using-foreach\">How to create views in a loop using ForEach</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span>(alignment: .leading) &#123;</span><br><span class=\"line\">    <span class=\"type\">ForEach</span>((<span class=\"number\">1</span><span class=\"operator\">...</span><span class=\"number\">10</span>).reversed()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>…&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Ready or not, here I come!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> colors: [<span class=\"type\">Color</span>] <span class=\"operator\">=</span> [.red, .green, .blue]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ForEach</span>(colors.identified(by: \\.<span class=\"keyword\">self</span>)) &#123; color <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">Text</span>(color.description.capitalized)</span><br><span class=\"line\">                    .padding()</span><br><span class=\"line\">                    .background(color)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-different-layouts-using-size-classes\"><a href=\"#How-to-create-different-layouts-using-size-classes\" class=\"headerlink\" title=\"How to create different layouts using size classes\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-different-layouts-using-size-classes\">How to create different layouts using size classes</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Environment</span>(\\.horizontalSizeClass) <span class=\"keyword\">var</span> horizontalSizeClass: <span class=\"type\">UserInterfaceSizeClass</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> horizontalSizeClass <span class=\"operator\">==</span> .compact &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;Compact&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;Regular&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-place-content-outside-the-safe-area\"><a href=\"#How-to-place-content-outside-the-safe-area\" class=\"headerlink\" title=\"How to place content outside the safe area\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-place-content-outside-the-safe-area\">How to place content outside the safe area</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .frame(minWidth: <span class=\"number\">0</span>, maxWidth: .infinity, minHeight: <span class=\"number\">0</span>, maxHeight: .infinity)</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .edgesIgnoringSafeArea(.all)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reading-input\"><a href=\"#Reading-input\" class=\"headerlink\" title=\"Reading input\"></a>Reading input</h2><p><strong>Respond to interaction and control your program state</strong></p>\n<h3 id=\"Working-with-state\"><a href=\"#Working-with-state\" class=\"headerlink\" title=\"Working with state\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/working-with-state\">Working with state</a></h3><p>SwiftUI solves this problem by removing state from our control. When we add properties to our views they are effectively inert – they have values, sure, but changing them doesn’t do anything. But if we added the special <code>@State</code> attribute before them, SwiftUI will automatically watch for changes and update any parts of our views that use that state.</p>\n<h3 id=\"How-to-create-a-toggle-switch\"><a href=\"#How-to-create-a-toggle-switch\" class=\"headerlink\" title=\"How to create a toggle switch\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-toggle-switch\">How to create a toggle switch</a></h3><p>相反，我们应该定义一个<code>@State</code>布尔属性，用于存储切换的当前值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showGreeting <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Toggle</span>(isOn: <span class=\"variable\">$showGreeting</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Show welcome message&quot;</span>)</span><br><span class=\"line\">            &#125;.padding()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showGreeting &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-tappable-button\"><a href=\"#How-to-create-a-tappable-button\" class=\"headerlink\" title=\"How to create a tappable button\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-tappable-button\">How to create a tappable button</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showDetails <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.showDetails.toggle()</span><br><span class=\"line\">            &#125;) &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Show details&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showDetails &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;You should follow me on Twitter: @twostraws&quot;</span>)</span><br><span class=\"line\">                    .font(.largeTitle)</span><br><span class=\"line\">                    .lineLimit(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-read-text-from-a-TextField\"><a href=\"#How-to-read-text-from-a-TextField\" class=\"headerlink\" title=\"How to read text from a TextField\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-read-text-from-a-textfield\">How to read text from a TextField</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Tim&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"variable\">$name</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello, <span class=\"subst\">\\(name)</span>!&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-add-a-border-to-a-TextField\"><a href=\"#How-to-add-a-border-to-a-TextField\" class=\"headerlink\" title=\"How to add a border to a TextField\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-a-border-to-a-textfield\">How to add a border to a TextField</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TextField</span>(<span class=\"variable\">$yourBindingHere</span>)</span><br><span class=\"line\">    .textFieldStyle(.roundedBorder)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-secure-text-fields-using-SecureField\"><a href=\"#How-to-create-secure-text-fields-using-SecureField\" class=\"headerlink\" title=\"How to create secure text fields using SecureField\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-secure-text-fields-using-securefield\">How to create secure text fields using SecureField</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> password: <span class=\"type\">String</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">SecureField</span>(<span class=\"variable\">$password</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;You entered: <span class=\"subst\">\\(password)</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-Slider-and-read-values-from-it\"><a href=\"#How-to-create-a-Slider-and-read-values-from-it\" class=\"headerlink\" title=\"How to create a Slider and read values from it\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-slider-and-read-values-from-it\">How to create a Slider and read values from it</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> celsius: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Slider</span>(value: <span class=\"variable\">$celsius</span>, from: <span class=\"operator\">-</span><span class=\"number\">100</span>, through: <span class=\"number\">100</span>, by: <span class=\"number\">0.1</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(celsius)</span> Celsius is <span class=\"subst\">\\(celsius <span class=\"operator\">*</span> <span class=\"number\">9</span> <span class=\"operator\">/</span> <span class=\"number\">5</span> <span class=\"operator\">+</span> <span class=\"number\">32</span>)</span> Fahrenheit&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-date-picker-and-read-values-from-it\"><a href=\"#How-to-create-a-date-picker-and-read-values-from-it\" class=\"headerlink\" title=\"How to create a date picker and read values from it\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-date-picker-and-read-values-from-it\">How to create a date picker and read values from it</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> colors <span class=\"operator\">=</span> [<span class=\"string\">&quot;Red&quot;</span>, <span class=\"string\">&quot;Green&quot;</span>, <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;Tartan&quot;</span>]</span><br><span class=\"line\">   <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> selectedColor <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">Picker</span>(selection: <span class=\"variable\">$selectedColor</span>, label: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Please choose a color&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"type\">ForEach</span>(<span class=\"number\">0</span> <span class=\"operator\">..&lt;</span> colors.count) &#123;</span><br><span class=\"line\">               <span class=\"type\">Text</span>(<span class=\"keyword\">self</span>.colors[<span class=\"variable\">$0</span>]).tag(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"type\">Text</span>(<span class=\"string\">&quot;You selected: <span class=\"subst\">\\(colors[selectedColor])</span>&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-segmented-control-and-read-values-from-it\"><a href=\"#How-to-create-a-segmented-control-and-read-values-from-it\" class=\"headerlink\" title=\"How to create a segmented control and read values from it\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-segmented-control-and-read-values-from-it\">How to create a segmented control and read values from it</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> favoriteColor <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> colors <span class=\"operator\">=</span> [<span class=\"string\">&quot;Red&quot;</span>, <span class=\"string\">&quot;Green&quot;</span>, <span class=\"string\">&quot;Blue&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">SegmentedControl</span>(selection: <span class=\"variable\">$favoriteColor</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span>colors.count) &#123; index <span class=\"keyword\">in</span></span><br><span class=\"line\">                    <span class=\"type\">Text</span>(<span class=\"keyword\">self</span>.colors[index]).tag(index)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Value: <span class=\"subst\">\\(colors[favoriteColor])</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-read-tap-and-double-tap-gestures\"><a href=\"#How-to-read-tap-and-double-tap-gestures\" class=\"headerlink\" title=\"How to read tap and double-tap gestures\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-read-tap-and-double-tap-gestures\">How to read tap and double-tap gestures</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">    .tapAction(count: <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Double tapped!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-add-a-gesture-recognizer-to-a-view\"><a href=\"#How-to-add-a-gesture-recognizer-to-a-view\" class=\"headerlink\" title=\"How to add a gesture recognizer to a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-a-gesture-recognizer-to-a-view\">How to add a gesture recognizer to a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> scale: <span class=\"type\">Length</span> <span class=\"operator\">=</span> <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">            .scaleEffect(scale)</span><br><span class=\"line\"></span><br><span class=\"line\">            .gesture(</span><br><span class=\"line\">                <span class=\"type\">TapGesture</span>()</span><br><span class=\"line\">                    .onEnded &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.scale <span class=\"operator\">+=</span> <span class=\"number\">0.1</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><p><strong>Create scrolling tables of data</strong></p>\n<h3 id=\"Working-with-lists\"><a href=\"#Working-with-lists\" class=\"headerlink\" title=\"Working with lists\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/working-with-lists\">Working with lists</a></h3><p>SwiftUI’s <code>List</code> view is similar to <code>UITableView</code> in that it can show static or dynamic table view cells based on your needs.</p>\n<h3 id=\"How-to-create-a-list-of-static-items\"><a href=\"#How-to-create-a-list-of-static-items\" class=\"headerlink\" title=\"How to create a list of static items\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-list-of-static-items\">How to create a list of static items</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">RestaurantRow</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Restaurant: <span class=\"subst\">\\(name)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">RestaurantRow</span>(name: <span class=\"string\">&quot;Joe&#x27;s Original&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">RestaurantRow</span>(name: <span class=\"string\">&quot;The Real Joe&#x27;s Original&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">RestaurantRow</span>(name: <span class=\"string\">&quot;Original Joe&#x27;s&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-list-of-dynamic-items\"><a href=\"#How-to-create-a-list-of-dynamic-items\" class=\"headerlink\" title=\"How to create a list of dynamic items\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-list-of-dynamic-items\">How to create a list of dynamic items</a></h3><p>In order to handle dynamic items, you must first tell SwiftUI how it can identify which item is which. This is done using the <code>Identifiable</code> protocol, which has only one requirement: some sort of <code>id</code> value that SwiftUI can use to see which item is which.</p>\n<p>和<code>ForEach</code>一样，可以使用符合<code>Identifiable</code> 协议的Model</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Restaurant</span>: <span class=\"title class_\">Identifiable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id <span class=\"operator\">=</span> <span class=\"type\">UUID</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">RestaurantRow</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> restaurant: <span class=\"type\">Restaurant</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Come and eat at <span class=\"subst\">\\(restaurant.name)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> first <span class=\"operator\">=</span> <span class=\"type\">Restaurant</span>(name: <span class=\"string\">&quot;Joe&#x27;s Original&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> second <span class=\"operator\">=</span> <span class=\"type\">Restaurant</span>(name: <span class=\"string\">&quot;The Real Joe&#x27;s Original&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> third <span class=\"operator\">=</span> <span class=\"type\">Restaurant</span>(name: <span class=\"string\">&quot;Original Joe&#x27;s&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> restaurants <span class=\"operator\">=</span> [first, second, third]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">List</span>(restaurants) &#123; restaurant <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">RestaurantRow</span>(restaurant: restaurant)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// return List(restaurants, rowContent: RestaurantRow.init)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-add-sections-to-a-list\"><a href=\"#How-to-add-sections-to-a-list\" class=\"headerlink\" title=\"How to add sections to a list\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-sections-to-a-list\">How to add sections to a list</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Section</span>(header: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Other tasks&quot;</span>), footer: <span class=\"type\">Text</span>(<span class=\"string\">&quot;End&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"type\">TaskRow</span>()</span><br><span class=\"line\">    <span class=\"type\">TaskRow</span>()</span><br><span class=\"line\">    <span class=\"type\">TaskRow</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-make-a-grouped-list\"><a href=\"#How-to-make-a-grouped-list\" class=\"headerlink\" title=\"How to make a grouped list\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-a-grouped-list\">How to make a grouped list</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ExampleRow</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Example Row&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Section</span>(header: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Examples&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.listStyle(.grouped)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Working-with-implicit-stacking\"><a href=\"#Working-with-implicit-stacking\" class=\"headerlink\" title=\"Working with implicit stacking\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/working-with-implicit-stacking\">Working with implicit stacking</a></h3><p>What happens if you create a dynamic list and put more than one thing in each row? SwiftUI’s solution is simple, flexible, and gives us great behavior by default: it creates an implicit <code>HStack</code> to hold your items, so they automatically get laid out horizontally.</p>\n<p>List 会隐式的创建一个<code>HStack</code> 封装所有元素到Row中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ExampleRow</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Example Row&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Section</span>(header: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Examples&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">                <span class=\"type\">ExampleRow</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.listStyle(.grouped)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Containers\"><a href=\"#Containers\" class=\"headerlink\" title=\"Containers\"></a>Containers</h2><p><strong>Place your views inside a navigation controller</strong></p>\n<h3 id=\"Working-with-containers\"><a href=\"#Working-with-containers\" class=\"headerlink\" title=\"Working with containers\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/working-with-containers\">Working with containers</a></h3><p>SwiftUI is designed to be composed right out of the box, which means you can place one view inside another as much as you need.</p>\n<p>常见的容器有：  <code>NavigationView</code>, <code>TabbedView</code>, <code>Group</code></p>\n<h3 id=\"How-to-embed-a-view-in-a-navigation-view\"><a href=\"#How-to-embed-a-view-in-a-navigation-view\" class=\"headerlink\" title=\"How to embed a view in a navigation view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-embed-a-view-in-a-navigation-view\">How to embed a view in a navigation view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">        .navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-add-bar-items-to-a-navigation-view\"><a href=\"#How-to-add-bar-items-to-a-navigation-view\" class=\"headerlink\" title=\"How to add bar items to a navigation view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-bar-items-to-a-navigation-view\">How to add bar items to a navigation view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">            .navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome&quot;</span>))</span><br><span class=\"line\">            .navigationBarItems(trailing:</span><br><span class=\"line\">                <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Help tapped!&quot;</span>)</span><br><span class=\"line\">                &#125;) &#123;</span><br><span class=\"line\">                    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Help&quot;</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-group-views-together\"><a href=\"#How-to-group-views-together\" class=\"headerlink\" title=\"How to group views together\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-group-views-together\">How to group views together</a></h3><p><code>Stack</code> 不能超过10个元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Line&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Alerts-and-action-sheets\"><a href=\"#Alerts-and-action-sheets\" class=\"headerlink\" title=\"Alerts and action sheets\"></a>Alerts and action sheets</h2><p><strong>Show modal notifications when something happens</strong></p>\n<h3 id=\"Working-with-presentations\"><a href=\"#Working-with-presentations\" class=\"headerlink\" title=\"Working with presentations\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/working-with-presentations\">Working with presentations</a></h3><p>SwiftUI’s declarative approach to programming means that we don’t create and present alert and action sheets in the same way as we did in UIKit. Instead, we define the conditions in which they should be shown, tell it what they should look like, then leave it to figure the rest out for itself.</p>\n<h3 id=\"How-to-show-an-alert\"><a href=\"#How-to-show-an-alert\" class=\"headerlink\" title=\"How to show an alert\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-an-alert\">How to show an alert</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showingAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showingAlert <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Show Alert&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .presentation(<span class=\"variable\">$showingAlert</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Alert</span>(title: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Important message&quot;</span>), message: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Wear sunscreen&quot;</span>), dismissButton: .default(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Got it!&quot;</span>)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-add-actions-to-alert-buttons\"><a href=\"#How-to-add-actions-to-alert-buttons\" class=\"headerlink\" title=\"How to add actions to alert buttons\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-actions-to-alert-buttons\">How to add actions to alert buttons</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showingAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showingAlert <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Show Alert&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            .presentation(<span class=\"variable\">$showingAlert</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Alert</span>(title: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Are you sure you want to delete this?&quot;</span>), message: <span class=\"type\">Text</span>(<span class=\"string\">&quot;There is no undo&quot;</span>), primaryButton: .destructive(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Delete&quot;</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Deleting...&quot;</span>)</span><br><span class=\"line\">                &#125;, secondaryButton: .cancel())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-show-an-action-sheet\"><a href=\"#How-to-show-an-action-sheet\" class=\"headerlink\" title=\"How to show an action sheet\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-show-an-action-sheet\">How to show an action sheet</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showingSheet <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sheet: <span class=\"type\">ActionSheet</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ActionSheet</span>(title: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Action&quot;</span>), message: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Quote mark&quot;</span>), buttons: [.default(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Woo&quot;</span>), onTrigger: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showingSheet <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showingSheet <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Woo&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            .presentation(showingSheet <span class=\"operator\">?</span> sheet : <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Presenting-views\"><a href=\"#Presenting-views\" class=\"headerlink\" title=\"Presenting views\"></a>Presenting views</h2><p><strong>Move your user from one view to another</strong></p>\n<h3 id=\"How-to-push-a-new-view-using-NavigationButton\"><a href=\"#How-to-push-a-new-view-using-NavigationButton\" class=\"headerlink\" title=\"How to push a new view using NavigationButton\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-push-a-new-view-using-navigationbutton\">How to push a new view using NavigationButton</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DetailView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Detail&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">NavigationButton</span>(destination: <span class=\"type\">DetailView</span>()) &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Click&quot;</span>)</span><br><span class=\"line\">            &#125;.navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Navigation&quot;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-push-a-new-view-when-a-list-row-is-tapped\"><a href=\"#How-to-push-a-new-view-when-a-list-row-is-tapped\" class=\"headerlink\" title=\"How to push a new view when a list row is tapped\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-push-a-new-view-when-a-list-row-is-tapped\">How to push a new view when a list row is tapped</a></h3><p>SwiftUI doesn’t have a direct equivalent of the <code>didSelectRowAt</code> method of <code>UITableView</code>, but it doesn’t need one because we can combine <code>NavigationButton</code>with a list row and get the behavior for free.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Restaurant</span>: <span class=\"title class_\">Identifiable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id <span class=\"operator\">=</span> <span class=\"type\">UUID</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">RestaurantRow</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> restaurant: <span class=\"type\">Restaurant</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(restaurant.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">RestaurantView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> restaurant: <span class=\"type\">Restaurant</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Come and eat at <span class=\"subst\">\\(restaurant.name)</span>&quot;</span>)</span><br><span class=\"line\">            .font(.largeTitle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> first <span class=\"operator\">=</span> <span class=\"type\">Restaurant</span>(name: <span class=\"string\">&quot;Joe&#x27;s Original&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> restaurants <span class=\"operator\">=</span> [first]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">List</span>(restaurants) &#123; restaurant <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">NavigationButton</span>(destination: <span class=\"type\">RestaurantView</span>(restaurant: restaurant)) &#123;</span><br><span class=\"line\">                    <span class=\"type\">RestaurantRow</span>(restaurant: restaurant)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Select a restaurant&quot;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"How-to-present-a-new-view-using-PresentationButton\"><a href=\"#How-to-present-a-new-view-using-PresentationButton\" class=\"headerlink\" title=\"How to present a new view using PresentationButton\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-present-a-new-view-using-presentationbutton\">How to present a new view using PresentationButton</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DetailView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Detail&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PresentationButton</span>(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Click to show&quot;</span>), destination: <span class=\"type\">DetailView</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Transforming-views\"><a href=\"#Transforming-views\" class=\"headerlink\" title=\"Transforming views\"></a>Transforming views</h2><p><strong>Clip, size, scale, spin, and more</strong></p>\n<h3 id=\"How-to-give-a-view-a-custom-frame\"><a href=\"#How-to-give-a-view-a-custom-frame\" class=\"headerlink\" title=\"How to give a view a custom frame\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-give-a-view-a-custom-frame\">How to give a view a custom frame</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Button tapped&quot;</span>)</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome&quot;</span>)</span><br><span class=\"line\">        .frame(minWidth: <span class=\"number\">0</span>, maxWidth: <span class=\"number\">200</span>, minHeight: <span class=\"number\">0</span>, maxHeight: <span class=\"number\">200</span>)</span><br><span class=\"line\">        .font(.largeTitle)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Please log in&quot;</span>)</span><br><span class=\"line\">.frame(minWidth: <span class=\"number\">0</span>, maxWidth: .infinity, minHeight: <span class=\"number\">0</span>, maxHeight: .infinity)</span><br><span class=\"line\">    .font(.largeTitle)</span><br><span class=\"line\">    .foregroundColor(.white)</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.red)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-adjust-the-position-of-a-view\"><a href=\"#How-to-adjust-the-position-of-a-view\" class=\"headerlink\" title=\"How to adjust the position of a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-adjust-the-position-of-a-view\">How to adjust the position of a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Home&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Options&quot;</span>)</span><br><span class=\"line\">        .offset(y: <span class=\"number\">15</span>)</span><br><span class=\"line\">        .padding(.bottom, <span class=\"number\">15</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Help&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-color-the-padding-around-a-view\"><a href=\"#How-to-color-the-padding-around-a-view\" class=\"headerlink\" title=\"How to color the padding around a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-color-the-padding-around-a-view\">How to color the padding around a view</a></h3><p>Padding 的先后顺序影响结果，因为代码是顺序执行的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.black)</span><br><span class=\"line\">    .foregroundColor(.white)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.black)</span><br><span class=\"line\">    .foregroundColor(.white)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-stack-modifiers-to-create-more-advanced-effects\"><a href=\"#How-to-stack-modifiers-to-create-more-advanced-effects\" class=\"headerlink\" title=\"How to stack modifiers to create more advanced effects\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-stack-modifiers-to-create-more-advanced-effects\">How to stack modifiers to create more advanced effects</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Forecast: Sun&quot;</span>)</span><br><span class=\"line\">    .font(.largeTitle)</span><br><span class=\"line\">    .foregroundColor(.white)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.orange)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.yellow)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-draw-a-border-around-a-view\"><a href=\"#How-to-draw-a-border-around-a-view\" class=\"headerlink\" title=\"How to draw a border around a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-draw-a-border-around-a-view\">How to draw a border around a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .border(<span class=\"type\">Color</span>.red, width: <span class=\"number\">4</span>, cornerRadius: <span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-draw-a-shadow-around-a-view\"><a href=\"#How-to-draw-a-shadow-around-a-view\" class=\"headerlink\" title=\"How to draw a shadow around a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-draw-a-shadow-around-a-view\">How to draw a shadow around a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .border(<span class=\"type\">Color</span>.red, width: <span class=\"number\">4</span>)</span><br><span class=\"line\">    .shadow(color: .red, radius: <span class=\"number\">5</span>, x: <span class=\"number\">20</span>, y: <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-clip-a-view-so-only-part-is-visible\"><a href=\"#How-to-clip-a-view-so-only-part-is-visible\" class=\"headerlink\" title=\"How to clip a view so only part is visible\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-clip-a-view-so-only-part-is-visible\">How to clip a view so only part is visible</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Button tapped&quot;</span>)</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span>(systemName: <span class=\"string\">&quot;bolt.fill&quot;</span>)</span><br><span class=\"line\">        .foregroundColor(.white)</span><br><span class=\"line\">        .padding()</span><br><span class=\"line\">        .background(<span class=\"type\">Color</span>.green)</span><br><span class=\"line\">        .clipShape(<span class=\"type\">Circle</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-rotate-a-view\"><a href=\"#How-to-rotate-a-view\" class=\"headerlink\" title=\"How to rotate a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-rotate-a-view\">How to rotate a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> rotation: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Slider</span>(value: <span class=\"variable\">$rotation</span>, from: <span class=\"number\">0.0</span>, through: <span class=\"number\">360.0</span>, by: <span class=\"number\">1.0</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Up we go&quot;</span>)</span><br><span class=\"line\">                .rotationEffect(.degrees(rotation))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-rotate-a-view-in-3D\"><a href=\"#How-to-rotate-a-view-in-3D\" class=\"headerlink\" title=\"How to rotate a view in 3D\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-rotate-a-view-in-3d\">How to rotate a view in 3D</a></h3><p>SwiftUI’s <code>rotation3DEffect()</code> modifier lets us rotate views in 3D space to create beautiful effects in almost no code.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;EPISODE LLVM&quot;</span>)</span><br><span class=\"line\">    .font(.largeTitle)</span><br><span class=\"line\">    .foregroundColor(.yellow)</span><br><span class=\"line\">    .rotation3DEffect(.degrees(<span class=\"number\">45</span>), axis: (x: <span class=\"number\">1</span>, y: <span class=\"number\">0</span>, z: <span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-scale-a-view-up-or-down\"><a href=\"#How-to-scale-a-view-up-or-down\" class=\"headerlink\" title=\"How to scale a view up or down\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-scale-a-view-up-or-down\">How to scale a view up or down</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Up we go&quot;</span>)</span><br><span class=\"line\">    .scaleEffect(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-round-the-corners-of-a-view\"><a href=\"#How-to-round-the-corners-of-a-view\" class=\"headerlink\" title=\"How to round the corners of a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-round-the-corners-of-a-view\">How to round the corners of a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Round Me&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .cornerRadius(<span class=\"number\">25</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-adjust-the-opacity-of-a-view\"><a href=\"#How-to-adjust-the-opacity-of-a-view\" class=\"headerlink\" title=\"How to adjust the opacity of a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-adjust-the-opacity-of-a-view\">How to adjust the opacity of a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Now you see me&quot;</span>)</span><br><span class=\"line\">    .padding()</span><br><span class=\"line\">    .background(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .opacity(<span class=\"number\">0.3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-adjust-the-accent-color-of-a-view\"><a href=\"#How-to-adjust-the-accent-color-of-a-view\" class=\"headerlink\" title=\"How to adjust the accent color of a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-adjust-the-accent-color-of-a-view\">How to adjust the accent color of a view</a></h3><p>iOS uses tint colors to give apps a coordinated theme, and the same functionality is available in SwiftUI under the name <em>accent colors</em>.</p>\n<h3 id=\"How-to-mask-one-view-with-another\"><a href=\"#How-to-mask-one-view-with-another\" class=\"headerlink\" title=\"How to mask one view with another\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-mask-one-view-with-another\">How to mask one view with another</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;stripes&quot;</span>)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br><span class=\"line\">    .mask(<span class=\"type\">Text</span>(<span class=\"string\">&quot;SWIFT!&quot;</span>)</span><br><span class=\"line\">        .font(<span class=\"type\">Font</span>.system(size: <span class=\"number\">72</span>).weight(.black)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-blur-a-view\"><a href=\"#How-to-blur-a-view\" class=\"headerlink\" title=\"How to blur a view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-blur-a-view\">How to blur a view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome to my SwiftUI app&quot;</span>)</span><br><span class=\"line\">    .blur(radius: <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-blend-views-together\"><a href=\"#How-to-blend-views-together\" class=\"headerlink\" title=\"How to blend views together\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-blend-views-together\">How to blend views together</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ZStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Image</span>(<span class=\"string\">&quot;paul-hudson&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>)</span><br><span class=\"line\">        .blendMode(.multiply)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-adjust-views-by-tinting-and-desaturating-and-more\"><a href=\"#How-to-adjust-views-by-tinting-and-desaturating-and-more\" class=\"headerlink\" title=\"How to adjust views by tinting, and desaturating, and more\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-adjust-views-by-tinting-and-desaturating-and-more\">How to adjust views by tinting, and desaturating, and more</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;paul-hudson&quot;</span>)</span><br><span class=\"line\">    .contrast(<span class=\"number\">0.5</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h2><p><strong>Bring your views to life with movement</strong></p>\n<h3 id=\"How-to-create-a-basic-animation\"><a href=\"#How-to-create-a-basic-animation\" class=\"headerlink\" title=\"How to create a basic animation\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-basic-animation\">How to create a basic animation</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> angle: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> borderThickness: <span class=\"type\">Length</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.angle <span class=\"operator\">+=</span> <span class=\"number\">45</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.borderThickness <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Tap here&quot;</span>)</span><br><span class=\"line\">                .padding()</span><br><span class=\"line\">                .border(<span class=\"type\">Color</span>.red, width: borderThickness)</span><br><span class=\"line\">                .rotationEffect(.degrees(angle))</span><br><span class=\"line\">                .animation(.basic())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-a-spring-animation\"><a href=\"#How-to-create-a-spring-animation\" class=\"headerlink\" title=\"How to create a spring animation\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-spring-animation\">How to create a spring animation</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> angle: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.angle <span class=\"operator\">+=</span> <span class=\"number\">45</span></span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Tap here&quot;</span>)</span><br><span class=\"line\">                .padding()</span><br><span class=\"line\">                .rotationEffect(.degrees(angle))</span><br><span class=\"line\">                .animation(.spring())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-an-explicit-animation\"><a href=\"#How-to-create-an-explicit-animation\" class=\"headerlink\" title=\"How to create an explicit animation\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-an-explicit-animation\">How to create an explicit animation</a></h3><p>Explicit animations are often helpful because they cause every affected view to animation, not just those that have implicit animations attached. For example, if view A has to make room for view B as part of the animation, but only view B has an animation attached, then view A will jump to its new position without animating unless you use explicit animations.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> opacity: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            withAnimation &#123;</span><br><span class=\"line\">                <span class=\"keyword\">self</span>.opacity <span class=\"operator\">-=</span> <span class=\"number\">0.2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Tap here&quot;</span>)</span><br><span class=\"line\">                .padding()</span><br><span class=\"line\">                .opacity(opacity)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-add-and-remove-views-with-a-transition\"><a href=\"#How-to-add-and-remove-views-with-a-transition\" class=\"headerlink\" title=\"How to add and remove views with a transition\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-and-remove-views-with-a-transition\">How to add and remove views with a transition</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showDetails <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">                withAnimation &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.showDetails.toggle()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;) &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Tap to show details&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showDetails &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Details go here.&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>By default, SwiftUI uses a fade animation to insert or remove views, but you can change that if you want by attaching a <code>transition()</code> modifier to a view.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Details go here.&quot;</span>)</span><br><span class=\"line\">    .transition(.move(edge: .bottom))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-combine-transitions\"><a href=\"#How-to-combine-transitions\" class=\"headerlink\" title=\"How to combine transitions\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-combine-transitions\">How to combine transitions</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Details go here.&quot;</span>).transition(<span class=\"type\">AnyTransition</span>.opacity.combined(with: .slide))</span><br></pre></td></tr></table></figure>\n\n<p>或者使用拓展来封装常用的过渡效果</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">AnyTransition</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> moveAndScale: <span class=\"type\">AnyTransition</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AnyTransition</span>.move(edge: .bottom).combined(with: .scale())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Details go here.&quot;</span>).transition(.moveAndScale)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-asymmetric-transitions\"><a href=\"#How-to-create-asymmetric-transitions\" class=\"headerlink\" title=\"How to create asymmetric transitions\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-asymmetric-transitions\">How to create asymmetric transitions</a></h3><p>SwiftUI lets us specify one transition when adding a view and another when removing it, all done using the <code>asymmetric()</code> transition type.</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Details go here.&quot;</span>).transition(.asymmetric(insertion: .move(edge: .leading), removal: .move(edge: .bottom)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Composing-views\"><a href=\"#Composing-views\" class=\"headerlink\" title=\"Composing views\"></a>Composing views</h2><p><strong>Make your UI structure easier to understand</strong></p>\n<h3 id=\"How-to-create-and-compose-custom-views\"><a href=\"#How-to-create-and-compose-custom-views\" class=\"headerlink\" title=\"How to create and compose custom views\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-and-compose-custom-views\">How to create and compose custom views</a></h3><p>都是基于数据驱动UI，所以每一级封装都是传Model：<code>User</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jobTitle: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> emailAddress: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> profilePicture: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ProfilePicture</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imageName: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Image</span>(imageName)</span><br><span class=\"line\">            .resizable()</span><br><span class=\"line\">            .frame(width: <span class=\"number\">100</span>, height: <span class=\"number\">100</span>)</span><br><span class=\"line\">            .clipShape(<span class=\"type\">Circle</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">EmailAddress</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">HStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Image</span>(systemName: <span class=\"string\">&quot;envelope&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(address)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">UserDetails</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user: <span class=\"type\">User</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span>(alignment: .leading) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(user.name)</span><br><span class=\"line\">                .font(.largeTitle)</span><br><span class=\"line\">                .foregroundColor(.primary)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(user.jobTitle)</span><br><span class=\"line\">                .foregroundColor(.secondary)</span><br><span class=\"line\">            <span class=\"type\">EmailAddress</span>(address: user.emailAddress)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">UserView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user: <span class=\"type\">User</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">HStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ProfilePicture</span>(imageName: user.profilePicture)</span><br><span class=\"line\">            <span class=\"type\">UserDetails</span>(user: user)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> user <span class=\"operator\">=</span> <span class=\"type\">User</span>(name: <span class=\"string\">&quot;Paul Hudson&quot;</span>, jobTitle: <span class=\"string\">&quot;Editor, Hacking with Swift&quot;</span>, emailAddress: <span class=\"string\">&quot;paul@hackingwithswift.com&quot;</span>, profilePicture: <span class=\"string\">&quot;paul-hudson&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserView</span>(user: user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-combine-text-views-together\"><a href=\"#How-to-combine-text-views-together\" class=\"headerlink\" title=\"How to combine text views together\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-combine-text-views-together\">How to combine text views together</a></h3><p>这样子拼接文本很方便</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI &quot;</span>)</span><br><span class=\"line\">        .font(.largeTitle)</span><br><span class=\"line\">    <span class=\"operator\">+</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;is &quot;</span>)</span><br><span class=\"line\">        .font(.headline)</span><br><span class=\"line\">    <span class=\"operator\">+</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;awesome&quot;</span>)</span><br><span class=\"line\">        .font(.footnote)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是有个修改器不适合拼接如：<code>foregroundColor</code></p>\n<p>这时候就需要换成能够使用<code>+</code>的修改器，如<code>color</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;SwiftUI &quot;</span>)</span><br><span class=\"line\">    .color(.red)</span><br><span class=\"line\"><span class=\"operator\">+</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;is &quot;</span>)</span><br><span class=\"line\">    .color(.orange)</span><br><span class=\"line\"><span class=\"operator\">+</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;awesome&quot;</span>)</span><br><span class=\"line\">    .color(.blue)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-store-views-as-properties\"><a href=\"#How-to-store-views-as-properties\" class=\"headerlink\" title=\"How to store views as properties\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-store-views-as-properties\">How to store views as properties</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title <span class=\"operator\">=</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;Paul Hudson&quot;</span>)</span><br><span class=\"line\">        .font(.largeTitle)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subtitle <span class=\"operator\">=</span> <span class=\"type\">Text</span>(<span class=\"string\">&quot;Author&quot;</span>)</span><br><span class=\"line\">        .foregroundColor(.secondary)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            title</span><br><span class=\"line\">            .color(.red)</span><br><span class=\"line\">            subtitle</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-create-custom-modifiers\"><a href=\"#How-to-create-custom-modifiers\" class=\"headerlink\" title=\"How to create custom modifiers\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-custom-modifiers\">How to create custom modifiers</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PrimaryLabel</span>: <span class=\"title class_\">ViewModifier</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">body</span>(<span class=\"params\">content</span>: <span class=\"type\">Content</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        content</span><br><span class=\"line\">            .padding()</span><br><span class=\"line\">            .background(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">            .foregroundColor(<span class=\"type\">Color</span>.white)</span><br><span class=\"line\">            .font(.largeTitle)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello, SwiftUI&quot;</span>)</span><br><span class=\"line\">            .modifier(<span class=\"type\">PrimaryLabel</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tooling\"><a href=\"#Tooling\" class=\"headerlink\" title=\"Tooling\"></a>Tooling</h2><p><strong>Build better apps with help from Xcode</strong></p>\n<h3 id=\"How-to-preview-your-layout-at-different-Dynamic-Type-sizes\"><a href=\"#How-to-preview-your-layout-at-different-Dynamic-Type-sizes\" class=\"headerlink\" title=\"How to preview your layout at different Dynamic Type sizes\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-preview-your-layout-at-different-dynamic-type-sizes\">How to preview your layout at different Dynamic Type sizes</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView_Previews</span> : <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            .environment(\\.colorScheme, .dark)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-preview-your-layout-in-light-and-dark-mode\"><a href=\"#How-to-preview-your-layout-in-light-and-dark-mode\" class=\"headerlink\" title=\"How to preview your layout in light and dark mode\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-preview-your-layout-in-light-and-dark-mode\">How to preview your layout in light and dark mode</a></h3><p>If you want to see both light and dark mode side by side, place multiple previews in a group, like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView_Previews</span> : <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            .environment(\\.colorScheme, .light)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            .environment(\\.colorScheme, .dark)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-preview-your-layout-in-different-devices\"><a href=\"#How-to-preview-your-layout-in-different-devices\" class=\"headerlink\" title=\"How to preview your layout in different devices\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-preview-your-layout-in-different-devices\">How to preview your layout in different devices</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ContentView</span>()</span><br><span class=\"line\">    .previewDevice(<span class=\"type\">PreviewDevice</span>(rawValue: <span class=\"string\">&quot;iPhone SE&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-preview-your-layout-in-a-navigation-view\"><a href=\"#How-to-preview-your-layout-in-a-navigation-view\" class=\"headerlink\" title=\"How to preview your layout in a navigation view\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-preview-your-layout-in-a-navigation-view\">How to preview your layout in a navigation view</a></h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">         .navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Welcome&quot;</span>))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView_Previews</span> : <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-use-Instruments-to-profile-your-SwiftUI-code-and-identify-slow-layouts\"><a href=\"#How-to-use-Instruments-to-profile-your-SwiftUI-code-and-identify-slow-layouts\" class=\"headerlink\" title=\"How to use Instruments to profile your SwiftUI code and identify slow layouts\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts\">How to use Instruments to profile your SwiftUI code and identify slow layouts</a></h3><p>示例代码</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Combine</span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FrequentUpdater</span>: <span class=\"title class_\">BindableObject</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> didChange <span class=\"operator\">=</span> <span class=\"type\">PassthroughSubject</span>&lt;<span class=\"type\">Void</span>, <span class=\"type\">Never</span>&gt;()</span><br><span class=\"line\">   <span class=\"keyword\">var</span> timer: <span class=\"type\">Timer</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">      timer <span class=\"operator\">=</span> <span class=\"type\">Timer</span>.scheduledTimer(</span><br><span class=\"line\">         withTimeInterval: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">         repeats: <span class=\"literal\">true</span></span><br><span class=\"line\">      ) &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">         <span class=\"keyword\">self</span>.didChange.send(())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@ObjectBinding</span> <span class=\"keyword\">var</span> updater <span class=\"operator\">=</span> <span class=\"type\">FrequentUpdater</span>()</span><br><span class=\"line\">   <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> tapCount <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(UUID().uuidString)</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"type\">Button</span>(action: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.tapCount <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">         &#125;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Tap count: <span class=\"subst\">\\(tapCount)</span>&quot;</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检测我们的代码\"><a href=\"#检测我们的代码\" class=\"headerlink\" title=\"检测我们的代码\"></a>检测我们的代码</h4><p>默认情况下，SwiftUI工具告诉我们各种各样的事情：</p>\n<p>1.在此期间创建了多少视图以及创建它们需要多长时间（“View Body”）<br>2.视图的属性是什么以及它们如何随时间变化（“View Properties”）<br>3.发生了多少次Core Animation提交（“Core Animation Commits”）<br>4.每个函数调用的确切时间（“Time Profiler”）</p>\n<p><img src=\"https://www.hackingwithswift.com/img/quick-start/swiftui/profiling-1.jpg\"></p>\n<h4 id=\"监视body调用\"><a href=\"#监视body调用\" class=\"headerlink\" title=\"监视body调用\"></a>监视<code>body</code>调用</h4><p>如果您选择<code>View Body</code>轨道 - 这是instrument列表中的第一行 - 您应该能够看到乐器将结果分解为SwiftUI和您的项目，前者是原始类型，如文本视图和按钮，以及后者包含您的自定义视图类型。在我们的例子中，这意味着“ContentView”应该出现在自定义视图中，因为这是我们视图的名称。</p>\n<p>现在，您在这里看不到的是您的代码与SwiftUI视图的完美一对一映射，因为SwiftUI积极地折叠其视图层次结构以尽可能少地完成工作。所以，不要指望在代码中看到任何VStack创建 - 这个应用程序实际上是免费的。</p>\n<p>在这个屏幕上，重要的数字是计数和平均持续时间 - 每件事创建的次数，以及花费的时间。因为这是一个压力测试你应该看到非常高的数字，但我们的布局是微不足道的，所以平均持续时间可能是几十微秒。</p>\n<p><img src=\"https://www.hackingwithswift.com/img/quick-start/swiftui/profiling-2.jpg\" alt=\"img\"></p>\n<h4 id=\"跟踪状态（state）变化\"><a href=\"#跟踪状态（state）变化\" class=\"headerlink\" title=\"跟踪状态（state）变化\"></a>跟踪状态（state）变化</h4><p>接下来，选择“View Properties”轨道，这是仪器列表中的第二行。这将显示所有视图的所有属性，包括其当前值和所有先前值。</p>\n<p>我们的示例应用程序有一个按钮，通过在数字中添加一个来更改其标签，并且在此工具中可见 - 请查看视图类型ContentView和属性类型<code>State </code>。</p>\n<p>可悲的是，Instruments还没有（还能）向我们展示那里的确切属性名称，如果你跟踪了几个整数状态，这可能会更加令人困惑。然而，它确实有一个不同的技巧：在记录窗口的顶部是一个标记当前视图位置的箭头，如果你拖动它，你会看到应用程序状态随时间的变化 - 每次你点击按钮，你会看到状态整数上升一个，你可以前进和后退来看它发生。</p>\n<p>这可以释放巨大的能力，因为它可以让我们直接看到状态变化导致慢速重绘或其他工作 - 这几乎就像是在时间机器中，您可以在运行期间的每个点检查应用程序的确切状态。</p>\n<p><img src=\"https://www.hackingwithswift.com/img/quick-start/swiftui/profiling-3.jpg\" alt=\"img\"></p>\n<h4 id=\"识别慢速绘图\"><a href=\"#识别慢速绘图\" class=\"headerlink\" title=\"识别慢速绘图\"></a>识别慢速绘图</h4><p>虽然SwiftUI能够直接调用Metal以提高性能，但大多数情况下它更喜欢使用Core Animation进行渲染。这意味着我们会自动从Instruments获取内置的Core Animation分析工具，包括检测昂贵提交（expensive commits）的能力。</p>\n<p>当多个更改放在一个组中时，Core Animation的效果最佳，称为<code>transaction</code>。我们在一个事务中有效地堆叠了一系列工作，然后要求CA继续渲染工作 - 称为<em>提交</em>事务。</p>\n<p>因此，当Instruments向我们展示昂贵的Core Animation提交时，它真正向我们展示的是SwiftUI因为更新而被迫重绘屏幕上的像素的次数。理论上，这应该只在我们的应用程序的实际状态导致不同的视图层次结构时发生，因为SwiftUI应该能够将我们的<code>body</code>属性的新输出与先前的输出进行比较。</p>\n<p><img src=\"https://www.hackingwithswift.com/img/quick-start/swiftui/profiling-4.jpg\" alt=\"img\"></p>\n<h4 id=\"寻找缓慢的函数调用\"><a href=\"#寻找缓慢的函数调用\" class=\"headerlink\" title=\"寻找缓慢的函数调用\"></a>寻找缓慢的函数调用</h4><p>Time Profiler，它向我们展示了在代码的每个部分花费了多少时间。这与乐器中的常规时间分析器完全相同，但如果您之前没有尝试过，那么您至少需要知道：</p>\n<ol>\n<li><p>右侧的扩展详细信息窗口默认显示最重的堆栈跟踪，这是运行时间最长的代码段。明亮的代码（白色或黑色，取决于您的macOS配色方案）是您编写的代码;昏暗代码（灰色）是系统库代码。</p>\n</li>\n<li><p>在左侧，您可以看到创建的所有线程，以及公开指示器，让您深入了解它们调用的函数以及这些函数调用的函数等。大多数工作将在“start”内部进行。</p>\n</li>\n<li><p>为避免混乱，您可能需要单击底部的“调用树”按钮，然后选择“隐藏系统库”。这只会显示您编写的代码，但是如果您的问题是您使用的系统库很糟糕，这可能没有帮助。</p>\n</li>\n<li><p>要直接了解具体细节，您还可以单击“调用树”并选择“反转调用树”以翻转事物，以便叶子功能（树末端的功能）显示在顶部，现在可以向下钻取公开指示器（向上钻取？）到调用它们的函数。</p>\n<p><img src=\"https://www.hackingwithswift.com/img/quick-start/swiftui/profiling-5.jpg\"></p>\n</li>\n</ol>\n<h4 id=\"最后一些提示\"><a href=\"#最后一些提示\" class=\"headerlink\" title=\"最后一些提示\"></a>最后一些提示</h4><p>在您收取配置自己的代码之前，有一些事情需要注意：</p>\n<ol>\n<li>在检查应用程序性能的一小部分时，您应该单击并拖动相关范围，以便仅查看该应用程序部分的统计信息。这使您可以专注于特定操作的性能，例如响应按下按钮。</li>\n<li>即使你在仪器中看到纯色条，它们只是从远处看起来那样 - 你可以通过按住Cmd并按 - 和+来查看更多细节</li>\n<li>要获得最准确的数字，请始终在真实设备上进行配置。</li>\n<li>如果要通过分析代码进行更改，请始终一次进行一次更改。如果你进行两次更改，可能会使你的性能提高20％而另一种会降低10％，但是将它们合在一起意味着你可能会认为它们整体性能提高了10％。</li>\n<li>Instruments在release模式下运行您的代码，从而实现Swift的所有优化。这也会影响您添加到代码中的任何调试标志，因此请小心。</li>\n</ol>\n<h2 id=\"What-now\"><a href=\"#What-now\" class=\"headerlink\" title=\"What now?\"></a>What now?</h2><p><strong>How to continue learning SwiftUI after the basics</strong></p>\n<h3 id=\"SwiftUI-tips-and-tricks\"><a href=\"#SwiftUI-tips-and-tricks\" class=\"headerlink\" title=\"SwiftUI tips and tricks\"></a><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/swiftui-tips-and-tricks\">SwiftUI tips and tricks</a></h3><p>SwiftUI拥有强大的标题功能，但也有许多较小的提示和技巧可以帮助您编写更好的应用程序。</p>\n<h4 id=\"State-设为私有\"><a href=\"#State-设为私有\" class=\"headerlink\" title=\"\u0010@State 设为私有\"></a>\u0010@State 设为私有</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> score <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"具有常量绑定的原型\"><a href=\"#具有常量绑定的原型\" class=\"headerlink\" title=\"具有常量绑定的原型\"></a>具有常量绑定的原型</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">TextField</span>(.constant(<span class=\"string\">&quot;Hello&quot;</span>))</span><br><span class=\"line\">    .textFieldStyle(.roundedBorder)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用语义颜色\"><a href=\"#使用语义颜色\" class=\"headerlink\" title=\"使用语义颜色\"></a>使用语义颜色</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Color</span>.red</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"依靠自适应填充\"><a href=\"#依靠自适应填充\" class=\"headerlink\" title=\"依靠自适应填充\"></a>依靠自适应填充</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Row 1&quot;</span>)</span><br><span class=\"line\">    .padding(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合并文本视图\"><a href=\"#合并文本视图\" class=\"headerlink\" title=\"合并文本视图\"></a>合并文本视图</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Colored &quot;</span>)</span><br><span class=\"line\">            .color(.red)</span><br><span class=\"line\">        <span class=\"operator\">+</span></span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;SwifUI &quot;</span>)</span><br><span class=\"line\">                .color(.green)</span><br><span class=\"line\">        <span class=\"operator\">+</span></span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Text&quot;</span>)</span><br><span class=\"line\">            .color(.blue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何使print-工作\"><a href=\"#如何使print-工作\" class=\"headerlink\" title=\"如何使print()工作\"></a>如何使<code>print()</code>工作</h4><p>右键单击预览画布（preview canvas）中的播放按钮，然后选择“调试预览（Debug Preview）”。</p>\n<h4 id=\"依靠隐式HStack\"><a href=\"#依靠隐式HStack\" class=\"headerlink\" title=\"依靠隐式HStack\"></a>依靠隐式<code>HStack</code></h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> imageNames <span class=\"operator\">=</span> [<span class=\"string\">&quot;paul-hudson&quot;</span>, <span class=\"string\">&quot;swiftui&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span>(imageNames.identified(by: \\.<span class=\"keyword\">self</span>)) &#123; image <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">Image</span>(image).resizable().frame(width: <span class=\"number\">40</span>)</span><br><span class=\"line\">            <span class=\"type\">Text</span>(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分割大视图\"><a href=\"#分割大视图\" class=\"headerlink\" title=\"分割大视图\"></a>分割大视图</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users <span class=\"operator\">=</span> [<span class=\"string\">&quot;Paul Hudson&quot;</span>, <span class=\"string\">&quot;Taylor Swift&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">List</span>(users.identified(by: \\.<span class=\"keyword\">self</span>)) &#123; user <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"type\">NavigationButton</span>(destination: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Detail View&quot;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"type\">Image</span>(<span class=\"string\">&quot;example-image&quot;</span>).resizable().frame(width: <span class=\"number\">50</span>, height: <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">VStack</span>(alignment: .leading) &#123;</span><br><span class=\"line\">                        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Johnny Appleseed&quot;</span>).font(.headline)</span><br><span class=\"line\">                        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Occupation: Programmer&quot;</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;.navigationBarTitle(<span class=\"type\">Text</span>(<span class=\"string\">&quot;Users&quot;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更好的预览\"><a href=\"#更好的预览\" class=\"headerlink\" title=\"更好的预览\"></a>更好的预览</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">#if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView_Previews</span> : <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Group</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .environment(\\.sizeCategory, .accessibilityExtraExtraExtraLarge)</span><br><span class=\"line\">            <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">                .environment(\\.colorScheme, .dark)</span><br><span class=\"line\">            <span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">ContentView</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建自定义修改器\"><a href=\"#创建自定义修改器\" class=\"headerlink\" title=\"创建自定义修改器\"></a>创建自定义修改器</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">PrimaryLabel</span>: <span class=\"title class_\">ViewModifier</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">body</span>(<span class=\"params\">content</span>: <span class=\"type\">Content</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        content</span><br><span class=\"line\">            .padding()</span><br><span class=\"line\">            .background(<span class=\"type\">Color</span>.black)</span><br><span class=\"line\">            .foregroundColor(<span class=\"type\">Color</span>.white)</span><br><span class=\"line\">            .font(.largeTitle)</span><br><span class=\"line\">            .cornerRadius(<span class=\"number\">10</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">            .modifier(<span class=\"type\">PrimaryLabel</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动画变化很容易\"><a href=\"#动画变化很容易\" class=\"headerlink\" title=\"动画变化很容易\"></a>动画变化很容易</h4><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ContentView</span> : <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> showingWelcome <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Toggle</span>(isOn: <span class=\"variable\">$showingWelcome</span>.animation(.spring())) &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Toggle label&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> showingWelcome &#123;</span><br><span class=\"line\">                <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SwiftUI TextField 垂直布局时焦点的问题","url":"/2022/11/20/SwiftUI-TextField-Vertical-Axis-Focus-Issues/","content":"<p>水平布局时，滚动正常，回车键也能正常退出编辑。底层是<code>UITextField</code>。<br>垂直布局时，底层是<code>UITextView</code>，表现不一致，出现问题。</p>\n<ol>\n<li>焦点问题需要我们滚动时，锚点设为顶部，<code>proxy.scrollTo($0, anchor: .top)</code>。</li>\n<li>回车键，退出编辑失效的问题，需要借助<code>toolbar</code>。</li>\n</ol>\n<p>完整代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SwiftUI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TestNextTextFieldFocus</span>: <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@State</span> <span class=\"keyword\">var</span> inputsValues: [<span class=\"type\">String</span>] <span class=\"operator\">=</span> (<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">30</span>).map &#123; i <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"string\">&quot;test <span class=\"subst\">\\(i)</span> TextField axis is <span class=\"subst\">\\(i <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> <span class=\"operator\">?</span> <span class=\"string\">&quot;.vertical&quot;</span> : <span class=\"string\">&quot;.horizontal&quot;</span>)</span>&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@FocusState</span> <span class=\"keyword\">var</span> focusedInput: <span class=\"type\">Int</span>?</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ScrollViewReader</span> &#123; proxy <span class=\"keyword\">in</span></span><br><span class=\"line\">      <span class=\"type\">ScrollView</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LazyVStack</span> &#123;</span><br><span class=\"line\">          <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span>inputsValues.count, id: \\.<span class=\"keyword\">self</span>) &#123; i <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">TextField</span>(<span class=\"string\">&quot;Value&quot;</span>, text: <span class=\"variable\">$inputsValues</span>[i], axis: i <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span> <span class=\"operator\">?</span> .vertical : .horizontal)</span><br><span class=\"line\">              .focused(<span class=\"variable\">$focusedInput</span>, equals: i)</span><br><span class=\"line\">              .submitLabel(.return)</span><br><span class=\"line\">              .id(i)</span><br><span class=\"line\">              .onSubmit &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;submit <span class=\"subst\">\\(i)</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// update state here !!</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i <span class=\"operator\">+</span> <span class=\"number\">1</span>) <span class=\"operator\">&lt;</span> inputsValues.count &#123;</span><br><span class=\"line\">                  focusedInput <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  focusedInput <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .onChange(of: focusedInput) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">&quot;onChange focusedInput:<span class=\"subst\">\\(String(describing: focusedInput))</span>&quot;</span>)</span><br><span class=\"line\">          <span class=\"comment\">// react on state change here !!</span></span><br><span class=\"line\">          proxy.scrollTo(<span class=\"variable\">$0</span>, anchor: .top)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .toolbar &#123;</span><br><span class=\"line\">        <span class=\"type\">ToolbarItemGroup</span>(placement: .keyboard) &#123;</span><br><span class=\"line\">          <span class=\"type\">Spacer</span>()</span><br><span class=\"line\">          <span class=\"type\">Button</span> &#123;</span><br><span class=\"line\">            focusedInput <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">          &#125; label: &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TestNextTextFieldFocus_Previews</span>: <span class=\"title class_\">PreviewProvider</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> previews: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TestNextTextFieldFocus</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["Swift","SwiftUI","iOS"]},{"title":"Swifter - 100 个 Swift 必备 tips","url":"/2015/07/16/Swifter/","content":"<p><a href=\"https://selfstore.io/products/171\">Swifter - 100 个 Swift 必备 tips</a>，作者[王巍](SWifter - 100个 Swift 必备 tips)。书买了很久了，25元比实体书便宜不少，而且收入基本上都归作者。学习完<a href=\"http://book.douban.com/subject/26292006/\">疯狂 Swift 讲义</a>，再看看这个补充一下。</p>\n<p>章节顺序可能与书不一致，全凭兴趣随意浏览，尤其是不太懂得方面。</p>\n<p>##操作符<br>infix 表示一个中位操作符，前后都有输入。类似的还有 prefix 和 postfix。</p>\n<p>associativity 定义了结合律</p>\n<p>precedence 运算的优先级，Swift 中乘法和除法的优先级是150，加法和减法是140，这里定义160，就是高于普通的四则运算。</p>\n<p>操作符定义在全局，不可滥用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//  main.swift</span><br><span class=\"line\">//  Swift-test</span><br><span class=\"line\"></span><br><span class=\"line\">import Foundation</span><br><span class=\"line\"></span><br><span class=\"line\">struct Vector2D &#123;</span><br><span class=\"line\">    var x = 0.0</span><br><span class=\"line\">    var y = 0.0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func +(left: Vector2D, right: Vector2D) -&gt; Vector2D &#123;</span><br><span class=\"line\">    return Vector2D(x: left.x + right.x, y: left.y + right.y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let v1 = Vector2D(x: 2.0, y: 3.0)</span><br><span class=\"line\">let v2 = Vector2D(x: 1.0, y: 5.0)</span><br><span class=\"line\">print(v1 + v2)  // Swift_test.Vector2D(x: 3.0, y: 8.0)</span><br><span class=\"line\"></span><br><span class=\"line\">infix operator +* &#123;</span><br><span class=\"line\">    associativity none</span><br><span class=\"line\">    precedence 160</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func +*(left: Vector2D, right: Vector2D) -&gt; Double &#123;</span><br><span class=\"line\">    return left.x * right.x + left.y * right.y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(v1 +* v2) // 17.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><p>创建一个 Range 的随机数的方法，方便以后复用。</p>\n<p>Swift 支持 &#x2F;&#x2F; MARK: 、&#x2F;&#x2F; TODO:、&#x2F;&#x2F; FIXME:等编译标记，方便分段，将一标签的形式显示在导航栏中，让程序更易读。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// MARK: 实现方法</span><br><span class=\"line\">func randomInRange(range: Range&lt;Int&gt;) -&gt; Int &#123;</span><br><span class=\"line\">    let count = UInt32(range.endIndex - range.startIndex)</span><br><span class=\"line\">    return Int(arc4random_uniform(count)) + range.startIndex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// TODO: 测试是否有效</span><br><span class=\"line\">for _ in 0...100 &#123;</span><br><span class=\"line\">    print(randomInRange(1...6))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><p>对于判断输入是否满足某种条件的运用情景，使用断言比 if 更合适。且在 Debug 编译是才有效，运行时不被编译执行，不会消耗运行时的性能。是非常合适的调试判断。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Foundation</span><br><span class=\"line\"></span><br><span class=\"line\">func convertToKelvin( celsius: Double) -&gt; Double &#123;</span><br><span class=\"line\">    let AbsoluteZeroInCelsius = -273.15</span><br><span class=\"line\">    assert(celsius &gt; AbsoluteZeroInCelsius, &quot;输入的摄氏温度不能低于绝对零度。&quot;)</span><br><span class=\"line\">    return celsius - AbsoluteZeroInCelsius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let roomTemperature = convertToKelvin(27)</span><br><span class=\"line\">print(roomTemperature)  // 300.15</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自省\"><a href=\"#自省\" class=\"headerlink\" title=\"自省\"></a>自省</h2><p>程序设计和人类哲学所面临的同一个重大课程就是解决“我是谁”。</p>\n<p>isKindOfClass、isMemberOfClass、is</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class ClassA: NSObject &#123; &#125;</span><br><span class=\"line\">class ClassB: NSObject &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj1: NSObject = ClassA()</span><br><span class=\"line\">let obj2: NSObject = ClassB()</span><br><span class=\"line\"></span><br><span class=\"line\">print(obj1.isKindOfClass(ClassA.self))    // true</span><br><span class=\"line\">print(obj2.isMemberOfClass(ClassA.self))  // false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性观察\"><a href=\"#属性观察\" class=\"headerlink\" title=\"属性观察\"></a>属性观察</h2><p>属性观察可以对当前类型内监视其属性的设定，并作出响应。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;\r    var date: NSDate &#123;\r        willSet &#123;\r        print(&quot;即将将日期从 \\(date) 设定至 \\(newValue)&quot;)\r        &#125;\r        didSet &#123;\r        print(&quot;已经将日期从 \\(oldValue) 设定至 \\(date)&quot;)\r        &#125;</span><br><span class=\"line\">    &#125;\r    init() &#123;\r    date = NSDate()\r    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\rlet foo = MyClass()\rfoo.date = foo.date.dateByAddingTimeInterval(10086)</span><br><span class=\"line\">\r// 输出\r// 即将将日期从 2015-07-16 16:01:49 +0000 设定至 2015-07-16 18:49:55 +0000</span><br><span class=\"line\">// 已经将日期从 2015-07-16 16:01:49 +0000 设定至 2015-07-16 18:49:55 +0000</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"TestFlight Apps in iTunes Connect","url":"/2015/08/10/TestFlight-Apps-in-iTunes-Connect/","content":"<p><img src=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Art/1_administration_tasks_2x.png\" alt=\"App Distributio\"></p>\n<ol>\n<li>iTunes Connet &gt; MyApps &gt; add App</li>\n<li>Xcode</li>\n</ol>\n<ul>\n<li>Product &gt; Acrchive </li>\n<li>Window &gt; Organizer &gt; Submit to App Store</li>\n</ul>\n<ol start=\"3\">\n<li>iTunes Connet &gt; MyApps &gt; Prerelease</li>\n</ol>\n<ul>\n<li>Builds: Turn on <code>TestFlight Beta Testing</code></li>\n<li>Add Internal or External Testers</li>\n</ul>\n<ol start=\"4\">\n<li>Click <code>Open in TestFlight</code> in email from iTunes Store on your iPhone</li>\n</ol>\n<p>More in <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582-CH1-SW1\">App Distribution Guide</a></p>\n"},{"title":"天使湾面试","url":"/2015/09/09/Tisiwi-interview/","content":"<p>谈到这次面试，还是在简书上看到我的博客联系到我的。这个我很高兴，花了一天时间跑去杭州参加面试。</p>\n<p>具体面试也没有做题目，因为在之前电话面试时有介绍过公司的业务和 iOS 开发的工作。一开始就直入主题。</p>\n<p>先是人事问了我的基本状况和工作经验：</p>\n<ul>\n<li>学校的成绩，没想到也问了。我是老实人，我成绩一般，挂了几门数学的课。</li>\n<li>我的简历上连籍贯和年龄都没有。</li>\n<li>还问到兴趣爱好，我是什么性格的人。朋友怎么评价我的，这个我真答不上，或许是我标签太少，我回头要问问他们。</li>\n<li>未来三五年规划，其实就是看我能否稳定的在公司发展。我的要好的朋友在哪里？</li>\n<li>学习新的知识的速度</li>\n<li>期望薪金，绩效奖和公司将要搬迁</li>\n</ul>\n<p>技术方面：</p>\n<ul>\n<li>什么是好的程序员的特质</li>\n<li>最近的项目是否有主导的想法</li>\n<li>如何学习的知识</li>\n<li>有什么主动根据需求提出不同的方案？如果不通过，会不会回去自己偷偷做一套出来？</li>\n<li>开发学习有什么特别的方法或诀窍</li>\n<li>如何才算一个好 App，平时用的有哪些体验特别好的？这个问题我应该拿出手机好好谈谈的，就像纯银的产品分享会一样。</li>\n<li>问我有没有准备的内容，没有被问到的。这个确实我没有做好的地方，主动展示自己亮点或水平。</li>\n</ul>\n<p>大概这个多，好多关键的问题我都没好好问答就跳过去了。回去还要好好整理一下，也算是整理一下自己对技术的一些思考。期待我更新吧。</p>\n<p>我的表现：</p>\n<ul>\n<li>表达的还算正常，比起以前有进步</li>\n<li>好多话题我熟悉应该展开，是最好的</li>\n<li>好多以前没有想过的问题，及时反应还是很慢，不能够及时总结提炼观点</li>\n</ul>\n"},{"title":"Tomcat Game DEMO","url":"/2015/05/24/Tomcat-Game-DEMO/","content":"<p><a href=\"http://www.jikexueyuan.com/\">极客学院</a>充值月度 VIP，学习 iOS 视频，感觉他们的知识体系图和实战路径图很不错，按照一个大纲去学习的。</p>\n<p>今天按照视频指导：<a href=\"http://www.jikexueyuan.com/course/339.html\">制作汤姆猫小游戏</a>，完成以下 DEMO。</p>\n<p>其中发现我写代码中遇到很多小问题，google 就有答案的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  ViewController.m</span></span><br><span class=\"line\"><span class=\"comment\">//  Tomcat Game DEMO</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Will on 5/24/15.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 gewill.org. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;ViewController.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">weak</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"keyword\">IBOutlet</span> <span class=\"built_in\">UIImageView</span> *tomImageView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchHeadOnHead:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;knockout&quot;</span> imageCount:<span class=\"number\">81</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchEat:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;eat&quot;</span> imageCount:<span class=\"number\">40</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchPie:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;pie&quot;</span> imageCount:<span class=\"number\">24</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchScratch:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;scratch&quot;</span> imageCount:<span class=\"number\">56</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)TouchDrink:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;drink&quot;</span> imageCount:<span class=\"number\">81</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchCymbal:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;symbal&quot;</span> imageCount:<span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchStomach:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;stomach&quot;</span> imageCount:<span class=\"number\">34</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchFootLeft:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;footLeft&quot;</span> imageCount:<span class=\"number\">30</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchFootRight:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;footRight&quot;</span> imageCount:<span class=\"number\">30</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)touchAngry:(<span class=\"built_in\">UIButton</span> *)sender &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> tomAnimateWith:<span class=\"string\">@&quot;angry&quot;</span> imageCount:<span class=\"number\">26</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - 动画执行方法</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)tomAnimateWith:(<span class=\"built_in\">NSString</span> *)fileName imageCount:(<span class=\"built_in\">NSInteger</span>)imageCount&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 0. 判断是否正在执行动画</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.tomImageView.isAnimating) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建图片数组</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *tomImages = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; imageCount; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *imageName = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;%@_%02d.jpg&quot;</span>, fileName, i];</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path =[[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:imageName ofType:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageWithContentsOfFile:path];</span><br><span class=\"line\">        [tomImages addObject:image ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// 2. 设置动画过程</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tomImageView setAnimationImages:tomImages];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tomImageView setAnimationDuration:<span class=\"keyword\">self</span>.tomImageView.animationImages.count * <span class=\"number\">0.1</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tomImageView setAnimationRepeatCount:<span class=\"number\">1</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tomImageView startAnimating];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    <span class=\"comment\">// Dispose of any resources that can be recreated.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"转换数组","url":"/2016/05/16/Transforming-Arrays/","content":"<p>最近项目中，非持久化部分使用了数组来暂存数据，涉及到去重。一直以来都是 for in 循序遍历来处理数组，比较了函数式编程，还是后者的模块化组装性比较有优势。</p>\n<p>《Advanced Swift》中 Transforming Arrays 一节讲解了一些数组的基本映射转换方法。其中主要是重新实现了部分方法，以及推荐我们自己写一些拓展标准库的方法。</p>\n<p>以下是标准库中13个独立的方法，可以随意组合使用：</p>\n<ul>\n<li>map and flatMap — how to transform an element  映射：如何转换每一个元素</li>\n<li>filter — should an element be included? 过滤：是否应该包含该元素</li>\n<li>reduce — how to fold an element into an aggregate value 归纳：如何折叠元素到一个总值</li>\n<li>sort and lexicographicCompare — in what order should two elements come? 排序和字典顺序比较：两个元素如何排序</li>\n<li>indexOf and contains — does this element match?  索引&#x2F;下标 和 包含：是否与该元素匹配</li>\n<li>minElement and maxElement — which is the min&#x2F;max of two elements? 最小元素和最大元素：两个元素中最小&#x2F;最大的那个</li>\n<li>elementsEqual and startsWith — are two elements equivalent? 元素等于和开始于：两个元素是否是对等</li>\n<li>split — is this element a separator? 分割：该元素是否是分隔符</li>\n</ul>\n<p>编程毕竟是操作性的语言，以上都有表意很明确的方法，只要在实际调用几次也就理解了。下面是我写的 Demo ：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// : Playground - noun: a place where people can play</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fibs <span class=\"operator\">=</span> [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">45</span>, <span class=\"number\">53</span>, <span class=\"number\">32</span>, <span class=\"number\">12</span>, <span class=\"number\">32</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.map &#123;</span><br><span class=\"line\">    <span class=\"type\">Double</span>(<span class=\"variable\">$0</span> <span class=\"operator\">*</span> <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> suits <span class=\"operator\">=</span> [<span class=\"string\">&quot;♠&quot;</span>, <span class=\"string\">&quot;♥&quot;</span>, <span class=\"string\">&quot;♣&quot;</span>, <span class=\"string\">&quot;♦&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ranks <span class=\"operator\">=</span> [<span class=\"string\">&quot;J&quot;</span>, <span class=\"string\">&quot;Q&quot;</span>, <span class=\"string\">&quot;K&quot;</span>, <span class=\"string\">&quot;A&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> allCombinations <span class=\"operator\">=</span> suits.flatMap &#123; suit <span class=\"keyword\">in</span></span><br><span class=\"line\">    ranks.map &#123; rank <span class=\"keyword\">in</span></span><br><span class=\"line\">        (suit, rank)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">suits.flatMap &#123; (suit) -&gt; [<span class=\"type\">String</span>]<span class=\"operator\">?</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    [suit, suit]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">suits.flatMap &#123; (suit) -&gt; [<span class=\"type\">String</span>] <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> suit <span class=\"operator\">!=</span> <span class=\"string\">&quot;♥&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [suit]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.flatMap &#123; (num) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.sort &#123;</span><br><span class=\"line\">    <span class=\"variable\">$0</span> <span class=\"operator\">&gt;</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.lexicographicalCompare([<span class=\"number\">3</span>])</span><br><span class=\"line\">fibs.lexicographicalCompare([<span class=\"number\">1</span>])</span><br><span class=\"line\">fibs.lexicographicalCompare([<span class=\"number\">3</span>]) &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num0 <span class=\"operator\">&gt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fibs.lexicographicalCompare([<span class=\"number\">1</span>]) &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num0 <span class=\"operator\">&gt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.reduce(<span class=\"number\">0</span>) &#123; (total, num) -&gt; <span class=\"type\">Int</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    total <span class=\"operator\">+</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.filter &#123; (num) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num <span class=\"operator\">%</span> <span class=\"number\">3</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.indexOf(<span class=\"number\">4</span>)</span><br><span class=\"line\">fibs.indexOf(<span class=\"number\">1</span>)</span><br><span class=\"line\">fibs.contains(<span class=\"number\">4</span>)</span><br><span class=\"line\">fibs.contains(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.minElement()</span><br><span class=\"line\">fibs.minElement &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num0 <span class=\"operator\">&lt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fibs.minElement &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num0 <span class=\"operator\">&gt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fibs.maxElement()</span><br><span class=\"line\">fibs.maxElement &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;num0: <span class=\"subst\">\\(num0)</span>, num1: <span class=\"subst\">\\(num1)</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num0 <span class=\"operator\">&lt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.maxElement &#123; (num0, num1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num0 <span class=\"operator\">&gt;</span> num1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> strs <span class=\"operator\">=</span> [<span class=\"string\">&quot;Lee&quot;</span>, <span class=\"string\">&quot;Bee&quot;</span>, <span class=\"string\">&quot;Will&quot;</span>, <span class=\"string\">&quot;10&quot;</span>, <span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">strs.maxElement &#123; (str0, str1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    str0 <span class=\"operator\">&lt;</span> str1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strs.maxElement &#123; (str0, str1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    str0 <span class=\"operator\">&gt;</span> str1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strs.elementsEqual([<span class=\"string\">&quot;Lee&quot;</span>, <span class=\"string\">&quot;Bee&quot;</span>, <span class=\"string\">&quot;Will&quot;</span>, <span class=\"string\">&quot;10&quot;</span>])</span><br><span class=\"line\">strs.elementsEqual([<span class=\"string\">&quot;Lee&quot;</span>, <span class=\"string\">&quot;Bee&quot;</span>, <span class=\"string\">&quot;Will&quot;</span>, <span class=\"string\">&quot;10&quot;</span>, <span class=\"string\">&quot;&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">strs.startsWith([<span class=\"string\">&quot;Lee&quot;</span>])</span><br><span class=\"line\">strs.startsWith([<span class=\"string\">&quot;10&quot;</span>])</span><br><span class=\"line\">strs.startsWith([<span class=\"string\">&quot;Lee&quot;</span>]) &#123; (str0, str1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    str0 <span class=\"operator\">==</span> str1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">strs.split(<span class=\"string\">&quot;10&quot;</span>)</span><br><span class=\"line\">strs.split(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>, maxSplit: <span class=\"number\">2</span>, allowEmptySlices: <span class=\"literal\">true</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>, maxSplit: <span class=\"number\">2</span>, allowEmptySlices: <span class=\"literal\">false</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>, maxSplit: <span class=\"number\">3</span>, allowEmptySlices: <span class=\"literal\">true</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>, maxSplit: <span class=\"number\">6</span>, allowEmptySlices: <span class=\"literal\">false</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">3333</span>, maxSplit: <span class=\"number\">2</span>, allowEmptySlices: <span class=\"literal\">true</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">44444</span>, maxSplit: <span class=\"number\">2</span>, allowEmptySlices: <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.split(<span class=\"number\">32</span>, maxSplit: <span class=\"number\">0</span>, allowEmptySlices: <span class=\"literal\">true</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">32</span>, maxSplit: <span class=\"number\">1</span>, allowEmptySlices: <span class=\"literal\">false</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">32</span>, maxSplit: <span class=\"number\">2</span>, allowEmptySlices: <span class=\"literal\">true</span>)</span><br><span class=\"line\">fibs.split(<span class=\"number\">32</span>, maxSplit: <span class=\"number\">3</span>, allowEmptySlices: <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.split &#123; (num) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.split(<span class=\"number\">1</span>, allowEmptySlices: <span class=\"literal\">true</span>) &#123; (num) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.split(<span class=\"number\">66</span>, allowEmptySlices: <span class=\"literal\">true</span>) &#123; (num) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    num <span class=\"operator\">%</span> <span class=\"number\">2</span> <span class=\"operator\">==</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fibs.forEach &#123; (num) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num <span class=\"operator\">-</span> <span class=\"number\">44</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Demo 下载地址：<a href=\"https://github.com/gewill/test-projects/tree/master/collections%20transform.playground\">https://github.com/gewill/test-projects/tree/master/collections%20transform.playground</a></p>\n"},{"title":"[UIScreen mainScreen].bounds in Xcode 7 Beta 4","url":"/2015/08/04/UIScreen-mainScreen-bounds-in-Xcode-7-Beta-4/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// in Xcode 7 Beta 4</span><br><span class=\"line\"></span><br><span class=\"line\">if (Main Interface == nil &amp;&amp; Launch Screen File == nil) &#123; </span><br><span class=\"line\">\t[UIScreen mainScreen].bounds = &#123;&#123;0, 0&#125;, &#123;320, 480&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://i.imgur.com/3Ttq2AD.png\" alt=\"Imgur\"></p>\n<p><a href=\"https://github.com/gewill/random-projects-/tree/master/test%5BUIScreen%20mainScreen%5D.bounds\">Demo</a></p>\n"},{"title":"UIStackView","url":"/2015/10/29/UIStackView/","content":"<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li>iOS9 Day-by-Day :: Day 4 :: UIStack View: <a href=\"https://www.shinobicontrols.com/blog/ios9-day-by-day-day4-uistack-view\">https://www.shinobicontrols.com/blog/ios9-day-by-day-day4-uistack-view</a></li>\n<li>中文翻译版：<a href=\"http://www.jianshu.com/p/1991e6c2881a\">http://www.jianshu.com/p/1991e6c2881a</a></li>\n<li>UIStackView 源码：最新学到的，比 Documentation 要更加直观简洁，更像一个API应该有的样子，而不是Dash梳理的结构</li>\n<li><a href=\"https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/\">UIStackView Class Reference</a>：当然Reference有更多官方的介绍</li>\n<li><a href=\"https://www.udemy.com/ios9-swift\">iOS 9 and Swift 2: From Beginner to Paid Professional</a> - Lecture 33</li>\n</ul>\n<h2 id=\"我的总结\"><a href=\"#我的总结\" class=\"headerlink\" title=\"我的总结\"></a>我的总结</h2><p>上面的文档都已经讲的问清楚了，也就几个属性可调。参考Android上的线性布局，更容易理解其含义。但是iOS9才支持有点坑，个人项目可以用一用。</p>\n<p>iOS9 Day-by-Day :: Day 4 :: UIStack View 里面的Demo非常直观的调试 UIStackView 的相关属性。更换图片为不同形状，效果会更好一些，代码在：<a href=\"https://github.com/gewill/iOS9-day-by-day\">https://github.com/gewill/iOS9-day-by-day</a>。</p>\n<p>步骤为：先设置 UIStack View 的位置，后设置 Auto Layout的大小，基本上就能固定控件布局了。</p>\n"},{"title":"使用 Open Core 黑苹果升级至 Big Sur","url":"/2020/11/14/Update-Hackintosh-to-Big-Sur-with-Open-Core/","content":"<h2 id=\"机器配置\"><a href=\"#机器配置\" class=\"headerlink\" title=\"机器配置\"></a>机器配置</h2><p>主板：<a href=\"https://www.msi.com/Motherboard/MPG-Z390-GAMING-PRO-CARBON-AC\">微星 MSI MPG Z390 GAMING PRO CARBON AC</a></p>\n<p>CPU：<a href=\"https://ark.intel.com/content/www/us/en/ark/products/186605/intel-core-i9-9900k-processor-16m-cache-up-to-5-00-ghz.html\">Intel i9 9900K</a></p>\n<p>内存：科赋 DDR4 3200  16G*4</p>\n<p>显卡：<a href=\"https://www.asus.com/us/Graphics-Cards/AREZ-STRIX-RXVEGA64-O8G-GAMING/\">华硕 ASUS AREZ-STRIX-RXVEGA64-O8G-GAMING</a></p>\n<p>电源：<a href=\"https://www.evga.com/products/product.aspx?pn=120-GP-0750-X1\">EVGA SuperNOVA 750 G+</a></p>\n<p>散热：<a href=\"http://www.coolermaster.com/cooling/cpu-liquid-cooler/masterliquid-ml240r-rgb/\">MASTERLIQUID ML240R RGB</a></p>\n<p>固态：三星 970 EVO 500G</p>\n<p>板载声卡：ALC S1220A</p>\n<p>板载有线网卡：Intel I219V7</p>\n<p>无线网卡和蓝牙：BCM94360CD</p>\n<p>显示器：戴尔 P2715Q 4K显示器</p>\n<p>机箱：<a href=\"http://www.phanteks.com/Enthoo-Evolv-ATX-TemperedGlass.html\">追风者 PK-515ETG</a></p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ol>\n<li>替换Clover为Open Core v0.6.2，感谢 <a href=\"https://github.com/pOH7\">pOH7</a>&#x2F;<strong><a href=\"https://github.com/pOH7/hackintosh-z390-h-9700k\">hackintosh-z390-h-9700kuzh</a></strong> 的EFI。</li>\n<li>下载并升级Big Sur，重启几次后，无法进入Big Sur的安装界面。</li>\n<li>升级Open Core v0.6.3，感谢 <a href=\"https://www.youtube.com/watch?v=QK9Kmvmnp0A\">Ryzentosh Big Sur Updating OpenCore From 0.6.2 to 0.6.3</a><ol>\n<li>打开<a href=\"https://opencore.slowgeek.com/\">OpenCore Sanity Checker</a> ，拖进<code>config.plist</code>，根据建议修改。</li>\n<li>下载<a href=\"https://github.com/acidanthera/OpenCorePkg\">OpenCorePkg</a>、 <a href=\"https://github.com/acidanthera/WhateverGreen\">WhateverGreen</a>、<a href=\"https://github.com/acidanthera/VirtualSMC\">VirtualSMC</a>、<a href=\"https://github.com/acidanthera/Lilu\">Lilu</a> 并替换。其中OpenCore只需要替换<code>EFI/OC/OpenCore.efi</code> 和 <code>EFI/BOOT/BOOTx64.efi</code>。</li>\n</ol>\n</li>\n<li>顺利进入Big Sur的安装界面，升级成功🎉</li>\n<li>EFI下载地址： [Big Sur Open Core 0.6.3 EFI 20201114.zip](<a href=\"https://github.com/gewill/Hackintosh-Installation-with-MSI-Z390-and-i9-9900K/blob/master/Big\">https://github.com/gewill/Hackintosh-Installation-with-MSI-Z390-and-i9-9900K/blob/master/Big</a> Sur Open Core 0.6.3 EFI 20201114.zip)</li>\n</ol>\n<p><img src=\"https://gewill.org/assets/Hackintosh-Big-Sur.jpg\" alt=\"Hackintosh-Big-Sur\"></p>\n<h2 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h2><ol>\n<li>USB 2.0 不可用，需USB定制。</li>\n<li><del>硬件加速不可用</del>，BIOS集成显卡打开即可硬件加速。</li>\n</ol>\n<p><img src=\"https://gewill.org/assets/Hardware-Acceleration-On-Big-Sur.png\" alt=\"Hardware-Acceleration-On-Big-Sur\"></p>\n"},{"title":"Updating Your App for iOS 11 - 笔记","url":"/2017/07/03/Updating-Your-App-for-iOS-11-Notes/","content":"<p>WWDC 2017 Session 204 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/204/\">https://developer.apple.com/videos/play/wwdc2017/204/</a></p>\n<p>主要讲了一些布局和UIScrollView和UITableView的细节优化，考虑到app必须兼容iOS9，这些可以稍后学习。 </p>\n<ul>\n<li>Layout Margins</li>\n<li>Self-Sizing by Default in UITableView</li>\n<li>Swipe Actions in UITableView</li>\n</ul>\n"},{"title":"UserDefaults 和 AppStorage 混用时默认值的问题","url":"/2022/11/27/UserDefaults-default-vaule-issue-with-AppStorage/","content":"<p>UserDefaults 和 AppStorage 混用时，默认值不统一的问题。因为AppStorage持久化时机不确定，UserDefaults先调用时可能获取的值仍是系统默认值。</p>\n<h2 id=\"解决方案有两种：\"><a href=\"#解决方案有两种：\" class=\"headerlink\" title=\"解决方案有两种：\"></a>解决方案有两种：</h2><h3 id=\"1-UserDefaults-standard-object-forKey-nil-判断。\"><a href=\"#1-UserDefaults-standard-object-forKey-nil-判断。\" class=\"headerlink\" title=\"1. UserDefaults.standard.object(forKey:) == nil 判断。\"></a>1. <code>UserDefaults.standard.object(forKey:) == nil</code> 判断。</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"type\">UserDefaults</span>.standard.object(forKey: <span class=\"string\">&quot;hasHapticFeedback&quot;</span>) <span class=\"operator\">==</span> <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">UserDefaults</span>.standard.set(<span class=\"literal\">true</span>, forKey: <span class=\"string\">&quot;hasHapticFeedback&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-借助SwiftyUserDefaults，但是对于纯SwiftUI项目，没必要。\"><a href=\"#2-借助SwiftyUserDefaults，但是对于纯SwiftUI项目，没必要。\" class=\"headerlink\" title=\"2. 借助SwiftyUserDefaults，但是对于纯SwiftUI项目，没必要。\"></a>2. 借助<a href=\"https://github.com/sunshinejr/SwiftyUserDefaults\">SwiftyUserDefaults</a>，但是对于纯SwiftUI项目，没必要。</h3><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">DefaultsKeys</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userColorScheme: <span class=\"type\">DefaultsKey</span>&lt;<span class=\"type\">String</span>&gt; &#123; .<span class=\"keyword\">init</span>(<span class=\"string\">&quot;userColorScheme&quot;</span>, defaultValue: <span class=\"string\">&quot;default&quot;</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userThemeName: <span class=\"type\">DefaultsKey</span>&lt;<span class=\"type\">String</span>?&gt; &#123; .<span class=\"keyword\">init</span>(<span class=\"string\">&quot;userThemeName&quot;</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userLastLoginDate: <span class=\"type\">DefaultsKey</span>&lt;<span class=\"type\">Date</span>?&gt; &#123; .<span class=\"keyword\">init</span>(<span class=\"string\">&quot;userLastLoginDate&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["Swift","SwiftUI","iOS"]},{"title":"VPS","url":"/2015/11/03/VPS/","content":"<p>最近学会了使用 Surge + Shadowsocks，终于可以优雅地在 iOS上分流模式上网了。</p>\n<p>购买的是 <a href=\"http://www.host1plus.com/\">host1plus.com</a>的VPS，$2一个月好便宜的说。只有一个SSH ，一切都是命令行搞定。折腾了几天后发现，命令行完全是一个简洁高效操作计算机的方式。相比GUI的程序，唯一的缺点：可操作项和文件目录等不能够一目了然的看到，最多一个<code>--help</code>，还是不行就要求助Google了。当然熟悉了命令行之后这也不是问题，就是记忆多一些嘛。</p>\n<p>首先安装了Shadowsocks，后来有安装了 WordPress 256的内存瞬间就满了。使用speedtest-cli测试下来， 主机的速度1000M&#x2F;100M，但是连接上海服务器就只有20M&#x2F;2M左右。手机也算够用了，毕竟电脑上有强大的Lantern。</p>\n<p>最坑的是一般搜索的官方教程都是有坑的，一般都要找一些个人安装文章才能完美运行。PHP和FTP都是找了好多教程才搞定的，下次在配置一定官方+个人教程，搜索的时候也注意筛选最近一周或一月的结果比较靠谱。</p>\n"},{"title":"视频列表自动播放方案","url":"/2017/04/04/Video-Auto-Play-List/","content":"<p>视频cell滑动时自动播放，实现起来主要是获取滚动时刻的cell的frame，<code>IGListScrollDelegate</code> 中 <code>listAdapter(_:didEndDragging:willDecelerate:)</code> 获取可见cell，播放符合规则的视频cell，并暂停其余cell。</p>\n<p>主要记录思路，供大家参考。规则如下：</p>\n<blockquote>\n<ul>\n<li>视频frame超过一半在Screen上的最前面的cell</li>\n<li>少于一半则停止播放，以导航栏底部64为准线</li>\n<li>vc appear 手动调用此方法</li>\n<li>vc <code>didMove(toParentViewController:)</code> release player</li>\n<li>visibleCells 方法返回 cell indexPath 不是顺序的，是个坑，要重新排序</li>\n</ul>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">VideoSectionController</span>: <span class=\"title class_\">IGListScrollDelegate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// MARK: - GListScrollDelegate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">listAdapter</span>(<span class=\"keyword\">_</span> <span class=\"params\">listAdapter</span>: <span class=\"type\">IGListAdapter</span>!, <span class=\"params\">didScroll</span> <span class=\"params\">sectionController</span>: <span class=\"type\">IGListSectionController</span>!) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">listAdapter</span>(<span class=\"keyword\">_</span> <span class=\"params\">listAdapter</span>: <span class=\"type\">IGListAdapter</span>!, <span class=\"params\">willBeginDragging</span> <span class=\"params\">sectionController</span>: <span class=\"type\">IGListSectionController</span>!) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">func</span> <span class=\"title function_\">listAdapter</span>(<span class=\"keyword\">_</span> <span class=\"params\">listAdapter</span>: <span class=\"type\">IGListAdapter</span>!, <span class=\"params\">didEndDragging</span> <span class=\"params\">sectionController</span>: <span class=\"type\">IGListSectionController</span>!, <span class=\"params\">willDecelerate</span> <span class=\"params\">decelerate</span>: <span class=\"type\">Bool</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">var</span> cells <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.collectionContext<span class=\"operator\">?</span>.visibleCells(for: sectionController) <span class=\"keyword\">as?</span> [<span class=\"type\">VideoCell</span>] <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cells 重新排序</span></span><br><span class=\"line\">        cells <span class=\"operator\">=</span> cells.sorted &#123; (cell0, cell1) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> indexPath0 <span class=\"operator\">=</span> collectionContext<span class=\"operator\">?</span>.index(for: cell0, sectionController: sectionController) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> indexPath1 <span class=\"operator\">=</span> collectionContext<span class=\"operator\">?</span>.index(for: cell1, sectionController: sectionController) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> indexPath0 <span class=\"operator\">&lt;</span> indexPath1 &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> cell <span class=\"keyword\">in</span> cells &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">let</span> videoCenter <span class=\"operator\">=</span> cell.convert(cell.videoCoverImageView.center, to: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> videoCenter.y <span class=\"operator\">&lt;</span> <span class=\"number\">64</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// pause</span></span><br><span class=\"line\">                cell.pause()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// play</span></span><br><span class=\"line\">                cell.play()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">didMove</span>(<span class=\"params\">toParentViewController</span> <span class=\"params\">parent</span>: <span class=\"type\">UIViewController</span>?) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.didMove(toParentViewController: parent)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent <span class=\"operator\">==</span> <span class=\"keyword\">self</span>.navigationController<span class=\"operator\">?</span>.parent &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Back tapped&quot;</span>)</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.default.post(name: <span class=\"type\">Notification</span>.<span class=\"type\">Name</span>.<span class=\"type\">VideoPlayer</span>.<span class=\"type\">VideoCellStopPlay</span>, object: <span class=\"literal\">nil</span>, userInfo: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"智慧是什么? 它从哪里开始? - 笔记","url":"/2023/04/10/What-Is-Intelligence-Where-Does-it-Begin-Notes/","content":"<p> <img src=\"/../assets/What-Is-Intelligence-Where-Does-it-Begin-Notes/level%2091.jpg\" alt=\"level 91\"></p>\n<h2 id=\"源\"><a href=\"#源\" class=\"headerlink\" title=\"源\"></a>源</h2><p>视频地址：<a href=\"https://youtu.be/ck4RGeoHFko\">https://youtu.be/ck4RGeoHFko</a></p>\n<p>资料来源及进一步阅读的文章地址：<a href=\"https://sites.google.com/view/sourcesintelligence\">https://sites.google.com/view/sourcesintelligence</a></p>\n<h2 id=\"智慧的不同方面\"><a href=\"#智慧的不同方面\" class=\"headerlink\" title=\"智慧的不同方面\"></a>智慧的不同方面</h2><ol>\n<li>信息</li>\n<li>记忆</li>\n<li>学习</li>\n<li>知识</li>\n<li>创造力</li>\n<li>使用物理工具的能力</li>\n<li>未来规划能力</li>\n<li>文化智慧</li>\n</ol>\n<p>尤其后面几个方面，如果人们偷懒的话，就白白浪如此高级的智慧。现在有AI可以各种辅助工作，应该能帮助人们作出更具高效和创造力的作品。</p>\n"},{"title":"What’s New in Cocoa Touch - 笔记","url":"/2017/07/03/Whats-New-in-Cocoa-Touch-Notes/","content":"<p>WWDC 2017 Session 201 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/201/\">https://developer.apple.com/videos/play/wwdc2017/201/</a></p>\n<p>主要是新的API概述，所以简单听一下，主要感兴趣的点：</p>\n<ul>\n<li>自动变化的大标题栏（Large Titles）</li>\n<li>Safe Area Insets</li>\n<li>屏蔽系统边缘手势：<code>preferredScreenEdgesDeferringSystemGestures</code></li>\n<li>UIScrollView：<code>contentLayoutGuide</code> 和 <code>frameLayoutGuide</code></li>\n<li>闭包式KVO</li>\n<li>通过Keychain 自动填写密码（Password AutoFill for Apps ）</li>\n</ul>\n"},{"title":"What's New in Swift 4 - 笔记","url":"/2017/06/09/Whats-New-in-Swift-4-Notes/","content":"<p>WWDC 2017 Session 402 地址：<a href=\"https://developer.apple.com/videos/play/wwdc2017/402/\">https://developer.apple.com/videos/play/wwdc2017/402/</a></p>\n<p>一些特性在 <a href=\"https://github.com/ole/whats-new-in-swift-4\">https://github.com/ole/whats-new-in-swift-4</a>  的 Playground 已经演示，就不具体记录了。</p>\n<p>总的来说：应用方面小修小补，迁移成本也很小，最高兴的就是编译方面的优化，结合Xcode的优化，相信Swift 4会更快。</p>\n<h3 id=\"1-语言修饰和增补\"><a href=\"#1-语言修饰和增补\" class=\"headerlink\" title=\"1. 语言修饰和增补\"></a>1. 语言修饰和增补</h3><ul>\n<li><code>private</code> 变回 Swift 2，extension可见</li>\n<li>组合类和协议 （Composing Classes and Protocols），用法<code>class &amp; protocol</code></li>\n<li>KeyPath</li>\n<li>Swift 对 JSON 解析，<code>Codable</code>协议</li>\n<li>对Swift 3兼容，项目中3和4并存</li>\n</ul>\n<h3 id=\"2-编译的提升\"><a href=\"#2-编译的提升\" class=\"headerlink\" title=\"2. 编译的提升\"></a>2. 编译的提升</h3><ul>\n<li>New build system 必须手动打开</li>\n<li>index 优化，很赞会节约不少时间，我一度以为这是Xcode的bug</li>\n<li>不可预知类型性能优化（Unpredictable Performance in Swift 3），用COW优化（COW Existential Buffers）</li>\n<li>更小的二进制：移除无用的<code>@objc</code>部分代码，编译设置（Change build setting to Default: Swift 3 @objc Inference）</li>\n<li>符号大小（Symbol Size）</li>\n</ul>\n<h3 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3. 字符串\"></a>3. 字符串</h3><ul>\n<li><p>Unicode支持，重音或表情，为一个字母，count为1。In Swift, a Character is a grapheme.</p>\n</li>\n<li><p>表情处理速度提升</p>\n</li>\n<li><p><code>characters</code> 改为集合类型</p>\n</li>\n<li><p>字符串也改为集合类型</p>\n</li>\n<li><p>支持切片（Slicing），<code>let s = &quot;one,two,three&quot;; s.split(separator: &quot;,&quot;)</code></p>\n</li>\n<li><p>子字符串（Substrings）浪费内存，应该<code>String(substring)</code></p>\n</li>\n<li><p>终于支持多行字符串，格式为首尾 <code>&quot;&quot;&quot;</code></p>\n</li>\n</ul>\n<h3 id=\"4-一些通用特性\"><a href=\"#4-一些通用特性\" class=\"headerlink\" title=\"4. 一些通用特性\"></a>4. 一些通用特性</h3><ul>\n<li>拓展Sequence</li>\n<li>Sequence拥有<code>Element</code></li>\n<li>通用的下标（Generic Subscripts）</li>\n</ul>\n<h3 id=\"5-独占的访问内存（Exclusive-Access-to-Memory）\"><a href=\"#5-独占的访问内存（Exclusive-Access-to-Memory）\" class=\"headerlink\" title=\"5. 独占的访问内存（Exclusive Access to Memory）\"></a>5. 独占的访问内存（Exclusive Access to Memory）</h3><p>运行时强制：</p>\n<ul>\n<li>全局变量（Global variables ）</li>\n<li>类的属性（Properties of classes ）</li>\n<li>逃逸闭包中的变量（Local variables captured in escaping closures）</li>\n</ul>\n<p>默认编译时打开，运行时关闭，可在build settings更改。</p>\n<p>这一段有点难，回头再看看Onevcat翻译的 <a href=\"https://onevcat.com/2017/02/ownership/\">所有权宣言 - Swift 官方文章 Ownership Manifesto 译文评注版</a></p>\n"},{"title":"When builting this website","url":"/2015/04/29/When-builting-this-website/","content":"<p>All started with I studied iOS development in Xcode, it required me to fill in Organization Identifier.<br> <span id=\"more\"></span></p>\n<p>Since bought the domain in April 20, I cost ten days to build the website.Try a lot tools and web services, finally I choosed Hexo and Github. Especially love the simple and elegant theme: NexT-Mist. Only shortage is website access speed is not good, and ping is really high. If the page viewer increase largely, then I can buy a VPS. Plus VPS can support build a VPN.</p>\n<p>In the process learned and practiced lots of tools:</p>\n<ul>\n<li>Github</li>\n<li>Hexo</li>\n<li>Terminal</li>\n<li>Vim</li>\n<li>Markdown</li>\n</ul>\n<p>Mostly Google is better than Baidu, when I search tech-related, especially in english.</p>\n"},{"title":"最近5点钟起床","url":"/2015/08/01/Why-I-get-up-at-5-o-clock/","content":"<blockquote>\n<p>sunshine of 5 o’clock</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/5369602ejw1eumnv1opobj22io1w0b29.jpg\" alt=\"early morining\"></p>\n<p>最近5点钟起床，可能昨天是1点钟睡的（哦不对，是今天），可能中午会补一觉回来。这里绝不是学习科技公司的 CEO，必须早上起来处理完事情，员工才能上班按计划做事。而是因为学习 iOS 的激情和自我的压力。希望不会想初中高中那会，累的白了头，毕竟现在还是稍微完善了自我管理和娱乐方式也多了。</p>\n<h2 id=\"学习的激情\"><a href=\"#学习的激情\" class=\"headerlink\" title=\"学习的激情\"></a>学习的激情</h2><p>接触 iOS 可能有2年了，自学开发断断续续也有1年了。问题来了之前没有激情吗？答案是我只是停留在用户角度喜欢苹果的设计的美感和简介，优雅是苹果追求的，但是只有少数产品实现了。另外闭门造车太难了，根据学习本来是就社交属性的，联系到<a href=\"http://www.douban.com/note/344117673/\">学习金字塔理论</a>，培训和参加社区，才能找到开发的乐趣。包括认识很多不同的人，有趣的人，又或者精神导师之类，可以讨论问题、新的技术或新的产品。这一切都是<a href=\"http://simpleprogrammer.com/2012/12/09/the-4-most-important-skills-for-a-software-developer/\">与人打交道</a>的。孤立起来的人，要么天才要么疯子。显然我不是前者，随意为了避免成为后者我要主动开放的心态参加社区，结交朋友。尤其最近参加了 <a href=\"http://www.meetup.com/CocoaHeads-Shanghai/\">CocoaHeads Shanghai Meetup</a>，发了很多有意思的开发者和有趣的人。还是 tinyfool 很久以前提到的 Meetup，最近想认识更多的 iOS 开发者才想起来参加的活动。</p>\n<blockquote>\n<p>We just grab a coffee and speak French. Some people have been coming every week for months… it creates a kind of warmth to the group.</p>\n</blockquote>\n<blockquote>\n<p>— Rafaël, started French Conversation Group</p>\n</blockquote>\n<p>书非借不能读也，软件非买不珍惜也。两者真心是个矛盾的东西，按照割肉理论，可能是书太便宜了，买了也是几乎零成本。最近买了些开发利器如：Duet Display、<a href=\"https://itunes.apple.com/us/app/dash-3-api-docs-snippets/id449589707\">Dash 3</a>，还有免费的 Alcatraz、FuzzyAutocomplete、<a href=\"https://github.com/danielgindi/ios-charts\">iOS Charts</a> 等等。也让我很是着迷之中。</p>\n<p>最近一周学习到很多知识，尤其学会利用 Apple iOS Documentation，这里强烈推荐 <a href=\"https://itunes.apple.com/us/app/dash-3-api-docs-snippets/id449589707\">Dash 3</a>，可以一步打开 Documentation（学习快人一步）。而且继承了 Google 和 Stack Overflow，非常方便。还有 GeekBand 段松老师的课程也是很好的，毕竟是一线开发者，提到了很多经验和工作中常用的方法和知识点。学会看文档掌握了主动权，可以练习和实战课程没有提到的点，练习也是非常重要的学习方法。以前也看了借本书和视频教程，但是很快就忘记了，究其原因不过是似懂非懂的了解一下，还是不会实际开发。正所谓听了很多道理，依然过不好这一生。没有去实践，就是过了听瘾，如同看电影肥皂剧一样。别人的道理又怎么会改变你的人生？</p>\n<h2 id=\"自我压力\"><a href=\"#自我压力\" class=\"headerlink\" title=\"自我压力\"></a>自我压力</h2><p>本来想说是自我管理，生活的动力往往来自压力或激情。尤其是最近读了一篇文章：<a href=\"http://www.douban.com/group/topic/78105857/\">不和穷人谈恋爱？</a>，简直是是醍醐灌顶。本非简单地说你穷，不愿理你，而是说你甘愿做一个穷人这就有问题。我再也不愿逃避我现阶段失败的状态。直接导致我每天5点钟自然醒，因为压力，因为我要改变自己。</p>\n<blockquote>\n<p>我说你说的就跟穷人有罪似的。她说对啊，穷人就是有罪。然后她看着夜空说，“你不觉得现在这个社会，年轻人很难穷吗？真的只要稍微学点什么，用点脑子，对生活稍微用力一点，就可以养活自己。在这个时代，还坚持穷下去的人他绝对不是简单的穷的问题了，一定是他性格或者人品上有什么缺陷和问题，才导致他穷。你不要小看穷，也不用动不动掏出你一颗圣母心来疼爱万物，我再说一遍，在这个时代一个人穷说明他自身有着很大的问题。” </p>\n</blockquote>\n<blockquote>\n<p>“尤其男人，穷就判定了这个人没有责任心，也没有任何人脉，换句话说没有人脉就是不会看人，不会交朋友。你肯定又要跟我扯阶级，说一个人也必须拥有差不多的实力，才能跻身比自己高一个级别的圈子。但是就算门口烤白薯的人特别好，特别会做人，他也能交到几个朋友愿意帮他的。这是一个人情商问题，没有朋友愿意帮他，第一说明他情商低，第二说明这个人人品有问题，第三，正常人都有社交，一个人没对象很正常，要是一个朋友都没有，那你不用跟我争，这人就是有问题。” </p>\n</blockquote>\n<h3 id=\"矫情一下😸：\"><a href=\"#矫情一下😸：\" class=\"headerlink\" title=\"矫情一下😸：\"></a>矫情一下😸：</h3><h3 id=\"从明天起，做一个有趣的人\"><a href=\"#从明天起，做一个有趣的人\" class=\"headerlink\" title=\"从明天起，做一个有趣的人\"></a>从明天起，做一个有趣的人</h3><h3 id=\"学习，吃饭，周游世界\"><a href=\"#学习，吃饭，周游世界\" class=\"headerlink\" title=\"学习，吃饭，周游世界\"></a>学习，吃饭，周游世界</h3>"},{"title":"辞职参加博览网 iOS 极客班","url":"/2015/07/16/Why-I-quit-my-job/","content":"<p>上个星期五正式从公司离职，做了一年整。为什么辞职不做 IT 技术支持，一个原因工资太低。</p>\n<p>记得当初进公司是在家自学了3个月 iOS 无果，准备一边上班一边继续自学，现在看来多么傻的一个决定，既然不想做 IT 技术支持，就不要做。因为实际上很累，一天下来，偶尔还要加班，完全没有精力晚上在学习。当然只是一部分原因，最主要的阻碍是我自律很差，完全不适合自学。早早的应该3年前和老爸去咨询 IT 开发培训的时候，就该入学的。也不至于毕业3年，一事无成。</p>\n<p>最近几天我在浦东图书馆学习，效率很高，完全能够投入其中。报了博览网的 <a href=\"http://boolan.com/geekband/2\">iOS 极客班</a>，希望能够<strong>一反面改变我自己：提高自我管理能力，另一方面也能得到系统的学习和大神的指导。</strong></p>\n<p>选择极客班不仅仅是价格比传统线下培训学校便宜，主要看中老师都是一线的大牛。最初最初也是通过<a href=\"http://weibo.com/tinyfool\">@tinyfool</a> 老师了解到极客班，相信性情中人不会错。期待周末开班，当然还有顺利结业并找到 iOS 的工作。</p>\n"},{"title":"Windows 进阶的学习方法－笔记","url":"/2015/06/20/Windows-Advanced-Learning-Methods/","content":"<p><a href=\"http://boolan.com/course/section/1000001152\">Windows 进阶的学习方法</a>是<a href=\"http://boolan.com/\">博览网</a>的<a href=\"http://boolan.com/course/20\">Windows专家管理与排错</a>第一讲，讲师彭爱华，其中关于学习方法，尤其是少下载，贪多嚼不烂，击中我要害。虽然讲的是 Windows，但方法还是通用的，以下为学习笔记。</p>\n<p>##良好的学习习惯</p>\n<ul>\n<li>养成阅读英文资料的习惯</li>\n<li><strong>少下载</strong>、勤阅读、多动手</li>\n<li>知识的整理，善于写博客，多分享</li>\n<li>基础知识要扎实，平台和核心领域知识</li>\n</ul>\n<p>##关于提问</p>\n<ul>\n<li>必须经过仔细思考，才提问，切忌不动脑子</li>\n<li>提问不是为了解决眼前问题，而是获得启发</li>\n<li>好的问题时带有启发性的，衍生性的</li>\n<li>能否整理经典的问题，沉淀下来？（写博客）</li>\n</ul>\n<p>##常见弊病</p>\n<ul>\n<li>盲目的跟风式学习</li>\n<li>吃着碗里，想着锅里</li>\n<li>理论不联系实际</li>\n<li>不能高效利用资源</li>\n</ul>\n"},{"title":"禅与 Objective-C 编程艺术 - 笔记","url":"/2015/08/11/Zen-and-the-Art-of-the-Objective-C-Craftsmanship/","content":"<p><strong>转发整理一些我认为值得学习的小节。</strong></p>\n<p>-原文 <a href=\"https://github.com/objc-zen/objc-zen-book\">https://github.com/objc-zen/objc-zen-book</a></p>\n<p>-Gitbook 链接(包含 PDF, mobi, epub 格式): <a href=\"http://yourtion.gitbooks.io/objc-zen-book-cn/\">http://yourtion.gitbooks.io/objc-zen-book-cn/</a> (感谢 <a href=\"https://github.com/yourtion\">yourtion</a> 整理 )</p>\n<h2 id=\"nil-和-BOOL-检查\"><a href=\"#nil-和-BOOL-检查\" class=\"headerlink\" title=\"nil 和 BOOL 检查\"></a>nil 和 BOOL 检查</h2><p>类似于 Yoda 表达式，nil 检查的方式也是存在争议的。一些 notous 库像这样检查对象是否为 nil：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (nil == myValue) &#123; ...</span><br></pre></td></tr></table></figure>\n\n<p>或许有人会提出这是错的，因为在 nil 作为一个常量的情况下，这样做就像 Yoda 表达式了。 但是一些程序员这么做的原因是为了避免调试的困难，看下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (myValue == nil) &#123; ...</span><br></pre></td></tr></table></figure>\n\n<p>如果程序员敲错成这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (myValue = nil) &#123; ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是合法的语句，但是即使你是一个丰富经验的程序员，即使盯着眼睛瞧上好多遍也很难调试出错误。但是如果把 nil 放在左边，因为它不能被赋值，所以就不会发生这样的错误。 如果程序员这样做，他&#x2F;她就可以轻松检查出可能的原因，比一遍遍检查敲下的代码要好很多。</p>\n<p>为了避免这些奇怪的问题，可以用感叹号来作为运算符。因为 nil 是 解释到 NO，所以没必要在条件语句里面把它和其他值比较。同时，不要直接把它和 <code>YES</code> 比较，因为 <code>YES</code> 的定义是 1， 而 <code>BOOL</code> 是 8 bit的，实际上是 char 类型。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (someObject) &#123; ...</span><br><span class=\"line\">if (![someObject boolValue]) &#123; ...</span><br><span class=\"line\">if (!someObject) &#123; ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (someObject == YES) &#123; ... // Wrong</span><br><span class=\"line\">if (myRawValue == YES) &#123; ... // Never do this.</span><br><span class=\"line\">if ([someObject boolValue] == NO) &#123; ...</span><br></pre></td></tr></table></figure>\n\n<p>同时这样也能提高一致性，以及提升可读性。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"黄金大道\"><a href=\"#黄金大道\" class=\"headerlink\" title=\"黄金大道\"></a>黄金大道</h2><p>在使用条件语句编程时，代码的左边距应该是一条“黄金”或者“快乐”的大道。 也就是说，不要嵌套 <code>if</code> 语句。使用多个 return 可以避免增加循环的复杂度，并提高代码的可读性。因为方法的重要部分没有嵌套在分支里面，并且你可以很清楚地找到相关的代码。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)someMethod &#123;</span><br><span class=\"line\">  if (![someOther boolValue]) &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Do something important</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)someMethod &#123;</span><br><span class=\"line\">  if ([someOther boolValue]) &#123;</span><br><span class=\"line\">    //Do something important</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂的表达式\"><a href=\"#复杂的表达式\" class=\"headerlink\" title=\"复杂的表达式\"></a>复杂的表达式</h2><p>当你有一个复杂的 if 子句的时候，你应该把它们提取出来赋给一个 BOOL 变量，这样可以让逻辑更清楚，而且让每个子句的意义体现出来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL nameContainsSwift  = [sessionName containsString:@&quot;Swift&quot;];</span><br><span class=\"line\">BOOL isCurrentYear      = [sessionDateCompontents year] == 2014;</span><br><span class=\"line\">BOOL isSwiftSession     = nameContainsSwift &amp;&amp; isCurrentYear;</span><br><span class=\"line\"></span><br><span class=\"line\">if (isSwiftSession) &#123;</span><br><span class=\"line\">    // Do something very cool</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Case语句\"><a href=\"#Case语句\" class=\"headerlink\" title=\"Case语句\"></a>Case语句</h1><p>除非编译器强制要求，括号在 case 语句里面是不必要的。但是当一个 case 包含了多行语句的时候，需要加上括号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch (condition) &#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 2: &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        // Multi-line example using braces</span><br><span class=\"line\">        break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    case 3:</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    default: </span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>有时候可以使用 fall-through 在不同的 case 里面执行同一段代码。一个 fall-through  是指移除 case 语句的 “break” 然后让下面的 case 继续执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch (condition) &#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">        // code executed for values 1 and 2</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    default: </span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当在 switch 语句里面使用一个可枚举的变量的时候，<code>default</code> 是不必要的。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">switch (menuType) &#123;</span><br><span class=\"line\">    case ZOCEnumNone:</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case ZOCEnumValue1:</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case ZOCEnumValue2:</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此外，为了避免使用默认的 case，如果新的值加入到 enum，程序员会马上收到一个 warning 通知</p>\n<p><code>Enumeration value &#39;ZOCEnumValue3&#39; not handled in switch.（枚举类型 &#39;ZOCEnumValue3&#39; 没有被 switch 处理）</code></p>\n<h3 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h3><p>当使用 <code>enum</code> 的时候，建议使用新的固定的基础类型定义，因它有更强大的的类型检查和代码补全。 SDK 现在有一个 宏来鼓励和促进使用固定类型定义 - <code>NS_ENUM()</code></p>\n<p><strong>例子:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef NS_ENUM(NSUInteger, ZOCMachineState) &#123;</span><br><span class=\"line\">    ZOCMachineStateNone,</span><br><span class=\"line\">    ZOCMachineStateIdle,</span><br><span class=\"line\">    ZOCMachineStateRunning,</span><br><span class=\"line\">    ZOCMachineStatePaused</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><h2 id=\"通用的约定\"><a href=\"#通用的约定\" class=\"headerlink\" title=\"通用的约定\"></a>通用的约定</h2><p>尽可能遵守 Apple 的命名约定，尤其是和 <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html\">内存管理规则</a> (<a href=\"http://stackoverflow.com/a/2865194/340508\">NARC</a>) 相关的地方。</p>\n<p>推荐使用长的、描述性的方法和变量名。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UIButton *settingsButton;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UIButton *setBut;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>常量应该以驼峰法命名，并以相关类名作为前缀。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">static const NSTimeInterval ZOCSignInViewControllerFadeOutAnimationDuration = 0.4;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">static const NSTimeInterval fadeOutTime = 0.4;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用常量来代替字符串字面值和数字，这样能够方便复用，而且可以快速修改而不需要查找和替换。常量应该用 <code>static</code> 声明为静态常量，而不要用 <code>#define</code>，除非它明确的作为一个宏来使用。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">static NSString * const ZOCCacheControllerDidClearCacheNotification = @&quot;ZOCCacheControllerDidClearCacheNotification&quot;;</span><br><span class=\"line\">static const CGFloat ZOCImageThumbnailHeight = 50.0f;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#define CompanyName @&quot;Apple Inc.&quot;</span><br><span class=\"line\">#define magicNumber 42</span><br></pre></td></tr></table></figure>\n\n<p>常量应该在头文件中以这样的形式暴露给外部：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">extern NSString *const ZOCCacheControllerDidClearCacheNotification;</span><br></pre></td></tr></table></figure>\n\n<p>并在实现文件中为它赋值。</p>\n<p>只有公有的常量才需要添加命名空间作为前缀。尽管实现文件中私有常量的命名可以遵循另外一种模式，你仍旧可以遵循这个规则。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>方法名与方法类型 (<code>-</code>&#x2F;<code>+</code> 符号)之间应该以空格间隔。方法段之间也应该以空格间隔（以符合 Apple 风格）。参数前应该总是有一个描述性的关键词。</p>\n<p>尽可能少用 “and” 这个词。它不应该用来阐明有多个参数，比如下面的 <code>initWithWidth:height:</code> 这个例子：</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)setExampleText:(NSString *)text image:(UIImage *)image;</span><br><span class=\"line\">- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;</span><br><span class=\"line\">- (id)viewWithTag:(NSInteger)tag;</span><br><span class=\"line\">- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)setT:(NSString *)text i:(UIImage *)image;</span><br><span class=\"line\">- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;</span><br><span class=\"line\">- (id)taggedView:(NSInteger)tag;</span><br><span class=\"line\">- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;</span><br><span class=\"line\">- (instancetype)initWith:(int)width and:(int)height;  // Never do this.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字面值\"><a href=\"#字面值\" class=\"headerlink\" title=\"字面值\"></a>字面值</h2><p><code>NSString</code>, <code>NSDictionary</code>, <code>NSArray</code>, 和 <code>NSNumber</code> 字面值应该用在任何创建不可变的实例对象。特别小心不要把 <code>nil</code> 放进 <code>NSArray</code> 和 <code>NSDictionary</code> 里，这会导致崩溃</p>\n<p><strong>例子：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSArray *names = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;];</span><br><span class=\"line\">NSDictionary *productManagers = @&#123;@&quot;iPhone&quot; : @&quot;Kate&quot;, @&quot;iPad&quot; : @&quot;Kamal&quot;, @&quot;Mobile Web&quot; : @&quot;Bill&quot;&#125;;</span><br><span class=\"line\">NSNumber *shouldUseLiterals = @YES;</span><br><span class=\"line\">NSNumber *buildingZIPCode = @10018;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要这样做:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class=\"line\">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];</span><br><span class=\"line\">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];</span><br><span class=\"line\">NSNumber *buildingZIPCode = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>对于那些可变的副本，我们推荐使用明确的如 <code>NSMutableArray</code>, <code>NSMutableString</code> 这些类。</p>\n<p>下面的例子<strong>应该被避免</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSMutableArray *aMutableArray = [@[] mutableCopy];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面的书写方式存在效率以及可读性的问题。效率方面，一个不必要的不可变变量被创建，并且马上被废弃了；这并不会让你的 App 变得更慢（除非这个方法会被很频繁地调用），但是确实没必要为了少打几个字而这样做。对于可读性来说，存在两个问题：第一个是当浏览代码并且看见 <code>@[]</code> 的时候你的脑海里马上会联系到 <code>NSArray</code> 的实例，但是在这种情形下你需要停下来思考下。另一个方面，一些新手看到后可能会对可变和不可变对象的分歧感到不舒服。他&#x2F;她可能对创造一个可变对象的副本不是很熟悉（当然这并不是说这个知识不重要）。当然，这并不是说存在绝对的错误，只是可用性（包括可读性)有一些问题。</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"类名\"><a href=\"#类名\" class=\"headerlink\" title=\"类名\"></a>类名</h2><p>类名应加上<strong>三</strong>个大写字母作为前缀（两个字母的为 Apple 的类保留）。虽然这个规范看起来难看，但是这样做可以减少 Objective-c 没有命名空间所带来的问题。</p>\n<p>一些开发者在定义 Model 对象时并不遵循这个规范（对于 Core Data 对象，我们更应该遵循这个规范）。我们建议在定义 Core Data 对象时严格遵循这个约定，因为你最后可能把你的 Managed Object Model （托管对象）合并到其他（第三方库）的 Managed Object Model 。</p>\n<p>你可能注意到了，这本书里的类的前缀（其实不仅仅是类）是<code>ZOC</code>。</p>\n<p>另一个类的命名规范：当你创建一个子类的时候，你应该把说明性的部分放在前缀和父类名的在中间。举个例子：如果你有一个 <code>ZOCNetworkClient</code> 类，子类的名字会是<code>ZOCTwitterNetworkClient</code> (注意 “Twitter” 在 “ZOC” 和 “NetworkClient” 之间); 按照这个约定， 一个<code>UIViewController</code> 的子类会是 <code>ZOCTimelineViewController</code>.</p>\n<h2 id=\"Initializer-和-dealloc\"><a href=\"#Initializer-和-dealloc\" class=\"headerlink\" title=\"Initializer 和 dealloc\"></a>Initializer 和 dealloc</h2><p>推荐的代码组织方式：将 <code>dealloc</code> 方法放在实现文件的最前面（直接在  <code>@synthesize</code> 以及 <code>@dynamic</code> 之后），<code>init</code> 应该放在 <code>dealloc</code>  之后。如果有多个初始化方法， designated initializer 应该放在第一个，secondary initializer 在之后紧随，这样逻辑性更好。</p>\n<p>如今有了 ARC，dealloc 方法几乎不需要实现，不过把 init 和 dealloc 放在一起可以从视觉上强调它们是一对的。通常，在 init 方法中做的事情需要在 dealloc 方法中撤销。</p>\n<p><code>init</code> 方法应该是这样的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (instancetype)init</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init]; // call the designated initializer</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        // Custom initialization</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>为什么设置 <code>self</code> 为 <code>[super init]</code> 的返回值，以及中间发生了什么呢？这是一个十分有趣的话题。</p>\n<p>让我们后退一步：我们一直写类似 <code>[[NSObject alloc] init]</code> 的表达式，而淡化了 <code>alloc</code> 和 <code>init</code> 的区别 。一个 Objective-C 的特性叫 <em>两步创建</em> 。 这意味着申请分配内存和初始化是两个分离的操作。</p>\n<p>-<code>alloc</code>表示对象分配内存，这个过程涉及分配足够的可用内存来保存对象，写入<code>isa</code>指针，初始化 retain 的计数，并且初始化所有实例变量。</p>\n<p>-<code>init</code> 是表示初始化对象，这意味着把对象转换到了个可用的状态。这通常是指把可用的值赋给了对象的实例变量。</p>\n<p><code>alloc</code> 方法会返回一个合法的没有初始化的实例对象。每一个发送到实例的消息会被翻译为<code>objc_msgSend()</code> 函数的调用，它的参数是指向 <code>alloc</code> 返回的对象的、名为 <code>self</code> 的指针的。这样之后 <code>self</code> 已经可以执行所有方法了。</p>\n<p>为了完成两步创建，第一个发送给新创建的实例的方法应该是约定俗成的 <code>init</code> 方法。注意在 <code>NSObject</code> 的 <code>init</code> 实现中，仅仅是返回了 <code>self</code>。</p>\n<p>关于 <code>init</code> 有一个另外的重要的约定：这个方法可以（并且应该）在不能成功完成初始化的时候返回 <code>nil</code>；初始化可能因为各种原因失败，比如一个输入的格式错误，或者未能成功初始化一个需要的对象。</p>\n<p>这样我们就理解了为什么需要总是调用  <code>self = [super init]</code>。如果你的超类没有成功初始化它自己，你必须假设你在一个矛盾的状态，并且在你的实现中不要处理你自己的初始化逻辑，同时返回 <code>nil</code>。如果你不是这样做，你看你会得到一个不能用的对象，并且它的行为是不可预测的，最终可能会导致你的 App 发生 crash。</p>\n<p>重新给 <code>self</code> 赋值同样可以被 <code>init</code> 利用为在被调用的时候返回不同的实例。一个例子是 <a href=\"#class-cluster\">类簇</a> 或者其他的返回相同的（不可变的）实例对象的 Cocoa 类。</p>\n<h3 id=\"Designated-和-Secondary-Initializers\"><a href=\"#Designated-和-Secondary-Initializers\" class=\"headerlink\" title=\"Designated 和 Secondary Initializers\"></a>Designated 和 Secondary Initializers</h3><p>Objective-C 有 designated 和 secondary 初始化方法的观念。</p>\n<p>designated 初始化方法是提供所有的参数，secondary 初始化方法是一个或多个，并且提供一个或者更多的默认参数来调用 designated 初始化方法的初始化方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCEvent</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithTitle:(NSString *)title</span><br><span class=\"line\">                         date:(NSDate *)date</span><br><span class=\"line\">                     location:(CLLocation *)location</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    self = [super init];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        _title    = title;</span><br><span class=\"line\">        _date     = date;</span><br><span class=\"line\">        _location = location;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithTitle:(NSString *)title</span><br><span class=\"line\">                         date:(NSDate *)date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [self initWithTitle:title date:date location:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithTitle:(NSString *)title</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [self initWithTitle:title date:[NSDate date] location:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>initWithTitle:date:location:</code> 就是 designated 初始化方法，另外的两个是 secondary 初始化方法。因为它们仅仅是调用类实现的 designated 初始化方法</p>\n<h4 id=\"Designated-Initializer\"><a href=\"#Designated-Initializer\" class=\"headerlink\" title=\"Designated Initializer\"></a>Designated Initializer</h4><p>一个类应该又且只有一个 designated 初始化方法，其他的初始化方法应该调用这个 designated 的初始化方法（虽然这个情况有一个例外）</p>\n<p>这个分歧没有要求那个初始化函数需要被调用。</p>\n<p>在类继承中调用任何 designated 初始化方法都是合法的，而且应该保证 <em>所有的</em> designated initializer 在类继承中是是从祖先（通常是  <code>NSObject</code>）到你的类向下调用的。</p>\n<p>实际上这意味着第一个执行的初始化代码是最远的祖先，然后从顶向下的类继承，所有类都有机会执行他们特定的初始化代码。这样，你在你做你的特定的初始化工作前，所有你从超类继承的东西是不可用的状态。即使它的状态不明确，所有 Apple 的框架的 Framework 是保证遵守这个约定的，而且你的类也应该这样做。</p>\n<p>当定义一个新类的时候有三个不同的方式：</p>\n<p>第一个方案是最简单的：你不需要增加类的任何初始化逻辑，只需要依照父类的designated initializer。</p>\n<p>当你希望提供额外的初始化逻辑的时候，你可以重载 designated initializer。你只需要重载你的直接的超类的 designated initializer 并且确认你的实现调用了超类的方法。</p>\n<p>你一个典型的例子是你创造<code>UIViewController</code>子类的时候重载</p>\n<p><code>initWithNibName:bundle:</code>方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // call to the superclass designated initializer</span><br><span class=\"line\">    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        // Custom initialization （自定义的初始化过程）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>UIViewController</code>  子类的例子里面如果重载  <code>init</code> 会是一个错误，这个情况下调用者会尝试调用 <code>initWithNib:bundle</code> 初始化你的类，你的类实现不会被调用。着同样违背了它应该是合法调用任何 designated initializer 的规则。</p>\n<p><strong>在你希望提供你自己的初始化函数的时候，你应该遵守这三个步骤来保证正确的性：</strong></p>\n<p>很多开发者忽略了后两步，这不仅仅是一个粗心的问题，而且这样违反了框架的规则，而且可能导致不确定的行为和bug。</p>\n<p>让我们看看正确的实现的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCNewsViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithNews:(ZOCNews *)news</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // call to the immediate superclass&#x27;s designated initializer （调用直接超类的 designated initializer）</span><br><span class=\"line\">    self = [super initWithNibName:nil bundle:nil];</span><br><span class=\"line\">    if (self) &#123;</span><br><span class=\"line\">        _news = news;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Override the immediate superclass&#x27;s designated initializer （重载直接父类的  designated initializer）</span><br><span class=\"line\">- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // call the new designated initializer</span><br><span class=\"line\">    return [self initWithNews:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你没重载 <code>initWithNibName:bundle:</code> ，而且调用者决定用这个方法初始化你的类(这是完全合法的)。 <code>initWithNews:</code> 永远不会被调用，所以导致了不正确的初始化流程，你的类特定的初始化逻辑没有被执行。</p>\n<p>即使可以推断那个方法是 designate initializer，也最好清晰地明确它（未来的你或者其他开发者在改代码的时候会感谢你的）。你应该考虑来用这两个策略（不是互斥的）：第一个是你在文档中明确哪一个初始化方法是 designated 的，你可以用编译器的指令 <code>__attribute__((objc_designated_initializer))</code>  来标记你的意图。</p>\n<p>用这个编译指令的时候，编译器会来帮你。如果你的新的 designate initializer 没有调用你超类的 designated initializer，那么编译器会发出警告。</p>\n<p>然而，当没有调用类的  designated initializer 的时候（并且依次提供必要的参数），并且调用其他父类中的 designated initialize 的时候，会变成一个不可用的状态。参考之前的例子，当实例化一个 <code>ZOCNewsViewController</code>  展示一个新闻而那条新闻没有展示的话，就会毫无意义。这个情况下你应该只需要让其他的 designated initializer 失效，来强制调用一个非常特别的 designated initializer。通过使用另外一个编译器指令  <code>__attribute__((unavailable(&quot;Invoke the designated initializer&quot;))) </code> 来修饰一个方法，通过这个属性，会让你在试图调用这个方法的时候产生一个编译错误。</p>\n<p>这是之前的例子相关的实现的头文件(这里使用宏来让代码没有那么啰嗦)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface ZOCNewsViewController : UIViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithNews:(ZOCNews *)news ZOC_DESIGNATED_INITIALIZER;</span><br><span class=\"line\">- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil ZOC_UNAVAILABLE_INSTEAD(initWithNews:);</span><br><span class=\"line\">- (instancetype)init ZOC_UNAVAILABLE_INSTEAD(initWithNews:);</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上述的一个推论是：你应该永远不从 designated initializer 里面调用一个 secondary initializer （如果secondary initializer 遵守约定，它会调用 designated initializer）。如果这样，调用很可能会调用一个子类重写的 init 方法并且陷入无限递归之中。</p>\n<p>不过一个例外是一个对象是否遵守 <code>NSCoding</code> 协议，并且它通过方法 <code>initWithCoder:</code> 初始化。</p>\n<p>我们应该看超类是否符合 <code>NSCoding</code> 协议来区别对待。</p>\n<p>如果符合，如果你只是调用 <code>[super initWithCoder:]</code> ，你会可能有一个共享的初始化代码在 designated initializer 里面，一个好的方法是把这些代码放在私有方法里面(比如  <code>p_commonInit</code> )。</p>\n<p>当你的超类不符合<code>NSCoding</code> 协议的时候，推荐把 <code>initWithCoder:</code> 作为 secondary initializer 来对待，并且调用 <code>self</code> 的 designated initializer。 注意这是违反 Apple 的 <a href=\"https://developer.apple.com/library/mac/documentation/cocoa/Conceptual/Archiving/Articles/codingobjects.html#//apple_ref/doc/uid/20000948-BCIHBJDE\">Archives and Serializations Programming Guide</a>  上面写的：</p>\n<blockquote>\n<p>the object should first invoke its superclass’s designated initializer to initialize inherited state （对象总是应该首先调用超类的 designated initializer  来初始化继承的状态）</p>\n</blockquote>\n<p>如果你的类不是  <code>NSObject</code> 的直接子类，这样做的话，会导致不可预测的行为。</p>\n<h4 id=\"Secondary-Initializer\"><a href=\"#Secondary-Initializer\" class=\"headerlink\" title=\"Secondary Initializer\"></a>Secondary Initializer</h4><p>正如之前的描述，secondary initializer 是一种提供默认值、行为到 designated initializer的方法。也就是说，在这样的方法里面你不应该有初始化实例变量的操作，并且你应该一直假设这个方法不会得到调用。我们保证的是唯一被调用的方法是 designated initializer。</p>\n<p>这意味着你的 secondary initializer 总是应该调用 Designated initializer  或者你自定义(上面的第三种情况：自定义Designated initializer)的 <code>self</code>的 designated initializer。有时候，因为错误，可能打成了  <code>super</code>，这样会导致不符合上面提及的初始化顺序（在这个特别的例子里面，是跳过当前类的初始化）</p>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p>-<a href=\"https://developer.apple.com/library/ios/Documentation/General/Conceptual/DevPedia-CocoaCore/ObjectCreation.html\">https://developer.apple.com/library/ios/Documentation/General/Conceptual/DevPedia-CocoaCore/ObjectCreation.html</a></p>\n<p>-<a href=\"https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html\">https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html</a></p>\n<p>-<a href=\"https://developer.apple.com/library/ios/Documentation/General/Conceptual/DevPedia-CocoaCore/MultipleInitializers.html\">https://developer.apple.com/library/ios/Documentation/General/Conceptual/DevPedia-CocoaCore/MultipleInitializers.html</a></p>\n<p>-<a href=\"https://blog.twitter.com/2014/how-to-objective-c-initializer-patterns\">https://blog.twitter.com/2014/how-to-objective-c-initializer-patterns</a></p>\n<h3 id=\"instancetype\"><a href=\"#instancetype\" class=\"headerlink\" title=\"instancetype\"></a>instancetype</h3><p>我们经常忽略 Cocoa 充满了约定，并且这些约定可以帮助编译器变得更加聪明。无论编译器是否遭遇 <code>alloc</code> 或者 <code>init</code> 方法，他会知道，即使返回类型都是 <code>id</code> ，这些方法总是返回接受到的类类型的实例。因此，它允许编译器进行类型检查。（比如，检查方法返回的类型是否合法）。Clang的这个好处来自于 <a href=\"http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types\">related result type</a>， 意味着：</p>\n<blockquote>\n<p>messages sent to one of alloc and init methods will have the same static type as the instance of the receiver class （发送到 alloc 或者 init 方法的消息会有同样的静态类型检查是否为接受类的实例。）</p>\n</blockquote>\n<p>更多的关于这个自动定义相关返回类型的约定请查看 Clang Language Extensions guide 的<a href=\"(http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types)\">appropriate section</a> </p>\n<p>一个相关的返回类型可以明确地规定用 <code>instancetype</code> 关键字作为返回类型，并且它可以在一些工厂方法或者构造器方法的场景下很有用。它可以提示编译器正确地检查类型，并且更加重要的是，这同时适用于它的子类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ZOCPerson</span><br><span class=\"line\">+ (instancetype)personWithName:(NSString *)name;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>虽然如此，根据 clang 的定义，<code>id</code> 可以被编译器提升到 <code>instancetype</code> 。在 <code>alloc</code> 或者 <code>init</code> 中，我们强烈建议对所有返回类的实例的类方法和实例方法使用 <code>instancetype</code> 类型。</p>\n<p>在你的 API 中要构成习惯以及保持始终如一的，此外，通过对你代码的小调整你可以提高可读性：在简单的浏览的时候你可以区分哪些方法是返回你类的实例的。你以后会感谢这些注意过的小细节的。</p>\n<h5 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p>-<a href=\"http://tewha.net/2013/02/why-you-should-use-instancetype-instead-of-id/\">http://tewha.net/2013/02/why-you-should-use-instancetype-instead-of-id/</a></p>\n<p>-<a href=\"http://tewha.net/2013/01/when-is-id-promoted-to-instancetype/\">http://tewha.net/2013/01/when-is-id-promoted-to-instancetype/</a></p>\n<p>-<a href=\"http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types\">http://clang.llvm.org/docs/LanguageExtensions.html#related-result-types</a></p>\n<p>-<a href=\"http://nshipster.com/instancetype/\">http://nshipster.com/instancetype/</a></p>\n<hr>\n<h3 id=\"初始化模式\"><a href=\"#初始化模式\" class=\"headerlink\" title=\"初始化模式\"></a>初始化模式</h3><h4 id=\"类簇-（class-cluster\"><a href=\"#类簇-（class-cluster\" class=\"headerlink\" title=\"类簇 （class cluster)\"></a>类簇 （class cluster)</h4><p>类簇在Apple的文档中这样描述：</p>\n<blockquote>\n<p>an architecture that groups a number of private, concrete subclasses under a public, abstract superclass. （一个在共有的抽象超类下设置一组私有子类的架构）</p>\n</blockquote>\n<p>如果这个描述听起来很熟悉，说明你的直觉是对的。 Class cluster 是 Apple 对<a href=\"http://en.wikipedia.org/wiki/Abstract_factory_pattern\">抽象工厂</a>设计模式的称呼。</p>\n<p>class cluster 的想法很简单: 使用信息进行(类的)初始化处理期间，会使用一个抽象类（通常作为初始化方法的参数或者判定环境的可用性参数）来完成特定的逻辑或者实例化一个具体的子类。而这个”Public Facing（面向公众的）”类，必须非常清楚他的私有子类，以便在面对具体任务的时候有能力返回一个恰当的私有子类实例。对调用者来说只需知道对象的各种API的作用即可。这个模式隐藏了他背后复杂的初始化逻辑，调用者也不需要关心背后的实现。</p>\n<p>Class clusters 在 Apple 的Framework 中广泛使用：一些明显的例子比如  <code>NSNumber</code> 可以返回不同类型给你的子类，取决于 数字类型如何提供  (Integer, Float, etc…) 或者 <code>NSArray</code> 返回不同的最优存储策略的子类。</p>\n<p>这个模式的精妙的地方在于，调用者可以完全不管子类，事实上，这可以用在设计一个库，可以用来交换实际的返回的类，而不用去管相关的细节，因为它们都遵从抽象超类的方法。</p>\n<p>我们的经验是使用类簇可以帮助移除很多条件语句。</p>\n<p>一个经典的例子是如果你有为 iPad 和 iPhone 写的一样的 UIViewController 子类，但是在不同的设备上有不同的行为。</p>\n<p>比较基础的实现是用条件语句检查设备，然后执行不同的逻辑。虽然刚开始可能不错，但是随着代码的增长，运行逻辑也会趋于复杂。</p>\n<p>一个更好的实现的设计是创建一个抽象而且宽泛的 view controller 来包含所有的共享逻辑，并且对于不同设备有两个特别的子例。</p>\n<p>通用的 view controller  会检查当前设备并且返回适当的子类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCKintsugiPhotoViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithPhotos:(NSArray *)photos</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ([self isMemberOfClass:ZOCKintsugiPhotoViewController.class]) &#123;</span><br><span class=\"line\">        self = nil;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ([UIDevice isPad]) &#123;</span><br><span class=\"line\">            self = [[ZOCKintsugiPhotoViewController_iPad alloc] initWithPhotos:photos];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return [super initWithNibName:nil bundle:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个子例程展示了如何创建一个类簇。</p>\n<blockquote>\n<p>NOTE: 这里的意思是，代码是在iPhone上调试的，程序员使用了<code>self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];</code>来初始化某个view controller的对象，当代码运行在iPad上时，这个初始化过程也是正确的，因为无论程序员的代码中使用<code>self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];</code>来初始化viewController(iPhone上编写运行在iPad上)，还是使用<code>self = [[ZOCKintsugiPhotoViewController_iPad alloc] initWithPhotos:photos];</code>来初始化viewController(iPad上编写，运行在iPhone上)，都会因为ZOCKintsugiPhotoViewController的<code>initWithPhotos:</code>方法的存在而变得通用起来。</p>\n</blockquote>\n<h4 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h4><p>如果可能，请尽量避免使用单例而是依赖注入。</p>\n<p>然而，如果一定要用，请使用一个线程安全的模式来创建共享的实例。对于 GCD，用 <code>dispatch_once()</code> 函数就可以咯。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ (instancetype)sharedInstance</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   static id sharedInstance = nil;</span><br><span class=\"line\">   static dispatch_once_t onceToken = 0;</span><br><span class=\"line\">   dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">      sharedInstance = [[self alloc] init];</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   return sharedInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 dispatch_once()，来控制代码同步，取代了原来的约定俗成的用法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ (instancetype)sharedInstance</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static id sharedInstance;</span><br><span class=\"line\">    @synchronized(self) &#123;</span><br><span class=\"line\">        if (sharedInstance == nil) &#123;</span><br><span class=\"line\">            sharedInstance = [[MyClass alloc] init];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sharedInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> <code>dispatch_once()</code>  的优点是，它更快，而且语法上更干净，因为dispatch_once()的意思就是 “把一些东西执行一次”，就像我们做的一样。 这样同时可以避免 <a href=\"http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html\">possible and sometimes prolific crashes</a>.</p>\n<p>经典的单例对象是：一个设备的GPS以及它的加速度传感器(也称动作感应器)。</p>\n<p>虽然单例对象可以子类化，但这种方式能够有用的情况非常少见。</p>\n<p>必须有证据表明，给定类的接口趋向于作为单例来使用。</p>\n<p>所以，单例通常公开一个<code>sharedInstance</code>的类方法就已经足够了，没有任何的可写属性需要被暴露出来。</p>\n<p>尝试着把单例作为一个对象的容器，在代码或者应用层面上共享，是一个糟糕和丑陋的设计。</p>\n<blockquote>\n<p>NOTE：单例模式应该运用于类及类的接口趋向于作为单例来使用的情况 （译者注）</p>\n</blockquote>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>属性应该尽可能描述性地命名，避免缩写，并且是小写字母开头的驼峰命名。我们的工具可以很方便地帮我们自动补全所有东西（嗯。。几乎所有的，Xcode 的Derived Data 会索引这些命名）。所以没理由少打几个字符了，并且最好尽可能在你源码里表达更多东西。</p>\n<p><strong>例子 :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSString *text;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要这样 :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSString* text;</span><br><span class=\"line\">NSString * text;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>（注意：这个习惯和常量不同，这是主要从常用和可读性考虑。 C++ 的开发者偏好从变量名中分离类型，作为类型它应该是</p>\n<p><code>NSString*</code> （对于从堆中分配的对象，对于C++是能从栈上分配的）格式。）</p>\n<p>使用属性的自动同步 (synthesize) 而不是手动的  <code>@synthesize</code> 语句，除非你的属性是 protocol 的一部分而不是一个完整的类。如果 Xcode 可以自动同步这些变量，就让它来做吧。否则只会让你抛开 Xcode 的优点，维护更冗长的代码。</p>\n<p>你应该总是使用 setter 和 getter 方法访问属性，除了 <code>init</code> 和 <code>dealloc</code> 方法。通常，使用属性让你增加了在当前作用域之外的代码块的可能所以可能带来更多副作用。</p>\n<p>你总应该用 getter 和 setter ，因为：</p>\n<p>-使用  setter 会遵守定义的内存管理语义(<code>strong</code>, <code>weak</code>, <code>copy</code> etc…) ，这个在 ARC 之前就是相关的内容。举个例子，<code>copy</code> 属性定义了每个时候你用 setter 并且传送数据的时候，它会复制数据而不用额外的操作。</p>\n<p>-KVO 通知(<code>willChangeValueForKey</code>, <code>didChangeValueForKey</code>) 会被自动执行。</p>\n<p>-更容易debug：你可以设置一个断点在属性声明上并且断点会在每次 getter &#x2F; setter 方法调用的时候执行，或者你可以在自己的自定义 setter&#x2F;getter 设置断点。</p>\n<p>-允许在一个单独的地方为设置值添加额外的逻辑。</p>\n<p>你应该倾向于用 getter：</p>\n<p>-它是对未来的变化有扩展能力的（比如，属性是自动生成的）。</p>\n<p>-它允许子类化。</p>\n<p>-更简单的debug（比如，允许拿出一个断点在 getter 方法里面，并且看谁访问了特别的 getter</p>\n<p>-它让意图更加清晰和明确：通过访问 ivar <code>_anIvar</code> 你可以明确的访问 <code>self-&gt;_anIvar</code>.这可能导致问题。在 block 里面访问 ivar （你捕捉并且 retain 了 self，即使你没有明确的看到 self 关键词）。</p>\n<p>-它自动产生KVO 通知。</p>\n<p>-在消息发送的时候增加的开销是微不足道的。更多关于新年问题的介绍你可以看 <a href=\"http://blog.bignerdranch.com/4005-should-i-use-a-property-or-an-instance-variable/\">Should I Use a Property or an Instance Variable?</a>。</p>\n<h4 id=\"Init-和-Dealloc\"><a href=\"#Init-和-Dealloc\" class=\"headerlink\" title=\"Init 和 Dealloc\"></a>Init 和 Dealloc</h4><p>有一个例外：你永远不能在 init （以及其他初始化函数）里面用 getter 和 setter 方法，并且你直接访问实例变量。事实上一个子类可以重载 setter 或者 getter 并且尝试调用其他方法，访问属性的或者 ivar 的话，他们可能没有完全初始化。记住一个对象是仅仅在 init 返回的时候，才会被认为是初始化完成到一个状态了。</p>\n<p>同样在 dealloc 方法中（在 dealloc 方法中，一个对象可以在一个 不确定的状态中）这是同样需要被注意的。</p>\n<p>-<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6\">Advanced Memory Management Programming Guide</a> under the self-explanatory section “Don’t Use Accessor Methods in Initializer Methods and dealloc”;</p>\n<p>-<a href=\"http://adcdownload.apple.com//wwdc_2012/wwdc_2012_session_pdfs/session_413__migrating_to_modern_objectivec.pdf\">Migrating to Modern Objective-C</a> at WWDC 2012 at slide 27;</p>\n<p>-in a <a href=\"https://github.com/NYTimes/objective-c-style-guide/issues/6\">pull request</a> form Dave DeLong’s.</p>\n<p>此外，在 init 中使用 setter 不会很好执行  <code>UIAppearence</code>  代理（参见  <a href=\"http://petersteinberger.com/blog/2013/uiappearance-for-custom-views/\">UIAppearance for Custom Views</a> 看更多相关信息)。</p>\n<h4 id=\"点符号\"><a href=\"#点符号\" class=\"headerlink\" title=\"点符号\"></a>点符号</h4><p><strong>当使用 setter getter 方法的时候尽量使用点符号。</strong>应该总是用点符号来访问以及设置属性。</p>\n<p><strong>例子:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">view.backgroundColor = [UIColor orangeColor];</span><br><span class=\"line\">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要这样:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[view setBackgroundColor:[UIColor orangeColor]];</span><br><span class=\"line\">UIApplication.sharedApplication.delegate;</span><br></pre></td></tr></table></figure>\n\n<p>使用点符号会让表达更加清晰并且帮助区分属性访问和方法调用</p>\n<h3 id=\"属性定义\"><a href=\"#属性定义\" class=\"headerlink\" title=\"属性定义\"></a>属性定义</h3><p>推荐按照下面的格式来定义属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@property (nonatomic, readwrite, copy) NSString *name;</span><br></pre></td></tr></table></figure>\n\n<p>属性的参数应该按照下面的顺序排列： 原子性，读写 和 内存管理。 这样做你的属性更容易修改正确，并且更好阅读。</p>\n<p>你必须使用 <code>nonatomic</code>，除非特别需要的情况。在iOS中，<code>atomic</code>带来的锁特别影响性能。</p>\n<p>属性可以存储一个代码块。为了让它存活到定义的块的结束，必须使用 <code>copy</code> （block 最早在栈里面创建，使用 <code>copy</code>让 block 拷贝到堆里面去）</p>\n<p>为了完成一个共有的 getter 和一个私有的 setter，你应该声明公开的属性为 <code>readonly</code>  并且在类扩展总重新定义通用的属性为 <code>readwrite</code> 的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface MyClass : NSObject</span><br><span class=\"line\">@property (nonatomic, readonly) NSObject *object</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface MyClass ()</span><br><span class=\"line\">@property (nonatomic, readwrite, strong) NSObject *object</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>BOOL</code> 属性的名字是描述性的，这个属性可以省略 “is” ，但是特定要在 get 访问器中指定名字，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@property (assign, getter=isEditable) BOOL editable;</span><br></pre></td></tr></table></figure>\n\n<p>文字和例子引用自 <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE\">Cocoa Naming Guidelines</a>。</p>\n<p>为了避免 <code>@synthesize</code> 的使用，在实现文件中，Xcode已经自动帮你添加了。</p>\n<h4 id=\"私有属性\"><a href=\"#私有属性\" class=\"headerlink\" title=\"私有属性\"></a>私有属性</h4><p>私有属性应该在类实现文件的类拓展（class extensions，没有名字的 categories 中）中。有名字的 categories（如果 <code>ZOCPrivate</code>）不应该使用，除非拓展另外的类。</p>\n<p><strong>例子:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ZOCViewController ()</span><br><span class=\"line\">@property (nonatomic, strong) UIView *bannerView;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可变对象\"><a href=\"#可变对象\" class=\"headerlink\" title=\"可变对象\"></a>可变对象</h3><p>任何可以用来用一个可变的对象设置的（(比如 <code>NSString</code>,<code>NSArray</code>,<code>NSURLRequest</code>)）属性的的内存管理类型必须是 <code>copy</code> 的。</p>\n<p>这个是用来确保包装，并且在对象不知道的情况下避免改变值。</p>\n<p>你应该同时避免暴露在公开的接口中可变的对象，因为这允许你的类的使用者改变你自己的内部表示并且破坏了封装。你可以提供可以只读的属性来返回你对象的不可变的副本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* .h */</span><br><span class=\"line\">@property (nonatomic, readonly) NSArray *elements</span><br><span class=\"line\"></span><br><span class=\"line\">/* .m */</span><br><span class=\"line\">- (NSArray *)elements &#123;</span><br><span class=\"line\">  return [self.mutableElements copy];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"懒加载（Lazy-Loading）\"><a href=\"#懒加载（Lazy-Loading）\" class=\"headerlink\" title=\"懒加载（Lazy Loading）\"></a>懒加载（Lazy Loading）</h3><p>当实例化一个对象可能耗费很多资源的，或者需要只配置一次并且有一些配置方法需要调用，而且你还不想弄乱这些方法。</p>\n<p>在这个情况下，我们可以选择使用重载属性的　getter　方法来做　lazy　实例化。通常这种操作的模板像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (NSDateFormatter *)dateFormatter &#123;</span><br><span class=\"line\">  if (!_dateFormatter) &#123;</span><br><span class=\"line\">    _dateFormatter = [[NSDateFormatter alloc] init];</span><br><span class=\"line\">        NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];</span><br><span class=\"line\">        [dateFormatter setLocale:enUSPOSIXLocale];</span><br><span class=\"line\">        [dateFormatter setDateFormat:@&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSSS&quot;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _dateFormatter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>即使这样做在某些情况下很不错，但是在实际这样做之前应当深思熟虑。事实上，这样的做法是可以避免的。下面是使用延迟实例化的争议。</p>\n<p>-getter　方法不应该有副作用。在使用 getter 方法的时候你不要想着它可能会创建一个对象或者导致副作用，事实上，如果调用 getter 方法的时候没有涉及返回的对象，编译器就会放出警告：getter 不应该产生副作用</p>\n<p>-你在第一次访问的时候改变了初始化的消耗，产生了副作用，这会让优化性能变得困难（以及测试）</p>\n<p>-这个初始化可能是不确定的：比如你期望属性第一次被一个方法访问，但是你改变了类的实现，访问器在你预期之前就得到了调用，这样可以导致问题，特别是初始化逻辑可能依赖于类的其他不同状态的时候。总的来说最好明确依赖关系。</p>\n<p>-这个行为不是 KVO 友好的。如果 getter 改变了引用，他应该通过一个  KVO 通知来通知改变。当访问 getter 的时候收到一个改变的通知很奇怪。</p>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"参数断言\"><a href=\"#参数断言\" class=\"headerlink\" title=\"参数断言\"></a>参数断言</h3><p>你的方法可能要求一些参数来满足特定的条件（比如不能为nil），在这种情况下啊最好使用 <code>NSParameterAssert()</code> 来断言条件是否成立或是抛出一个异常。</p>\n<h3 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h3><p>永远不要在你的私有方法前加上 <code>_</code> 前缀。这个前缀是 Apple 保留的。不要冒重载苹果的私有方法的险。</p>\n<h2 id=\"相等性\"><a href=\"#相等性\" class=\"headerlink\" title=\"相等性\"></a>相等性</h2><p>当你要实现相等性的时候记住这个约定：你需要同时实现<code>isEqual</code> 和 <code>hash</code>方法。如果两个对象是被<code>isEqual</code>认为相等的，它们的 <code>hash</code> 方法需要返回一样的值。但是如果  <code>hash</code> 返回一样的值，并不能确保他们相等。</p>\n<p>这个约定是因为当被存储在集合（如 <code>NSDictionary</code> 和 <code>NSSet</code> 在底层使用 hash 表数据的数据结构）的时候，如何查找这些对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCPerson</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqual:(id)object &#123;</span><br><span class=\"line\">    if (self == object) &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (![object isKindOfClass:[ZOCPerson class]]) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // check objects properties (name and birthday) for equality （检查对象属性（名字和生日）的相等性</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return propertiesMatch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return [self.name hash] ^ [self.birthday hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一定要注意 hash 方法不能返回一个常量。这是一个典型的错误并且会导致严重的问题，因为使用了这个值作为 hash 表的 key，会导致 hash 表 100%的碰撞</p>\n<p>你总是应该用 <code>isEqualTo&lt;#class-name-without-prefix#&gt;:</code> 这样的格式实现一个相等性检查方法。如果你这样做，会优先调用这个方法来避免上面的类型检查。</p>\n<p>一个完整的 isEqual 方法应该是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqual:(id)object &#123;</span><br><span class=\"line\">    if (self == object) &#123;</span><br><span class=\"line\">      return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (![object isKindOfClass:[ZOCPerson class]]) &#123;</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [self isEqualToPerson:(ZOCPerson *)object];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqualToPerson:(Person *)person &#123;</span><br><span class=\"line\">    if (!person) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL namesMatch = (!self.name &amp;&amp; !person.name) ||</span><br><span class=\"line\">                       [self.name isEqualToString:person.name];</span><br><span class=\"line\">    BOOL birthdaysMatch = (!self.birthday &amp;&amp; !person.birthday) ||</span><br><span class=\"line\">                           [self.birthday isEqualToDate:person.birthday];</span><br><span class=\"line\"></span><br><span class=\"line\">  return haveEqualNames &amp;&amp; haveEqualBirthdays;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个对象实例的 <code>hash</code> 计算结果应该是确定的。当它被加入到一个容器对象（比如 <code>NSArray</code>, <code>NSSet</code>, 或者 <code>NSDictionary</code>）的时候这是很重要的，否则行为会无法预测（所有的容器对象使用对象的 hash 来查找或者实施特别的行为，如确定唯一性）这也就是说，应该用不可变的属性来计算 hash 值，或者，最好保证对象是不可变的。</p>\n<h1 id=\"Categories\"><a href=\"#Categories\" class=\"headerlink\" title=\"Categories\"></a>Categories</h1><p>虽然我们知道这样写很丑, 但是我们应该要在我们的 category 方法前加上自己的小写前缀以及下划线，比如<code>- (id)zoc_myCategoryMethod</code>。 这种实践同样<a href=\"https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW4\">被苹果推荐</a>。</p>\n<p>这是非常必要的。因为如果在扩展的 category 或者其他 category 里面已经使用了同样的方法名，会导致不可预计的后果。实际上，实际被调用的是最后被实现的那个方法。</p>\n<p>如果想要确认你的分类方法没有覆盖其他实现的话，可以把环境变量 OBJC_PRINT_REPLACED_METHODS 设置为 YES，这样那些被取代的方法名字会打印到 Console 中。现在 LLVM 5.1  不会为此发出任何警告和错误提示，所以自己小心不要在分类中重载方法。</p>\n<p>一个好的实践是在 category 名中使用前缀。</p>\n<p>** 例子 **</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface NSDate (ZOCTimeExtensions)</span><br><span class=\"line\">- (NSString *)zoc_timeAgoShort;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>** 不要这样做 **</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface NSDate (ZOCTimeExtensions)</span><br><span class=\"line\">- (NSString *)timeAgoShort;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p>分类可以用来在头文件中定义一组功能相似的方法。这是在 Apple的 Framework 也很常见的一个实践（下面例子的取自<code>NSDate</code> 头文件）。我们也强烈建议在自己的代码中这样使用。</p>\n<p>我们的经验是，创建一组分类对以后的重构十分有帮助。一个类的接口增加的时候，可能意味着你的类做了太多事情，违背了类的单一功能原则。 </p>\n<p>之前创造的方法分组可以用来更好地进行不同功能的表示，并且把类打破在更多自我包含的组成部分里。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface NSDate : NSObject &lt;NSCopying, NSSecureCoding&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) NSTimeInterval timeIntervalSinceReferenceDate;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface NSDate (NSDateCreation)</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)date;</span><br><span class=\"line\">+ (instancetype)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;</span><br><span class=\"line\">+ (instancetype)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)ti;</span><br><span class=\"line\">+ (instancetype)dateWithTimeIntervalSince1970:(NSTimeInterval)secs;</span><br><span class=\"line\">+ (instancetype)dateWithTimeInterval:(NSTimeInterval)secsToBeAdded sinceDate:(NSDate *)date;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Protocols\"><a href=\"#Protocols\" class=\"headerlink\" title=\"Protocols\"></a>Protocols</h1><p>在 Objective-C 的世界里面经常错过的一个东西是抽象接口。接口（interface）这个词通常指一个类的 <code>.h</code> 文件，但是它在 Java 程序员眼里有另外的含义： 一系列不依赖具体实现的方法的定义。</p>\n<p>在 Objective-C 里是通过 protocol 来实现抽象接口的。因为历史原因，protocol （作为 Java 接口使用）并没有在 Objective-C 社区里面广泛使用。一个主要原因是大多数的 Apple 开发的代码没有包含它，而几乎所有的开发者都是遵从 Apple 的模式以及指南的。Apple 几乎只是在委托模式下使用 protocol。</p>\n<p>但是抽象接口的概念很强大，它计算机科学的历史中就有起源，没有理由不在 Objective-C 中使用。</p>\n<p>我们会解释 protocol 的强大力量（用作抽象接口），用具体的例子来解释：把非常糟糕的设计的架构改造为一个良好的可复用的代码。</p>\n<p>这个例子是在实现一个 RSS 订阅的阅读器（它可是经常在技术面试中作为一个测试题呢）。</p>\n<p>要求很简单明了：把一个远程的 RSS 订阅展示在一个 tableview 中。</p>\n<p>一个幼稚的方法是创建一个 <code>UITableViewController</code> 的子类，并且把所有的检索订阅数据，解析以及展示的逻辑放在一起，或者说是一个 MVC (Massive View Controller)。这可以跑起来，但是它的设计非常糟糕，不过它足够过一些要求不高的面试了。</p>\n<p>最小的步骤是遵从单一功能原则，创建至少两个组成部分来完成这个任务：</p>\n<p>-一个 feed 解析器来解析搜集到的结果</p>\n<p>-一个 feed 阅读器来显示结果</p>\n<p>这些类的接口可以是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface ZOCFeedParser : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, weak) id &lt;ZOCFeedParserDelegate&gt; delegate;</span><br><span class=\"line\">@property (nonatomic, strong) NSURL *url;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithURL:(NSURL *)url;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)start;</span><br><span class=\"line\">- (void)stop;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface ZOCTableViewController : UITableViewController</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithFeedParser:(ZOCFeedParser *)feedParser;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>ZOCFeedParser</code> 用一个 <code>NSURL</code> 来初始化来获取 RSS 订阅（在这之下可能会使用 NSXMLParser 和 NSXMLParserDelegate 创建有意义的数据），<code>ZOCTableViewController</code> 会用这个 parser 来进行初始化。 我们希望它显示 parser 接受到的值并且我们用下面的 protocol 实现委托：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCFeedParserDelegate &lt;NSObject&gt;</span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)feedParserDidStart:(ZOCFeedParser *)parser;</span><br><span class=\"line\">- (void)feedParser:(ZOCFeedParser *)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info;</span><br><span class=\"line\">- (void)feedParser:(ZOCFeedParser *)parser didParseFeedItem:(ZOCFeedItemDTO *)item;</span><br><span class=\"line\">- (void)feedParserDidFinish:(ZOCFeedParser *)parser;</span><br><span class=\"line\">- (void)feedParser:(ZOCFeedParser *)parser didFailWithError:(NSError *)error;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>用合适的 protocol 来来处理 RSS 非常完美。view controller 会遵从它的公开的接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ZOCTableViewController : UITableViewController &lt;ZOCFeedParserDelegate&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>最后创建的代码是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSURL *feedURL = [NSURL URLWithString:@&quot;http://bbc.co.uk/feed.rss&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">ZOCFeedParser *feedParser = [[ZOCFeedParser alloc] initWithURL:feedURL];</span><br><span class=\"line\"></span><br><span class=\"line\">ZOCTableViewController *tableViewController = [[ZOCTableViewController alloc] initWithFeedParser:feedParser];</span><br><span class=\"line\">feedParser.delegate = tableViewController;</span><br></pre></td></tr></table></figure>\n\n<p>到目前你可能觉得你的代码还是不错的，但是有多少代码是可以有效复用的呢？view controller 只能处理 <code>ZOCFeedParser</code> 类型的对象： 从这点来看我们只是把代码分离成了两个组成部分，而没有做任何其他有价值的事情。</p>\n<p>view controller 的职责应该是“显示某些东西提供的内容”，但是如果我们只允许传递<code>ZOCFeedParser</code>的话，就不是这样的了。这就体现了需要传递给 view controller 一个更泛型的对象的需求。</p>\n<p>我们使用  <code>ZOCFeedParserProtocol</code> 这个 protocol (在 ZOCFeedParserProtocol.h 文件里面，同时文件里也有 <code>ZOCFeedParserDelegate</code> )。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCFeedParserProtocol &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, weak) id &lt;ZOCFeedParserDelegate&gt; delegate;</span><br><span class=\"line\">@property (nonatomic, strong) NSURL *url;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)start;</span><br><span class=\"line\">- (void)stop;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCFeedParserDelegate &lt;NSObject&gt;</span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)feedParserDidStart:(id&lt;ZOCFeedParserProtocol&gt;)parser;</span><br><span class=\"line\">- (void)feedParser:(id&lt;ZOCFeedParserProtocol&gt;)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info;</span><br><span class=\"line\">- (void)feedParser:(id&lt;ZOCFeedParserProtocol&gt;)parser didParseFeedItem:(ZOCFeedItemDTO *)item;</span><br><span class=\"line\">- (void)feedParserDidFinish:(id&lt;ZOCFeedParserProtocol&gt;)parser;</span><br><span class=\"line\">- (void)feedParser:(id&lt;ZOCFeedParserProtocol&gt;)parser didFailWithError:(NSError *)error;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意这个代理 protocol 现在处理响应我们新的 protocol， 而且 ZOCFeedParser 的接口文件更加精炼了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface ZOCFeedParser : NSObject &lt;ZOCFeedParserProtocol&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)initWithURL:(NSURL *)url;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>因为 <code>ZOCFeedParser</code> 实现了 <code>ZOCFeedParserProtocol</code>，它需要实现所有需要的方法。</p>\n<p>从这点来看 view controller  可以接受任何实现这个新的  protocol 的对象，确保所有的对象会响应从 <code>start</code> 和 <code>stop</code> 的方法，而且它会通过 delegate 的属性来提供信息。所有的 view controller  只需要知道相关对象并且不需要知道实现的细节。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@interface ZOCTableViewController : UITableViewController &lt;ZOCFeedParserDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithFeedParser:(id&lt;ZOCFeedParserProtocol&gt;)feedParser;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码片段的改变看起来不多，但是有了一个巨大的提升。view controller 是面向一个协议而不是具体的实现的。这带来了以下的优点：</p>\n<p>-view controller 可以通过 delegate 属性带来的信息的任意对象，可以是  RSS 远程解析器，或者本地解析器，或是一个读取其他远程或者本地数据的服务</p>\n<p>-<code>ZOCFeedParser</code> 和 <code>ZOCFeedParserDelegate</code> 可以被其他组成部分复用</p>\n<p>-<code>ZOCViewController</code> （UI逻辑部分）可以被复用</p>\n<p>-测试更简单了，因为可以用 mock 对象来达到 protocol 预期的效果</p>\n<p>当实现一个 protocol 你总应该坚持 <a href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\">里氏替换原则</a>。这个原则是：你应该可以取代任意接口（也就是Objective-C里的的”protocol”）实现，而不用改变客户端或者相关实现。</p>\n<p>此外这也意味着你的 protocol 不应该关注实现类的细节，更加认真地设计你的  protocol  的抽象表述的时候，需要注意它和底层实现是不相干的，协议是暴露给使用者的抽象概念。</p>\n<p>任何可以在未来复用的设计意味着可以提高代码质量，同时也是程序员的目标。是否这样设计代码，就是大师和菜鸟的区别。</p>\n<p>最后的代码可以在<a href=\"http://github.com/albertodebortoli/ADBFeedReader\">这里</a> 找到。</p>\n<h1 id=\"NSNotification\"><a href=\"#NSNotification\" class=\"headerlink\" title=\"NSNotification\"></a>NSNotification</h1><p>当你定义你自己的 <code>NSNotification</code> 的时候你应该把你的通知的名字定义为一个字符串常量，就像你暴露给其他类的其他字符串常量一样。你应该在公开的接口文件中将其声明为 <code>extern</code> 的， 并且在对应的实现文件里面定义。</p>\n<p>因为你在头文件中暴露了符号，所以你应该按照统一的命名空间前缀法则，用类名前缀作为这个通知名字的前缀。 </p>\n<p>同时，用一个 Did&#x2F;Will 这样的动词以及用 “Notifications” 后缀来命名这个通知也是一个好的实践。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Foo.h</span><br><span class=\"line\">extern NSString * const ZOCFooDidBecomeBarNotification</span><br><span class=\"line\"></span><br><span class=\"line\">// Foo.m</span><br><span class=\"line\">NSString * const ZOCFooDidBecomeBarNotification = @&quot;ZOCFooDidBecomeBarNotification&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"美化代码\"><a href=\"#美化代码\" class=\"headerlink\" title=\"美化代码\"></a>美化代码</h1><h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><p>-缩进使用 4 个空格。 永远不要使用  tab, 确保你在 Xcode 的设置里面是这样设置的。</p>\n<p>-方法的大括号和其他的大括号(<code>if</code>&#x2F;<code>else</code>&#x2F;<code>switch</code>&#x2F;<code>while</code> 等) 总是在同一行开始，在新起一行结束。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (user.isHappy) &#123;</span><br><span class=\"line\">    //Do something</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">    //Do something else</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (user.isHappy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  //Do something</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  //Do something else</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>-方法之间应该要有一个空行来帮助代码看起来清晰且有组织。 方法内的空格应该用来分离功能，但是通常不同的功能应该用新的方法来定义。</p>\n<p>-优先使用 auto-synthesis。但是如果必要的话， <code>@synthesize</code> and <code>@dynamic</code> </p>\n<p>-在实现文件中的声明应该新起一行。</p>\n<p>-应该总是让冒号对齐。有一些方法签名可能超过三个冒号，用冒号对齐可以让代码更具有可读性。即使有代码块存在，也应该用冒号对齐方法。</p>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[UIView animateWithDuration:1.0</span><br><span class=\"line\">                 animations:^&#123;</span><br><span class=\"line\">                     // something</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 completion:^(BOOL finished) &#123;</span><br><span class=\"line\">                     // something</span><br><span class=\"line\">                 &#125;];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[UIView animateWithDuration:1.0 animations:^&#123;</span><br><span class=\"line\">    // something </span><br><span class=\"line\">&#125; completion:^(BOOL finished) &#123;</span><br><span class=\"line\">    // something</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>如果自动对齐让可读性变得糟糕，那么应该在之前把 block 定义为变量，或者重新考虑你的代码签名设计。</p>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><p>本指南关注代码显示效果以及在线浏览的可读性，所以换行是一个重要的主题。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure>\n\n<p>一个像上面的长行的代码在第二行以一个间隔（2个空格）延续</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.productsRequest = [[SKProductsRequest alloc] </span><br><span class=\"line\">  initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><p>在以下的地方使用 <a href=\"https://en.wikipedia.org/wiki/Indent_style#K.26R_style\">Egyptian风格 括号</a> （译者注：又称 K&amp;R 风格，代码段括号的开始位于一行的末尾，而不是另外起一行的风格。关于为什么叫做 Egyptian Brackets，可以参考 <a href=\"http://blog.codinghorror.com/new-programming-jargon/\">http://blog.codinghorror.com/new-programming-jargon/</a> )</p>\n<p>-控制语句 (if-else, for, switch)</p>\n<p>非 Egyptian 括号可以用在：</p>\n<p>-类的实现（如果存在)</p>\n<p>-方法的实现</p>\n<h1 id=\"代码组织\"><a href=\"#代码组织\" class=\"headerlink\" title=\"代码组织\"></a>代码组织</h1><p><a href=\"http://nshipster.com/pragma/\">来自</a> Mattt Thompson</p>\n<blockquote>\n<p>code organization is a matter of hygiene  (代码组织是卫生问题)</p>\n</blockquote>\n<p>我们十分赞成这句话。清晰地组织代码和规范地进行定义, 是你对自己以及其他阅读代码的人的尊重。</p>\n<h2 id=\"利用代码块\"><a href=\"#利用代码块\" class=\"headerlink\" title=\"利用代码块\"></a>利用代码块</h2><p>一个 GCC 非常模糊的特性，以及 Clang 也有的特性是，代码块如果在闭合的圆括号内的话，会返回最后语句的值</p>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSURL *url = (&#123;</span><br><span class=\"line\">    NSString *urlString = [NSString stringWithFormat:@&quot;%@/%@&quot;, baseURLString, endpoint];</span><br><span class=\"line\">    [NSURL URLWithString:urlString];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个特性非常适合组织小块的代码，通常是设置一个类。他给了读者一个重要的入口并且减少相关干扰，能让读者聚焦于关键的变量和函数中。此外，这个方法有一个优点，所有的变量都在代码块中，也就是只在代码块的区域中有效，这意味着可以减少对其他作用域的命名污染。</p>\n<h2 id=\"Pragma\"><a href=\"#Pragma\" class=\"headerlink\" title=\"Pragma\"></a>Pragma</h2><h3 id=\"Pragma-Mark\"><a href=\"#Pragma-Mark\" class=\"headerlink\" title=\"Pragma Mark\"></a>Pragma Mark</h3><p><code>#pragma mark -</code>  是一个在类内部组织代码并且帮助你分组方法实现的好办法。 我们建议使用  <code>#pragma mark -</code> 来分离:</p>\n<p>-不同功能组的方法 </p>\n<p>-protocols 的实现</p>\n<p>-对父类方法的重写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void)dealloc &#123; /* ... */ &#125;</span><br><span class=\"line\">- (instancetype)init &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - View Lifecycle （View 的生命周期）</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123; /* ... */ &#125;</span><br><span class=\"line\">- (void)viewWillAppear:(BOOL)animated &#123; /* ... */ &#125;</span><br><span class=\"line\">- (void)didReceiveMemoryWarning &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - Custom Accessors （自定义访问器）</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)setCustomProperty:(id)value &#123; /* ... */ &#125;</span><br><span class=\"line\">- (id)customProperty &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - IBActions  </span><br><span class=\"line\"></span><br><span class=\"line\">- (IBAction)submitData:(id)sender &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - Public </span><br><span class=\"line\"></span><br><span class=\"line\">- (void)publicMethod &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - Private</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)zoc_privateMethod &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - UITableViewDataSource</span><br><span class=\"line\"></span><br><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - ZOCSuperclass</span><br><span class=\"line\"></span><br><span class=\"line\">// ... 重载来自 ZOCSuperclass 的方法</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark - NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSString *)description &#123; /* ... */ &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面的标记能明显分离和组织代码。你还可以用  cmd+Click 来快速跳转到符号定义地方。</p>\n<p>但是小心，即使 paragma mark 是一门手艺，但是它不是让你类里面方法数量增加的一个理由：类里面有太多方法说明类做了太多事情，需要考虑重构了。</p>\n<h3 id=\"关于-pragma\"><a href=\"#关于-pragma\" class=\"headerlink\" title=\"关于 pragma\"></a>关于 pragma</h3><p>在 <a href=\"http://raptureinvenice.com/pragmas-arent-just-for-marks\">http://raptureinvenice.com/pragmas-arent-just-for-marks</a> 有很好的关于 pragma 的讨论了，在这边我们再做部分说明。</p>\n<p>大多数 iOS 开发者平时并没有和很多编译器选项打交道。一些选项是对控制严格检查（或者不检查）你的代码或者错误的。有时候，你想要用 pragma 直接产生一个异常，临时打断编译器的行为。</p>\n<p>当你使用ARC的时候，编译器帮你插入了内存管理相关的调用。但是这样可能产生一些烦人的事情。比如你使用  <code>NSSelectorFromString</code>  来动态地产生一个 selector 调用的时候，ARC不知道这个方法是哪个并且不知道应该用那种内存管理方法，你会被提示 <code>performSelector may cause a leak because its selector is unknown（执行 selector 可能导致泄漏，因为这个 selector 是未知的）</code>.</p>\n<p>如果你知道你的代码不会导致内存泄露，你可以通过加入这些代码忽略这些警告</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma clang diagnostic push</span><br><span class=\"line\">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[myObj performSelector:mySelector withObject:name];</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma clang diagnostic pop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意我们是如何在相关代码上下文中用 pragma 停用 -Warc-performSelector-leaks 检查的。这确保我们没有全局禁用。如果全局禁用，可能会导致错误。</p>\n<p>全部的选项可以在 <a href=\"http://clang.llvm.org/docs/UsersManual.html\">The Clang User’s Manual</a>  找到并且学习。</p>\n<h3 id=\"忽略没用使用变量的编译警告\"><a href=\"#忽略没用使用变量的编译警告\" class=\"headerlink\" title=\"忽略没用使用变量的编译警告\"></a>忽略没用使用变量的编译警告</h3><p>这对表明你一个定义但是没有使用的变量很有用。大多数情况下，你希望移除这些引用来（稍微地）提高性能，但是有时候你希望保留它们。为什么？或许它们以后有用，或者有些特性只是暂时移除。无论如何，一个消除这些警告的好方法是用相关语句进行注解，使用 <code>#pragma unused()</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)giveMeFive</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NSString *foo;</span><br><span class=\"line\">    #pragma unused (foo)</span><br><span class=\"line\"></span><br><span class=\"line\">    return 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在你的代码不用任何编译警告了。注意你的 pragma 需要标记到未定义的变量之下。</p>\n<h2 id=\"明确编译器警告和错误\"><a href=\"#明确编译器警告和错误\" class=\"headerlink\" title=\"明确编译器警告和错误\"></a>明确编译器警告和错误</h2><p>编译器是一个机器人，它会标记你代码中被 Clang 规则定义为错误的地方。但是，你总是比 Clang 更聪明。通常，你会发现一些讨厌的代码会导致这个问题，但是暂时却解决不了。你可以这样明确一个错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (NSInteger)divide:(NSInteger)dividend by:(NSInteger)divisor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #error Whoa, buddy, you need to check for zero here!</span><br><span class=\"line\">    return (dividend / divisor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>类似的，你可以这样标明一个警告</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (float)divide:(float)dividend by:(float)divisor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #warning Dude, don&#x27;t compare floating point numbers like this!</span><br><span class=\"line\">    if (divisor != 0.0) &#123;</span><br><span class=\"line\">        return (dividend / divisor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        return NAN;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串文档\"><a href=\"#字符串文档\" class=\"headerlink\" title=\"字符串文档\"></a>字符串文档</h2><p>所有重要的方法，接口，分类以及协议定义应该有伴随的注释来解释它们的用途以及如何使用。更多的例子可以看 Google 代码风格指南中的 <a href=\"http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml#File_Comments\">File and Declaration Comments</a>。</p>\n<p>简而言之：有长的和短的两种字符串文档。</p>\n<p>短文档适用于单行的文件，包括注释斜杠。它适合简短的函数，特别是（但不仅仅是）非 public 的 API：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Return a user-readable form of a Frobnozz, html-escaped.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>文本应该用一个动词 (“return”)  而不是 “returns” 这样的描述。</p>\n<p>如果描述超出一行，你应该用长的字符串文档: 一行斜杠和两个星号来开始块文档 (&#x2F;**, 之后是总结的一句话，可以用句号、问号或者感叹号结尾，然后空一行，在和第一句话对齐写下剩下的注释，然后用一个 (*&#x2F;)来结束。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> This comment serves to demonstrate the format of a docstring.</span><br><span class=\"line\"></span><br><span class=\"line\"> Note that the summary line is always at most one line long, and</span><br><span class=\"line\"> after the opening block comment, and each line of text is preceded</span><br><span class=\"line\"> by a single space.</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个函数必须有一个字符串文档，除非它符合下面的所有条件：</p>\n<p>-非公开</p>\n<p>-很短</p>\n<p>-显而易见</p>\n<p>字符串文档应该描述函数的调用符号和语义，而不是它如何实现。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>当它需要的时候，注释应该用来解释特定的代码做了什么。所有的注释必须被持续维护或者干脆就删掉。</p>\n<p>块注释应该被避免，代码本身应该尽可能就像文档一样表示意图，只需要很少的打断注释。  <em>例外： 这不能适用于用来产生文档的注释</em></p>\n<h3 id=\"头文档\"><a href=\"#头文档\" class=\"headerlink\" title=\"头文档\"></a>头文档</h3><p>一个类的文档应该只在 .h 文件里用 Doxygen&#x2F;AppleDoc 的语法书写。 方法和属性都应该提供文档。</p>\n<p>**例子: **</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *  Designated initializer.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @param  store  The store for CRUD operations.</span><br><span class=\"line\"> *  @param  searchService The search service used to query the store.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *  @return A ZOCCRUDOperationsStore object.</span><br><span class=\"line\"> */</span><br><span class=\"line\">- (instancetype)initWithOperationsStore:(id&lt;ZOCGenericStoreProtocol&gt;)store</span><br><span class=\"line\">                          searchService:(id&lt;ZOCGenericSearchServiceProtocol&gt;)searchService;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"对象间的通讯\"><a href=\"#对象间的通讯\" class=\"headerlink\" title=\"对象间的通讯\"></a>对象间的通讯</h1><p>对象之间需要通信，这也是所有软件的基础。再非凡的软件也需要通过对象通信来完成复杂的目标。本章将深入讨论一些设计概念，以及如何依据这些概念来设计出良好的架构。</p>\n<h2 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h2><p>Block 是 Objective-C 版本的 lambda 或者 closure（闭包）。</p>\n<p>使用 block 定义异步接口:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)downloadObjectsAtPath:(NSString *)path</span><br><span class=\"line\">                   completion:(void(^)(NSArray *objects, NSError *error))completion;</span><br></pre></td></tr></table></figure>\n\n<p>当你定义一个类似上面的接口的时候，尽量使用一个单独的 block 作为接口的最后一个参数。把需要提供的数据和错误信息整合到一个单独 block 中，比分别提供成功和失败的 block 要好。</p>\n<p>以下是你应该这样做的原因：</p>\n<p>-通常这成功处理和失败处理会共享一些代码（比如让一个进度条或者提示消失）；</p>\n<p>-Apple 也是这样做的，与平台一致能够带来一些潜在的好处；</p>\n<p>-block 通常会有多行代码，如果不是在最后一个参数的话会打破调用点；</p>\n<p>-使用多个 block 作为参数可能会让调用看起来显得很笨拙，并且增加了复杂性。</p>\n<p>看上面的方法，完成处理的 block 的参数很常见：第一个参数是调用者希望获取的数据，第二个是错误相关的信息。这里需要遵循以下两点：</p>\n<p>-若 <code>objects</code> 不为 nil，则 <code>error</code> 必须为 nil</p>\n<p>-若 <code>objects</code> 为 nil，则 <code>error</code> 必须不为 nil</p>\n<p>因为调用者更关心的是实际的数据，就像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)downloadObjectsAtPath:(NSString *)path</span><br><span class=\"line\">                   completion:(void(^)(NSArray *objects, NSError *error))completion &#123;</span><br><span class=\"line\">    if (objects) &#123;</span><br><span class=\"line\">        // do something with the data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // some error occurred, &#x27;error&#x27; variable should not be nil by contract</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此外，Apple 提供的一些同步接口在成功状态下向 error 参数（如果非 NULL) 写入了垃圾值，所以检查 error 的值可能出现问题。</p>\n<h3 id=\"深入-Block\"><a href=\"#深入-Block\" class=\"headerlink\" title=\"深入 Block\"></a>深入 Block</h3><p>一些关键点：</p>\n<p>-block 是在栈上创建的 </p>\n<p>-block 可以复制到堆上</p>\n<p>-block 有自己的私有的栈变量（以及指针）的常量复制</p>\n<p>-可变的栈上的变量和指针必须用 __block  关键字声明</p>\n<p>如果 block 没有在其他地方被保持，那么它会随着栈生存并且当栈帧（stack frame）返回的时候消失。当在栈上的时候，一个 block 对访问的任何内容不会有影响。如果 block 需要在栈帧返回的时候存在，它们需要明确地被复制到堆上，这样，block 会像其他 Cocoa 对象一样增加引用计数。当它们被复制的时候，它会带着它们的捕获作用域一起，retain 他们所有引用的对象。如果一个 block指向一个栈变量或者指针，那么这个block初始化的时候它会有一份声明为 const 的副本，所以对它们赋值是没用的。当一个 block 被复制后，<code>__block</code> 声明的栈变量的引用被复制到了堆里，复制之后栈上的以及产生的堆上的 block 都会引用这个堆上的变量。</p>\n<p>用 LLDB 来展示 block 是这样子的：</p>\n<p><img src=\"/./images/blocks_debugger.png\"></p>\n<p>最重要的事情是 <code>__block</code> 声明的变量和指针在 block 里面是作为显示操作真实值&#x2F;对象的结构来对待的。</p>\n<p>block 在 Objective-C 里面被当作一等公民对待：他们有一个 <code>isa</code> 指针，一个类也是用 <code>isa</code> 指针来访问 Objective-C 运行时来访问方法和存储数据的。在非 ARC 环境肯定会把它搞得很糟糕，并且悬挂指针会导致 crash。<code>__block</code> 仅仅对 block 内的变量起作用，它只是简单地告诉 block：</p>\n<blockquote>\n<p>嗨，这个指针或者原始的类型依赖它们在的栈。请用一个栈上的新变量来引用它。我是说，请对它进行双重解引用，不要 retain 它。</p>\n</blockquote>\n<p>谢谢，哥们。</p>\n<p>如果在定义之后但是 block 没有被调用前，对象被释放了，那么 block 的执行会导致 crash。 <code>__block</code>  变量不会在 block 中被持有，最后… 指针、引用、解引用以及引用计数变得一团糟。</p>\n<h3 id=\"self-的循环引用\"><a href=\"#self-的循环引用\" class=\"headerlink\" title=\"self 的循环引用\"></a>self 的循环引用</h3><p>当使用代码块和异步分发的时候，要注意避免引用循环。 总是使用 <code>weak</code> 引用会导致引用循环。 此外，把持有 block 的属性设置为 nil (比如 <code>self.completionBlock = nil</code>) 是一个好的实践。它会打破 block 捕获的作用域带来的引用循环。</p>\n<p><strong>例子:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self) weakSelf = self;</span><br><span class=\"line\">[self executeBlock:^(NSData *data, NSError *error) &#123;</span><br><span class=\"line\">    [weakSelf doSomethingWithData:data];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要这样做:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[self executeBlock:^(NSData *data, NSError *error) &#123;</span><br><span class=\"line\">    [self doSomethingWithData:data];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p><strong>多个语句的例子:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self)weakSelf = self;</span><br><span class=\"line\">[self executeBlock:^(NSData *data, NSError *error) &#123;</span><br><span class=\"line\">    __strong __typeof(weakSelf) strongSelf = weakSelf;</span><br><span class=\"line\">    if (strongSelf) &#123;</span><br><span class=\"line\">        [strongSelf doSomethingWithData:data];</span><br><span class=\"line\">        [strongSelf doSomethingWithData:data];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p><strong>不要这样做:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self)weakSelf = self;</span><br><span class=\"line\">[self executeBlock:^(NSData *data, NSError *error) &#123;</span><br><span class=\"line\">    [weakSelf doSomethingWithData:data];</span><br><span class=\"line\">    [weakSelf doSomethingWithData:data];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>你应该把这两行代码作为 snippet 加到 Xcode 里面并且总是这样使用它们。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak __typeof(self)weakSelf = self;</span><br><span class=\"line\">__strong __typeof(weakSelf)strongSelf = weakSelf;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们来讨论下 block 里面的 self 的 <code>__weak</code> 和 <code>__strong</code>  限定词的一些微妙的地方。简而言之，我们可以参考 self 在 block 里面的三种不同情况。</p>\n<p><strong>方案 1. 直接在 block 里面使用关键词 <code>self</code></strong></p>\n<p>如果我们直接在 block 里面用 self 关键字，对象会在 block 的定义时候被 retain，（实际上 block 是 <a href=\"https://developer.apple.com/library/ios/documentation/cocoa/conceptual/Blocks/Articles/bxVariables.html#//apple_ref/doc/uid/TP40007502-CH6-SW4\">copied</a>  但是为了简单我们可以忽略这个）。一个 const 的对 self 的引用在 block 里面有自己的位置并且它会影响对象的引用计数。如果 block 被其他 class 或者&#x2F;并且传送过去了，我们可能想要 retain  self 就像其他被 block 使用的对象，从他们需要被block执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dispatch_block_t completionBlock = ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init...];</span><br><span class=\"line\">[self presentViewController:myController</span><br><span class=\"line\">                   animated:YES</span><br><span class=\"line\">                 completion:completionHandler];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>不是很麻烦的事情。但是, 当 block 被 self 在一个属性 retain（就像下面的例子）呢</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">self.completionHandler = ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init...];</span><br><span class=\"line\">[self presentViewController:myController</span><br><span class=\"line\">                   animated:YES</span><br><span class=\"line\">                 completion:self.completionHandler];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这就是有名的 retain cycle, 并且我们通常应该避免它。这种情况下我们收到 CLANG 的警告：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Capturing &#x27;self&#x27; strongly in this block is likely to lead to a retain cycle （在 block 里面发现了 `self` 的强引用，可能会导致循环引用）</span><br></pre></td></tr></table></figure>\n\n<p>所以可以用 <code>weak</code> 修饰</p>\n<p><strong>方案 2. 在 block 外定义一个 <code>__weak</code> 的 引用到 self，并且在 block 里面使用这个弱引用</strong></p>\n<p>这样会避免循环引用，也是我们通常在 block 已经被 self 的 property 属性里面 retain 的时候会做的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">self.completionHandler = ^&#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, weakSelf);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init...];</span><br><span class=\"line\">[self presentViewController:myController</span><br><span class=\"line\">                   animated:YES</span><br><span class=\"line\">                 completion:self.completionHandler];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个情况下 block 没有 retain 对象并且对象在属性里面 retain 了 block 。所以这样我们能保证了安全的访问 self。 不过糟糕的是，它可能被设置成 nil 的。问题是：如果和让 self 在 block 里面安全地被销毁。</p>\n<p>举个例子， block 被一个对象复制到了另外一个（比如 myControler）作为属性赋值的结果。之前的对象在可能在被复制的 block 有机会执行被销毁。</p>\n<p>下面的更有意思。</p>\n<p><strong>方案 3. 在 block 外定义一个 <code>__weak</code> 的 引用到 self，并在在 block 内部通过这个弱引用定义一个 <code>__strong</code>  的引用</strong></p>\n<p>你可能会想，首先，这是避免 retain cycle  警告的一个技巧。然而不是，这个到 self 的强引用在 <em>block 的执行时间</em>　被创建。当 block 在定义的时候， block 如果使用 self 的时候，就会 retain 了 self 对象。</p>\n<p><a href=\"http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html\">Apple 文档</a> 中表示 “为了 non-trivial cycles ，你应该这样” ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyViewController *myController = [[MyViewController alloc] init...];</span><br><span class=\"line\">// ...</span><br><span class=\"line\">MyViewController * __weak weakMyController = myController;</span><br><span class=\"line\">myController.completionHandler =  ^(NSInteger result) &#123;</span><br><span class=\"line\">    MyViewController *strongMyController = weakMyController;</span><br><span class=\"line\">    if (strongMyController) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">        [strongMyController dismissViewControllerAnimated:YES completion:nil];</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // Probably nothing...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先，我觉得这个例子看起来是错误的。如果 block 本身被 completionHandler 属性里面 retain 了，那么 self 如何被 delloc 和在 block 之外赋值为 nil 呢? completionHandler 属性可以被声明为  <code>assign</code> 或者 <code>unsafe_unretained</code> 的，来允许对象在 block 被传递之后被销毁。</p>\n<p>我不能理解这样做的理由，如果其他对象需要这个对象（self），block 被传递的时候应该 retain 对象，所以 block 应该不被作为属性存储。这种情况下不应该用 <code>__weak</code>&#x2F;<code>__strong</code> </p>\n<p>总之，其他情况下，希望 weakSelf 变成 nil 的话，就像第二种情况解释那么写（在 block 之外定义一个弱应用并且在 block 里面使用）。</p>\n<p>还有，Apple的 “trivial block” 是什么呢。我们的理解是 trivial block 是一个不被传送的 block ，它在一个良好定义和控制的作用域里面，weak 修饰只是为了避免循环引用。</p>\n<p>虽然有 Kazuki Sakamoto 和 Tomohiko Furumoto) 讨论的 <a href=\"http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/\">一</a> <a href=\"http://blog.random-ideas.net/?p=160\">些</a> <a href=\"http://stackoverflow.com/questions/7904568/disappearing-reference-to-self-in-a-block-under-arc\">的</a> <a href=\"http://stackoverflow.com/questions/12218767/objective-c-blocks-and-memory-management\">在线</a> <a href=\"https://github.com/AFNetworking/AFNetworking/issues/807\">参考</a>,  <a href=\"https://twitter.com/mattjgalloway\">Matt Galloway</a> 的 (<a href=\"http://www.effectiveobjectivec.com/\">Effective Objective-C 2.0</a> 和 <a href=\"http://www.amazon.it/Pro-Multithreading-Memory-Management-Ios/dp/1430241160\">Pro Multithreading and Memory Management for iOS and OS X</a> ，大多数开发者始终没有弄清楚概念。</p>\n<p>在 block 内用强引用的优点是，抢占执行的时候的鲁棒性。看上面的三个例子，在 block 执行的时候</p>\n<p><strong>方案 1. 直接在 block 里面使用关键词 <code>self</code></strong></p>\n<p>如果 block 被属性 retain，self 和 block 之间会有一个循环引用并且它们不会再被释放。如果 block 被传送并且被其他的对象 copy 了，self 在每一个 copy 里面被 retain</p>\n<p><strong>方案 2. 在 block 外定义一个 <code>__weak</code> 的 引用到 self，并且在 block 里面使用这个弱引用</strong></p>\n<p>没有循环引用的时候，block 是否被 retain 或者是一个属性都没关系。如果 block 被传递或者 copy 了，在执行的时候，weakSelf 可能会变成 nil。</p>\n<p>block 的执行可以抢占，并且后来的对 weakSelf 的不同调用可以导致不同的值(比如，在 一个特定的执行 weakSelf 可能赋值为 nil )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">dispatch_block_t block =  ^&#123;</span><br><span class=\"line\">    [weakSelf doSomething]; // weakSelf != nil</span><br><span class=\"line\">    // preemption, weakSelf turned nil</span><br><span class=\"line\">    [weakSelf doSomethingElse]; // weakSelf == nil</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方案 3. 在 block 外定义一个 <code>__weak</code> 的 引用到 self，并在在 block 内部通过这个弱引用定义一个 <code>__strong</code>  的引用。</strong></p>\n<p>不论管 block 是否被 retain 或者是一个属性，这样也不会有循环引用。如果 block 被传递到其他对象并且被复制了，执行的时候，weakSelf 可能被nil，因为强引用被复制并且不会变成nil的时候，我们确保对象 在 block 调用的完整周期里面被 retain了，如果抢占发生了，随后的对 strongSelf 的执行会继续并且会产生一样的值。如果 strongSelf 的执行到 nil，那么在 block 不能正确执行前已经返回了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">myObj.myBlock =  ^&#123;</span><br><span class=\"line\">    __strong typeof(self) strongSelf = weakSelf;</span><br><span class=\"line\">    if (strongSelf) &#123;</span><br><span class=\"line\">      [strongSelf doSomething]; // strongSelf != nil</span><br><span class=\"line\">      // preemption, strongSelf still not nil（抢占的时候，strongSelf 还是非 nil 的)</span><br><span class=\"line\">      [strongSelf doSomethingElse]; // strongSelf != nil</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // Probably nothing...</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在一个 ARC 的环境中，如果尝试用 <code>-&gt;</code>符号来表示，编译器会警告一个错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Dereferencing a __weak pointer is not allowed due to possible null value caused by race condition, assign it to a strong variable first. (对一个 __weak 指针的解引用不允许的，因为可能在竞态条件里面变成 null, 所以先把他定义成 strong 的属性)</span><br></pre></td></tr></table></figure>\n\n<p>可以用下面的代码展示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">myObj.myBlock =  ^&#123;</span><br><span class=\"line\">    id localVal = weakSelf-&gt;someIVar;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在最后</p>\n<p>-<strong>方案 1</strong>: 只能在 block 不是作为一个 property 的时候使用，否则会导致 retain cycle。</p>\n<p>-<strong>方案 2</strong>:  当 block 被声明为一个 property 的时候使用。</p>\n<p>-<strong>方案 3</strong>: 和并发执行有关。当涉及异步的服务的时候，block 可以在之后被执行，并且不会发生关于 self 是否存在的问题。</p>\n<h2 id=\"委托和数据源\"><a href=\"#委托和数据源\" class=\"headerlink\" title=\"委托和数据源\"></a>委托和数据源</h2><p>委托是 Apple 的框架里面使用广泛的模式，同时它是一个重要的 四人帮的书“设计模式”中的模式。委托模式是单向的，消息的发送方（委托方）需要知道接收方（委托），反过来就不是了。对象之间没有多少耦合，因为发送方只要知道它的委托实现了对应的 protocol。</p>\n<p>本质上，委托模式只需要委托提供一些回调方法，就是说委托实现了一系列空返回值的方法。</p>\n<p>不幸的是 Apple 的 API 并没有尊重这个原则，开发者也效仿 Apple 进入了歧途。一个典型的例子是 <a href=\"https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewDelegate_Protocol/Reference/Reference.html\">UITableViewDelegate</a> 协议。</p>\n<p>一些有 void 返回类型的方法就像回调</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath;</span><br><span class=\"line\">- (void)tableView:(UITableView *)tableView didHighlightRowAtIndexPath:(NSIndexPath *)indexPath;</span><br></pre></td></tr></table></figure>\n\n<p>但是其他的不是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath;</span><br><span class=\"line\">- (BOOL)tableView:(UITableView *)tableView canPerformAction:(SEL)action forRowAtIndexPath:(NSIndexPath *)indexPath withSender:(id)sender;</span><br></pre></td></tr></table></figure>\n\n<p>当委托者询问委托对象一些信息的时候，这就暗示着信息是从委托对象流向委托者，而不会反过来。 这个概念就和委托模式有些不同，它是一个另外的模式：数据源。</p>\n<p>可能有人会说 Apple 有一个 <a href=\"https://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewDataSource_Protocol/Reference/Reference.html\">UITableViewDataSouce</a>  protocol 来做这个（虽然使用委托模式的名字），但是实际上它的方法是用来提供真实的数据应该如何被展示的信息的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;</span><br><span class=\"line\">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;</span><br></pre></td></tr></table></figure>\n\n<p>此外，以上两个方法 Apple 混合了展示层和数据层，这显的非常糟糕，但是很少的开发者感到糟糕。而且我们在这里把空返回值和非空返回值的方法都天真地叫做委托方法。</p>\n<p>为了分离概念，我们应该这样做：</p>\n<p>-委托模式：事件发生的时候，委托者需要通知委托</p>\n<p>-数据源模式: 委托方需要从数据源对象拉取数据</p>\n<p>这个是实际的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@class ZOCSignUpViewController;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCSignUpViewControllerDelegate &lt;NSObject&gt;</span><br><span class=\"line\">- (void)signUpViewControllerDidPressSignUpButton:(ZOCSignUpViewController *)controller;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCSignUpViewControllerDataSource &lt;NSObject&gt;</span><br><span class=\"line\">- (ZOCUserCredentials *)credentialsForSignUpViewController:(ZOCSignUpViewController *)controller;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol ZOCSignUpViewControllerDataSource &lt;NSObject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ZOCSignUpViewController : UIViewController</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, weak) id&lt;ZOCSignUpViewControllerDelegate&gt; delegate;</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;ZOCSignUpViewControllerDataSource&gt; dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上面的例子里面，委托方法需要总是有一个调用方作为第一个参数，否则委托对象可能被不能区别不同的委托者的实例。此外，如果调用者没有被传递到委托对象，那么就没有办法让一个委托对象处理两个不同的委托者了。所以，下面这样的方法就是人神共愤的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)calculatorDidCalculateValue:(CGFloat)value;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，委托对象需要实现 protocol 的方法。可以用<code>@required</code> 和  <code>@optional</code> 关键字来标记方法是否是必要的还是可选的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@protocol ZOCSignUpViewControllerDelegate &lt;NSObject&gt;</span><br><span class=\"line\">@required</span><br><span class=\"line\">- (void)signUpViewController:(ZOCSignUpViewController *)controller didProvideSignUpInfo:(NSDictionary *);</span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)signUpViewControllerDidPressSignUpButton:(ZOCSignUpViewController *)controller;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>对于可选的方法，委托者必须在发送消息前检查委托是否确实实现了特定的方法（否则会 crash）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if ([self.delegate respondsToSelector:@selector(signUpViewControllerDidPressSignUpButton:)]) &#123;</span><br><span class=\"line\">    [self.delegate signUpViewControllerDidPressSignUpButton:self];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>有时候你可能需要重载委托方法。考虑有两个 UIViewController 子类的情况：UIViewControllerA 和 UIViewControllerB，有下面的类继承关系。</p>\n<p><code>UIViewControllerB &lt; UIViewControllerA &lt; UIViewController</code></p>\n<p><code>UIViewControllerA</code> conforms to <code>UITableViewDelegate</code> and implements <code>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath</code>.</p>\n<p><code>UIViewControllerA</code> 遵从 <code>UITableViewDelegate</code> 并且实现了 <code>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath</code>.</p>\n<p>你可能会想要提供一个和 <code>UIViewControllerB</code> 不同的实现。一个实现可能是这样子的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    CGFloat retVal = 0;</span><br><span class=\"line\">    if ([super respondsToSelector:@selector(tableView:heightForRowAtIndexPath:)]) &#123;</span><br><span class=\"line\">        retVal = [super tableView:self.tableView heightForRowAtIndexPath:indexPath];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return retVal + 10.0f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是如果超类(<code>UIViewControllerA</code>)没有实现这个方法呢？</p>\n<p>调用过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[super respondsToSelector:@selector(tableView:heightForRowAtIndexPath:)]</span><br></pre></td></tr></table></figure>\n\n<p>会用 NSObject 的实现，寻找，在 <code>self</code> 的上下文中无疑有它的实现，但是 App 会在下一行 crash 并且报下面的错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*** Terminating app due to uncaught exception &#x27;NSInvalidArgumentException&#x27;, reason: &#x27;-[UIViewControllerB tableView:heightForRowAtIndexPath:]: unrecognized selector sent to instance 0x8d82820&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下我们需要来询问特定的类实例是否可以响应对应的 selector。下面的代码提供了一个小技巧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class=\"line\">    CGFloat retVal = 0;</span><br><span class=\"line\">    if ([[UIViewControllerA class] instancesRespondToSelector:@selector(tableView:heightForRowAtIndexPath:)]) &#123;</span><br><span class=\"line\">        retVal = [super tableView:self.tableView heightForRowAtIndexPath:indexPath];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return retVal + 10.0f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>就像上面的丑陋的代码，一个委托方法也比重载方法好。</p>\n<h3 id=\"多重委托\"><a href=\"#多重委托\" class=\"headerlink\" title=\"多重委托\"></a>多重委托</h3><p>多重委托是一个非常基础的概念，但是，大多数开发者对此非常不熟悉而使用 NSNotifications。就像你可能注意到的，委托和数据源是对象之间的通讯模式，但是只涉及两个对象：委托者和委托。</p>\n<p>数据源模式强制一对一的关系，发送者来像一个并且只是一个对象来请求信息。但是委托模式不一样，它可以完美得有多个委托来等待回调操作。</p>\n<p>至少两个对象需要接收来自特定委托者的回调，并且后一个需要知道所有的委托，这个方法更好的适用于分布式系统并且更加广泛用于大多数软件的复杂信息流传递。</p>\n<p>多重委托可以用很多方式实现，读者当然喜欢找到一个好的个人实现，一个非常灵巧的多重委托实现可以参考 Luca Bernardi  在他的 <a href=\"https://github.com/lukabernardi/LBDelegateMatrioska\">LBDelegateMatrioska</a> 的原理。</p>\n<p>一个基本的实现在下面给出。Cocoa 在数据结构中使用弱引用来避免引用循环，我们使用一个类来作为委托者持有委托对象的弱引用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ZOCWeakObject : NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">@property (nonatomic, weak, readonly) id object;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)weakObjectWithObject:(id)object;</span><br><span class=\"line\">- (instancetype)initWithObject:(id)object;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@interface ZOCWeakObject ()</span><br><span class=\"line\">@property (nonatomic, weak) id object;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ZOCWeakObject</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)weakObjectWithObject:(id)object &#123;</span><br><span class=\"line\">    return [[[self class] alloc] initWithObject:object];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)initWithObject:(id)object &#123;</span><br><span class=\"line\">    if ((self = [super init])) &#123;</span><br><span class=\"line\">        _object = object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqual:(id)object &#123;</span><br><span class=\"line\">    if (self == object) &#123;</span><br><span class=\"line\">        return YES;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (![object isKindOfClass:[object class]]) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return [self isEqualToWeakObject:(ZOCWeakObject *)object];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqualToWeakObject:(ZOCWeakObject *)object &#123;</span><br><span class=\"line\">    if (!object) &#123;</span><br><span class=\"line\">        return NO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL objectsMatch = [self.object isEqual:object.object];</span><br><span class=\"line\">    return objectsMatch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSUInteger)hash &#123;</span><br><span class=\"line\">    return [self.object hash];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个简单的使用 weak 对象来完成多重引用的组成部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@protocol ZOCServiceDelegate &lt;NSObject&gt;</span><br><span class=\"line\">@optional</span><br><span class=\"line\">- (void)generalService:(ZOCGeneralService *)service didRetrieveEntries:(NSArray *)entries;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ZOCGeneralService : NSObject</span><br><span class=\"line\">- (void)registerDelegate:(id&lt;ZOCServiceDelegate&gt;)delegate;</span><br><span class=\"line\">- (void)deregisterDelegate:(id&lt;ZOCServiceDelegate&gt;)delegate;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ZOCGeneralService ()</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableSet *delegates;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@implementation ZOCGeneralService</span><br><span class=\"line\">- (void)registerDelegate:(id&lt;ZOCServiceDelegate&gt;)delegate &#123;</span><br><span class=\"line\">    if ([delegate conformsToProtocol:@protocol(ZOCServiceDelegate)]) &#123;</span><br><span class=\"line\">        [self.delegates addObject:[[ZOCWeakObject alloc] initWithObject:delegate]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)deregisterDelegate:(id&lt;ZOCServiceDelegate&gt;)delegate &#123;</span><br><span class=\"line\">    if ([delegate conformsToProtocol:@protocol(ZOCServiceDelegate)]) &#123;</span><br><span class=\"line\">        [self.delegates removeObject:[[ZOCWeakObject alloc] initWithObject:delegate]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)_notifyDelegates &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    for (ZOCWeakObject *object in self.delegates) &#123;</span><br><span class=\"line\">        if (object.object) &#123;</span><br><span class=\"line\">            if ([object.object respondsToSelector:@selector(generalService:didRetrieveEntries:)]) &#123;</span><br><span class=\"line\">                [object.object generalService:self didRetrieveEntries:entries];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>registerDelegate:</code> 和 <code>deregisterDelegate:</code> 方法的帮助下，连接&#x2F;解除组成部分很简单：如果委托对象不需要接收委托者的回调，仅仅需要’unsubscribe’.</p>\n<p>这在一些不同的 view 等待同一个回调来更新界面展示的时候很有用：如果 view 只是暂时隐藏（但是仍然存在），它可以仅仅需要取消对回调的订阅。</p>\n<h1 id=\"面向切面编程\"><a href=\"#面向切面编程\" class=\"headerlink\" title=\"面向切面编程\"></a>面向切面编程</h1><p>Aspect Oriented Programming (AOP，面向切面编程) 在 Objective-C 社区内没有那么有名，但是 AOP 在运行时可以有巨大威力。 但是因为没有事实上的标准，Apple 也没有开箱即用的提供，也显得不重要，开发者都不怎么考虑它。</p>\n<p>引用 <a href=\"http://en.wikipedia.org/wiki/Aspect-oriented_programming\">Aspect Oriented Programming</a> 维基页面:</p>\n<blockquote>\n<p>An aspect can alter the behavior of the base code (the non-aspect part of a program) by applying advice (additional behavior) at various join points (points in a program) specified in a quantification or query called a pointcut (that detects whether a given join point matches). (一个切面可以通过在多个 join points 中 实行 advice 改变基础代码的行为(程序的非切面的部分) )</p>\n</blockquote>\n<p>在 Objective-C 的世界里，这意味着使用运行时的特性来为 <em>切面</em> 增加适合的代码。通过切面增加的行为可以是：</p>\n<p>-在类的特定方法调用前运行特定的代码</p>\n<p>-在类的特定方法调用后运行特定的代码</p>\n<p>-增加代码来替代原来的类的方法的实现</p>\n<p>有很多方法可以达成这些目的，但是我们没有深入挖掘，不过它们主要都是利用了运行时。 <a href=\"https://twitter.com/steipete\">Peter Steinberger</a> 写了一个库，<a href=\"https://github.com/steipete/Aspects\">Aspects</a> 完美地适配了 AOP 的思路。我们发现它值得信赖以及设计得非常优秀，所以我们就在这边作为一个简单的例子。</p>\n<p>对于所有的 AOP库，这个库用运行时做了一些非常酷的魔法，可以替换或者增加一些方法（比 method swizzling 技术更有技巧性）</p>\n<p>Aspect 的 API 有趣并且非常强大：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class=\"line\">                      withOptions:(AspectOptions)options</span><br><span class=\"line\">                       usingBlock:(id)block</span><br><span class=\"line\">                            error:(NSError **)error;</span><br><span class=\"line\">- (id&lt;AspectToken&gt;)aspect_hookSelector:(SEL)selector</span><br><span class=\"line\">                      withOptions:(AspectOptions)options</span><br><span class=\"line\">                       usingBlock:(id)block</span><br><span class=\"line\">                            error:(NSError **)error;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>比如，下面的代码会对于执行 <code>MyClass</code> 类的 <code>myMethod:</code>  (实例或者类的方法) 执行块参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[MyClass aspect_hookSelector:@selector(myMethod:)</span><br><span class=\"line\">                 withOptions:AspectPositionAfter</span><br><span class=\"line\">                  usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                       error:nil];</span><br></pre></td></tr></table></figure>\n\n\n\n<p>换一句话说：这个代码可以让在 <code>@selector</code> 参数对应的方法调用之后，在一个  <code>MyClass</code> 的对象上（或者在一个类本身，如果方法是一个类方法的话）执行 block 参数。</p>\n<p>我们为 <code>MyClass</code> 类的 <code>myMethod:</code> 方法增加了切面。</p>\n<p>通常 AOP 用来实现横向切面的完美的适用的地方是统计和日志。</p>\n<p>下面的例子里面，我们会用AOP用来进行统计。统计是iOS项目里面一个热门的特性，有很多选择比如 Google Analytics, Flurry, MixPanel, 等等.</p>\n<p>大部分统计框架都有教程来指导如何追踪特定的界面和事件，包括在每一个类里写几行代码。</p>\n<p>在 Ray Wenderlich 的博客里有 <a href=\"http://www.raywenderlich.com/53459/google-analytics-ios\">文章</a> 和一些示例代码，通过在你的 view controller 里面加入 <a href=\"https://developers.google.com/analytics/devguides/collection/ios/\">Google Analytics</a>  进行统计。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)logButtonPress:(UIButton *)button &#123;</span><br><span class=\"line\">    id&lt;GAITracker&gt; tracker = [[GAI sharedInstance] defaultTracker];</span><br><span class=\"line\">    [tracker send:[[GAIDictionaryBuilder createEventWithCategory:@&quot;UX&quot;</span><br><span class=\"line\">                                                          action:@&quot;touch&quot;</span><br><span class=\"line\">                                                           label:[button.titleLabel text]</span><br><span class=\"line\">                                                           value:nil] build]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面的代码在按钮点击的时候发送了特定的上下文事件。但是当你想追踪屏幕的时候会更糟糕。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)viewDidAppear:(BOOL)animated &#123;</span><br><span class=\"line\">    [super viewDidAppear:animated];</span><br><span class=\"line\"></span><br><span class=\"line\">    id&lt;GAITracker&gt; tracker = [[GAI sharedInstance] defaultTracker];</span><br><span class=\"line\">    [tracker set:kGAIScreenName value:@&quot;Stopwatch&quot;];</span><br><span class=\"line\">    [tracker send:[[GAIDictionaryBuilder createAppView] build]];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于大部分有经验的iOS工程师，这看起来不是很好的代码。我们让 view controller 变得更糟糕了。因为我们加入了统计事件的代码，但是它不是 view controller 的职能。你可以反驳，因为你通常有特定的对象来负责统计追踪，并且你将代码注入了 view controller ，但是无论你隐藏逻辑，问题仍然存在 ：你最后还是在<code>viewDidAppear:</code> 后插入了代码。</p>\n<p>你可以用 AOP 来追踪屏幕视图来修改 <code>viewDidAppear:</code>  方法。同时，我们可以用同样的方法，来在其他感兴趣的方法里面加入事件追踪，比如任何用户点击按钮的时候（比如频繁地调用IBAction）</p>\n<p>这个方法是干净并且非侵入性的：</p>\n<p>-这个 view controller 不会被不属于它的代码污染</p>\n<p>-为所有加入到我们代码的切面定义一个 SPOC 文件 (single point of customization)提供了可能</p>\n<p>-SPOC 应该在 App 刚开始启动的时候就加入切面</p>\n<p>-公司负责统计的团队通常会提供统计文档，罗列出需要追踪的事件。这个文档可以很容易映射到一个 SPOC 文件。</p>\n<p>-追踪逻辑抽象化之后，扩展到很多其他统计框架会很方便</p>\n<p>-对于屏幕视图，对于需要定义 selector 的方法，只需要在 SPOC 文件修改相关的类（相关的切面会加入到 <code>viewDidAppear:</code> 方法）。如果要同时发送屏幕视图和时间，一个追踪的 label 和其他元信息来提供额外数据（取决于统计提供方）</p>\n<p>我们可能希望一个 SPOC 文件类似下面的（同样的一个 .plist 文件会适配）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NSDictionary *analyticsConfiguration()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return @&#123;</span><br><span class=\"line\">        @&quot;trackedScreens&quot; : @[</span><br><span class=\"line\">            @&#123;</span><br><span class=\"line\">                @&quot;class&quot; : @&quot;ZOCMainViewController&quot;,</span><br><span class=\"line\">                @&quot;label&quot; : @&quot;Main screen&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             ],</span><br><span class=\"line\">        @&quot;trackedEvents&quot; : @[</span><br><span class=\"line\">            @&#123;</span><br><span class=\"line\">                @&quot;class&quot; : @&quot;ZOCMainViewController&quot;,</span><br><span class=\"line\">                @&quot;selector&quot; : @&quot;loginViewFetchedUserInfo:user:&quot;,</span><br><span class=\"line\">                @&quot;label&quot; : @&quot;Login with Facebook&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            @&#123;</span><br><span class=\"line\">                @&quot;class&quot; : @&quot;ZOCMainViewController&quot;,</span><br><span class=\"line\">                @&quot;selector&quot; : @&quot;loginViewShowingLoggedOutUser:&quot;,</span><br><span class=\"line\">                @&quot;label&quot; : @&quot;Logout with Facebook&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            @&#123;</span><br><span class=\"line\">                @&quot;class&quot; : @&quot;ZOCMainViewController&quot;,</span><br><span class=\"line\">                @&quot;selector&quot; : @&quot;loginView:handleError:&quot;,</span><br><span class=\"line\">                @&quot;label&quot; : @&quot;Login error with Facebook&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            @&#123;</span><br><span class=\"line\">                @&quot;class&quot; : @&quot;ZOCMainViewController&quot;,</span><br><span class=\"line\">                @&quot;selector&quot; : @&quot;shareButtonPressed:&quot;,</span><br><span class=\"line\">                @&quot;label&quot; : @&quot;Share button&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个提及的架构在 Github 的<a href=\"https://github.com/ef-ctx/JohnnyEnglish/blob/master/CTXUserActivityTrackingManager.m\">EF Education First</a> 中托管 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (void)setupWithConfiguration:(NSDictionary *)configuration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // screen views tracking</span><br><span class=\"line\">    for (NSDictionary *trackedScreen in configuration[@&quot;trackedScreens&quot;]) &#123;</span><br><span class=\"line\">        Class clazz = NSClassFromString(trackedScreen[@&quot;class&quot;]);</span><br><span class=\"line\"></span><br><span class=\"line\">        [clazz aspect_hookSelector:@selector(viewDidAppear:)</span><br><span class=\"line\">                       withOptions:AspectPositionAfter</span><br><span class=\"line\">                        usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">                NSString *viewName = trackedScreen[@&quot;label&quot;];</span><br><span class=\"line\">                [tracker trackScreenHitWithName:viewName];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // events tracking</span><br><span class=\"line\">    for (NSDictionary *trackedEvents in configuration[@&quot;trackedEvents&quot;]) &#123;</span><br><span class=\"line\">        Class clazz = NSClassFromString(trackedEvents[@&quot;class&quot;]);</span><br><span class=\"line\">        SEL selektor = NSSelectorFromString(trackedEvents[@&quot;selector&quot;]);</span><br><span class=\"line\"></span><br><span class=\"line\">        [clazz aspect_hookSelector:selektor</span><br><span class=\"line\">                       withOptions:AspectPositionAfter</span><br><span class=\"line\">                        usingBlock:^(id&lt;AspectInfo&gt; aspectInfo) &#123;</span><br><span class=\"line\">            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class=\"line\">                UserActivityButtonPressedEvent *buttonPressEvent = [UserActivityButtonPressedEvent eventWithLabel:trackedEvents[@&quot;label&quot;]];</span><br><span class=\"line\">                [tracker trackEvent:buttonPressEvent];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>这里有一些和风格指南有关的苹果的文档：</p>\n<p>-<a href=\"http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html\">The Objective-C Programming Language</a></p>\n<p>-<a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\">Cocoa Fundamentals Guide</a></p>\n<p>-<a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html\">Coding Guidelines for Cocoa</a></p>\n<p>-<a href=\"http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html\">iOS App Programming Guide</a></p>\n<p>-<a href=\"https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html\">Apple Objective-C conventions</a>: 来自苹果的代码约定</p>\n<p>其他：</p>\n<p>-<a href=\"http://objclean.com/\">Objective-Clean</a>: an attempt to write a standard for writing Objective-C code with Xcode integration;</p>\n<p>-<a href=\"http://uncrustify.sourceforge.net/\">Uncrustify</a>: source code beautifier.</p>\n<h3 id=\"其他的-Objective-C-风格指南\"><a href=\"#其他的-Objective-C-风格指南\" class=\"headerlink\" title=\"其他的 Objective-C 风格指南\"></a>其他的 Objective-C 风格指南</h3><p>这里有一些和风格指南有关的苹果的文档。如果有一些本书没有涉猎的地方，你或许能在这些之中找到详细说明。</p>\n<p>来自 Apple 的：</p>\n<p>-<a href=\"http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html\">The Objective-C Programming Language</a></p>\n<p>-<a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html\">Cocoa Fundamentals Guide</a></p>\n<p>-<a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html\">Coding Guidelines for Cocoa</a></p>\n<p>-<a href=\"http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html\">iOS App Programming Guide</a></p>\n<p>来自社区的：</p>\n<p>-<a href=\"https://github.com/NYTimes/objetive-c-style-guide\">NYTimes Objective-C Style Guide</a></p>\n<p>-<a href=\"http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml\">Google</a></p>\n<p>-<a href=\"https://github.com/github/objective-c-conventions\">GitHub</a></p>\n<p>-<a href=\"https://trac.adium.im/wiki/CodingStyle\">Adium</a></p>\n<p>-<a href=\"https://gist.github.com/soffes/812796\">Sam Soffes</a></p>\n<p>-<a href=\"http://cocoadevcentral.com/articles/000082.php\">CocoaDevCentral</a></p>\n<p>-<a href=\"http://lukeredpath.co.uk/blog/my-objective-c-style-guide.html\">Luke Redpath</a></p>\n<p>-<a href=\"http://www.cimgf.com/zds-code-style-guide/\">Marcus Zarra</a></p>\n<p>-<a href=\"https://github.com/raywenderlich/objective-c-style-guide\">Ray Wenderlich</a></p>\n"},{"title":"class-dump & Clutch 分析 APP 内部实现","url":"/2015/08/07/class-dump-and-Clutch/","content":"<p><a href=\"http://limboy.me/ios/2014/12/31/learning-ios.html\">自学 iOS 开发的一些经验</a>，是一篇充实有料常看常新的开发文章，提到了 “class-dump 从 Mach-O 文件生成 OC 头文件，有时想看看某个 App 大概是如何组织的会比较方便”。刚好最近项目想学习一下别人的APP，尝试了7-8个小时终于成功了，记录一下过程。最主要是介绍 Clutch 的文章太少，其输出路径被卡壳。</p>\n<p>##<a href=\"http://www.cnblogs.com/y279336671/p/3593530.html\">class-dump 安装</a></p>\n<ol>\n<li>下载地址 <a href=\"http://stevenygard.com/projects/class-dump/\">http://stevenygard.com/projects/class-dump/</a></li>\n<li>终端中输入open &#x2F;usr&#x2F;bin</li>\n<li>将解压出来的class-dump放入刚打开的目录。     </li>\n<li>更改class-dump权限     sudo chmod 777 &#x2F;usr&#x2F;bin&#x2F;class-dump</li>\n</ol>\n<p>##class-dump 用法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class-dump Name.app &gt; class-dump.md  </span><br><span class=\"line\">class-dump -H Name.app -o folderName  </span><br></pre></td></tr></table></figure>\n\n<p>第一行表示输出为一个文件方便搜索查找，第二行表示输出所以 class 到 folderName 文件夹。</p>\n<h2 id=\"解密工具-Clutch\"><a href=\"#解密工具-Clutch\" class=\"headerlink\" title=\"解密工具 Clutch\"></a>解密工具 Clutch</h2><p>由于 App Store 对 ipa 文件进行了加密，就有了下面的解密过程。</p>\n<p><a href=\"https://github.com/KJCracks/Clutch\">Clutch</a> on GitHub:</p>\n<blockquote>\n<p>Introducing Clutch, the fastest and most advanced dumping utility for the iPhone, iPod Touch, and iPad.</p>\n</blockquote>\n<blockquote>\n<p>Works with all devices, iOS versions, architecture types, with most binaries.</p>\n</blockquote>\n<blockquote>\n<p>This product is meant only for educational purposes and security research.</p>\n</blockquote>\n<blockquote>\n<p>Compiling: Use Xcode with iOSOpenDev installed</p>\n</blockquote>\n<p>可以直接去 Releases 下载编译好的版本，复制到 &#x2F;usr&#x2F;bin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">scp ~/Downloads/Clutch root@192.168.0.X:/usr/bin</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参看：<a href=\"http://itony.me/200.html\">iOS 使用Class-dump分析App内部实现：</a>：</p>\n<blockquote>\n<p>Openssh，然后电脑端使用ssh连接真机（默认密码是alpine），输入命令Clutch后会看到一个App列表，找到sing在列表中的序号是3，执行命令Clutch 3，这时它就真的开始运行了，运行后的结果是将原Appstore App转换为ipa文件；最重要的是，它被解密了~</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Clutch </span><br><span class=\"line\"></span><br><span class=\"line\">Clutch -d 3</span><br></pre></td></tr></table></figure>\n<p>但是在 Clutch 2.0 版目录改为：&#x2F;var&#x2F;mobile&#x2F;Documents&#x2F;Dumped&#x2F; 或 User&#x2F;Documents&#x2F;Dumped&#x2F;，导出 ipa 即可开始 class-dump。</p>\n<p><img src=\"http://i.imgur.com/JUAWRRV.png\" alt=\"Clutch 2.0 Dumped folder\"></p>\n"},{"title":"CocoaPods 安装步骤","url":"/2015/07/27/cocoapods-install/","content":"<p>看到极客班同学 Kevin Wang 分享的 CocoaPods 笔记：<a href=\"http://www.jianshu.com/p/c1063c9017b0\">iOS学习备忘录：CocoaPods基本使用技巧</a>，我自己就试着一下。</p>\n<p>以下安装 <a href=\"https://github.com/AFNetworking/AFNetworking\">AFNetworking</a> 的过程，同时参考了：<a href=\"https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking\">Getting Started with AFNetworking</a> 和 唐巧的 <a href=\"http://book.douban.com/subject/26287173/\">《iOS 开发进阶》</a>。</p>\n<p>感觉 <a href=\"https://github.com/AFNetworking/AFNetworking/wiki/Getting-Started-with-AFNetworking\">Getting Started with AFNetworking</a>，写的非常好了。我已经没有地方修改，就加了我在安装 CocoaPods 遇到的一个坑。看样子还是要英文顺溜才行。</p>\n<p>CocoaPods 网络库加 Podfile 配置文件，一个可以方便添加第三方库，而是团队协作容易统一版本，真真一个好东西。</p>\n<h2 id=\"Step-1-Download-CocoaPods\"><a href=\"#Step-1-Download-CocoaPods\" class=\"headerlink\" title=\"Step 1: Download CocoaPods\"></a>Step 1: Download CocoaPods</h2><p>第一步开 VPN，不要问为什么。终端输入：</p>\n<pre><code>$ sudo gem install cocoapods\n$ pod setup\n</code></pre>\n<blockquote>\n<p>我遇到没有安装没有如何进度和提示，重装 Ruby 和 RubyGems 就好了。</p>\n</blockquote>\n<pre><code> $ brew install ruby\n $ gem update --system\n \n \n</code></pre>\n<h2 id=\"Step-2-Create-a-Podfile\"><a href=\"#Step-2-Create-a-Podfile\" class=\"headerlink\" title=\"Step 2: Create a Podfile\"></a>Step 2: Create a Podfile</h2><p>用 Xcode 或其他编辑器新建 <code>Podfile</code>，放在项目根目录下：</p>\n<pre><code>$ touch Podfile\n$ open -a Xcode Podfile\n</code></pre>\n<p>并复制下面内容到 <code>Podfile</code>：</p>\n<pre><code>source &#39;https://github.com/CocoaPods/Specs.git&#39;\nplatform :ios, &#39;7.0&#39;\npod &#39;AFNetworking&#39;, &#39;~&gt; 2.5&#39;\n</code></pre>\n<h2 id=\"Step-3-Install-Dependencies\"><a href=\"#Step-3-Install-Dependencies\" class=\"headerlink\" title=\"Step 3: Install Dependencies\"></a>Step 3: Install Dependencies</h2><pre><code>$ pod install\n</code></pre>\n<p>以后只要打开 Xcode workspace (<code>.xcworkspace</code>)才行</p>\n<pre><code>$ open &lt;YourProjectName&gt;.xcworkspace\n</code></pre>\n<h2 id=\"Step-4-Dive-In\"><a href=\"#Step-4-Dive-In\" class=\"headerlink\" title=\"Step 4: Dive In!\"></a>Step 4: Dive In!</h2><p>大功告成，至此就可以使用 AFNetworking 了。记得在需要的类中 <code>#import</code> 头文件。</p>\n<blockquote>\n<p>最后分享一个在<a href=\"http://liqi.io/\">利器</a>上看到的利器：<a href=\"https://www.pushbullet.com/\">Pushbullet</a> 是跨平台双向文件传输工具。如果你同时使用 Mac、ios 和 Android 又想要在设备间无线传输图片、文字，那么你一定需要这样的工具。</p>\n</blockquote>\n<blockquote>\n<p>其实还有隐藏功能共享剪切板，瞬间变成神器了，有没有？比微信和 Airdrop 方便多了。</p>\n</blockquote>\n"},{"title":"English block me to learn","url":"/2015/05/05/english-block-me-to-learn/","content":"<p>From junior high school I start learn english, like a child it’s just psittacosis pronunciation and remember the chinese meanings. Without english-speaking environment, english is just a course. Like other course, I forget nearly everything.<br> <span id=\"more\"></span></p>\n<p>Nowadays I want learn some development knowlege and some course online, feel so hard. Mostly can’t understand, because of my little vocabulary.</p>\n<p>Now english or chinese is hard choose. Chinese is very quickly reading and easily understanding. But only use english more, I can learn more knowlege in english. I need quickly learning iOS development and get a job, and learning english 1 hour everyday.</p>\n<p>#英语阻碍我学习</p>\n<p>从小就开始学习中文，英文起步晚了15年，但不至于语言能力差别如此大。多半是因为缺乏一个使用英文的环境，差不多现在的英文能力退化到1000词汇量。最近学习开发和一些在线课程时，感觉明显吃力，效率大不如中文教程。词汇量太小和听读速度太低，简直到不能忍的地步。与之对比的是，我的中文词汇量也算是丰富，一些古文熟语也算半解。</p>\n<p>目下，我只能选择中文教程，因为效率更快。平时也可以抽点时间不断学习英文，以便接触和学习更多的知识。</p>\n"},{"title":"fastlane 自动化 App 提交流程工具","url":"/2015/08/13/fastlane/","content":"<p><img src=\"https://fastlane.tools/assets/img/logo-desktop-large.png\" alt=\"fastlane\"></p>\n<blockquote>\n<p>fastlane lets you define and run your deployment pipelines for different environments. It helps you unify your app’s release process and automate the whole process. fastlane connects all fastlane tools and third party tools, like CocoaPods and xctool.</p>\n</blockquote>\n<p>fastlane 是一款自动化 App 提交流程工具，也拆分了开了每一个工具，也可以直接按照下面的工作流一步提交 App Store。</p>\n<ul>\n<li><p>snapshot<br>把你的iOS应用程序的本地化语言自动截屏</p>\n</li>\n<li><p>deliver<br>一行命令上传截图，元数据和应用程序到 App Store</p>\n</li>\n<li><p>frameit<br>快速把你的截图到正确的设备框架</p>\n</li>\n<li><p>gym<br>快速打包 iOS 应用程序成 ipa</p>\n</li>\n</ul>\n<p>感兴趣的话，赶紧去官网 <a href=\"https://fastlane.tools/#\">https://fastlane.tools/#</a>  或  <a href=\"https://github.com/KrauseFx/fastlane\">https://github.com/KrauseFx/fastlane</a>  试一试。希望能够节约到你宝贵的时间。</p>\n<p><img src=\"https://fastlane.tools/assets/img/diagram.png\" alt=\"fastlane workflow\"></p>\n"},{"title":"如何成为一名优秀的设计师","url":"/2015/05/22/how-to-be-an-excellent-designer/","content":"<p>如何成为一名优秀的设计师：罗子雄<br>@TEDx Chongqing</p>\n<iframe height=395 width=700 src=\"http://player.youku.com/embed/XOTU4NzE4NTQ4\" frameborder=0 allowfullscreen></iframe>\n\n<p>##入门</p>\n<ul>\n<li>看：<a href=\"https://www.behance.net/\">Bēhance</a>、<a href=\"https://www.pinterest.com/\">Pinterest</a>、<a href=\"https://500px.com/\">500px</a>、<a href=\"http://www.thefwa.com/\">FWA</a>、<a href=\"https://www.artstation.com/\">ArtStation</a>、<a href=\"https://dribbble.com/\">dribbble</a></li>\n<li>做</li>\n<li>基础实例教程</li>\n<li>教育机构：<a href=\"https://www.gnomon.edu/\">GNOMON</a>、<a href=\"http://www.digitaltutors.com/\">digital-tutors</a>、<a href=\"http://www.aboutcg.com/\">ABOUTCG</a></li>\n<li>有问题，问 Google</li>\n<li>大问题拆分小问题</li>\n<li>想：为什么</li>\n</ul>\n<p>##提高</p>\n<ul>\n<li><p>看 v2.0</p>\n</li>\n<li><p>做 v2.0：模仿、参赛</p>\n<ul>\n<li>借鉴</li>\n<li>改进</li>\n<li>组合</li>\n</ul>\n</li>\n<li><p>想 v2.0</p>\n</li>\n</ul>\n<p>虽然目录已经整理很好，但是为了多说话，我就讲讲的感受。 最近接触 iOS 开发需要做 logo 和 UI 设计，才开始接触设计方面，发现是一门创造美的过程。罗子雄说的方法很平白，也易于操作。但于我这般没有自律和执行力的人，报班学习最好，定闹钟次之，</p>\n"},{"title":"How to Play, Record, and Edit Videos in iOS - Notes","url":"/2015/08/16/how-to-play-record-edit-videos-in-ios-notes/","content":"<p>Original post on Ray Wenderlich: <a href=\"http://www.raywenderlich.com/13418/how-to-play-record-edit-videos-in-ios\">http://www.raywenderlich.com/13418/how-to-play-record-edit-videos-in-ios</a></p>\n<p>This post is a step by step instruction. Now I copy add some explanation just in the code. Hope I can understand the every step meaning and easy to read.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/5369602egw1ev5ae7lzbnj20w80kigof.jpg\" alt=\"Edit in AVFoundation\"></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  MergeVideo.m</span></span><br><span class=\"line\"><span class=\"comment\">//  VideoPlayRecord</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Abdul Azeem Khan on 5/9/12.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2012 DataInvent. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;MergeVideo.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MergeVideo</span></span></span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> ActivityView;</span><br><span class=\"line\"><span class=\"keyword\">@synthesize</span> firstAsset, secondAsset, audioAsset;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Loaded&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Releases the view if it doesn&#x27;t have a superview.</span></span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Release any cached data, images, etc that aren&#x27;t in use.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - View lifecycle</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - Load assests methods</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)LoadAssetOne:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">UIImagePickerController</span> isSourceTypeAvailable:</span><br><span class=\"line\">         <span class=\"built_in\">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>] == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Error&quot;</span> message:<span class=\"string\">@&quot;No Saved Album Found&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [alert show];        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        isSelectingAssetOne = <span class=\"literal\">TRUE</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> startMediaBrowserFromViewController: <span class=\"keyword\">self</span></span><br><span class=\"line\">                                    usingDelegate: <span class=\"keyword\">self</span>];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)LoadAssetTwo:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"built_in\">UIImagePickerController</span> isSourceTypeAvailable:</span><br><span class=\"line\">         <span class=\"built_in\">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>] == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Error&quot;</span> message:<span class=\"string\">@&quot;No Saved Album Found&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [alert show];</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        isSelectingAssetOne = <span class=\"literal\">FALSE</span>;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> startMediaBrowserFromViewController: <span class=\"keyword\">self</span></span><br><span class=\"line\">                                    usingDelegate: <span class=\"keyword\">self</span>];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>) startMediaBrowserFromViewController: (<span class=\"built_in\">UIViewController</span>*) controller</span><br><span class=\"line\">                               usingDelegate: (<span class=\"type\">id</span> &lt;<span class=\"built_in\">UIImagePickerControllerDelegate</span>,</span><br><span class=\"line\">                                               <span class=\"built_in\">UINavigationControllerDelegate</span>&gt;) delegate &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (([<span class=\"built_in\">UIImagePickerController</span> isSourceTypeAvailable:</span><br><span class=\"line\">          <span class=\"built_in\">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>] == <span class=\"literal\">NO</span>)</span><br><span class=\"line\">        || (delegate == <span class=\"literal\">nil</span>)</span><br><span class=\"line\">        || (controller == <span class=\"literal\">nil</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    <span class=\"built_in\">UIImagePickerController</span> *mediaUI = [[<span class=\"built_in\">UIImagePickerController</span> alloc] init];</span><br><span class=\"line\">    mediaUI.sourceType = <span class=\"built_in\">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mediaUI.mediaTypes = [[<span class=\"built_in\">NSArray</span> alloc] initWithObjects: (<span class=\"built_in\">NSString</span> *) kUTTypeMovie, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Hides the controls for moving &amp; scaling pictures, or for</span></span><br><span class=\"line\">    <span class=\"comment\">// trimming movies. To instead show the controls, use YES.</span></span><br><span class=\"line\">    mediaUI.allowsEditing = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mediaUI.delegate = delegate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> presentViewController: mediaUI animated: <span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)LoadAudio:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    <span class=\"built_in\">MPMediaPickerController</span> *mediaPicker = [[<span class=\"built_in\">MPMediaPickerController</span> alloc] initWithMediaTypes: <span class=\"built_in\">MPMediaTypeAny</span>];</span><br><span class=\"line\">    mediaPicker.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    mediaPicker.prompt = <span class=\"string\">@&quot;Select Music&quot;</span>;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> presentViewController:mediaPicker animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - Conform MPMediaPickerControllerDelegate</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) mediaPicker: (<span class=\"built_in\">MPMediaPickerController</span> *) mediaPicker didPickMediaItems: (<span class=\"built_in\">MPMediaItemCollection</span> *) mediaItemCollection</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSArray</span> * SelectedSong = [mediaItemCollection items];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>([SelectedSong count]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">MPMediaItem</span> * SongItem = [SelectedSong objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *SongURL = [SongItem valueForProperty: <span class=\"built_in\">MPMediaItemPropertyAssetURL</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        audioAsset = [<span class=\"built_in\">AVAsset</span> assetWithURL:SongURL];</span><br><span class=\"line\">         <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Audio Loaded&quot;</span>);</span><br><span class=\"line\">         <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Asset Loaded&quot;</span> message:<span class=\"string\">@&quot;Audio Loaded&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">         [alert show];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated: <span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">void</span>) mediaPickerDidCancel: (<span class=\"built_in\">MPMediaPickerController</span> *) mediaPicker &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated: <span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - Conform UIImagePickerControllerDelegate</span></span><br><span class=\"line\"><span class=\"comment\">// For responding to the user tapping Cancel.</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) imagePickerControllerDidCancel: (<span class=\"built_in\">UIImagePickerController</span> *) picker &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated: <span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For responding to the user accepting a newly-captured picture or movie</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>) imagePickerController: (<span class=\"built_in\">UIImagePickerController</span> *) picker</span><br><span class=\"line\"> didFinishPickingMediaWithInfo: (<span class=\"built_in\">NSDictionary</span> *) info &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *mediaType = [info objectForKey: <span class=\"built_in\">UIImagePickerControllerMediaType</span>];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissModalViewControllerAnimated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Handle a movie capture</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CFStringCompare</span> ((__bridge_retained <span class=\"built_in\">CFStringRef</span>) mediaType, kUTTypeMovie, <span class=\"number\">0</span>)</span><br><span class=\"line\">        == kCFCompareEqualTo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isSelectingAssetOne)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Video One  Loaded&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Asset Loaded&quot;</span> message:<span class=\"string\">@&quot;Video One Loaded&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            [alert show];</span><br><span class=\"line\">            firstAsset = [<span class=\"built_in\">AVAsset</span> assetWithURL:[info objectForKey:<span class=\"built_in\">UIImagePickerControllerMediaURL</span>]];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;Video two Loaded&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Asset Loaded&quot;</span> message:<span class=\"string\">@&quot;Video Two Loaded&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">            [alert show];</span><br><span class=\"line\">            secondAsset = [<span class=\"built_in\">AVAsset</span> assetWithURL:[info objectForKey:<span class=\"built_in\">UIImagePickerControllerMediaURL</span>]];        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> mark - MergeAndSave methods</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">IBAction</span>)MergeAndSave:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(firstAsset !=<span class=\"literal\">nil</span> &amp;&amp; secondAsset!=<span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        [ActivityView startAnimating];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 1 - Create AVMutableComposition Object.This object will hold our multiple AVMutableCompositionTrack.</span></span><br><span class=\"line\">        <span class=\"comment\">// AVMutableComposition is a mutable subclass of AVComposition you use when you want to create a new composition from existing assets. You can add and remove tracks, and you can add, remove, and scale time ranges.</span></span><br><span class=\"line\">        <span class=\"built_in\">AVMutableComposition</span>* mixComposition = [[<span class=\"built_in\">AVMutableComposition</span> alloc] init];</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 2 - VIDEO TRACK</span></span><br><span class=\"line\">        <span class=\"comment\">// AVMutableCompositionTrack lets you for insert, remove, and scale track segments without affecting their low-level representation (that is, the operations you perform are non-destructive on the original).</span></span><br><span class=\"line\">        <span class=\"built_in\">AVMutableCompositionTrack</span> *firstTrack = [mixComposition addMutableTrackWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span> preferredTrackID:kCMPersistentTrackID_Invalid];</span><br><span class=\"line\">        [firstTrack insertTimeRange:<span class=\"built_in\">CMTimeRangeMake</span>(kCMTimeZero, firstAsset.duration) ofTrack:[[firstAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>] objectAtIndex:<span class=\"number\">0</span>] atTime:kCMTimeZero error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"built_in\">AVMutableCompositionTrack</span> *secondTrack = [mixComposition addMutableTrackWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span> preferredTrackID:kCMPersistentTrackID_Invalid];</span><br><span class=\"line\">        [secondTrack insertTimeRange:<span class=\"built_in\">CMTimeRangeMake</span>(kCMTimeZero, secondAsset.duration) ofTrack:[[secondAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>] objectAtIndex:<span class=\"number\">0</span>] atTime:firstAsset.duration error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 3 - AUDIO TRACK</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(audioAsset!=<span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"built_in\">AVMutableCompositionTrack</span> *AudioTrack = [mixComposition addMutableTrackWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span> preferredTrackID:kCMPersistentTrackID_Invalid];</span><br><span class=\"line\">            [AudioTrack insertTimeRange:<span class=\"built_in\">CMTimeRangeMake</span>(kCMTimeZero, <span class=\"built_in\">CMTimeAdd</span>(firstAsset.duration, secondAsset.duration)) ofTrack:[[audioAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>] objectAtIndex:<span class=\"number\">0</span>] atTime:kCMTimeZero error:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 4 - Set AVMutableVideoCompositionLayerInstruction</span></span><br><span class=\"line\">        <span class=\"comment\">// AVMutableVideoCompositionLayerInstruction used to modify the transform, cropping, and opacity ramps to apply to a given track in a composition.</span></span><br><span class=\"line\">        <span class=\"built_in\">AVMutableVideoCompositionInstruction</span> * MainInstruction = [<span class=\"built_in\">AVMutableVideoCompositionInstruction</span> videoCompositionInstruction];</span><br><span class=\"line\">        MainInstruction.timeRange = <span class=\"built_in\">CMTimeRangeMake</span>(kCMTimeZero, <span class=\"built_in\">CMTimeAdd</span>(firstAsset.duration, secondAsset.duration));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//FIXING ORIENTATION//</span></span><br><span class=\"line\">        <span class=\"built_in\">AVMutableVideoCompositionLayerInstruction</span> *FirstlayerInstruction = [<span class=\"built_in\">AVMutableVideoCompositionLayerInstruction</span> videoCompositionLayerInstructionWithAssetTrack:firstTrack];</span><br><span class=\"line\">        <span class=\"built_in\">AVAssetTrack</span> *FirstAssetTrack = [[firstAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>] objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">UIImageOrientation</span> FirstAssetOrientation_  = <span class=\"built_in\">UIImageOrientationUp</span>;</span><br><span class=\"line\">        <span class=\"type\">BOOL</span>  isFirstAssetPortrait_  = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        <span class=\"built_in\">CGAffineTransform</span> firstTransform = FirstAssetTrack.preferredTransform;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTransform.a == <span class=\"number\">0</span> &amp;&amp; firstTransform.b == <span class=\"number\">1.0</span> &amp;&amp; firstTransform.c == <span class=\"number\">-1.0</span> &amp;&amp; firstTransform.d == <span class=\"number\">0</span>)  &#123;FirstAssetOrientation_= <span class=\"built_in\">UIImageOrientationRight</span>; isFirstAssetPortrait_ = <span class=\"literal\">YES</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTransform.a == <span class=\"number\">0</span> &amp;&amp; firstTransform.b == <span class=\"number\">-1.0</span> &amp;&amp; firstTransform.c == <span class=\"number\">1.0</span> &amp;&amp; firstTransform.d == <span class=\"number\">0</span>)  &#123;FirstAssetOrientation_ =  <span class=\"built_in\">UIImageOrientationLeft</span>; isFirstAssetPortrait_ = <span class=\"literal\">YES</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTransform.a == <span class=\"number\">1.0</span> &amp;&amp; firstTransform.b == <span class=\"number\">0</span> &amp;&amp; firstTransform.c == <span class=\"number\">0</span> &amp;&amp; firstTransform.d == <span class=\"number\">1.0</span>)   &#123;FirstAssetOrientation_ =  <span class=\"built_in\">UIImageOrientationUp</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(firstTransform.a == <span class=\"number\">-1.0</span> &amp;&amp; firstTransform.b == <span class=\"number\">0</span> &amp;&amp; firstTransform.c == <span class=\"number\">0</span> &amp;&amp; firstTransform.d == <span class=\"number\">-1.0</span>) &#123;FirstAssetOrientation_ = <span class=\"built_in\">UIImageOrientationDown</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> FirstAssetScaleToFitRatio = <span class=\"number\">320.0</span>/FirstAssetTrack.naturalSize.width;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFirstAssetPortrait_)&#123;</span><br><span class=\"line\">            FirstAssetScaleToFitRatio = <span class=\"number\">320.0</span>/FirstAssetTrack.naturalSize.height;</span><br><span class=\"line\">            <span class=\"built_in\">CGAffineTransform</span> FirstAssetScaleFactor = <span class=\"built_in\">CGAffineTransformMakeScale</span>(FirstAssetScaleToFitRatio,FirstAssetScaleToFitRatio);</span><br><span class=\"line\">            [FirstlayerInstruction setTransform:<span class=\"built_in\">CGAffineTransformConcat</span>(FirstAssetTrack.preferredTransform, FirstAssetScaleFactor) atTime:kCMTimeZero];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">CGAffineTransform</span> FirstAssetScaleFactor = <span class=\"built_in\">CGAffineTransformMakeScale</span>(FirstAssetScaleToFitRatio,FirstAssetScaleToFitRatio);</span><br><span class=\"line\">            [FirstlayerInstruction setTransform:<span class=\"built_in\">CGAffineTransformConcat</span>(<span class=\"built_in\">CGAffineTransformConcat</span>(FirstAssetTrack.preferredTransform, FirstAssetScaleFactor),<span class=\"built_in\">CGAffineTransformMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>)) atTime:kCMTimeZero];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [FirstlayerInstruction setOpacity:<span class=\"number\">0.0</span> atTime:firstAsset.duration];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">AVMutableVideoCompositionLayerInstruction</span> *SecondlayerInstruction = [<span class=\"built_in\">AVMutableVideoCompositionLayerInstruction</span> videoCompositionLayerInstructionWithAssetTrack:secondTrack];</span><br><span class=\"line\">        <span class=\"built_in\">AVAssetTrack</span> *SecondAssetTrack = [[secondAsset tracksWithMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>] objectAtIndex:<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">UIImageOrientation</span> SecondAssetOrientation_  = <span class=\"built_in\">UIImageOrientationUp</span>;</span><br><span class=\"line\">        <span class=\"type\">BOOL</span>  isSecondAssetPortrait_  = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        <span class=\"built_in\">CGAffineTransform</span> secondTransform = SecondAssetTrack.preferredTransform;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(secondTransform.a == <span class=\"number\">0</span> &amp;&amp; secondTransform.b == <span class=\"number\">1.0</span> &amp;&amp; secondTransform.c == <span class=\"number\">-1.0</span> &amp;&amp; secondTransform.d == <span class=\"number\">0</span>)  &#123;SecondAssetOrientation_= <span class=\"built_in\">UIImageOrientationRight</span>; isSecondAssetPortrait_ = <span class=\"literal\">YES</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(secondTransform.a == <span class=\"number\">0</span> &amp;&amp; secondTransform.b == <span class=\"number\">-1.0</span> &amp;&amp; secondTransform.c == <span class=\"number\">1.0</span> &amp;&amp; secondTransform.d == <span class=\"number\">0</span>)  &#123;SecondAssetOrientation_ =  <span class=\"built_in\">UIImageOrientationLeft</span>; isSecondAssetPortrait_ = <span class=\"literal\">YES</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(secondTransform.a == <span class=\"number\">1.0</span> &amp;&amp; secondTransform.b == <span class=\"number\">0</span> &amp;&amp; secondTransform.c == <span class=\"number\">0</span> &amp;&amp; secondTransform.d == <span class=\"number\">1.0</span>)   &#123;SecondAssetOrientation_ =  <span class=\"built_in\">UIImageOrientationUp</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(secondTransform.a == <span class=\"number\">-1.0</span> &amp;&amp; secondTransform.b == <span class=\"number\">0</span> &amp;&amp; secondTransform.c == <span class=\"number\">0</span> &amp;&amp; secondTransform.d == <span class=\"number\">-1.0</span>) &#123;SecondAssetOrientation_ = <span class=\"built_in\">UIImageOrientationDown</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">CGFloat</span> SecondAssetScaleToFitRatio = <span class=\"number\">320.0</span>/SecondAssetTrack.naturalSize.width;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isSecondAssetPortrait_)&#123;</span><br><span class=\"line\">            SecondAssetScaleToFitRatio = <span class=\"number\">320.0</span>/SecondAssetTrack.naturalSize.height;</span><br><span class=\"line\">            <span class=\"built_in\">CGAffineTransform</span> SecondAssetScaleFactor = <span class=\"built_in\">CGAffineTransformMakeScale</span>(SecondAssetScaleToFitRatio,SecondAssetScaleToFitRatio);</span><br><span class=\"line\">            [SecondlayerInstruction setTransform:<span class=\"built_in\">CGAffineTransformConcat</span>(SecondAssetTrack.preferredTransform, SecondAssetScaleFactor) atTime:firstAsset.duration];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">            <span class=\"built_in\">CGAffineTransform</span> SecondAssetScaleFactor = <span class=\"built_in\">CGAffineTransformMakeScale</span>(SecondAssetScaleToFitRatio,SecondAssetScaleToFitRatio);</span><br><span class=\"line\">            [SecondlayerInstruction setTransform:<span class=\"built_in\">CGAffineTransformConcat</span>(<span class=\"built_in\">CGAffineTransformConcat</span>(SecondAssetTrack.preferredTransform, SecondAssetScaleFactor),<span class=\"built_in\">CGAffineTransformMakeTranslation</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>)) atTime:firstAsset.duration];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">       </span><br><span class=\"line\">        MainInstruction.layerInstructions = [<span class=\"built_in\">NSArray</span> arrayWithObjects:FirstlayerInstruction,SecondlayerInstruction,<span class=\"literal\">nil</span>];;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 5 - Mergo AVMutableVideoCompositionLayerInstruction into AVMutableVideoComposition</span></span><br><span class=\"line\">        <span class=\"comment\">// AVMutableComposition is a mutable subclass of AVComposition you use when you want to create a new composition from existing assets. You can add and remove tracks, and you can add, remove, and scale time ranges.</span></span><br><span class=\"line\">        <span class=\"built_in\">AVMutableVideoComposition</span> *MainCompositionInst = [<span class=\"built_in\">AVMutableVideoComposition</span> videoComposition];</span><br><span class=\"line\">        MainCompositionInst.instructions = [<span class=\"built_in\">NSArray</span> arrayWithObject:MainInstruction];</span><br><span class=\"line\">        MainCompositionInst.frameDuration = <span class=\"built_in\">CMTimeMake</span>(<span class=\"number\">1</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">        MainCompositionInst.renderSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">320.0</span>, <span class=\"number\">480.0</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 6 - Get path</span></span><br><span class=\"line\">        <span class=\"built_in\">NSArray</span> *paths = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>);</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *documentsDirectory = [paths objectAtIndex:<span class=\"number\">0</span>];\t</span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *myPathDocs =  [documentsDirectory stringByAppendingPathComponent:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@&quot;mergeVideo-%d.mov&quot;</span>,arc4random() % <span class=\"number\">1000</span>]];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:myPathDocs];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 7 - Create exporter with AVAssetExportSession</span></span><br><span class=\"line\">        <span class=\"comment\">// An AVAssetExportSession object transcodes the contents of an AVAsset source object to create an output of the form described by a specified export preset.</span></span><br><span class=\"line\">        <span class=\"built_in\">AVAssetExportSession</span> *exporter = [[<span class=\"built_in\">AVAssetExportSession</span> alloc] initWithAsset:mixComposition presetName:<span class=\"built_in\">AVAssetExportPresetHighestQuality</span>];</span><br><span class=\"line\">        exporter.outputURL=url;</span><br><span class=\"line\">        exporter.outputFileType = <span class=\"built_in\">AVFileTypeQuickTimeMovie</span>;</span><br><span class=\"line\">        exporter.videoComposition = MainCompositionInst;</span><br><span class=\"line\">        exporter.shouldOptimizeForNetworkUse = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [exporter exportAsynchronouslyWithCompletionHandler:^</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                 [<span class=\"keyword\">self</span> exportDidFinish:exporter];</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">         &#125;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// exportDidFinish method: save the mergo video to Photos Album</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)exportDidFinish:(<span class=\"built_in\">AVAssetExportSession</span>*)session &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(session.status == <span class=\"built_in\">AVAssetExportSessionStatusCompleted</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *outputURL = session.outputURL;</span><br><span class=\"line\">        <span class=\"comment\">// 8 - Output video</span></span><br><span class=\"line\">        <span class=\"comment\">// An instance of ALAssetsLibrary provides access to the videos and photos that are under the control of the Photos application.</span></span><br><span class=\"line\">        ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([library videoAtPathIsCompatibleWithSavedPhotosAlbum:outputURL]) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            [library writeVideoAtPathToSavedPhotosAlbum:outputURL</span><br><span class=\"line\">                                        completionBlock:^(<span class=\"built_in\">NSURL</span> *assetURL, <span class=\"built_in\">NSError</span> *error)&#123;</span><br><span class=\"line\">                                            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                                                <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">                                                    <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Error&quot;</span> message:<span class=\"string\">@&quot;Video Saving Failed&quot;</span>  delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">                                                    [alert show];</span><br><span class=\"line\">                                                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                                                    <span class=\"built_in\">UIAlertView</span> *alert = [[<span class=\"built_in\">UIAlertView</span> alloc] initWithTitle:<span class=\"string\">@&quot;Video Saved&quot;</span> message:<span class=\"string\">@&quot;Saved To Photo Album&quot;</span>  delegate:<span class=\"keyword\">self</span> cancelButtonTitle:<span class=\"string\">@&quot;Ok&quot;</span> otherButtonTitles: <span class=\"literal\">nil</span>];</span><br><span class=\"line\">                                                    [alert show];</span><br><span class=\"line\">                                                     &#125;</span><br><span class=\"line\">                                                </span><br><span class=\"line\">                                            &#125;);</span><br><span class=\"line\">                                            </span><br><span class=\"line\">                                        &#125;];</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    audioAsset = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    firstAsset = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    secondAsset = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    [ActivityView stopAnimating];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"iOS Map","url":"/2015/09/01/iOS-Map/","content":"<p>按照<a href=\"http://weibo.com/pinxue\">@杨武</a>老师的学习和复习方法，我整理的 iOS Map。</p>\n<p>回家从头开始做了这个 Map，确实对梳理知识点和复习记忆有很多的帮助。其中 Blocks、Network &amp; Persistence 都还有待学习加强的点。以后学习新的还需要更新。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/5369602egw1eyccfaqwhzj21bu0qadll.jpg\" alt=\"iOS Map\"></p>\n"},{"title":"《iOS 编程》2. Objective-C","url":"/2015/07/23/iOS-Programming-4ed-2/","content":"<blockquote>\n<p>网站加了一个 <a href=\"https://github.com/hexojs/hexo-filter-auto-spacing\">hexo-filter-auto-spacing</a> 插件，中英文之间自动加空格😊</p>\n</blockquote>\n<h2 id=\"2-1-类和对象\"><a href=\"#2-1-类和对象\" class=\"headerlink\" title=\"2.1 类和对象\"></a>2.1 类和对象</h2><ul>\n<li><p>类和对象。对象通过实例变量保存属性的值。</p>\n</li>\n<li><p>类有方法，类似函数，调用对象的方法一般叫发消息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ partyInstance addAttendee: somePerson</span><br><span class=\"line\">                   withDish: deviledEggs]</span><br></pre></td></tr></table></figure></li>\n<li><p>方法的唯一性取决方法名。</p>\n</li>\n<li><p>实例变量的存取方法：get 和 set</p>\n</li>\n<li><p>发消息的三种语法：</p>\n<ul>\n<li>发消息[]：调用方法</li>\n<li>点语法.：存取实例变量</li>\n<li>下标语法[]：访问数组</li>\n</ul>\n</li>\n<li><p>类方法和实例方法区别：</p>\n<ul>\n<li>类方法通常用来创建对象，或者获取类的全局变量</li>\n<li>实例变量则是用来操作类的对象（对象就是类的实例），如存取方法</li>\n</ul>\n</li>\n<li><p>类方法的初始化</p>\n<p>必须选一个指定初始化方法，其他初始化方法可以调用指定初始化方法，形成一个初始化方法链<br><img src=\"http://ww2.sinaimg.cn/large/5369602ejw1eudiggqtaej20go08adgf.jpg\" alt=\"初始化方法链\"></p>\n</li>\n</ul>\n<h2 id=\"2-5-NSArray与-NSMultableArray\"><a href=\"#2-5-NSArray与-NSMultableArray\" class=\"headerlink\" title=\"2.5 NSArray与 NSMultableArray\"></a>2.5 NSArray与 NSMultableArray</h2><p>数组对象只能保存指向 Objective-C 对象的指针，不能保存基本类型和 C 结构加入数组对象。当然包装成 Objective-C 对象，就可以了，如 NSNumber、NSValue 和 NSDate。nil 包装成 NSNull 才能加入数组。</p>\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"《iOS 编程》3. 通过 ARC 管理内存","url":"/2015/07/24/iOS-Programming-4ed-3/","content":"<h2 id=\"3-1-栈\"><a href=\"#3-1-栈\" class=\"headerlink\" title=\"3.1 栈\"></a>3.1 栈</h2><p>栈对应方法或函数的帧，堆则是包含大量 iOS 应用创建的对象</p>\n<h2 id=\"3-3-指针变量与对象所有权\"><a href=\"#3-3-指针变量与对象所有权\" class=\"headerlink\" title=\"3.3 指针变量与对象所有权\"></a>3.3 指针变量与对象所有权</h2><p>引用计数就是社保局，调查每个人有几份工作，一个正式工作，或兼职几份工作，或失业。失业，内存就会被释放，就会给你这个 free man 推荐新工作。</p>\n<p>那些情况会使对象失去拥有者：</p>\n<ul>\n<li>修改指针指向另一个变量（跳槽）</li>\n<li>设为 nil（辞职）</li>\n<li>对象拥有者被释放（公司倒闭）</li>\n<li>从 collection 对象中删除对象（裁员）</li>\n</ul>\n<p>当对象没有拥有者时，指针变量的内存就该被释放。</p>\n<h2 id=\"3-4-强引用与弱引用\"><a href=\"#3-4-强引用与弱引用\" class=\"headerlink\" title=\"3.4 强引用与弱引用\"></a>3.4 强引用与弱引用</h2><p><img src=\"http://ww2.sinaimg.cn/large/5369602ejw1eue4oorli3j20go08amxk.jpg\" alt=\"解决强引用循环问题后的RandomItems\"><br>大部分强引用循环可以确定一个父子关系，子对象改为弱引用即可。</p>\n<p>Xcode 的 Leaks 工具可以帮忙找出强引用循环问题。</p>\n<h2 id=\"3-5-属性\"><a href=\"#3-5-属性\" class=\"headerlink\" title=\"3.5 属性\"></a>3.5 属性</h2><p>声明属性，等于隐式地声明和创建相应名称的实例变量，声明一对存取方法。当然我们还可以自定义存取方法。</p>\n<p>属性的特性（attribute）:</p>\n<ul>\n<li>多线程：nonatomic&#x2F;atomic</li>\n<li>读写：readwrite&#x2F;readonly</li>\n<li>内存管理：strong&#x2F;weak&#x2F;copy&#x2F;unsafe_unretained</li>\n</ul>\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"《iOS 编程》4. 视图层次结构","url":"/2015/07/27/iOS-Programming-4ed-4/","content":"<p>独立做练习的过程中学习和收获的很多，很多原本认为了解的知识变成了理解和会用的知识。官方文档还有待熟悉。</p>\n<p><img src=\"http://imgur.com/bdYyIqi.jpg\" alt=\"frame vs bounds\"></p>\n<h2 id=\"4-2-视图层次结构\"><a href=\"#4-2-视图层次结构\" class=\"headerlink\" title=\"4.2 视图层次结构\"></a>4.2 视图层次结构</h2><p><img src=\"http://i.imgur.com/m0Cjfz1.jpg\" alt=\"View\"></p>\n<h2 id=\"4-6-初级练习：绘制图片\"><a href=\"#4-6-初级练习：绘制图片\" class=\"headerlink\" title=\"4.6 初级练习：绘制图片\"></a>4.6 初级练习：绘制图片</h2><p><code>GWHypnosisView.m</code> 的 <code>- (void)drawRect:(CGRect)rect&#123;&#125;</code>添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 添加logo，中心点为屏幕中心点</span><br><span class=\"line\">CGRect logoFrame = CGRectMake(center.x - bounds.size.width / 4,  center.y - bounds.size.height / 4, bounds.size.width / 4 * 2, bounds.size.height / 4 * 2);</span><br><span class=\"line\">UIImage *logoimage = [UIImage imageNamed:@&quot;logo.png&quot;];</span><br><span class=\"line\">[logoimage drawInRect:logoFrame];</span><br><span class=\"line\">UIView *logoView = [[UIView alloc]initWithFrame:logoFrame];</span><br><span class=\"line\">[self.window addSubview:logoView];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-8-高级练习：阴影和渐变\"><a href=\"#4-8-高级练习：阴影和渐变\" class=\"headerlink\" title=\"4.8 高级练习：阴影和渐变\"></a>4.8 高级练习：阴影和渐变</h2><p><code>GWHypnosisView.m</code> 的 <code>- (void)drawRect:(CGRect)rect&#123;&#125;</code>添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 添加三角形，并添加渐变效果</span><br><span class=\"line\"></span><br><span class=\"line\">CGContextRef triangleContext = UIGraphicsGetCurrentContext();</span><br><span class=\"line\"></span><br><span class=\"line\">UIBezierPath *trianglePath = [[UIBezierPath alloc] init];</span><br><span class=\"line\">[trianglePath moveToPoint:CGPointMake(center.x + bounds.size.width / 3, center.y + bounds.size.height / 3)];</span><br><span class=\"line\">[trianglePath addLineToPoint:CGPointMake(center.x - bounds.size.width / 3, center.y + bounds.size.height / 3)];</span><br><span class=\"line\">[trianglePath addLineToPoint:CGPointMake(center.x, center.y - bounds.size.height / 3)];</span><br><span class=\"line\">[trianglePath addLineToPoint:CGPointMake(center.x + bounds.size.width / 3, center.y + bounds.size.height / 3)];</span><br><span class=\"line\">[trianglePath stroke];</span><br><span class=\"line\"></span><br><span class=\"line\">CGContextSaveGState(triangleContext);</span><br><span class=\"line\">[trianglePath addClip];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CGFloat locations[2] = &#123; 0.0, 1.0 &#125;;</span><br><span class=\"line\">CGFloat components[8] = &#123; 1.0, 1.0, 0.0, 1.0,</span><br><span class=\"line\">    0.0, 0.5, 0.0, 1.0 &#125;;</span><br><span class=\"line\">CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();</span><br><span class=\"line\">CGGradientRef gradient = CGGradientCreateWithColorComponents(colorspace, components, locations, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">CGPoint startPoint = CGPointMake(center.x, center.y + bounds.size.height / 3 );</span><br><span class=\"line\">CGPoint endPoint = CGPointMake(center.x, center.y - bounds.size.height / 3 );</span><br><span class=\"line\">CGContextDrawLinearGradient(triangleContext, gradient, startPoint, endPoint, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">CGGradientRelease(gradient);</span><br><span class=\"line\">CGColorSpaceRelease(colorspace);</span><br><span class=\"line\"></span><br><span class=\"line\">CGContextRestoreGState(triangleContext);</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加阴影</span><br><span class=\"line\">CGContextRef logoContext = UIGraphicsGetCurrentContext();</span><br><span class=\"line\">CGContextSaveGState(logoContext);</span><br><span class=\"line\">CGContextSetShadow(logoContext, CGSizeMake(4, 7), 3);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 添加logo，中心点为屏幕中心点</span><br><span class=\"line\">CGRect logoFrame = CGRectMake(center.x - bounds.size.width / 4,  center.y - bounds.size.height / 4, bounds.size.width / 4 * 2, bounds.size.height / 4 * 2);</span><br><span class=\"line\">UIImage *logoimage = [UIImage imageNamed:@&quot;logo.png&quot;];</span><br><span class=\"line\">[logoimage drawInRect:logoFrame];</span><br><span class=\"line\">UIView *logoView = [[UIView alloc]initWithFrame:logoFrame];</span><br><span class=\"line\">[self.window addSubview:logoView];</span><br><span class=\"line\"></span><br><span class=\"line\">CGContextRestoreGState(logoContext);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最终效果图：</p>\n<p><img src=\"http://i.imgur.com/zREns9p.png\" alt=\"Hypnosister\"></p>\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"《iOS 编程》5. 视图：重绘与 UIScrollView","url":"/2015/07/28/iOS-Programming-4ed-5/","content":"<h2 id=\"5-1-运行循环和重绘原理\"><a href=\"#5-1-运行循环和重绘原理\" class=\"headerlink\" title=\"5.1 运行循环和重绘原理\"></a>5.1 运行循环和重绘原理</h2><p>iOS 每次事件处理周期中只发送一次 <code>drawRect:</code> 消息。所以视图要重绘必须向其发送 <code>setNeedDisplay</code> 消息。</p>\n<h2 id=\"5-3-使用-UIScrollView\"><a href=\"#5-3-使用-UIScrollView\" class=\"headerlink\" title=\"5.3 使用 UIScrollView\"></a>5.3 使用 UIScrollView</h2><p>添加子视图，设置大小即可。类似一张大的画布，可以方便移动局部查看。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> screenRect = <span class=\"keyword\">self</span>.window.bounds;</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> bigRect = screenRect;</span><br><span class=\"line\">bigRect.size.width *= <span class=\"number\">2.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UIScrollView</span> *scrollView = [[<span class=\"built_in\">UIScrollView</span> alloc] initWithFrame:screenRect];</span><br><span class=\"line\">[scrollView setPagingEnabled:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.window addSubview:scrollView];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GWHypnosisView *hypnosisView = [[GWHypnosisView alloc] initWithFrame:screenRect];</span><br><span class=\"line\">[scrollView addSubview:hypnosisView];</span><br><span class=\"line\"></span><br><span class=\"line\">screenRect.origin.x += screenRect.size.width;</span><br><span class=\"line\">GWHypnosisView *anotherView = [[GWHypnosisView alloc] initWithFrame:screenRect];</span><br><span class=\"line\">[scrollView addSubview:anotherView];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">scrollView.contentSize = bigRect.size;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"《iOS 编程》6. 视图控制器","url":"/2015/07/28/iOS-Programming-4ed-6/","content":"<h2 id=\"6-5-添加本地通知\"><a href=\"#6-5-添加本地通知\" class=\"headerlink\" title=\"6.5 添加本地通知\"></a>6.5 添加本地通知</h2><p>书中没有提到申请通知权限，方法如下</p>\n<p><a href=\"http://stackoverflow.com/questions/24203066/ask-user-for-permission-to-show-alert-when-firing-local-notification\">add this code, it will show a alert view to ask user for permission.</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">if ([UIApplication instancesRespondToSelector:@selector(registerUserNotificationSettings:)]) &#123;</span><br><span class=\"line\">    [[UIApplication sharedApplication] registerUserNotificationSettings:[UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert|UIUserNotificationTypeSound|UIUserNotificationTypeBadge</span><br><span class=\"line\">                                                                                                          categories:nil]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-7-与视图控制器及其视图进行交互\"><a href=\"#6-7-与视图控制器及其视图进行交互\" class=\"headerlink\" title=\"6.7 与视图控制器及其视图进行交互\"></a>6.7 与视图控制器及其视图进行交互</h2><p><strong>视图控制器的生命周期方法（lifecycle method）：</strong></p>\n<ul>\n<li><p>application:didFinishLaunchingWithOptions:在该方法中设置和初始化应用窗口的根视图控制器。该方法只会在应用启动完毕后调用一次。</p>\n</li>\n<li><p>initWithNibName:bundle:该方法是UIViewController的指定初始化方法，创建视图控制器时，就会调用该方法。请注意，某些情况下，需要在同一个应用中创建多个相同的UIViewController子类对象，每次创建一个该类的对象时，都会调用一次该类的initWithNibName:bundle:方法。</p>\n</li>\n<li><p>loadView:可以覆盖该方法，使用代码方式设置视图控制器的view属性。</p>\n</li>\n<li><p>viewDidLoad可以覆盖该方法，设置使用NIB文件创建的视图对象。该方法会在视图控制器加载完视图后被调用。</p>\n</li>\n<li><p>viewWillAppear:可以覆盖该方法，设置使用NIB文件创建的视图对象。该方法和</p>\n</li>\n<li><p>viewDidAppear:会在每次视图控制器的view显示在屏幕上时被调用；相反，</p>\n</li>\n<li><p>viewWillDisappear:和viewDidDisappear:方法会在每次视图控制器的view从屏幕上消失时被调用。</p>\n</li>\n</ul>\n<h2 id=\"6-9-中级练习：控制逻辑\"><a href=\"#6-9-中级练习：控制逻辑\" class=\"headerlink\" title=\"6.9 中级练习：控制逻辑\"></a>6.9 中级练习：控制逻辑</h2><p>查文档不懂，这是个大问题，有待提高看文档具体怎么组织的能力。<a href=\"http://stackoverflow.com/questions/6688160/how-to-programmatically-add-a-uisegmentedcontrol-to-a-container-view\">Stack Overflow</a> 的答案运行崩溃，没有理解原理，<code>mainSegmentControl:</code> 方法没有声明。最后还是去 <a href=\"http://forums.bignerdranch.com/viewtopic.php?f=487&t=9844\">BNR论坛</a> 找到了答案。</p>\n<blockquote>\n<p>熟悉文档浏览 UIColor，其实也是不很精通颜色，但是还是大部分看懂了，也了解了目录结构和对应文本的样式。</p>\n</blockquote>\n<p>GWHypnosisViewController.m </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    // Do any additional setup after loading the view.</span><br><span class=\"line\">    NSLog(@&quot;GWHypnosisViewController loaded its view.&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化UISegmentedControl，设置大小和颜色</span><br><span class=\"line\">    UISegmentedControl *segmentedControl = [[UISegmentedControl alloc] initWithItems:@[@&quot;Red&quot;, @&quot;Green&quot;, @&quot;Blue&quot;]];</span><br><span class=\"line\">    segmentedControl.frame = CGRectMake(0, 0, 250, 50);</span><br><span class=\"line\">    segmentedControl.tintColor = [UIColor blackColor];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 注册UISegmentedControl</span><br><span class=\"line\">    [segmentedControl addTarget:self.view</span><br><span class=\"line\">                         action:@selector(mainSegmentControl:)</span><br><span class=\"line\">               forControlEvents: UIControlEventValueChanged];</span><br><span class=\"line\">    // 添加到视图</span><br><span class=\"line\">    [self.view addSubview:segmentedControl];</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>GWHypnosisView.h</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- (void)mainSegmentControl:(UISegmentedControl *)segment;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>GWHypnosisView.m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// mainSegmentControl: 方法用来接受 UISegmentedControl 发的消息</span><br><span class=\"line\">- (void)mainSegmentControl:(UISegmentedControl *)segment</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(segment.selectedSegmentIndex == 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // action for the first button (Current or Default)</span><br><span class=\"line\">        self.circleColor = [UIColor redColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(segment.selectedSegmentIndex == 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // action for the second button</span><br><span class=\"line\">        self.circleColor = [UIColor greenColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(segment.selectedSegmentIndex == 2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // action for the third button</span><br><span class=\"line\">        self.circleColor = [UIColor blueColor];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"《iOS 编程》7. 委托与文本输入","url":"/2015/07/29/iOS-Programming-4ed-7/","content":"<p>重读前言提到的学习方法：</p>\n<p>设定目标一天一章，找一个安静地场所，关闭手机和电脑各种聊天和通知，读书无法多任务并行，必须集中精力。</p>\n<ol>\n<li>通读整章</li>\n<li>编写代码和调试（特别有帮助）</li>\n<li>笔记</li>\n</ol>\n<p>最终目标：</p>\n<ul>\n<li>必须学会 Objective-C</li>\n<li>必须掌握 Cocoa 的常用技术：视图、控制器、内存管理、代理</li>\n<li>必须掌握框架和学会查看官方文档</li>\n</ul>\n<p><a href=\"http://simpleprogrammer.com/2012/12/09/the-4-most-important-skills-for-a-software-developer/\">The 4 Most Important Skills for a Software Developer</a>: If you can solve problems, learn things quickly, name things well and deal with people, you will have a much greater level of success in the long run than you will in specializing in any particular technology.</p>\n<p>上面这篇文章中提到解决问题的能力很重要，因为真实的编程工作内容就是解决问题，所以习题很重要，做习题就是解决问题，这也和本书提到调试非常有帮助不谋而合，因为你在调试就是在解决问题。</p>\n<blockquote>\n<p>发现我一直在寻求简单的道理（大道至简），习惯于归纳要旨和大纲。但是却忽略了细节，其实全局的理解和记忆也是必经之路。读书先薄再厚再薄，第二阶段最为繁长的耗时，但也是最重要的。</p>\n</blockquote>\n<h2 id=\"7-2-委托\"><a href=\"#7-2-委托\" class=\"headerlink\" title=\"7.2 委托\"></a>7.2 委托</h2><p>Delegation 翻译为委托&#x2F;代理</p>\n<p>代理的前三步：</p>\n<ul>\n<li>视图中创建一个代理协议</li>\n<li>视图中创建一个代理的属性，其类型是代理协议</li>\n<li>视图中使用代理的属性</li>\n</ul>\n<p>代理的后三步：</p>\n<ul>\n<li>控制器声明并完成代理协议</li>\n<li>控制器把自己作为视图的代理，通过设置代理的属性</li>\n<li>控制器实施代理的方法</li>\n</ul>\n<h2 id=\"7-8-中级练习：捏合-缩放\"><a href=\"#7-8-中级练习：捏合-缩放\" class=\"headerlink\" title=\"7.8 中级练习：捏合-缩放\"></a>7.8 中级练习：捏合-缩放</h2><p>习题提示部分大不大懂。对比了英文版，翻译的不对啊。看中文翻译有出入，看英文太慢。解决方法：还是看中文版，Demo 和习题都做完了，再看一遍英文版。先精通一门语言的再说，以后学其他的就容易了。</p>\n<p>谁让开发语言和大部分开发者都用英文呢，其实我现阶段看简单 Stack Overflow 和 Apple Document 都没有问题了，毕竟英文单词不多，也都是简单的词。希望以后能够直接看英文教材。</p>\n<p>又是看了 BNR 论坛答案： <a href=\"http://forums.bignerdranch.com/viewtopic.php?f=488&t=9983\">http://forums.bignerdranch.com/viewtopic.php?f=488&t=9983</a></p>\n<p>是我想复杂了，这里只是一个框架内置的协议，所以只要在<br><code>AppDelegate.m</code> 完成后三步就行了。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  AppDelegate.m</span></span><br><span class=\"line\"><span class=\"comment\">//  Hypnosister</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;AppDelegate.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"string\">&quot;GWHypnosisView.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">AppDelegate</span> () &lt;<span class=\"title\">UIScrollViewDelegate</span>&gt;  // ①</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setting property for the image view...</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) GWHypnosisView *scrollHypnosisView; <span class=\"comment\">// ②</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window = [[<span class=\"built_in\">UIWindow</span> alloc] initWithFrame:[[<span class=\"built_in\">UIScreen</span> mainScreen] bounds]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Override point for customization after application launch.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> screenRect = <span class=\"keyword\">self</span>.window.bounds;</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> bigRect = screenRect;</span><br><span class=\"line\">    bigRect.size.width *= <span class=\"number\">2.0</span>;</span><br><span class=\"line\">    bigRect.size.height *= <span class=\"number\">2.0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UIScrollView</span> *scrollView = [[<span class=\"built_in\">UIScrollView</span> alloc] initWithFrame:screenRect];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// setting some zooming properties</span></span><br><span class=\"line\">    scrollView.pagingEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    scrollView.minimumZoomScale = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    scrollView.maximumZoomScale = <span class=\"number\">6.0</span>;</span><br><span class=\"line\">    scrollView.contentSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">1280</span>, <span class=\"number\">960</span>);</span><br><span class=\"line\">    scrollView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.window addSubview:scrollView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.scrollHypnosisView = [[GWHypnosisView alloc] initWithFrame:bigRect];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    [scrollView addSubview:<span class=\"keyword\">self</span>.scrollHypnosisView];</span><br><span class=\"line\">    </span><br><span class=\"line\">    scrollView.contentSize = bigRect.size;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.window.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.window makeKeyAndVisible];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ③ zooming method definition</span></span><br><span class=\"line\">-(<span class=\"built_in\">UIView</span> *) viewForZoomingInScrollView:(<span class=\"built_in\">UIScrollView</span> *)scrollView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.scrollHypnosisView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"项目代码保存在我的-GitHub-iOSProgramming4edSolutions\"><a href=\"#项目代码保存在我的-GitHub-iOSProgramming4edSolutions\" class=\"headerlink\" title=\"项目代码保存在我的 GitHub: iOSProgramming4edSolutions\"></a>项目代码保存在我的 GitHub: <a href=\"https://github.com/gewill/iOSProgramming4edSolutions\">iOSProgramming4edSolutions</a></h2>"},{"title":"iOS 学习方法","url":"/2015/08/19/iOS-Study-Methods/","content":"<ul>\n<li>关掉各种聊天通讯的通知，安静的场所，集中精神学习。</li>\n<li>看视频教程：简单快速，按照进度表，系统的学习，贪多嚼不烂。</li>\n<li>延伸阅读：加深理解概念，不要太多，看看官方文档和一两篇博客</li>\n<li>做小练习：删删改改，真正会用</li>\n<li>应用到项目中：或大或小，这才是学习的目的，能用来做开发</li>\n<li>遵循遗忘曲线复习：花不了多长时间</li>\n</ul>\n"},{"title":"iOS 编程（第四版）","url":"/2015/05/08/iOS-Programming-4th-edtion/","content":"<p>IOS Programming: The Big Nerd Ranch Guide</p>\n<p>About the Book and Download Solutions:<br><a href=\"https://www.bignerdranch.com/we-write/ios-programming/\">https://www.bignerdranch.com/we-write/ios-programming/ </a></p>\n<p>中文注释项目代码见译者的 GitHub: <a href=\"https://github.com/dingdaojun/iOSProgramming4ed\">https://github.com/dingdaojun/iOSProgramming4ed</a></p>\n<p>看前言就知道这本书很好，如何使用本书和版式说明足见有道和用心。<br>望我能够如作者建议，一天一章，好好编写代码。<br><img src=\"http://i.imgur.com/8AGkg1e.png\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/7LcDy4a.png\" alt=\"Imgur\"><br><img src=\"http://i.imgur.com/1rROn9c.png\" alt=\"Imgur\"></p>\n"},{"title":"iOS UI 开发捷径 - 笔记","url":"/2018/03/06/iOS-UI-Develop-Shortcut-Notes/","content":"<p>该书对IB的讲解还是比较全面详细，建议大家读读，也算是差缺补漏。以下是我的一些笔记。</p>\n<ol>\n<li>xib 固化为 nib，storyboard 固化为 storyboardc。</li>\n<li>IB文件冲突，Open source 的方式查看和编辑。</li>\n<li>同一个sb文件中的不同的VC都应该设置一个不同的StoryboardID与之对应</li>\n<li>App 启动过程，手动新建 main.swift 即可编辑修改。</li>\n<li>IB文件的 Target Membership的作用：当工程的某个Target被编译，只有IB文件中该Target被勾选，才会被序列化为对应的nib或storyboardc文件，并存放在该Target对应的Bundle中。</li>\n<li>Custom Class -&gt; Module 标签是针对Swift设计的，代表命名空间。</li>\n<li>Document -&gt; Label 给每个控件起一个简短的名字。</li>\n<li>IB使用Auto Layout，根据实时反馈机制，发现问题解决问题。</li>\n</ol>\n"},{"title":"iPerfman Help","url":"/2023/02/20/iPerfman-Help-en/","content":"<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-zh_CN/\">简体中文帮助</a></p>\n<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-zh_Hant/\">繁體中文帮助</a></p>\n<h2 id=\"Test-how-fast-and-reliable-is-Wi-Fi-and-Ethernet\"><a href=\"#Test-how-fast-and-reliable-is-Wi-Fi-and-Ethernet\" class=\"headerlink\" title=\"Test how fast and reliable is Wi-Fi and Ethernet?\"></a>Test how fast and reliable is Wi-Fi and Ethernet?</h2><p>Online tests like <a href=\"https://www.speedtest.net/\">Speedtest</a>、Netflix‘s <a href=\"https://fast.com/\">FAST</a> and <a href=\"https://www.dslreports.com/speedtest\">DSLReports</a> will tell you how fast your Internet connection is overall, but the speed of your service provider isn’t the only factor. Wi-Fi itself can greatly affect speed, latency, and reliability. And as broadband Internet connections get faster and faster, Wi-Fi has often become a bottleneck. iPerfman helps you test the speed and volatility of your Wi-Fi connection. iPerfman helps you test your Wi-Fi connection in isolation from your Internet connection.</p>\n<h2 id=\"How-to-test\"><a href=\"#How-to-test\" class=\"headerlink\" title=\"How to test?\"></a>How to test?</h2><p>You need a computer to run it on that is connected to your home network’s router with a network cable. It is best to run a <a href=\"https://openwrt.org/\">soft router</a> so that the router transmits data that is closest to the real Internet mode.</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p> You need to install iPerfman in macOS, open the listen, find the LAN IP address, such as <code>192.168.8.8</code>, set it as the server, and click start button.<br> <img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-listen-macOS-en.jpeg\" alt=\"iPerfman-listen-macOS-en\"></p>\n<p> <img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-server-macOS-en.jpg\" alt=\"iPerfman-server-macOS-en\"> </p>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>You need to run iPerfman on your iPhone or iPad, address fill in the LAN IP address set in the first step, such as <code>192.168.8.8</code>, set as client, click start button.</p>\n<p><img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-client-iOS-en.jpg\" alt=\"iPerfman-client-iOS-en\"></p>\n<p>Soon the test is finished and we get the test results. Here we can test both download and upload modes separately. Here is basic example, you can test any two devices, regardless of LAN or World Wide Web, IPv4 or IPv6.</p>\n<blockquote>\n<p>Installing iPerf 3 on macOS, here is a guide on the website<a href=\"https://iperf.fr/iperf-download.php\"> iperf.fr</a>.<br>On Linux or Windows, installing an iPerf 3 server requires familiarity with the command-line and installing <a href=\"https://brew.sh/\">Homebrew</a>.</p>\n</blockquote>\n<h2 id=\"Analyze-test-results\"><a href=\"#Analyze-test-results\" class=\"headerlink\" title=\"Analyze test results\"></a>Analyze test results</h2><p>Mainly analyze the average speed and speeds chart.</p>\n<p>Internet speed can be optimized in the following ways: router location, WiFi connection 5G or 6G, avoiding partition walls, and use network cable connection to each room.</p>\n<h2 id=\"More-parameters\"><a href=\"#More-parameters\" class=\"headerlink\" title=\"More parameters\"></a>More parameters</h2><h3 id=\"Client-Parameters\"><a href=\"#Client-Parameters\" class=\"headerlink\" title=\"Client Parameters\"></a><strong>Client Parameters</strong></h3><p><strong>Protocol</strong><br>Different applications and scenarios will use different network protocols, TCP and UDP are the most common two, so it is necessary to test them separately. UDP can be set at different Rate to achieve the speed limit test.</p>\n<p><strong>Streams</strong> <code>-P, --parallel n</code><br>How many parallel streams should be used during the test to test the concurrent data transmission.</p>\n<p><strong>End Condition</strong><br>There are two ways to choose: Duration and Number of bytes. You choose only one of them.</p>\n<p><strong>Duration</strong><code> -t, --time n</code><br>In seconds, choose how long you want to run the test. 30 seconds is a good time to get stable data, but feel free to set it higher and walk around your home or office to see how the bandwidth changes.</p>\n<p><strong>Number of bytes</strong> <code>-n, --bytes n[KMGT]</code><br>Select the size of the amount of data you want to run the test.<br>The test can be stopped at any time, so feel free to set a higher duration and stop when you are satisfied.</p>\n<p><strong>Connection timeout</strong> <code>--connect-timeout n</code><br>set timeout for establishing the initial control connection to the  server, in seconds. Providing a shorter value may speed up detection of a down iPerf3 server.</p>\n<p><strong>Omit first N seconds</strong> <code>-O, --omit n</code><br>Perform pre-test for N seconds and omit the pre-test statistics, to skip past the TCP slow-start period</p>\n<p><strong>Zero copy</strong> <code>-Z, --zerocopy</code><br>Use a <code>zero copy</code> method of sending data.</p>\n<h3 id=\"Sever-Parameters\"><a href=\"#Sever-Parameters\" class=\"headerlink\" title=\"Sever Parameters\"></a><strong>Sever Parameters</strong></h3><p><strong>Keep running</strong><br>When acting as the server side, the server side keep running after each other client test is finished. If you close this option, after single test, server side will stop running.</p>\n<h3 id=\"GENERAL-Parameters\"><a href=\"#GENERAL-Parameters\" class=\"headerlink\" title=\"GENERAL Parameters\"></a><strong>GENERAL Parameters</strong></h3><p><strong>Reporting interval</strong> <code>-i, --interval n</code><br>Seconds between periodic throughput reports.</p>\n<p><strong>Verbose logfile</strong> <code>-V, --verbose</code><br>Give more detailed output in logfile.</p>\n<h3 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a><strong>Authentication</strong></h3><ol>\n<li>Generate RSA Keypair</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out private.pem 2048</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -outform PEM -pubout -out public.pem</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -out private_not_protected.pem -outform PEM</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>Authorized users configuration file</li>\n</ol>\n<p>An example of commands to generate the password hash on a UNIX&#x2F;Linux system is given below:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">S_USER=mario S_PASSWD=rossi</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n \\&quot;&#123;<span class=\"variable\">$S_USER</span>&#125;<span class=\"variable\">$S_PASSWD</span>\\&quot; | <span class=\"built_in\">sha256sum</span> | awk <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>The file is a simple list of comma-separated pairs of a username and a corresponding password hash.</p>\n<p>The password hash is a SHA256 hash of the string &quot;{$user}$password&quot;.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> credentials.csv</span><br><span class=\"line\"><span class=\"comment\"># file format: username,password-hash</span></span><br><span class=\"line\">mario,bf7a49a846d44b454a5d11e7acfaf13d138bbe0b7483aa3e050879700572709b</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Private Key</strong> <code>--rsa-private-key-path file</code><br>RSA Private Key，copy all text in <code>private_not_protected.pem</code>。</p>\n<p><strong>Authorized Users</strong> <code>--authorized-users-path file</code><br>Authorized user file (CSV), a comma-separated list of username and password hashes SHA256, copy all text.</p>\n<p><strong>Time Skew Threshold</strong> <code>--time-skew-thresholdsecond seconds</code><br>Time skew threshold (in seconds) between the server and client during the authentication process.</p>\n<p><strong>Public Key</strong> <code>--rsa-public-key-path file</code><br>RSA Public Key，copy all text in <code>public.pem</code>。</p>\n<p><strong>Username</strong> <code>--username username</code><br>The username recorded in the authorized users file.</p>\n<p><strong>Password</strong><br>The password recorded in the authorized users file, not sha256 hash.</p>\n<p>If you are not familiar to iPerf3, you can refer <a href=\"https://software.es.net/iperf/invoking.html\">iPerf3 Manual Page</a></p>\n<p>The application is currently using iPerf v3.13 code and works fine with a different version of the server.</p>\n<h2 id=\"Still-need-help\"><a href=\"#Still-need-help\" class=\"headerlink\" title=\"Still need help?\"></a>Still need help?</h2><p>If you have any questions or suggestions about using the application, please feel free to contact us by email: <a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a>. It is best to attach screenshots of the application and relevant environment conditions.</p>\n","tags":["iPerf","iPerfman"]},{"title":"iPerfman 帮助","url":"/2023/02/20/iPerfman-Help-zh_CN/","content":"<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-en/\">English Help</a></p>\n<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-zh_Hant/\">繁體中文帮助</a></p>\n<h2 id=\"测试Wi-Fi和以太网有多快和可靠？\"><a href=\"#测试Wi-Fi和以太网有多快和可靠？\" class=\"headerlink\" title=\"测试Wi-Fi和以太网有多快和可靠？\"></a>测试Wi-Fi和以太网有多快和可靠？</h2><p>像<a href=\"https://www.speedtest.net/\">Speedtest</a>、Netflix的<a href=\"https://fast.com/\">FAST</a>和<a href=\"https://www.dslreports.com/speedtest\">DSLReports</a>这样的在线测试会告诉你你的互联网连接总体上有多快，但你的服务提供商的速度不是唯一因素。Wi-Fi本身会大大影响速度、延迟和可靠性。而随着宽带互联网连接速度越来越快，Wi-Fi通常已经成为瓶颈。iPerfman帮助你测试你的Wi-Fi连接速度和波动。</p>\n<h2 id=\"性能测试是如何进行的？\"><a href=\"#性能测试是如何进行的？\" class=\"headerlink\" title=\"性能测试是如何进行的？\"></a>性能测试是如何进行的？</h2><p>你需要一台电脑来运行它，用网线连接到你的家庭网络的路由器上。最好是运行<a href=\"https://openwrt.org/\">软路由器</a>，这样路由器传输数据，最接近真实互联网模式。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>你需要在macOS安装iPerfman，打开监听，找到局域网IP地址，如<code>192.168.8.8</code>，设为服务端，点击开始。</p>\n<p><img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-listen-macOS-zh_CN.jpg\" alt=\"iPerfman-listen-macOS-zh_CN\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-server-macOS-zh_CN.jpg\" alt=\"iPerfman-server-macOS-zh_CN\"> </p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>你需要在iPhone或者iPad上运行iPerfman，地址填写第一步设置的局域网IP地址，如<code>192.168.8.8</code>，设为客户端，点击开始。</p>\n<p><img src=\"https://gewill.org/assets/iPerfman-Help/iPerfman-client-iOS-zh_CN.jpg\" alt=\"iPerfman-client-iOS-zh_CN\"></p>\n<p>很快测试完成，我们就得到测试结果了。这里我们可以分别测试下载和上传两个模式。这里只是简单例子。你可以测试任意两台设备，不管局域网还是万维网，IPv4还是IPv6。</p>\n<blockquote>\n<p>关于在macOS上安装iPerf 3需要熟悉命令行和安装<a href=\"https://brew.sh/\">Homebrew</a>。</p>\n<p>在Linux和Windows上，请参考<a href=\"https://iperf.fr/iperf-download.php\">iperf.fr</a>网站。</p>\n</blockquote>\n<h2 id=\"分析测试结果\"><a href=\"#分析测试结果\" class=\"headerlink\" title=\"分析测试结果\"></a>分析测试结果</h2><p>主要分析平均速度和波动图。</p>\n<p>可以从以下方面优化网速：路由器位置、WiFi连接5G或6G、避免隔墙，有条件网线连接每个房间。</p>\n<h2 id=\"更多参数\"><a href=\"#更多参数\" class=\"headerlink\" title=\"更多参数\"></a>更多参数</h2><h3 id=\"客户端参数\"><a href=\"#客户端参数\" class=\"headerlink\" title=\"客户端参数\"></a><strong>客户端参数</strong></h3><p><strong>协议</strong><br>不同应用场景和应用会使用不同网络协议，TCP和UDP是最常见两者，所以有必要分别测试。 UDP可以设置不同<strong>速率</strong>，以达到限速测试。</p>\n<p><strong>流数量</strong> <code>-P, --parallel n</code><br>在测试期间应使用多少个并行的数据流，以测试数据并发传输的情况。</p>\n<p><strong>结束条件</strong><br>有两种方式：<code>时长</code>和<code>字节数</code>，只可选其一。</p>\n<p><strong>时长</strong> <code>-t, --time n</code><br>单位是秒，选择你想运行测试的时间，30秒是获得稳定数据的好时间，但可以随意设置得更高，在家里或办公室周围走走，看看带宽如何变化。</p>\n<p><strong>字节数</strong> <code>-n, --bytes n[KMGT]</code><br>选择你想运行测试的数据量大小为制定的字节数。<br>测试可以在任何时候停止，所以可以随意设置一个较高的持续时间，在你满意的时候停止。</p>\n<p><strong>连接超时</strong> <code>--connect-timeout n</code><br>单位是秒，设置建立到服务器的初始控件连接的超时时间。提供一个较短的值可以加快对一个宕机的iPer3服务器的检测。</p>\n<p><strong>忽略前N秒</strong> <code>-O, --omit n</code><br>单位是秒，执行预测试N秒，省略预测试统计信息，跳过TCP慢启动周期。</p>\n<p><strong>零拷贝</strong> <code>-Z, --zerocopy</code><br>使用零拷贝(zero copy)的方法发送数据。</p>\n<h3 id=\"服务端参数\"><a href=\"#服务端参数\" class=\"headerlink\" title=\"服务端参数\"></a><strong>服务端参数</strong></h3><p><strong>保持运行</strong><br>当作为服务端时，每次其它客户端测试完成后，服务端保持运行。关闭此选项，单次测试结束是，服务端也停止运行。</p>\n<h3 id=\"通用参数\"><a href=\"#通用参数\" class=\"headerlink\" title=\"通用参数\"></a><strong>通用参数</strong></h3><p><strong>报告间隔</strong> <code>-i, --interval n</code><br>定期吞吐量报告之间的秒数</p>\n<p><strong>详细日志</strong> <code>-V, --verbose</code><br>是否记录详细日志。</p>\n<h3 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a><strong>身份验证</strong></h3><ol>\n<li>生成公私钥<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out private.pem 2048</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -outform PEM -pubout -out public.pem</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -out private_not_protected.pem -outform PEM</span><br></pre></td></tr></table></figure></li>\n<li>生成登录凭证</li>\n</ol>\n<p>下面给出在 UNIX&#x2F;Linux 系统上生成密码散列的命令示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">S_USER=mario S_PASSWD=rossi</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n \\&quot;&#123;<span class=\"variable\">$S_USER</span>&#125;<span class=\"variable\">$S_PASSWD</span>\\&quot; | <span class=\"built_in\">sha256sum</span> | awk <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>该文件是一个用逗号分隔的用户名和相应密码哈希的列表。密码哈希是字符串&quot;{$用户名}$密码&quot;的SHA256哈希。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> credentials.csv</span><br><span class=\"line\"><span class=\"comment\"># 文件格式: 用户名,密码哈希</span></span><br><span class=\"line\">mario,bf7a49a846d44b454a5d11e7acfaf13d138bbe0b7483aa3e050879700572709b</span><br></pre></td></tr></table></figure>\n\n<p><strong>私钥</strong> <code>--rsa-private-key-path file</code><br>RSA 私钥，复制<code>private_not_protected.pem</code>全部内容。</p>\n<p><strong>授权用户</strong> <code>--authorized-users-path file</code><br>授权用户文件(CSV)，用逗号分隔的用户名和密码哈希列表sha256，复制全部内容。</p>\n<p><strong>时间偏移阈值</strong> <code>--time-skew-thresholdsecond seconds</code><br>在身份验证过程中，服务器和客户端之间的时间偏移阈值(秒)。</p>\n<p><strong>公钥</strong> <code>--rsa-public-key-path file</code><br>RSA 公钥，复制<code>public.pem</code>全部内容。</p>\n<p><strong>用户名</strong> <code>--username username</code><br>授权用户文件中记录的用户名。</p>\n<p><strong>密码</strong><br>授权用户文件中记录的原始密码，非哈希列表sha256。</p>\n<p>如果对iPerf3有不清楚的，可以参考<a href=\"https://software.es.net/iperf/invoking.html\">iPerf3 用户手册</a></p>\n<p>该应用程序目前使用的是iPerf v3.13代码，使用不同版本的服务器也能正常工作。</p>\n<h2 id=\"仍需帮助？\"><a href=\"#仍需帮助？\" class=\"headerlink\" title=\"仍需帮助？\"></a>仍需帮助？</h2><p>应用使用有任何问题或建议，欢迎邮件联系：<a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a>。最好附带应用截图和相关环境情况。</p>\n","tags":["iPerf","iPerfman"]},{"title":"iPhone 点与物理尺寸的关系","url":"/2017/07/10/inch-per-point-on-different-of-iPhones/","content":"<p><img src=\"http://i.imgur.com/mkOJeb0.png\" alt=\"The Ultimate Guide To iPhone Resolutions\"></p>\n<p>最近思考设计稿一个字号显示在不同设备物理尺寸是否一致，即对于用户看到的大小是否一致？</p>\n<p>因此从理论和实践两个方面对于三个尺寸(4、4.7、5.5)英寸的差异。</p>\n<h2 id=\"1-理论：\"><a href=\"#1-理论：\" class=\"headerlink\" title=\"1. 理论：\"></a>1. 理论：</h2><p>参考资料：The Ultimate Guide To iPhone Resolutions <a href=\"https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions\">https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions</a></p>\n<p>根据上图的计算每个点对应物理尺寸，公式为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">piexl / inch = (point * (render * downsmaping)) / inch </span><br><span class=\"line\"></span><br><span class=\"line\">inch / point = (render * downsmaping) / (piexl / inch)</span><br></pre></td></tr></table></figure>\n\n<p>每个点的大小 等于  每个点实际对应的像素数 除以 每英寸像素（PPI）</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>render</th>\n<th>downsmaping</th>\n<th>piexl &#x2F; inch</th>\n<th>inch &#x2F; point</th>\n<th>20 * (inch &#x2F; point)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4”</td>\n<td>2</td>\n<td>1</td>\n<td>326</td>\n<td>0.00613497</td>\n<td>0.12269939</td>\n</tr>\n<tr>\n<td>4.7”</td>\n<td>2</td>\n<td>1</td>\n<td>326</td>\n<td>0.00613497</td>\n<td>0.12269939</td>\n</tr>\n<tr>\n<td>5.5”</td>\n<td>3</td>\n<td>1&#x2F;1.15</td>\n<td>401</td>\n<td>0.00650548</td>\n<td>0.13010951</td>\n</tr>\n</tbody></table>\n<p>1.06039312336 &#x3D; 0.00650548 &#x2F; 0.00613497</p>\n<p>结论：<strong>4” 和 4.7” 完全一致，5.5”同样点数要比其他的大，约为1.06倍。</strong></p>\n<h2 id=\"2-实践：\"><a href=\"#2-实践：\" class=\"headerlink\" title=\"2. 实践：\"></a>2. 实践：</h2><p>写了一个Demo <a href=\"https://github.com/gewill/Demo/tree/PPI\">https://github.com/gewill/Demo/tree/PPI</a> ，真机量了一下物理尺寸也和上面的结论一致。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 各种字号的文本</span></span><br><span class=\"line\">   <span class=\"keyword\">func</span> <span class=\"title function_\">drawLabel</span>() &#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> y: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">40</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> size <span class=\"keyword\">in</span> <span class=\"number\">13</span><span class=\"operator\">...</span><span class=\"number\">24</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">let</span> label <span class=\"operator\">=</span> <span class=\"type\">UILabel</span>()</span><br><span class=\"line\">           label.text <span class=\"operator\">=</span> <span class=\"string\">&quot;Font size: <span class=\"subst\">\\(size)</span>-壹拾贰亿拾陆-@#￥ABCxyz&quot;</span></span><br><span class=\"line\">           label.font <span class=\"operator\">=</span> <span class=\"type\">UIFont</span>.systemFont(ofSize: <span class=\"type\">CGFloat</span>(size))</span><br><span class=\"line\">           label.backgroundColor <span class=\"operator\">=</span> <span class=\"type\">UIColor</span>.green.withAlphaComponent(<span class=\"number\">0.4</span>)</span><br><span class=\"line\">           y <span class=\"operator\">+=</span> <span class=\"type\">CGFloat</span>(size) <span class=\"operator\">+</span> <span class=\"number\">20</span></span><br><span class=\"line\">           label.frame <span class=\"operator\">=</span> <span class=\"type\">CGRect</span>(x: <span class=\"number\">0</span>, y: y, width: <span class=\"type\">UIScreen</span>.main.bounds.width, height: <span class=\"type\">CGFloat</span>(size))</span><br><span class=\"line\">           <span class=\"keyword\">self</span>.view.addSubview(label)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Introducing Clickman","url":"/2023/05/30/introducing-Clickman-en/","content":"<h1 id=\"Introducing\"><a href=\"#Introducing\" class=\"headerlink\" title=\"Introducing\"></a>Introducing</h1><p><img src=\"/../assets/introducing-Clickman-en/Preview%20English%20light.png\" alt=\"Preview English light\"></p>\n<p><img src=\"/../assets/introducing-Clickman-en/Preview%20English%20dark.png\" alt=\"Preview English dark\"></p>\n<p>Clickman is a small and practical auxiliary tool software. </p>\n<p>It can automatically click the left mouse button at the set time interval to achieve the effect of automatic consecutive clicks.</p>\n<p>Up to about 110 clicks per second.</p>\n<p>The main application scenarios are as follows:</p>\n<ol>\n<li><p>Automatically repeat clicking skills in online games. Especially for clicking-type air combat or tower defense games, repeat clicking attacks to achieve higher damage output.</p>\n</li>\n<li><p>Webpage auto-refresh or scroll. By setting a proper click interval and location, achieve the effect of the mouse automatically scrolling up and down the webpage, equivalent to manually dragging the mouse scroll wheel.</p>\n</li>\n</ol>\n<p>For any questions or suggestions, please feel free to contact us via email at <a href=\"mailto:&#53;&#51;&#49;&#115;&#x75;&#x6e;&#x6c;&#105;&#103;&#104;&#116;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#53;&#51;&#49;&#115;&#x75;&#x6e;&#x6c;&#105;&#103;&#104;&#116;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>.</p>\n<p><a href=\"https://apps.apple.com/app/id6449612559\">Download <strong>Clickman</strong> on the App Store</a></p>\n<h1 id=\"Privacy-policy\"><a href=\"#Privacy-policy\" class=\"headerlink\" title=\"Privacy policy\"></a>Privacy policy</h1><p>This App does not collect or upload any private information.</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"Clickman介绍","url":"/2023/05/30/introducing-Clickman-zh-Hans/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><img src=\"/../assets/introducing-Clickman-zh-Hans/Preview%20Chinese%20light.png\" alt=\"Preview Chinese light\"></p>\n<p><img src=\"/../assets/introducing-Clickman-zh-Hans/Preview%20Chinese%20dark.png\" alt=\"Preview Chinese dark\"></p>\n<p>Clickman是一款小巧实用的辅助工具软件。</p>\n<p>它能根据设置的时间间隔,自动为鼠标按下和释放左键,实现自动连续点击的效果。</p>\n<p>最高每秒约110次点击。</p>\n<p>主要应用场景有以下几种:</p>\n<ol>\n<li><p>在网络游戏中自动重复点击技能。特别是一些点击类的空战或者塔防游戏,重复点击攻击以获得更高的伤害输出。</p>\n</li>\n<li><p>网页自动刷新或滚动。通过设置适当的点击间隔和位置,实现鼠标自动上下滚动网页,相当于手动划动鼠标滚轮的效果。</p>\n</li>\n</ol>\n<p>应用使用有任何问题或建议，欢迎邮件联系：<a href=\"mailto:&#53;&#x33;&#49;&#115;&#x75;&#110;&#x6c;&#x69;&#x67;&#x68;&#116;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#53;&#x33;&#49;&#115;&#x75;&#110;&#x6c;&#x69;&#x67;&#x68;&#116;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/id6449612559\">App Store下载 <strong>Clickman</strong></a></p>\n<h1 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h1><p>本App不进行任何隐私信息收集或上传。</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"iPerfman 幫助","url":"/2023/02/20/iPerfman-Help-zh_Hant/","content":"<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-en/\">English Help</a></p>\n<p><a href=\"https://gewill.org/2023/02/20/iPerfman-Help-zh_CN/\">简体中文帮助</a></p>\n<h2 id=\"測試Wi-Fi和乙太網路有多快和可靠？\"><a href=\"#測試Wi-Fi和乙太網路有多快和可靠？\" class=\"headerlink\" title=\"測試Wi-Fi和乙太網路有多快和可靠？\"></a>測試Wi-Fi和乙太網路有多快和可靠？</h2><p>像<a href=\"https://www.speedtest.net/\">Speedtest</a>、Netflix的<a href=\"https://fast.com/\">FAST</a>和<a href=\"https://www.dslreports.com/speedtest\">DSLReports</a>這樣的在線測試會告訴你你的互聯網連接總體上有多快，但你的服務提供商的速度不是唯一因素。Wi-Fi本身會大大影響速度、延遲和可靠性。而隨著寬帶互聯網連接速度越來越快，Wi-Fi通常已經成為瓶頸。iPerfman幫助你測試你的Wi-Fi連接速度和波動。</p>\n<h2 id=\"性能測試是如何進行的？\"><a href=\"#性能測試是如何進行的？\" class=\"headerlink\" title=\"性能測試是如何進行的？\"></a>性能測試是如何進行的？</h2><p>你需要一台電腦來運行它，用網線連接到你的家庭網絡的路由器上。最好是運行<a href=\"https://openwrt.org/\">軟路由器</a>，這樣路由器傳輸數據，最接近真實互聯網模式。</p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>你需要在macOS安裝iPerfman，打開監聽，找到局域網IP地址，如<code>192.168.8.6</code>，設為伺服器，點擊開始。</p>\n<p><img src=\"/../assets/iPerfman-Help-zh_Hant/iPerfman-server-macOS-liston-zh_Hant.jpg\" alt=\"iPerfman-server-macOS-liston-zh_Hant\"></p>\n<p> <img src=\"/../assets/iPerfman-Help-zh_Hant/iPerfman-server-macOS-start-zh_Hant.jpg\" alt=\"iPerfman-server-macOS-start-zh_Hant\"></p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>你需要在iPhone或者iPad上運行iPerfman，地址填寫第一步設置的局域網IP地址，如<code>192.168.8.6</code>，設為客戶端，點擊開始。</p>\n<p><img src=\"/../assets/iPerfman-Help-zh_Hant/iPerfman-client-iOS-zh_Hant.jpg\" alt=\"iPerfman-client-iOS-zh_Hant\"></p>\n<p>很快測試完成，我們就得到測試結果了。這裡我們可以分別測試下載和上傳兩個模式。這裡只是簡單例子。你可以測試任意兩台設備，不管局域網還是萬維網，IPv4還是IPv6。</p>\n<blockquote>\n<p>關於在macOS上安裝iPerf 3需要熟悉命令行和安裝<a href=\"https://brew.sh/\">Homebrew</a>。</p>\n<p>在Linux和Windows上，請參考<a href=\"https://iperf.fr/iperf-download.php\">iperf.fr</a>網站。</p>\n</blockquote>\n<h2 id=\"分析測試結果\"><a href=\"#分析測試結果\" class=\"headerlink\" title=\"分析測試結果\"></a>分析測試結果</h2><p>主要分析平均速度和波動圖。</p>\n<p>可以從以下方面優化網速：路由器位置、WiFi連接5G或6G、避免隔牆，有條件網線連接每個房間。</p>\n<h2 id=\"更多參數\"><a href=\"#更多參數\" class=\"headerlink\" title=\"更多參數\"></a>更多參數</h2><h3 id=\"客戶端參數\"><a href=\"#客戶端參數\" class=\"headerlink\" title=\"客戶端參數\"></a><strong>客戶端參數</strong></h3><p><strong>協議</strong><br>不同應用場景和應用會使用不同網路協議，TCP和UDP是最常見兩者，所以有必要分別測試。 UDP可以設定不同<strong>速率</strong>，以達到限速測試。</p>\n<p><strong>流數量</strong> <code>-P, --parallel n</code><br>在測試期間應使用多少個並行的資料流，以測試資料併發傳輸的情況。</p>\n<p><strong>結束條件</strong><br>有兩種方式：<code>時長</code>和<code>位元組數</code>，只可選其一。</p>\n<p><strong>時長</strong> <code>-t, --time n</code><br>單位是秒，選擇你想執行測試的時間，30秒是獲得穩定資料的好時間，但可以隨意設定得更高，在家裡或辦公室周圍走走，看看頻寬如何變化。</p>\n<p><strong>位元組數</strong> <code>-n, --bytes n[KMGT]</code><br>選擇你想執行測試的資料量大小為制定的位元組數。<br>測試可以在任何時候停止，所以可以隨意設定一個較高的持續時間，在你滿意的時候停止。</p>\n<p><strong>連線超時</strong> <code>--connect-timeout n</code><br>單位是秒，設定建立到伺服器的初始控制元件連線的超時時間。提供一個較短的值可以加快對一個宕機的iPer3伺服器的檢測。</p>\n<p><strong>忽略前N秒</strong> <code>-O, --omit n</code><br>單位是秒，執行預測試N秒，省略預測試統計資訊，跳過TCP慢啟動週期。</p>\n<p><strong>零複製</strong> <code>-Z, --zerocopy</code><br>使用零複製(zero copy)的方法傳送資料。</p>\n<h3 id=\"伺服器參數\"><a href=\"#伺服器參數\" class=\"headerlink\" title=\"伺服器參數\"></a><strong>伺服器參數</strong></h3><p><strong>保持執行</strong><br>當作為伺服器時，每次其它客戶端測試完成後，伺服器保持執行。關閉此選項，單次測試結束是，伺服器也停止執行。</p>\n<h3 id=\"通用參數\"><a href=\"#通用參數\" class=\"headerlink\" title=\"通用參數\"></a><strong>通用參數</strong></h3><p><strong>報告間隔</strong> <code>-i, --interval n</code><br>定期吞吐量報告之間的秒數</p>\n<p><strong>詳細日誌</strong> <code>-V, --verbose</code><br>是否記錄詳細日誌。</p>\n<h3 id=\"身份驗證\"><a href=\"#身份驗證\" class=\"headerlink\" title=\"身份驗證\"></a><strong>身份驗證</strong></h3><ol>\n<li>生成公私鑰</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out private.pem 2048</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -outform PEM -pubout -out public.pem</span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> private.pem -out private_not_protected.pem -outform PEM</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>生成授權使用者檔案</li>\n</ol>\n<p>下面給出在 UNIX&#x2F;Linux 系統上生成密碼散列的命令示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">S_USER=mario S_PASSWD=rossi</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n \\&quot;&#123;<span class=\"variable\">$S_USER</span>&#125;<span class=\"variable\">$S_PASSWD</span>\\&quot; | <span class=\"built_in\">sha256sum</span> | awk <span class=\"string\">&#x27;&#123; print $1 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>該文件是一個用逗號分隔的使用者名稱和相應密碼雜湊的列表。密碼雜湊是字符串&quot;{$使用者名稱}$密碼&quot;的SHA256雜湊。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> credentials.csv</span><br><span class=\"line\"><span class=\"comment\"># 檔案格式: 使用者名稱,密碼雜湊</span></span><br><span class=\"line\">mario,bf7a49a846d44b454a5d11e7acfaf13d138bbe0b7483aa3e050879700572709b</span><br></pre></td></tr></table></figure>\n\n<p><strong>私鑰</strong> <code>--rsa-private-key-path file</code><br>RSA 私鑰，複製<code>private_not_protected.pem</code>全部內容。</p>\n<p><strong>授權使用者</strong> <code>--authorized-users-path file</code><br>授權使用者檔案(CSV)，用逗號分隔的使用者名稱和密碼雜湊列表sha256，複製全部內容。</p>\n<p><strong>時間偏移閾值</strong> <code>--time-skew-thresholdsecond seconds</code><br>在身份驗證過程中，伺服器和客戶端之間的時間偏移閾值(秒)。</p>\n<p><strong>公鑰</strong> <code>--rsa-public-key-path file</code><br>RSA 公鑰，複製<code>public.pem</code>全部內容。</p>\n<p><strong>使用者名稱</strong> <code>--username username</code><br>授權使用者檔案中記錄的使用者名稱。</p>\n<p><strong>密碼</strong><br>授權使用者檔案中記錄的原始密碼，非雜湊列表sha256。</p>\n<p>如果對iPerf3有不清楚的，可以參考<a href=\"https://software.es.net/iperf/invoking.html\">iPerf3 使用手冊</a></p>\n<p>該應用程序目前使用的是iPerf v3.13代碼，使用不同版本的服務器也能正常工作。</p>\n<h2 id=\"仍需幫助？\"><a href=\"#仍需幫助？\" class=\"headerlink\" title=\"仍需幫助？\"></a>仍需幫助？</h2><p>應用使用有任何問題或建議，歡迎郵件聯繫：<a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a>。最好附帶應用截圖和相關環境情況。</p>\n","tags":["iPerf","iPerfman"]},{"title":"Clickman介紹","url":"/2023/05/30/introducing-Clickman-zh-Hant/","content":"<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p><img src=\"/../assets/introducing-Clickman-zh_CN/Preview%20Chinese%20light.png\" alt=\"Preview Chinese light\"></p>\n<p><img src=\"/../assets/introducing-Clickman-zh_CN/Preview%20Chinese%20dark.png\" alt=\"Preview Chinese dark\"></p>\n<p>Clickman是一款小巧實用的輔助工具軟件。</p>\n<p>它能根據設置的時間間隔,自動爲鼠標按下和釋放左鍵,實現自動連續點擊的效果。</p>\n<p>最高每秒約110次點擊。</p>\n<p>主要應用場景有以下幾種:</p>\n<ol>\n<li><p>在網絡遊戲中自動重複點擊技能。特別是一些點擊類的空戰或者塔防遊戲,重複點擊攻擊以獲得更高的傷害輸出。</p>\n</li>\n<li><p>網頁自動刷新或滾動。通過設置適當的點擊間隔和位置,實現鼠標自動上下滾動網頁,相當於手動划動鼠標滾輪的效果。</p>\n</li>\n</ol>\n<p>應用使用有任何問題或建議，歡迎郵件聯繫：<a href=\"mailto:&#53;&#x33;&#x31;&#x73;&#117;&#110;&#x6c;&#x69;&#x67;&#x68;&#x74;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#53;&#x33;&#x31;&#x73;&#117;&#110;&#x6c;&#x69;&#x67;&#x68;&#x74;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/id6449612559\">App Store下載 <strong>Clickman</strong></a></p>\n<h1 id=\"隱私政策\"><a href=\"#隱私政策\" class=\"headerlink\" title=\"隱私政策\"></a>隱私政策</h1><p>本App不進行任何隱私信息收集或上傳。</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"Introducing ConnectUI","url":"/2023/08/16/introducing-ConnectUI-en/","content":"<h1 id=\"Introducing\"><a href=\"#Introducing\" class=\"headerlink\" title=\"Introducing\"></a>Introducing</h1><p><img src=\"/../assets/introducing-ConnectUI-en/Preview%20English%20light.png\" alt=\"Preview English light\"></p>\n<p>ConnectUI is a powerful sales analytics and reporting platform built specifically for app developers and publishers. </p>\n<p>With ConnectUI, you can easily track and analyze your app sales, revenues, downloads, and updates.</p>\n<p>For any questions or suggestions, please feel free to contact us via email at <a href=\"mailto:&#53;&#x33;&#49;&#x73;&#x75;&#110;&#108;&#105;&#x67;&#104;&#116;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;\">&#53;&#x33;&#49;&#x73;&#x75;&#110;&#108;&#105;&#x67;&#104;&#116;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>.</p>\n<p><a href=\"https://apps.apple.com/app/id1672859290\">Download <strong>ConnectUI</strong> on the App Store</a></p>\n<h1 id=\"Privacy-policy\"><a href=\"#Privacy-policy\" class=\"headerlink\" title=\"Privacy policy\"></a>Privacy policy</h1><p>This App does not collect or upload any private information.</p>\n"},{"title":"introducing-ConnectUI-zh-Hans","url":"/2023/08/16/introducing-ConnectUI-zh-Hans/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><img src=\"/../assets/introducing-ConnectUI-zh-Hans/Preview%20Chinese%20light.png\" alt=\"Preview Chinese light\"></p>\n<p>ConnectUI 是专为应用程序开发人员和发布者构建的强大销售分析和报告平台。  </p>\n<p>借助 ConnectUI，您可以轻松跟踪和分析您的应用销售、收入、下载和更新。</p>\n<p>应用使用有任何问题或建议，欢迎邮件联系：<a href=\"mailto:&#x35;&#x33;&#49;&#x73;&#x75;&#x6e;&#108;&#x69;&#103;&#104;&#x74;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;\">&#x35;&#x33;&#49;&#x73;&#x75;&#x6e;&#108;&#x69;&#103;&#104;&#x74;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/id1672859290\">App Store下载 <strong>ConnectUI</strong></a></p>\n<h1 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h1><p>本App不进行任何隐私信息收集或上传。</p>\n"},{"title":"渐变色板介绍(Introducing Gradient Palette)","url":"/2023/03/17/introducing-Gradient-Palette/","content":"<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p><img src=\"https://gewill.org/assets/Gradient-Palette/Gradient-Palette-iPhone-preview.jpg\" alt=\"Gradient-Palette-iPhone-preview\"></p>\n<p><img src=\"https://gewill.org/assets/Gradient-Palette/Gradient-Palette-iPad-preview.jpg\" alt=\"Gradient-Palette-iPad-preview\"></p>\n<p>介绍一下Gradient Palette，这是一款专为网页设计师和开发人员打造的终极工具！您是否已经厌倦了为网站背景创建自己的配色方案？那么Gradient Palette将成为您的最佳选择。它是一个免费的集合，包含180个令人惊叹的渐变，可用作网站的任何部分的内容背景。使用这些渐变色调非常简单，只需轻松复制粘贴即可。我们还为每个渐变提供了PNG版本，方便您使用。告别繁琐的自制渐变，拥抱Gradient Palette带来的轻松美丽！</p>\n<p>Introducing Gradient Palette, the ultimate tool for web designers and developers! Are you tired of creating your own color schemes for your website backgrounds? Look no further than Gradient Palette, a free collection of 180 stunning gradients that can be used as content backdrops on any part of your website. With easy copy used colors. We’ve also provided a PNG version of each gradient for added convenience. Say goodbye to the hassle of creating your own gradients and hello to the ease and beauty of Gradient Palette!</p>\n<p><a href=\"https://apps.apple.com/app/id6446215235\">App Store下载</a><br><a href=\"https://apps.apple.com/app/id6446215235\">Download on the App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h1><p>本隐私政策描述了我们如何收集，使用和披露与服务有关的个人信息，您通过访问服务即表示同意。“个人信息”是指有关可识别个人的信息，但不包括商业信息。</p>\n<h3 id=\"收集哪些信息\"><a href=\"#收集哪些信息\" class=\"headerlink\" title=\"收集哪些信息\"></a>收集哪些信息</h3><p>本应用希望使您与我们的体验令人满意且安全。我们的数据收集政策使您可以选择向我们提供多少个人信息，并控制我们如何使用这些信息。我们的目标是为您提供满意的体验，同时让您控制自己的隐私。本应用收集和使用信息主要是为了使您使用我们的服务更轻松，更有意义。如果您选择向我们注册，则可能会在不同时间要求您提供信息，我们将竭尽所能使本应用满足您的服务并只为您提供所需的内容。</p>\n<h3 id=\"收集的信息与用途\"><a href=\"#收集的信息与用途\" class=\"headerlink\" title=\"收集的信息与用途\"></a>收集的信息与用途</h3><p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台包括Firebase 会收集您的设备信息（包括IMEI、MEID、IMSI、GUID、MAC地址）、您安装的应用信息或运行中的进程信息。</p>\n<p><strong>匿名信息</strong>是指无法与特定个人联系在一起的信息，我们不知道您的姓名，住处或出生日期。匿名信息可能以多种方式收集，包括通过使用 Cookie，网络信标或从您使用的设备中收集。</p>\n<h3 id=\"第三方分析工具\"><a href=\"#第三方分析工具\" class=\"headerlink\" title=\"第三方分析工具\"></a>第三方分析工具</h3><p>我们的服务可能包含来自我们服务提供商的第三方跟踪以及数据收集和分析工具，例如 Google Analytics（分析）和 Google Firebase 。此类第三方可以在我们的服务中使用 Cookie，API 和 SDK，以使他们能够代表我们收集和分析与用户和设备相关的数据和信息。第三方可能会访问并收集有关您的数据和信息，例如您的设备标识符(包括IMEI、MEID、IMSI、GUID、MAC地址及其他相关信息)，语言环境（使用特定语言的特定位置），地理位置信息，IP 地址，应用程序使用情况，访问权限和会话时间，传感器数据，设备上存在的或在设备上特定时间使用的应用程序以及您对广告的观看和互动，以提供其服务，包括例如启用，提供和投放广告在下面有更详细的说明。</p>\n<p>我们的服务提供商的隐私政策可能包括有关其数据收集和使用惯例以及跟踪技术的其他条款和披露，我们鼓励您检查这些隐私政策以了解有关其数据收集和使用惯例以及 Cookie 的使用的更多信息以及其他类似的跟踪技术。</p>\n<p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台将获取设备序列号。</p>\n<ul>\n<li><strong>Google</strong><br>隐私政策：<a href=\"https://policies.google.com/privacy\">https://policies.google.com/privacy</a></li>\n</ul>\n<h3 id=\"第三方广告合作伙伴\"><a href=\"#第三方广告合作伙伴\" class=\"headerlink\" title=\"第三方广告合作伙伴\"></a>第三方广告合作伙伴</h3><p>我们与各种广告商，广告网络，广告服务器和分析公司合作。这些广告商，广告网络，广告服务器和分析公司使用各种技术以及第三方公司的技术来收集数据，以便向您和其他用户发送（或投放）相关广告。这些技术可能包括放置Cookie或网络信标，使用唯一或非唯一的非个人标识符，或在我们的服务上使用其他技术，并且这些技术可用于跟踪用户行为，跟踪我们如何服务正在使用中，有可能为您提供更多相关的广告。这些目标广告可能会出现在我们的服务或您访问的其他服务上。本隐私政策不涵盖广告商，广告网络，广告服务器和分析公司对各种技术的使用。这些公司还可能从您从其他公司使用的服务中获取信息，这些服务包括但不限于其他网站，移动网站，可移动下载的应用程序和可下载的桌面应用程序，并将这些信息与他们通过我们的服务通过这些第三方技术获取的信息结合在一起。您应该意识到，我们无法控制这些第三方技术或其中包含的信息。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>本应用可以随时修改本隐私政策。请经常检查是否有任何更改。继续使用服务，即表示您接受本隐私政策的所有更新。此版本于 2023 年 03 月 17 日更新。</p>\n<h3 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h3><p>我们希望此声明能为您提供丰富而清晰的信息。如果您有任何疑问或进一步的信息，请给我们发送电子邮件。</p>\n<p>App 与服务反馈: <a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a></p>\n<h2 id=\"Privacy-Policy\"><a href=\"#Privacy-Policy\" class=\"headerlink\" title=\"Privacy Policy\"></a>Privacy Policy</h2><p>This privacy policy describes how we collect, use, and disclose personal information related to the service you agree to by accessing the service. “Personal information” means information about identifiable individuals, but does not include business information.</p>\n<h3 id=\"What-information-we-collect\"><a href=\"#What-information-we-collect\" class=\"headerlink\" title=\"What information we collect\"></a>What information we collect</h3><p>We aim to make your experience with our application satisfactory and secure. Our data collection policy allows you to choose how much personal information to provide us with and control how we use that information. Our goal is to provide you with a satisfactory experience while giving you control over your privacy. Our application primarily collects and uses information to make it easier and more meaningful for you to use our service. If you choose to register with us, we may ask for information at various times, and we will do our best to make the application meet your needs and provide you with only the necessary content.</p>\n<h3 id=\"Information-Collected-and-its-Purpose\"><a href=\"#Information-Collected-and-its-Purpose\" class=\"headerlink\" title=\"Information Collected and its Purpose\"></a>Information Collected and its Purpose</h3><p>To identify your device ID and prevent malicious programs, improve service security, guarantee operational quality and efficiency, we use third-party platforms, including Firebase, to collect your device information (including IMEI, MEID, IMSI, GUID, MAC address), information on the applications you have installed or running processes.</p>\n<p>“Anonymous information” refers to information that cannot be associated with specific individuals, and we do not know your name, address, or date of birth. Anonymous information may be collected in various ways, including through the use of cookies, web beacons, or collected from the device you use.</p>\n<h3 id=\"Third-Party-Analytics-Tools\"><a href=\"#Third-Party-Analytics-Tools\" class=\"headerlink\" title=\"Third-Party Analytics Tools\"></a>Third-Party Analytics Tools</h3><p>Our service may contain third-party tracking and data collection and analysis tools from our service providers, such as Google Analytics (analytics) and Google Firebase. Such third parties may use cookies, APIs, and SDKs in our service to collect and analyze data and information related to users and devices on our behalf. Third parties may access and collect data and information about you, such as your device identifier (including IMEI, MEID, IMSI, GUID, MAC address, and other relevant information), language environment (specific locations using specific languages), geographical location information, IP address, application usage, access permissions and session time, sensor data, applications that exist on the device or have been used at specific times on the device, and your viewing and interaction with advertisements to provide their services, including enabling, providing, and serving ads. There is more detailed information on this below.</p>\n<p>The privacy policies of our service providers may include other terms and disclosures regarding their data collection and use practices, as well as other similar tracking technologies such as cookies. We encourage you to review these privacy policies for more information about their data collection and use practices and the use of cookies and similar tracking technologies.</p>\n<p>To identify your device ID and prevent malicious programs, improve service security, guarantee operational quality and efficiency, the third-party platforms we use will obtain the device serial number.</p>\n<p>Google<br>Privacy Policy: <a href=\"https://policies.google.com/privacy\">https://policies.google.com/privacy</a></p>\n<h3 id=\"Third-Party-Advertising-Partners\"><a href=\"#Third-Party-Advertising-Partners\" class=\"headerlink\" title=\"Third-Party Advertising Partners\"></a>Third-Party Advertising Partners</h3><p>We work with various advertisers, ad networks, ad servers, and analytics companies. These advertisers, ad networks, ad servers, and analytics companies use various technologies as well as technologies from third-party companies to collect data to send (or serve) relevant ads to you and other users. These technologies may include placing cookies or web beacons, using unique or non-unique non-personal identifiers, or using other technologies on our service, and these technologies may be used to track user behavior, track how our service is being used, and potentially provide you with more relevant ads. These targeted ads may appear on our service or other services you visit. This privacy policy does not cover the use of various technologies by advertisers, ad networks, ad servers, and analytics companies. These companies may also obtain information from the services you use from other companies, including but not limited to other websites, mobile websites, downloadable applications, and downloadable desktop applications, and combine this information with the information they obtain through these third-party technologies via our service. You should be aware that we have no control over these third-party technologies or the information contained therein.</p>\n<h3 id=\"Updates\"><a href=\"#Updates\" class=\"headerlink\" title=\"Updates\"></a>Updates</h3><p>This application may modify this Privacy Policy at any time. Please check for any changes frequently. Your continued use of the service indicates your acceptance of all updates to this Privacy Policy. This version was updated on March 17th, 2023.</p>\n<h3 id=\"Contact-Us\"><a href=\"#Contact-Us\" class=\"headerlink\" title=\"Contact Us\"></a>Contact Us</h3><p>We hope this statement provides you with rich and clear information. If you have any questions or further information, please email us.</p>\n<p>App and Service Feedback:</p>\n"},{"title":"Mountpaper介绍","url":"/2022/01/05/introducing-Mountpaper/","content":"<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p><img src=\"https://gewill.org/assets/Mountpaper-iPhone-screenshot1.jpg\" alt=\"Mountpaper-iPhone-screenshot1\"><br><img src=\"https://gewill.org/assets/Mountpaper-iPad-screenshot1.jpg\" alt=\"Mountpaper-iPad-screenshot1\"><br><img src=\"https://gewill.org/assets/Mountpaper-mac-screenshot1.jpg\" alt=\"Mountpaper-mac-screenshot1\"></p>\n<p>裱纸是装裱壁纸的意思。提供许多高质量壁纸。</p>\n<p>Mountpaper is meaning of mount wallpaper. Offer a lot of high quality wallpapers.</p>\n<p>下载地址 Download on：<a href=\"https://apps.apple.com/cn/app/mountpaper/id1603270231\">App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策Privacy-policy\"><a href=\"#隐私政策Privacy-policy\" class=\"headerlink\" title=\"隐私政策Privacy policy\"></a>隐私政策Privacy policy</h1><p>本App不进行任何隐私信息收集或上传。</p>\n<p>This App does not collect or upload any private information.</p>\n"},{"title":"introducing OpenCCman","url":"/2023/12/17/introducing-OpenCCman-en/","content":"<h1 id=\"Introducing\"><a href=\"#Introducing\" class=\"headerlink\" title=\"Introducing\"></a>Introducing</h1><p>Open Chinese Convert (OpenCC, 開放中文轉換) is an opensource project for conversions between Traditional Chinese, Simplified Chinese and Japanese Kanji (Shinjitai). It supports character-level and phrase-level conversion, character variant conversion and regional idioms among Mainland China, Taiwan and Hong Kong. This is not translation tool between Mandarin and Cantonese, etc.</p>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><p>Strictly differentiate between 「one simplified to many traditionals」 and 「one simplified to many variants」.<br>Completely compatible with different variants and can realize dynamic substitution.<br>Strictly scrutinize one-simplified-to-multiple-traditional entries, and the principle is 「if it can be divided, then it will be divided」.<br>Support Mainland China, Taiwan, Hong Kong, different variants and regional customary word conversion, such as 「裏」「裡」、「鼠標」「滑鼠」.</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<p><a href=\"https://apps.apple.com/cn/app/id6474449401\">Download <strong>OpenCCman</strong> on the App Store</a></p>\n<h1 id=\"Privacy-policy\"><a href=\"#Privacy-policy\" class=\"headerlink\" title=\"Privacy policy\"></a>Privacy policy</h1><p>This App does not collect or upload any private information.</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"OpenCCman介绍","url":"/2023/12/17/introducing-OpenCCman-zh-Hans/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>中文简繁转换开源项目，支持词汇级别的转换、异体字转换和地区习惯用词转换（中国大陆、台湾、香港、日本新字体）。不提供普通话与粤语的转换。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>严格区分「一简对多繁」和「一简对多异」。<br>完全兼容异体字，可以实现动态替换。<br>严格审校一简对多繁词条，原则为「能分则不合」。<br>支持中国大陆、台湾、香港异体字和地区习惯用词转换，如「裏」「裡」、「鼠標」「滑鼠」。</p>\n<p>应用使用有任何问题或建议，欢迎邮件联系：<a href=\"mailto:&#53;&#51;&#49;&#x73;&#x75;&#110;&#x6c;&#x69;&#x67;&#104;&#x74;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;\">&#53;&#51;&#49;&#x73;&#x75;&#110;&#x6c;&#x69;&#x67;&#104;&#x74;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/id6474449401\">App Store下载 <strong>OpenCCman</strong></a></p>\n<h1 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h1><p>本App不进行任何隐私信息收集或上传。</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"OpenCCman介紹","url":"/2023/12/17/introducing-OpenCCman-zh-Hant/","content":"<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p>中文簡繁轉換開源項目，支持詞彙級別的轉換、異體字轉換和地區習慣用詞轉換（中國大陸、臺灣、香港、日本新字體）。不提供普通話與粵語的轉換。</p>\n<h2 id=\"特點\"><a href=\"#特點\" class=\"headerlink\" title=\"特點\"></a>特點</h2><p>嚴格區分「一簡對多繁」和「一簡對多異」。<br>完全兼容異體字，可以實現動態替換。<br>嚴格審校一簡對多繁詞條，原則爲「能分則不合」。<br>支持中國大陸、臺灣、香港異體字和地區習慣用詞轉換，如「裏」「裡」、「鼠標」「滑鼠」。</p>\n<p>應用使用有任何問題或建議，歡迎郵件聯繫：<a href=\"mailto:&#x35;&#x33;&#x31;&#115;&#x75;&#x6e;&#108;&#105;&#103;&#104;&#x74;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;\">&#x35;&#x33;&#x31;&#115;&#x75;&#x6e;&#108;&#105;&#103;&#104;&#x74;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/id6474449401\">App Store下載 <strong>OpenCCman</strong></a></p>\n<h1 id=\"隱私政策\"><a href=\"#隱私政策\" class=\"headerlink\" title=\"隱私政策\"></a>隱私政策</h1><p>本App不進行任何隱私信息收集或上傳。</p>\n","tags":["Swift","SwiftUI","macOS"]},{"title":"親戚關係計算器介紹","url":"/2023/01/20/introducing-Relationship-zh-Hant/","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><img src=\"https://gewill.org/assets/Relationship-iPhone-preview.png\" alt=\"Relationship-iPhone-preview\"></p>\n<p><img src=\"https://gewill.org/assets/Relationship-iPad-preview.png\" alt=\"Relationship-iPad-preview\"></p>\n<p>逢年過節遇到三姑六婆，拒絕叫不出口的尷尬！輕鬆搞定親戚關係～</p>\n<p>親屬是基於婚姻、血緣和法律擬制而形成的社會關係。親屬關係包括夫妻、父母、子女、兄弟姊妹、祖父母和外祖父母、孫子女和外孫子女、兒媳和公婆、女婿和岳父母、以及其他三代以內的旁系血親，如伯、叔、姑、舅、姨、侄子女、甥子女、堂兄弟姊妹、表兄弟姊妹、姨兄弟姊妹等。</p>\n<p> 親屬稱謂指是以本人為中心確定親族成員和本人關係的名稱，是基於血親姻親基礎上的親屬之間相互稱呼的名稱、叫法。漢族的家族親屬關係條理分明尊卑有序：比自己長一輩的稱呼有姨姑舅叔伯，同輩的有兄弟姊妹、堂表親等等，下一輩有甥侄等等。中國人由於姻親而產生的親戚關係相當龐雜，「祖宗十八代」、「五服」、「六親」、「九族」讓人難以區分，其派生出的各種稱謂也是中華文化的一大特徵。</p>\n<p> 如今由於工作生活節奏差異，很多關係稍疏遠的親戚之間來往並不多，年齡差異長幼輩分模糊。春節拜年走親戚遇到七大姑八大姨，往往會搞不清楚哪位親戚應該喊什麼稱呼，很是尷尬。不僅小孩搞不清親戚關係和親戚稱謂，就連年輕一代的大人也都常常模糊混亂。</p>\n<p> 「親戚關係計算器」為你避免了叫錯、不會叫親戚的尷尬，收錄了中國親戚關係稱呼大全，只需簡單的輸入即可完成稱呼計算。稱呼計算器同時兼容了不同地域的方言叫法，你可以稱呼父親為：「老爸」、「爹地」、「老爺子」等等。讓您準確的叫出親戚稱謂，理清親屬之間的親戚關係，輕鬆掌握中國式的親戚關係換算，讓你更瞭解中國文化。</p>\n<p>支持iOS、iPadOS和macOS。</p>\n<p>下載地址：<a href=\"https://apps.apple.com/app/relationship/id1665455216\">App Store</a></p>\n<p>有任何疑問或者建議，可以通過 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 聯繫。</p>\n<h3 id=\"感謝-算法開源\"><a href=\"#感謝-算法開源\" class=\"headerlink\" title=\"感謝  算法開源\"></a>感謝  <a href=\"https://github.com/mumuy/relationship/\">算法開源</a></h3><blockquote>\n<p>​      本項目致力於讓更多人瞭解中國傳統文化，學習各式各樣的中國親戚稱謂。本人深感項目的完善僅憑一己之力是遠遠不夠的，如果你對此感興趣，歡迎關注本項目 或 提交代碼，與我一起完善它，使它被更多人熟知和使用。你也可以通過本項目提供的方法和教程，打造更符合自己使用習慣的親戚計算器版本。</p>\n<p>​      算法基於「MIT許可協議」開源，除需在源碼中保留版權信息和許可聲明外，你有權利使用、複製、修改、合併、出版發行、散布、再授權及販售軟件及軟件的副本。算法持續更新中，如發現錯漏或有想法建議可在此 反饋問題。</p>\n</blockquote>\n<h2 id=\"隱私政策\"><a href=\"#隱私政策\" class=\"headerlink\" title=\"隱私政策\"></a>隱私政策</h2><p>本隱私政策描述了我們如何收集，使用和披露與服務有關的個人信息，您通過訪問服務即表示同意。「個人信息」是指有關可識別個人的信息，但不包括商業信息。</p>\n<h3 id=\"收集哪些信息\"><a href=\"#收集哪些信息\" class=\"headerlink\" title=\"收集哪些信息\"></a>收集哪些信息</h3><p>親戚關係計算器希望使您與我們的體驗令人滿意且安全。我們的數據收集政策使您可以選擇向我們提供多少個人信息，並控制我們如何使用這些信息。我們的目標是為您提供滿意的體驗，同時讓您控制自己的隱私。親戚關係計算器收集和使用信息主要是為了使您使用我們的服務更輕鬆，更有意義。如果您選擇向我們註冊，則可能會在不同時間要求您提供信息，我們將竭盡所能使親戚關係計算器滿足您的服務並只為您提供所需的內容。</p>\n<h3 id=\"收集的信息與用途\"><a href=\"#收集的信息與用途\" class=\"headerlink\" title=\"收集的信息與用途\"></a>收集的信息與用途</h3><p>為識別您的設備 ID 並預防惡意程序、提高服務安全性、保障運營質量及效率，我們使用的第三方平台包括Firebase 會收集您的設備信息（包括IMEI、MEID、IMSI、GUID、MAC地址）、您安裝的應用信息或運行中的進程信息。</p>\n<p><strong>匿名信息</strong>是指無法與特定個人聯繫在一起的信息，我們不知道您的姓名，住處或出生日期。匿名信息可能以多種方式收集，包括通過使用 Cookie，網絡信標或從您使用的設備中收集。</p>\n<h3 id=\"第三方分析工具\"><a href=\"#第三方分析工具\" class=\"headerlink\" title=\"第三方分析工具\"></a>第三方分析工具</h3><p>我們的服務可能包含來自我們服務提供商的第三方跟蹤以及數據收集和分析工具，例如 Google Analytics（分析）和 Google Firebase 。此類第三方可以在我們的服務中使用 Cookie，API 和 SDK，以使他們能夠代表我們收集和分析與用戶和設備相關的數據和信息。第三方可能會訪問並收集有關您的數據和信息，例如您的設備標識符(包括IMEI、MEID、IMSI、GUID、MAC地址及其他相關信息)，語言環境（使用特定語言的特定位置），地理位置信息，IP 地址，應用程序使用情況，訪問權限和會話時間，傳感器數據，設備上存在的或在設備上特定時間使用的應用程序以及您對廣告的觀看和互動，以提供其服務，包括例如啓用，提供和投放廣告在下面有更詳細的說明。</p>\n<p>我們的服務提供商的隱私政策可能包括有關其數據收集和使用慣例以及跟蹤技術的其他條款和披露，我們鼓勵您檢查這些隱私政策以瞭解有關其數據收集和使用慣例以及 Cookie 的使用的更多信息以及其他類似的跟蹤技術。</p>\n<p>為識別您的設備 ID 並預防惡意程序、提高服務安全性、保障運營質量及效率，我們使用的第三方平台將獲取設備序列號。</p>\n<ul>\n<li><strong>Google</strong><br>隱私政策：<a href=\"https://policies.google.com/privacy\">https://policies.google.com/privacy</a></li>\n</ul>\n<h3 id=\"第三方廣告合作夥伴\"><a href=\"#第三方廣告合作夥伴\" class=\"headerlink\" title=\"第三方廣告合作夥伴\"></a>第三方廣告合作夥伴</h3><p>我們與各種廣告商，廣告網絡，廣告服務器和分析公司合作。這些廣告商，廣告網絡，廣告服務器和分析公司使用各種技術以及第三方公司的技術來收集數據，以便向您和其他用戶發送（或投放）相關廣告。這些技術可能包括放置Cookie或網絡信標，使用唯一或非唯一的非個人標識符，或在我們的服務上使用其他技術，並且這些技術可用於跟蹤用戶行為，跟蹤我們如何服務正在使用中，有可能為您提供更多相關的廣告。這些目標廣告可能會出現在我們的服務或您訪問的其他服務上。本隱私政策不涵蓋廣告商，廣告網絡，廣告服務器和分析公司對各種技術的使用。這些公司還可能從您從其他公司使用的服務中獲取信息，這些服務包括但不限於其他網站，移動網站，可移動下載的應用程序和可下載的桌面應用程序，並將這些信息與他們通過我們的服務通過這些第三方技術獲取的信息結合在一起。您應該意識到，我們無法控制這些第三方技術或其中包含的信息。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>親戚關係計算器可以隨時修改本隱私政策。請經常檢查是否有任何更改。繼續使用服務，即表示您接受本隱私政策的所有更新。此版本於 2023 年 02 月 01 日更新。</p>\n<h3 id=\"聯繫我們\"><a href=\"#聯繫我們\" class=\"headerlink\" title=\"聯繫我們\"></a>聯繫我們</h3><p>我們希望此聲明能為您提供豐富而清晰的信息。如果您有任何疑問或進一步的信息，請給我們發送電子郵件。</p>\n<p>App 與服務反饋: <a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a></p>\n","tags":["Swift","SwiftUI","iOS","macOS","iPadOS"]},{"title":"亲戚关系计算器介绍","url":"/2023/01/20/introducing-Relationship/","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><img src=\"https://gewill.org/assets/Relationship-iPhone-preview.png\" alt=\"Relationship-iPhone-preview\"></p>\n<p><img src=\"https://gewill.org/assets/Relationship-iPad-preview.png\" alt=\"Relationship-iPad-preview\"></p>\n<p>逢年过节遇到三姑六婆，拒绝叫不出口的尴尬！轻松搞定亲戚关系～</p>\n<p>亲属是基于婚姻、血缘和法律拟制而形成的社会关系。亲属关系包括夫妻、父母、子女、兄弟姊妹、祖父母和外祖父母、孙子女和外孙子女、儿媳和公婆、女婿和岳父母、以及其他三代以内的旁系血亲，如伯、叔、姑、舅、姨、侄子女、甥子女、堂兄弟姊妹、表兄弟姊妹、姨兄弟姊妹等。</p>\n<p>​      亲属称谓指是以本人为中心确定亲族成员和本人关系的名称，是基于血亲姻亲基础上的亲属之间相互称呼的名称、叫法。汉族的家族亲属关系条理分明尊卑有序：比自己长一辈的称呼有姨姑舅叔伯，同辈的有兄弟姊妹、堂表亲等等，下一辈有甥侄等等。中国人由于姻亲而产生的亲戚关系相当庞杂，“祖宗十八代”、“五服”、“六亲”、“九族”让人难以区分，其派生出的各种称谓也是中华文化的一大特征。</p>\n<p>​      如今由于工作生活节奏差异，很多关系稍疏远的亲戚之间来往并不多，年龄差异长幼辈分模糊。春节拜年走亲戚遇到七大姑八大姨，往往会搞不清楚哪位亲戚应该喊什么称呼，很是尴尬。不仅小孩搞不清亲戚关系和亲戚称谓，就连年轻一代的大人也都常常模糊混乱。</p>\n<p>​      “亲戚关系计算器”为你避免了叫错、不会叫亲戚的尴尬，收录了中国亲戚关系称呼大全，只需简单的输入即可完成称呼计算。称呼计算器同时兼容了不同地域的方言叫法，你可以称呼父亲为：“老爸”、“爹地”、“老爷子”等等。让您准确的叫出亲戚称谓，理清亲属之间的亲戚关系，轻松掌握中国式的亲戚关系换算，让你更了解中国文化。</p>\n<p>支持iOS、iPadOS和macOS。</p>\n<p>下载地址：<a href=\"https://apps.apple.com/app/relationship/id1665455216\">App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<h3 id=\"感谢-算法开源\"><a href=\"#感谢-算法开源\" class=\"headerlink\" title=\"感谢  算法开源\"></a>感谢  <a href=\"https://github.com/mumuy/relationship/\">算法开源</a></h3><blockquote>\n<p>​      本项目致力于让更多人了解中国传统文化，学习各式各样的中国亲戚称谓。本人深感项目的完善仅凭一己之力是远远不够的，如果你对此感兴趣，欢迎关注本项目 或 提交代码，与我一起完善它，使它被更多人熟知和使用。你也可以通过本项目提供的方法和教程，打造更符合自己使用习惯的亲戚计算器版本。</p>\n<p>​      算法基于「MIT许可协议」开源，除需在源码中保留版权信息和许可声明外，你有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本。算法持续更新中，如发现错漏或有想法建议可在此 反馈问题。</p>\n</blockquote>\n<h2 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h2><p>本隐私政策描述了我们如何收集，使用和披露与服务有关的个人信息，您通过访问服务即表示同意。“个人信息”是指有关可识别个人的信息，但不包括商业信息。</p>\n<h3 id=\"收集哪些信息\"><a href=\"#收集哪些信息\" class=\"headerlink\" title=\"收集哪些信息\"></a>收集哪些信息</h3><p>亲戚关系计算器希望使您与我们的体验令人满意且安全。我们的数据收集政策使您可以选择向我们提供多少个人信息，并控制我们如何使用这些信息。我们的目标是为您提供满意的体验，同时让您控制自己的隐私。亲戚关系计算器收集和使用信息主要是为了使您使用我们的服务更轻松，更有意义。如果您选择向我们注册，则可能会在不同时间要求您提供信息，我们将竭尽所能使亲戚关系计算器满足您的服务并只为您提供所需的内容。</p>\n<h3 id=\"收集的信息与用途\"><a href=\"#收集的信息与用途\" class=\"headerlink\" title=\"收集的信息与用途\"></a>收集的信息与用途</h3><p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台包括Firebase 会收集您的设备信息（包括IMEI、MEID、IMSI、GUID、MAC地址）、您安装的应用信息或运行中的进程信息。</p>\n<p><strong>匿名信息</strong>是指无法与特定个人联系在一起的信息，我们不知道您的姓名，住处或出生日期。匿名信息可能以多种方式收集，包括通过使用 Cookie，网络信标或从您使用的设备中收集。</p>\n<h3 id=\"第三方分析工具\"><a href=\"#第三方分析工具\" class=\"headerlink\" title=\"第三方分析工具\"></a>第三方分析工具</h3><p>我们的服务可能包含来自我们服务提供商的第三方跟踪以及数据收集和分析工具，例如 Google Analytics（分析）和 Google Firebase 。此类第三方可以在我们的服务中使用 Cookie，API 和 SDK，以使他们能够代表我们收集和分析与用户和设备相关的数据和信息。第三方可能会访问并收集有关您的数据和信息，例如您的设备标识符(包括IMEI、MEID、IMSI、GUID、MAC地址及其他相关信息)，语言环境（使用特定语言的特定位置），地理位置信息，IP 地址，应用程序使用情况，访问权限和会话时间，传感器数据，设备上存在的或在设备上特定时间使用的应用程序以及您对广告的观看和互动，以提供其服务，包括例如启用，提供和投放广告在下面有更详细的说明。</p>\n<p>我们的服务提供商的隐私政策可能包括有关其数据收集和使用惯例以及跟踪技术的其他条款和披露，我们鼓励您检查这些隐私政策以了解有关其数据收集和使用惯例以及 Cookie 的使用的更多信息以及其他类似的跟踪技术。</p>\n<p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台将获取设备序列号。</p>\n<ul>\n<li><strong>Google</strong><br>隐私政策：<a href=\"https://policies.google.com/privacy\">https://policies.google.com/privacy</a></li>\n</ul>\n<h3 id=\"第三方广告合作伙伴\"><a href=\"#第三方广告合作伙伴\" class=\"headerlink\" title=\"第三方广告合作伙伴\"></a>第三方广告合作伙伴</h3><p>我们与各种广告商，广告网络，广告服务器和分析公司合作。这些广告商，广告网络，广告服务器和分析公司使用各种技术以及第三方公司的技术来收集数据，以便向您和其他用户发送（或投放）相关广告。这些技术可能包括放置Cookie或网络信标，使用唯一或非唯一的非个人标识符，或在我们的服务上使用其他技术，并且这些技术可用于跟踪用户行为，跟踪我们如何服务正在使用中，有可能为您提供更多相关的广告。这些目标广告可能会出现在我们的服务或您访问的其他服务上。本隐私政策不涵盖广告商，广告网络，广告服务器和分析公司对各种技术的使用。这些公司还可能从您从其他公司使用的服务中获取信息，这些服务包括但不限于其他网站，移动网站，可移动下载的应用程序和可下载的桌面应用程序，并将这些信息与他们通过我们的服务通过这些第三方技术获取的信息结合在一起。您应该意识到，我们无法控制这些第三方技术或其中包含的信息。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>亲戚关系计算器可以随时修改本隐私政策。请经常检查是否有任何更改。继续使用服务，即表示您接受本隐私政策的所有更新。此版本于 2023 年 02 月 01 日更新。</p>\n<h3 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h3><p>我们希望此声明能为您提供丰富而清晰的信息。如果您有任何疑问或进一步的信息，请给我们发送电子邮件。</p>\n<p>App 与服务反馈: <a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a></p>\n","tags":["Swift","SwiftUI","iOS","macOS","iPadOS"]},{"title":"秘密日记介绍(Introducing Secret Diary)","url":"/2023/03/02/introducing-Secret-Diary/","content":"<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p><img src=\"https://gewill.org/assets/SecretDiary/SecretDiary-iPhone-preview2.jpg\" alt=\"SecretDiary-iPhone-preview\"></p>\n<p><img src=\"https://gewill.org/assets/SecretDiary/SecretDiary-iPad-preview2.jpg\" alt=\"SecretDiary-iPad-preview\"></p>\n<p><img src=\"https://gewill.org/assets/SecretDiary/SecretDiary-mac-preview.jpg\" alt=\"SecretDiary-mac-preview\"></p>\n<p>秘密日记是一款专门为用户提供安全保护的日记应用。这款应用能够帮助用户记录日常生活中的点点滴滴，同时还能够保护用户的隐私。</p>\n<p>使用秘密日记，您可以设置密码，而非指纹或面容，确保只有您可以访问您的日记。此外，秘密日记还提供多种精美的字体可供选择，帮助您将日记记录得更加精美和个性化。</p>\n<p>秘密日记的界面简洁明了，易于使用。您可以根据内容对已有的日记进行搜索，方便您快速查找想要的内容。</p>\n<p>总的来说，秘密日记是一款简单好用、功能强大的日记应用，它能够帮助您更好地记录生活中的点滴，并保护您的隐私。如果您正在寻找一款安全、易用的日记应用，秘密日记绝对是您的最佳选择。</p>\n<p>The Secret Diary is a diary application designed specifically to provide users with secure protection. This application helps users record their daily lives and protects their privacy at the same time.</p>\n<p>With the Secret Diary, you can set a password, rather than relying on fingerprints or facial recognition, to ensure that only you can access your diary. In addition, the Secret Diary offers a variety of beautiful fonts for you to choose from, helping you make your diary entries more beautiful and personalized.</p>\n<p>The interface of the Secret Diary is clear and easy to use. You can search for existing diary entries based on content, making it easy for you to quickly find what you’re looking for.</p>\n<p>Overall, the Secret Diary is a simple and powerful diary application that helps you better record the moments of your life while protecting your privacy. If you’re looking for a safe and user-friendly diary application, the Secret Diary is definitely your best choice.</p>\n<p><a href=\"https://apps.apple.com/app/id6445909382\">App Store下载</a><br><a href=\"https://apps.apple.com/app/id6445909382\">Download on the App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策Privacy-policy\"><a href=\"#隐私政策Privacy-policy\" class=\"headerlink\" title=\"隐私政策Privacy policy\"></a>隐私政策Privacy policy</h1><p>本App不进行任何隐私信息收集或上传。</p>\n<p>This App does not collect or upload any private information.</p>\n"},{"title":"阅账介绍","url":"/2021/04/18/introducing-Subscriptions-Bill/","content":"<p><img src=\"https://gewill.org/assets/subscriptions-mac-preview.jpg\" alt=\"subscriptions-mac-preview\"></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><ol>\n<li><p>轻松记录全部订阅账单。</p>\n</li>\n<li><p>统计平均每日、每周、每月和每年花费。</p>\n</li>\n<li><p>支持iCloud同步全设备。</p>\n</li>\n</ol>\n<p>下载地址：<a href=\"https://apps.apple.com/cn/app/%E9%98%85%E5%B8%90/id1561803236\">App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<h2 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h2><p>本隐私政策描述了我们如何收集，使用和披露与服务有关的个人信息，您通过访问服务即表示同意。“个人信息”是指有关可识别个人的信息，但不包括商业信息。</p>\n<h3 id=\"收集哪些信息\"><a href=\"#收集哪些信息\" class=\"headerlink\" title=\"收集哪些信息\"></a>收集哪些信息</h3><p>阅账希望使您与我们的体验令人满意且安全。我们的数据收集政策使您可以选择向我们提供多少个人信息，并控制我们如何使用这些信息。我们的目标是为您提供满意的体验，同时让您控制自己的隐私。阅账收集和使用信息主要是为了使您使用我们的服务更轻松，更有意义。如果您选择向我们注册，则可能会在不同时间要求您提供信息，我们将竭尽所能使阅账满足您的服务并只为您提供所需的内容。</p>\n<h3 id=\"收集的信息与用途\"><a href=\"#收集的信息与用途\" class=\"headerlink\" title=\"收集的信息与用途\"></a>收集的信息与用途</h3><p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台包括Firebase 会收集您的设备信息（包括IMEI、MEID、IMSI、GUID、MAC地址）、您安装的应用信息或运行中的进程信息。</p>\n<p><strong>匿名信息</strong>是指无法与特定个人联系在一起的信息，我们不知道您的姓名，住处或出生日期。匿名信息可能以多种方式收集，包括通过使用 Cookie，网络信标或从您使用的设备中收集。</p>\n<h3 id=\"第三方分析工具\"><a href=\"#第三方分析工具\" class=\"headerlink\" title=\"第三方分析工具\"></a>第三方分析工具</h3><p>我们的服务可能包含来自我们服务提供商的第三方跟踪以及数据收集和分析工具，例如 Google Analytics（分析）和 Google Firebase 。此类第三方可以在我们的服务中使用 Cookie，API 和 SDK，以使他们能够代表我们收集和分析与用户和设备相关的数据和信息。第三方可能会访问并收集有关您的数据和信息，例如您的设备标识符(包括IMEI、MEID、IMSI、GUID、MAC地址及其他相关信息)，语言环境（使用特定语言的特定位置），地理位置信息，IP 地址，应用程序使用情况，访问权限和会话时间，传感器数据，设备上存在的或在设备上特定时间使用的应用程序以及您对广告的观看和互动，以提供其服务，包括例如启用，提供和投放广告在下面有更详细的说明。</p>\n<p>我们的服务提供商的隐私政策可能包括有关其数据收集和使用惯例以及跟踪技术的其他条款和披露，我们鼓励您检查这些隐私政策以了解有关其数据收集和使用惯例以及 Cookie 的使用的更多信息以及其他类似的跟踪技术。</p>\n<p>为识别您的设备 ID 并预防恶意程序、提高服务安全性、保障运营质量及效率，我们使用的第三方平台将获取设备序列号。</p>\n<ul>\n<li><strong>Google</strong><br>隐私政策：<a href=\"https://policies.google.com/privacy\">https://policies.google.com/privacy</a></li>\n</ul>\n<h3 id=\"第三方广告合作伙伴\"><a href=\"#第三方广告合作伙伴\" class=\"headerlink\" title=\"第三方广告合作伙伴\"></a>第三方广告合作伙伴</h3><p>我们与各种广告商，广告网络，广告服务器和分析公司合作。这些广告商，广告网络，广告服务器和分析公司使用各种技术以及第三方公司的技术来收集数据，以便向您和其他用户发送（或投放）相关广告。这些技术可能包括放置Cookie或网络信标，使用唯一或非唯一的非个人标识符，或在我们的服务上使用其他技术，并且这些技术可用于跟踪用户行为，跟踪我们如何服务正在使用中，有可能为您提供更多相关的广告。这些目标广告可能会出现在我们的服务或您访问的其他服务上。本隐私政策不涵盖广告商，广告网络，广告服务器和分析公司对各种技术的使用。这些公司还可能从您从其他公司使用的服务中获取信息，这些服务包括但不限于其他网站，移动网站，可移动下载的应用程序和可下载的桌面应用程序，并将这些信息与他们通过我们的服务通过这些第三方技术获取的信息结合在一起。您应该意识到，我们无法控制这些第三方技术或其中包含的信息。</p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>阅账可以随时修改本隐私政策。请经常检查是否有任何更改。继续使用服务，即表示您接受本隐私政策的所有更新。此版本于 2023 年 02 月 01 日更新。</p>\n<h3 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h3><p>我们希望此声明能为您提供丰富而清晰的信息。如果您有任何疑问或进一步的信息，请给我们发送电子邮件。</p>\n<p>App 与服务反馈: <a href=\"mailto:531sunlight@gmail.com\">531sunlight@gmail.com</a></p>\n"},{"title":"SwiftyModel介绍","url":"/2021/11/16/introducing-SwiftyModel/","content":"<p><img src=\"https://gewill.org/assets/SwiftyModel-mac-preview.jpg\" alt=\"SwiftyModel-mac-preview\"></p>\n<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p>使用 SwiftyJSON 生成在 Swift 语言中支持 SwiftyJSON 的 Model（模型）。</p>\n<p>一键复制和分享代码。</p>\n<p>Use SwiftyJSON to generate models that support SwiftyJSON in Swift Language.</p>\n<p>One-click to copy or share code.</p>\n<p>例如输入以下JSON：</p>\n<p>For example, enter the following JSON:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span> <span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span> <span class=\"punctuation\">:</span> <span class=\"string\">&quot;Jacky&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;notifications&quot;</span> <span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;pets&quot;</span> <span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;cat&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dog&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出Swift Model：</p>\n<p>Output Swift Model:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Foundation</span><br><span class=\"line\"><span class=\"keyword\">import</span> SwiftyJSON</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">NewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> notifications: <span class=\"type\">Bool</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pets: [<span class=\"type\">String</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">json</span>: <span class=\"type\">JSON</span>) &#123;</span><br><span class=\"line\">        id <span class=\"operator\">=</span> json[<span class=\"string\">&quot;id&quot;</span>].intValue</span><br><span class=\"line\">        name <span class=\"operator\">=</span> json[<span class=\"string\">&quot;name&quot;</span>].stringValue</span><br><span class=\"line\">        notifications <span class=\"operator\">=</span> json[<span class=\"string\">&quot;notifications&quot;</span>].boolValue</span><br><span class=\"line\">        pets <span class=\"operator\">=</span> json[<span class=\"string\">&quot;pets&quot;</span>].arrayValue.map &#123; <span class=\"variable\">$0</span>.stringValue &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下载地址：<a href=\"https://apps.apple.com/us/app/swiftymodel/id1594180242\">App Store</a></p>\n<p><a href=\"https://apps.apple.com/cn/app/swiftymodel/id1594180242\">App Store下载</a><br><a href=\"https://apps.apple.com/app/swiftymodel/id1594180242\">Download on the App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策Privacy-policy\"><a href=\"#隐私政策Privacy-policy\" class=\"headerlink\" title=\"隐私政策Privacy policy\"></a>隐私政策Privacy policy</h1><p>本App不进行任何隐私信息收集或上传。</p>\n<p>This App does not collect or upload any private information.</p>\n","tags":["Swift","macOS"]},{"title":"Introducing iPerfman","url":"/2022/11/28/introducing-iPerfman-en/","content":"<h1 id=\"Introducing\"><a href=\"#Introducing\" class=\"headerlink\" title=\"Introducing\"></a>Introducing</h1><p><img src=\"https://gewill.org/assets/iPerfman-iPhone-screenshot2.jpg\" alt=\"iPerfman-iPhone-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-iPad-screenshot1.jpg\" alt=\"iPerfman-iPad-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-mac-screenshot1.jpg\" alt=\"iPerfman-mac-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-tv-screenshot2.jpg\" alt=\"iPerfman-tv-screenshot\"></p>\n<p>iPerfman is an iPerf3 tool that supports all apple platforms: iOS, iPadOS, macOS, and tvOS.</p>\n<p>The iperf series of tools perform active measurements to determine the maximum achievable bandwidth on IP networks.</p>\n<p>Beautiful speedometer and speed chart.</p>\n<p>You can test the LAN network speed to find the best WIFI router location.</p>\n<p>You can test more complex networks by manually setting test parameters, for example to test the performance of UDP mode, and use the bandwidth-limiting functionality to simulate a bandwidth-constrained network environment.</p>\n<p>iPerfman supports both Chinese and English, and you can choose your preferred language in the settings for ease of use.</p>\n<p>Overall, iPerfman is a powerful network speed measurement tool that helps you evaluate network performance and provides you with a better network experience.</p>\n<p><a href=\"https://apps.apple.com/app/iperfman/id6444657542\">Download <strong>iPerfman Pro</strong> on the App Store</a></p>\n<p><a href=\"https://apps.apple.com/app/iperfman/id6447375831\">Download <strong>iPerfman</strong> on the App Store</a></p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"Privacy-policy\"><a href=\"#Privacy-policy\" class=\"headerlink\" title=\"Privacy policy\"></a>Privacy policy</h1><p>This App does not collect or upload any private information.</p>\n","tags":["Swift","SwiftUI","tvOS","iOS","macOS","iPadOS"]},{"title":"VoiceAI Chat介绍(introducing VoiceAI Chat)","url":"/2023/03/05/introducing-VoiceAI-Chat/","content":"<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p><img src=\"https://gewill.org/assets/VoiceAI-Chat/VoiceAI-Chat-iPhone-preview.jpg\" alt=\"VoiceAI-Chat-iPhone-preview\"></p>\n<p><img src=\"https://gewill.org/assets/VoiceAI-Chat/VoiceAI-Chat-mac-preview.jpg\" alt=\"VoiceAI-Chat-mac-preview\"></p>\n<p>VoiceAI Chat是一个简单且用户友好的AI聊天应用程序，支持文本和语音输入，能够识别口语并将其转录为文本。此外，该应用程序可以大声朗读AI生成的响应。在先进的OpenAI技术的支持下，用户可以在获得API密钥后轻松与应用程序聊天。<br>此外，<a href=\"https://github.com/gewill/OpenAISwiftUI\">开源代码</a>使应用程序透明且值得信赖。</p>\n<p>VoiceAI Chat is a simple and user-friendly AI chat application that supports both text and voice input, with the ability to recognize and transcribe spoken language into text. In addition, the app can read out AI-generated responses aloud. Powered by advanced OpenAI technology, users can easily chat with the app after obtaining an API key. </p>\n<p>Moreover, the <a href=\"https://github.com/gewill/OpenAISwiftUI\">open-source code</a> makes the application transparent and trustworthy. </p>\n<p><a href=\"https://apps.apple.com/app/id6445994863\">App Store下载</a><br><a href=\"https://apps.apple.com/app/id6445994863\">Download on the App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策Privacy-policy\"><a href=\"#隐私政策Privacy-policy\" class=\"headerlink\" title=\"隐私政策Privacy policy\"></a>隐私政策Privacy policy</h1><p>本App不进行任何隐私信息收集或上传。</p>\n<p>This App does not collect or upload any private information.</p>\n"},{"title":"iPerfman介绍","url":"/2022/11/28/introducing-iPerfman-zh_CN/","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><img src=\"https://gewill.org/assets/iPerfman-iPhone-screenshot2.jpg\" alt=\"iPerfman-iPhone-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-iPad-screenshot1.jpg\" alt=\"iPerfman-iPad-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-mac-screenshot1.jpg\" alt=\"iPerfman-mac-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-tv-screenshot2.jpg\" alt=\"iPerfman-tv-screenshot\"></p>\n<p>iPerfman 是一个 iPerf3工具，支持所有苹果平台：iOS、iPadOS、macOS和tvOS。</p>\n<p>iPerf 系列工具执行测量 IP 网络上可实现的最大带宽。</p>\n<p>具有漂亮速度仪和速度图表。</p>\n<p>您可以测试局域网网络速度以找到最佳的WIFI路由器位置。</p>\n<p>您可以通过手动设置测试参数来测试更多复杂的网络，例如可以测试 UDP 模式的性能，并使用带宽限制功能来模拟具有带宽限制的网络环境。</p>\n<p>iPerfman 支持中文和英文两种语言，您可以在设置中选择您喜欢的语言，便于使用。</p>\n<p>总之，iPerfman 是一款强大的网络测速工具，可以帮助您评估网络性能，为您提供更优质的网络体验。</p>\n<p><a href=\"https://apps.apple.com/cn/app/iperfman/id6444657542\">App Store下载 <strong>iPerfman Pro</strong></a></p>\n<p><a href=\"https://apps.apple.com/cn/app/iperfman/id6447375831\">App Store下载 <strong>iPerfman</strong></a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<h1 id=\"隐私政策\"><a href=\"#隐私政策\" class=\"headerlink\" title=\"隐私政策\"></a>隐私政策</h1><p>本App不进行任何隐私信息收集或上传。</p>\n","tags":["Swift","SwiftUI","tvOS","iOS","macOS","iPadOS"]},{"title":"iPerfman介紹","url":"/2022/11/28/introducing-iPerfman-zh_Hant/","content":"<h1 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h1><p><img src=\"https://gewill.org/assets/iPerfman-iPhone-screenshot2.jpg\" alt=\"iPerfman-iPhone-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-iPad-screenshot1.jpg\" alt=\"iPerfman-iPad-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-mac-screenshot1.jpg\" alt=\"iPerfman-mac-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-tv-screenshot2.jpg\" alt=\"iPerfman-tv-screenshot\"></p>\n<p>iPerfman 是一個 iPerf3工具，支持所有蘋果平台：iOS、iPadOS、macOS和tvOS。</p>\n<p>iPerf 系列工具執行測量 IP 網絡上可實現的最大帶寬。</p>\n<p>具有漂亮速度儀和速度圖表。</p>\n<p>您可以測試局域網網絡速度以找到最佳的WIFI路由器位置。</p>\n<p>您可以通過手動設置測試參數來測試更多複雜的網絡，例如可以測試 UDP 模式的性能，並使用帶寬限制功能來模擬具有帶寬限制的網絡環境。</p>\n<p>iPerfman 支持中文和英文兩種語言，您可以在設置中選擇您喜歡的語言，便於使用。</p>\n<p>總之，iPerfman 是一款強大的網絡測速工具，可以幫助您評估網絡性能，為您提供更優質的網絡體驗。</p>\n<p><a href=\"https://apps.apple.com/cn/app/iperfman/id6444657542\">App Store下載 <strong>iPerfman Pro</strong></a></p>\n<p><a href=\"https://apps.apple.com/cn/app/iperfman/id6447375831\">App Store下載 <strong>iPerfman</strong></a></p>\n<p>有任何疑問或者建議，可以通過 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 聯繫。</p>\n<h2 id=\"隱私政策\"><a href=\"#隱私政策\" class=\"headerlink\" title=\"隱私政策\"></a>隱私政策</h2><p>本App不進行任何隱私信息收集或上傳。</p>\n","tags":["Swift","SwiftUI","tvOS","iOS","macOS","iPadOS"]},{"title":"iPerfman介绍","url":"/2022/11/28/introducing-iPerfman/","content":"<h1 id=\"介绍Introducing\"><a href=\"#介绍Introducing\" class=\"headerlink\" title=\"介绍Introducing\"></a>介绍Introducing</h1><p><img src=\"https://gewill.org/assets/iPerfman-iPhone-screenshot2.jpg\" alt=\"iPerfman-iPhone-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-iPad-screenshot1.jpg\" alt=\"iPerfman-iPad-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-mac-screenshot1.jpg\" alt=\"iPerfman-mac-screenshot\"></p>\n<p><img src=\"https://gewill.org/assets/iPerfman-tv-screenshot2.jpg\" alt=\"iPerfman-tv-screenshot\"></p>\n<p>iPerfman 是一个 iPerf3工具，支持所有苹果平台：iOS、iPadOS、macOS和tvOS。</p>\n<p>iPerf 系列工具执行测量 IP 网络上可实现的最大带宽。</p>\n<p>具有漂亮速度仪和速度图表。</p>\n<p>您可以测试局域网网络速度以找到最佳的WIFI路由器位置。</p>\n<p>您可以通过手动设置测试参数来测试更多复杂的网络，例如可以测试 UDP 模式的性能，并使用带宽限制功能来模拟具有带宽限制的网络环境。</p>\n<p>iPerfman 支持中文和英文两种语言，您可以在设置中选择您喜欢的语言，便于使用。</p>\n<p>总之，iPerfman 是一款强大的网络测速工具，可以帮助您评估网络性能，为您提供更优质的网络体验。</p>\n<p>iPerfman is an iPerf3 tool that supports all apple platforms: iOS, iPadOS, macOS, and tvOS.</p>\n<p>The iperf series of tools perform active measurements to determine the maximum achievable bandwidth on IP networks.</p>\n<p>Beautiful speedometer and speed chart.</p>\n<p>You can test the LAN network speed to find the best WIFI router location.</p>\n<p>You can test more complex networks by manually setting test parameters, for example to test the performance of UDP mode, and use the bandwidth-limiting functionality to simulate a bandwidth-constrained network environment.</p>\n<p>iPerfman supports both Chinese and English, and you can choose your preferred language in the settings for ease of use.</p>\n<p>Overall, iPerfman is a powerful network speed measurement tool that helps you evaluate network performance and provides you with a better network experience.</p>\n<p><a href=\"https://apps.apple.com/cn/app/iperfman/id6444657542\">App Store下载</a><br><a href=\"https://apps.apple.com/app/iperfman/id6444657542\">Download on the App Store</a></p>\n<p>有任何疑问或者建议，可以通过 <a href=\"mailto:531sunlight@gmail.com\">Email</a> 联系。</p>\n<p>If you have any questions or suggestions, you can contact them through <a href=\"mailto:531sunlight@gmail.com\">Email</a>.</p>\n<h1 id=\"隐私政策Privacy-policy\"><a href=\"#隐私政策Privacy-policy\" class=\"headerlink\" title=\"隐私政策Privacy policy\"></a>隐私政策Privacy policy</h1><p>本App不进行任何隐私信息收集或上传。</p>\n<p>This App does not collect or upload any private information.</p>\n","tags":["Swift","SwiftUI","tvOS","iOS","macOS","iPadOS"]},{"title":"Know what's my weakness","url":"/2015/05/07/know-what-s-my-weakness/","content":"<p><font color=\"DarkGreen\" size=\"4\"><font><br>Know what’s my weakness, but can’t change it. How tragedy.</p>\n"},{"title":"“Terminal 打开文件方式\"","url":"/2015/05/09/open-file-with-application-in-terminal/","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">open -a application ~/file</span><br></pre></td></tr></table></figure>\n\n<p>也可编辑<code>vim ~/.zshrc</code>关联软件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">alias ty=&#x27;open -a typora&#x27;</span><br><span class=\"line\">alias -s md=&#x27;open -a typora&#x27;</span><br><span class=\"line\">alias -s markdown=&#x27;open -a typora&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">alias showt=&#x27;defaults write com.apple.finder AppleShowAllFiles TRUE&#x27;</span><br><span class=\"line\">alias showf=&#x27;defaults write com.apple.finder AppleShowAllFiles FALSE&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>即刻实现输入文件名打开文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/Readme.md </span><br></pre></td></tr></table></figure>"},{"title":"new DNS setting","url":"/2015/07/07/new-DNS-setting/","content":"<p>我的需求： <a href=\"http://www.gewill.org/\">www.gewill.org</a> 跳转到 gewill.org。</p>\n<p>使用<a href=\"http://wan.wang/\">万网</a>域名服务提供的 DNS 解析需要备案才能实现301跳转，所以之前使用 <a href=\"http://dnspod.com/\">DNSPOD</a> 的服务，但是不知为何竟失效了，gewill.org 能打开，<a href=\"http://www.gewill.org打不开了.换了其他的也都不行,dig/\">www.gewill.org打不开了。换了其他的也都不行，dig</a> 也是对的。</p>\n<p>Google Github Pages 的相关信息，发现官方帮助文档就有简单是实现方案：</p>\n<blockquote>\n<p><a href=\"https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/\">Configuring a www subdomain</a></p>\n</blockquote>\n<blockquote>\n<p>If you configure both an apex domain (e.g. example.com) and a matching www subdomain (e.g. <a href=\"http://www.example.com/\">www.example.com</a>), GitHub’s servers will automatically create redirects between the two.</p>\n</blockquote>\n<blockquote>\n<p>For example:</p>\n</blockquote>\n<blockquote>\n<p>If your CNAME file contains example.com, then <a href=\"http://www.example.com/\">www.example.com</a> will redirect to example.com.<br>If your CNAME file contains <a href=\"http://www.example.com/\">www.example.com</a>, then example.com will redirect to <a href=\"http://www.example.com/\">www.example.com</a>.”</p>\n</blockquote>\n<p><strong>DNS 同时 CNAME 顶级域名和 WWW，然后在 Github CNAME文件中添加偏好的一个。</strong></p>\n<p>虽然之前有看过，一则英文看了只解一二，二则当时对于 DNS 和网站都刚刚接触。我学习新鲜东西节奏还是太慢，以后还要多思考，多与人交流。官方文档还是最简洁正确的。</p>\n"},{"title":"New Shortcuts","url":"/2015/08/04/new-shortcuts/","content":"<p>Update 2015-08-15: Updated for more search shortcuts.</p>\n<table>\n<thead>\n<tr>\n<th>Shortcuts</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>F1</td>\n<td>Alfred</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>Look up in Dash</td>\n</tr>\n<tr>\n<td>Command-F2</td>\n<td>Open or hide Dash</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>Look up in EuDic</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>Search with Google</td>\n</tr>\n<tr>\n<td>F5</td>\n<td>Next source in Input menu</td>\n</tr>\n<tr>\n<td>F6</td>\n<td>Speak selected text</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Default Shortcuts</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Control-Space Bar</td>\n<td>Change input source</td>\n</tr>\n<tr>\n<td>Command-Space Bar</td>\n<td>Spotlight</td>\n</tr>\n<tr>\n<td>Command-T</td>\n<td>New Tab</td>\n</tr>\n<tr>\n<td>Shift-Command-T</td>\n<td>Reopen Closed Tab or File</td>\n</tr>\n<tr>\n<td>Command-W</td>\n<td>Close Tab or Window</td>\n</tr>\n<tr>\n<td>Option–Left Arrow</td>\n<td>Move the insertion point to the beginning of the previous word.</td>\n</tr>\n<tr>\n<td>Control-A</td>\n<td>Move to the beginning of the line or paragraph.</td>\n</tr>\n<tr>\n<td>Control-E</td>\n<td>Move to the end of a line or paragraph.</td>\n</tr>\n</tbody></table>\n<p>Use all F1, F2, etc. keys as standard functions keys. It‘s more \u0010efficient.</p>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=Zbo-A9SLEGc\">Predictive Text in OS X</a>, <code>esc</code> in some apps, <code>F5</code> in all apps. But <a href=\"https://github.com/dongyuwei/hallelujahIM\">hallelujahIM(哈利路亚 英文输入法)</a> is much better with translation.</p>\n</blockquote>\n<p><a href=\"https://support.apple.com/en-us/HT201236\">More OS X default shortcuts</a></p>\n"},{"title":"Difference Segue Excute in Container View to AVPlayerViewController","url":"/2015/09/05/prepareForSegue-sender/","content":"<h2 id=\"1-Difference-Segue-Excute-in-Container-View-to-AVPlayerViewController\"><a href=\"#1-Difference-Segue-Excute-in-Container-View-to-AVPlayerViewController\" class=\"headerlink\" title=\"1. Difference Segue Excute in Container View to AVPlayerViewController\"></a>1. Difference Segue Excute in Container View to AVPlayerViewController</h2><blockquote>\n<p>Demo on <a href=\"https://github.com/gewill/test-projects/tree/master/test%20prepare%20for%20segue%20between%20Swift%20and%20Objective-C\">GitHub</a></p>\n</blockquote>\n<h3 id=\"Objective-C-this-method-won’t-be-execute\"><a href=\"#Objective-C-this-method-won’t-be-execute\" class=\"headerlink\" title=\"Objective-C this method won’t be execute.\"></a>Objective-C this method won’t be execute.</h3><figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In Swift should check the method, even user don&#x27;t tap the cantainer view.</span></span><br><span class=\"line\"><span class=\"comment\">// But in Objective-C,  *** Terminating app due to uncaught exception &#x27;NSInvalidUnarchiveOperationException&#x27;, </span></span><br><span class=\"line\"><span class=\"comment\">// reason: &#x27;Could not instantiate class named AVPlayerViewController&#x27;</span></span><br><span class=\"line\">- (<span class=\"type\">void</span>)prepareForSegue:(<span class=\"built_in\">UIStoryboardSegue</span> *)segue sender:(<span class=\"type\">id</span>)sender &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// set up the player</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([segue.identifier  isEqual: <span class=\"string\">@&quot;videoSegue&quot;</span>]) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@&quot;yishengsuoai&quot;</span> ofType:<span class=\"string\">@&quot;mp4&quot;</span>];</span><br><span class=\"line\">        <span class=\"built_in\">NSURL</span> *url = [[<span class=\"built_in\">NSURL</span> alloc] initFileURLWithPath:path];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">AVPlayerViewController</span> *vc = segue.destinationViewController;</span><br><span class=\"line\">        vc.player = [<span class=\"built_in\">AVPlayer</span> playerWithURL:url];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BEGIN avkit_ios_config</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">func</span> <span class=\"title function_\">prepareForSegue</span>(<span class=\"params\">segue</span>: <span class=\"type\">UIStoryboardSegue</span>, <span class=\"params\">sender</span>: <span class=\"type\">AnyObject</span>?)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> segue.identifier <span class=\"operator\">==</span> <span class=\"string\">&quot;videoSegue&quot;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set up the player</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoURL <span class=\"operator\">=</span> <span class=\"type\">NSBundle</span>.mainBundle().<span class=\"type\">URLForResource</span>(<span class=\"string\">&quot;TestVideo&quot;</span>,</span><br><span class=\"line\">                                                       withExtension: <span class=\"string\">&quot;m4v&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoViewController <span class=\"operator\">=</span></span><br><span class=\"line\">                   segue.destinationViewController <span class=\"keyword\">as!</span> <span class=\"type\">AVPlayerViewController</span></span><br><span class=\"line\">        videoViewController.player <span class=\"operator\">=</span> <span class=\"type\">AVPlayer</span>(URL: videoURL)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// END avkit_ios_config</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Conclusion\"><a href=\"#2-Conclusion\" class=\"headerlink\" title=\"2. Conclusion\"></a>2. Conclusion</h2><ul>\n<li>Swift + Container View（In IB）</li>\n<li>Objective-C + AVPlayerLayer (In Code)</li>\n</ul>\n<h2 id=\"3-Definiton\"><a href=\"#3-Definiton\" class=\"headerlink\" title=\"3. Definiton\"></a>3. Definiton</h2><h3 id=\"prepareForSegue-sender\"><a href=\"#prepareForSegue-sender\" class=\"headerlink\" title=\"- prepareForSegue:sender:\"></a>- prepareForSegue:sender:</h3><p>Notifies the view controller that a segue is about to be performed.</p>\n<p>###Discussion</p>\n<p>The default implementation of this method does nothing. Your view controller overrides this method when it needs to pass relevant data to the new view controller. The segue object describes the transition and includes references to both view controllers involved in the segue.</p>\n<p>Because segues can be triggered from multiple sources, you can use the information in the segue and sender parameters to disambiguate between different logical paths in your app. For example, if the segue originated from a table view, the sender parameter would identify the table view cell that the user tapped. You could use that information to set the data on the destination view controller.</p>\n"},{"title":"status bar的控制和全屏返回手势","url":"/2015/08/15/status-bar-and-fullscreen-pop-gesture/","content":"<p>摘自 sunnyxx 的文章：<a href=\"http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/\">一个丝滑的全屏滑动返回手势\n</a></p>\n<h2 id=\"status-bar\"><a href=\"#status-bar\" class=\"headerlink\" title=\"status bar\"></a>status bar</h2><p>UIApplication 全局的 status bar，牵一发还得动全身，不过 Apple 在 iOS7 之后为 vc 控制自己的 status bar 提供了下面几个方法，终于让这个全局变量变成了局部变量：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">UIStatusBarStyle</span>)preferredStatusBarStyle <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">7</span>_0);</span><br><span class=\"line\">- (<span class=\"type\">BOOL</span>)prefersStatusBarHidden <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">7</span>_0);</span><br><span class=\"line\">- (<span class=\"built_in\">UIStatusBarAnimation</span>)preferredStatusBarUpdateAnimation <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">7</span>_0);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fullscreen-pop-gesture\"><a href=\"#fullscreen-pop-gesture\" class=\"headerlink\" title=\"fullscreen-pop-gesture\"></a>fullscreen-pop-gesture</h2><p>一个 UINavigationController 管理了串行的 N 个 UIViewController 栈式的 push 和 pop，而 UINavigationBar 由 UINavigationController 管理，这就导致了 UIViewController 无法控制自己上面的 bar 单独的隐藏或显示。<br>但是对 UINavigationBar 的控制，依然是全局的，可能 Apple 觉得 App 不应该有这种奇怪的页面结构？</p>\n<p>解决这个问题的方法也不难，在滑动返回的后要出现的那个 view controller 中写下面的代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)viewWillAppear:(<span class=\"type\">BOOL</span>)animated &#123;</span><br><span class=\"line\">    [<span class=\"variable language_\">super</span> viewWillAppear:animated];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.navigationController setNavigationBarHidden:<span class=\"literal\">YES</span> animated:animated];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://ww2.sinaimg.cn/large/51530583jw1esvbwmjck8g208w0ft7wj.gif\" alt=\"fullscreen-pop-gesture\"></p>\n<h2 id=\"Xcode-tips\"><a href=\"#Xcode-tips\" class=\"headerlink\" title=\"Xcode tips\"></a>Xcode tips</h2><ul>\n<li>Secondary click : Jump to definition</li>\n<li>Show Relative Items(^1): Callers<br> <img src=\"http://ww3.sinaimg.cn/mw1024/51530583jw1eq8xm0otg5j20qk0wk45d.jpg\" alt=\"Show Relative Items\"></li>\n</ul>\n"},{"title":"iOS开发总结","url":"/2017/05/10/summary-of-iOS-developing/","content":"<p>自从学习iOS开发以来，断断续续加起来也有2年时间了。最近离职，是时候做一下总结，梳理一下知识点。</p>\n<p>iOS开发最开始入门是 Stanford University Developing iOS 7 Apps，虽然是英语，但是最基本的概念也是那时候一点点学的。当然后来离职参加培训班，是进步最快速的一段时间，也培养了真正自学的能力。到后来参加iOS的工作，一直以来引以为好的就是自学能力。因为对于iOS开发来说：语言、设计模式、框架、文档、调试和测试等都已经掌握了，实际开发工作中，无非是一些实际的问题或者新的框架和系统特性，只要查询文档或者Google一下都能解决了。</p>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>谈到iOS框架，必须是MVC，工作以来的项目一直都是MVC。足够简单的分层和经久验证的良好设计。对于其他的如：MVVM，只是了解，实际项目中未曾应用。比较简单的业务逻辑和团队人数少的情况下，MVC足够好用。</p>\n<h2 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h2><p>Objective-C是入门语言，其语言复杂性足够新手望而却步，但是也就属性特性和方法调用比较难。后来工作中一直使用Swift，才感觉到现代语言的简单和强大。尤其是Swift多范式，支持函数式编程，尤为方便。由于对Swift的偏爱，我也逐渐把第三方库都替换成了Swift对应的版本。Cocoapods对于Framework的支持也比较好， 添加<code>use_frameworks!</code>，即可调用Objective-C的库也很Swifty。</p>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>Delegate、通知、KVO、Target-Action、Block(Closure)、工厂方法、单例等就不一一介绍，更具实际需求选择合适且喜欢的就行。特别推荐这篇文章：<a href=\"https://www.objccn.io/issue-7-4/\">消息传递机制</a></p>\n<h2 id=\"Cocoa-Touch\"><a href=\"#Cocoa-Touch\" class=\"headerlink\" title=\"Cocoa Touch\"></a>Cocoa Touch</h2><p>iOS渲染层次树、view、layer、响应链、Core Animation、自定义view、常见UIKit的控件的继承关系，table view、collection view等都应该熟练使用。</p>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><p>微博、Twitter、博客、书、视频教程都是很好的。列几个对我影响比较的：</p>\n<ul>\n<li><a href=\"http://web.stanford.edu/class/cs193p/cgi-bin/drupal/\">CS 193P iPhone Application Development</a></li>\n<li><a href=\"http://limboy.me/\">limboy</a></li>\n<li><a href=\"https://www.objccn.io/\">ObjC中国</a></li>\n<li><a href=\"https://www.objccn.io/products/advanced-swift/\">Swift 进阶</a></li>\n<li><a href=\"https://www.amazon.com/Programming-iOS-Views-Controllers-Frameworks/dp/1491936851\">Programming iOS 9</a></li>\n<li><a href=\"https://item.jd.com/11598468.html\">iOS开发进阶</a></li>\n<li><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00IDSGY06/ref=sr_1_1\">Effective Objective-C 2.0</a></li>\n</ul>\n<h2 id=\"常用库\"><a href=\"#常用库\" class=\"headerlink\" title=\"常用库\"></a>常用库</h2><p>这里是最为推荐的几个库：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod <span class=\"string\">&#x27;SwiftyJSON&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;SnapKit&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;IGListKit&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;Kanna&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;URLNavigator&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;MXSegmentedPager&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;QMUIKit&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;IBAnimatable&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;Ruler&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;DZNEmptyDataSet&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;CYLTabBarController&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;FDFullscreenPopGesture&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;MJRefresh&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;SwiftyUserDefaults&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;YYKit&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Test tools</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;MLeaksFinder&#x27;</span></span><br><span class=\"line\">pod <span class=\"string\">&#x27;FLEX&#x27;</span>, <span class=\"string\">&#x27;~&gt; 2.0&#x27;</span>, <span class=\"symbol\">:configurations</span> =&gt; [<span class=\"string\">&#x27;Debug&#x27;</span>]</span><br><span class=\"line\">pod <span class=\"string\">&#x27;Reveal-SDK&#x27;</span>, <span class=\"string\">&#x27;~&gt; 4.0&#x27;</span>, <span class=\"symbol\">:configurations</span> =&gt; [<span class=\"string\">&#x27;Debug&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n"},{"title":"在Swift标准库中触发运行时错误","url":"/2020/07/27/triggers-a-runtime-error-in-swift-standard-library/","content":"<h1 id=\"Array-swift\"><a href=\"#Array-swift\" class=\"headerlink\" title=\"Array.swift\"></a>Array.swift</h1><p>Using a negative number or an index equal to or greater than <code>count</code> triggers a runtime error.</p>\n<p>使用负数或大于等于<code>count</code>的索引会触发运行时错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(emptyDoubles[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ClosedRange-swift\"><a href=\"#ClosedRange-swift\" class=\"headerlink\" title=\"ClosedRange.swift\"></a>ClosedRange.swift</h1><p>An equivalent range must be representable as a closed range.  For example, passing an empty range as <code>other</code> triggers a runtime error,  because an empty range cannot be represented by a closed range instance.</p>\n<p>等效范围必须可以表示为闭合范围。例如，将空范围作为 <code>other</code> 传递会触发运行时错误，因为空范围不能由封闭范围实例表示。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> emptyRange <span class=\"operator\">=</span> <span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"type\">ClosedRange</span>(emptyRange)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dictionary-swift\"><a href=\"#Dictionary-swift\" class=\"headerlink\" title=\"Dictionary.swift\"></a>Dictionary.swift</h1><p>Passing a sequence with duplicate keys to this initializer results in a runtime error. If your sequence might have duplicate keys, use the <code>Dictionary(_:uniquingKeysWith:)</code> initializer instead.</p>\n<p>向此构造器传递具有重复键的序列会导致运行时错误。如果序列可能有重复的键，则使用<code>Dictionary(_:uniquingKeysWith:)</code> 初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> digitWords <span class=\"operator\">=</span> [<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;two&quot;</span>, <span class=\"string\">&quot;three&quot;</span>, <span class=\"string\">&quot;four&quot;</span>, <span class=\"string\">&quot;five&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> wordToValue <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(uniqueKeysWithValues: <span class=\"built_in\">zip</span>(digitWords, <span class=\"number\">1</span> <span class=\"operator\">...</span> <span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> wordToValueAndRemoveDuplicateKeys <span class=\"operator\">=</span> <span class=\"type\">Dictionary</span>(<span class=\"built_in\">zip</span>([<span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;one&quot;</span>, <span class=\"string\">&quot;three&quot;</span>, <span class=\"string\">&quot;four&quot;</span>, <span class=\"string\">&quot;five&quot;</span>], <span class=\"number\">1</span> <span class=\"operator\">...</span> <span class=\"number\">5</span>)) &#123; <span class=\"built_in\">max</span>(<span class=\"variable\">$0</span>, <span class=\"variable\">$1</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DictionaryCasting-swift\"><a href=\"#DictionaryCasting-swift\" class=\"headerlink\" title=\"DictionaryCasting.swift\"></a>DictionaryCasting.swift</h1><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dic: [<span class=\"type\">String</span>: <span class=\"keyword\">Any</span>] <span class=\"operator\">=</span> [<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;li&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"number\">18</span>]</span><br><span class=\"line\">dic <span class=\"keyword\">as!</span> [<span class=\"type\">String</span>: <span class=\"type\">String</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Integers-swift\"><a href=\"#Integers-swift\" class=\"headerlink\" title=\"Integers.swift\"></a>Integers.swift</h1><p>When the additive inverse of a value is unrepresentable in a conforming type, the operation should either trap or return an exceptional value. For example, using the negation operator (prefix <code>-</code>) with <code>Int.min</code> results in a runtime error.</p>\n<p>当一个值的负值在一个符合类型中不可表示时，操作应该捕获或返回一个异常值。例如，将否定运算符(前缀<code>-</code>)与 <code>Int.min</code>一起使用会导致运行时错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x <span class=\"operator\">=</span> <span class=\"type\">Int</span>.min</span><br><span class=\"line\"><span class=\"keyword\">let</span> y <span class=\"operator\">=</span> <span class=\"operator\">-</span>x</span><br><span class=\"line\"><span class=\"comment\">// Overflow error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> z <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"type\">Int8</span>.min</span><br><span class=\"line\"><span class=\"comment\">// Overflow error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"type\">Int8</span>.min</span><br><span class=\"line\">y.negate()</span><br><span class=\"line\"><span class=\"comment\">// Overflow error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> z <span class=\"operator\">=</span> <span class=\"type\">UInt32</span>(<span class=\"operator\">-</span><span class=\"number\">500</span>)</span><br><span class=\"line\"><span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Optional-swift\"><a href=\"#Optional-swift\" class=\"headerlink\" title=\"Optional.swift\"></a>Optional.swift</h1><p>In debug builds (<code>-Onone</code>), the <code>unsafelyUnwrapped</code> property has the same behavior as using the postfix <code>!</code> operator and triggers a runtime error if the instance is <code>nil</code>.</p>\n<p>在调试版本(<code>-Onone</code>)中，<code>unsafelyUnwrapped</code>属性的行为与使用后缀的行为相同<code>!</code>如果实例为<code> nil</code> ，则触发运行时错误。<strong>谨慎使用</strong>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> optionalInt: <span class=\"type\">Int</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">optionalInt.unsafelyUnwrapped</span><br><span class=\"line\">optionalInt<span class=\"operator\">!</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Policy-swift\"><a href=\"#Policy-swift\" class=\"headerlink\" title=\"Policy.swift\"></a>Policy.swift</h1><p>If you have prior knowledge that an <code>AnyObject</code> instance has a particular type, you can use the unconditional downcast operator (<code>as!</code>). Performing an invalid cast triggers a runtime error.</p>\n<p>如果您事先知道<code>AnyObject</code>实例具有特定的类型，则可以使用无条件向下转换运算符(<code>as</code>)。 执行无效强制转换会触发运行时错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message <span class=\"operator\">=</span> s <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Successful cast to String: <span class=\"subst\">\\(message)</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;Successful cast to String: This is a bridged string.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> badCase <span class=\"operator\">=</span> v <span class=\"keyword\">as!</span> <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"comment\">// Runtime error</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Range-swift\"><a href=\"#Range-swift\" class=\"headerlink\" title=\"Range.swift\"></a>Range.swift</h1><p>An equivalent range must be representable as an instance of Range<Bound>. For example, passing a closed range with an upper bound of <code>Int.max</code> triggers a runtime error, because the resulting half-open range would require an upper bound of <code>Int.max + 1</code>, which is not representable as</p>\n<p>范围边界值越界会触发运行时错误，如设置最大值为<code>Int.max</code>时。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Range</span>(<span class=\"number\">0</span> <span class=\"operator\">...</span> <span class=\"type\">Int</span>.max)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Always use the slice’s <code>startIndex</code> property instead of assuming that its indices start at a particular value. Attempting to access an element by using an index outside the bounds of the slice’s indices may result in a runtime error, even if that index is valid for the original collection.</p>\n<p>始终使用 slice 的<code>startIndex</code>属性，而不是假设它的索引以特定的值开始。试图通过在slice索引的边界之外使用索引来访问元素可能会导致运行时错误，即使该索引对原始集合有效。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> streets <span class=\"operator\">=</span> [<span class=\"string\">&quot;Adams&quot;</span>, <span class=\"string\">&quot;Bryant&quot;</span>, <span class=\"string\">&quot;Channing&quot;</span>, <span class=\"string\">&quot;Douglas&quot;</span>, <span class=\"string\">&quot;Evarts&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> streetsSlice <span class=\"operator\">=</span> streets[<span class=\"number\">2</span><span class=\"operator\">...</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(streetsSlice)</span><br><span class=\"line\"><span class=\"comment\">// [&quot;Channing&quot;, &quot;Douglas&quot;, &quot;Evarts&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(streetsSlice.startIndex)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(streetsSlice[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">// &quot;Channing&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(streetsSlice[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\">// error: Index out of bounds</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RangeReplaceableCollection-swift\"><a href=\"#RangeReplaceableCollection-swift\" class=\"headerlink\" title=\"RangeReplaceableCollection.swift\"></a>RangeReplaceableCollection.swift</h1><p>Attempting to remove more elements than exist in the collection triggers a runtime error.</p>\n<p>尝试移除集合中存在的元素数目多于存在的元素会触发运行时错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array <span class=\"operator\">=</span> <span class=\"type\">Array</span>(<span class=\"number\">0</span> <span class=\"operator\">..&lt;</span> <span class=\"number\">5</span>)</span><br><span class=\"line\">array.removeFirst(<span class=\"number\">6</span>)</span><br><span class=\"line\">array.removeLast(<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SetCasting-swift\"><a href=\"#SetCasting-swift\" class=\"headerlink\" title=\"SetCasting.swift\"></a>SetCasting.swift</h1><p> We can’t just delegate to _setDownCastConditional here because we rely on  <code>as!</code> to generate nice runtime errors when the downcast fails.</p>\n<p>Set 向下强制转换失败时，会产生运行时错误。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s: <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyHashable</span>&gt; <span class=\"operator\">=</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;3&quot;</span>]</span><br><span class=\"line\">s <span class=\"keyword\">as!</span> <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"StaticString-swift\"><a href=\"#StaticString-swift\" class=\"headerlink\" title=\"StaticString.swift\"></a>StaticString.swift</h1><figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// * a pointer to a null-terminated sequence of UTF-8 code units:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> emoji: <span class=\"type\">StaticString</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;<span class=\"subst\">\\u&#123;1F600&#125;</span>&quot;</span></span><br><span class=\"line\">emoji.hasPointerRepresentation <span class=\"comment\">// -&gt; true</span></span><br><span class=\"line\">emoji.isASCII <span class=\"comment\">// -&gt; false</span></span><br><span class=\"line\"><span class=\"comment\">// emoji.unicodeScalar // -&gt; Fatal error!</span></span><br><span class=\"line\">emoji.utf8CodeUnitCount <span class=\"comment\">// -&gt; 4</span></span><br><span class=\"line\">emoji.utf8Start[<span class=\"number\">0</span>] <span class=\"comment\">// -&gt; 0xF0</span></span><br><span class=\"line\">emoji.utf8Start[<span class=\"number\">1</span>] <span class=\"comment\">// -&gt; 0x9F</span></span><br><span class=\"line\">emoji.utf8Start[<span class=\"number\">2</span>] <span class=\"comment\">// -&gt; 0x98</span></span><br><span class=\"line\">emoji.utf8Start[<span class=\"number\">3</span>] <span class=\"comment\">// -&gt; 0x80</span></span><br><span class=\"line\">emoji.utf8Start[<span class=\"number\">4</span>] <span class=\"comment\">// -&gt; 0x00</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// * a single Unicode scalar value, under very limited circumstances:</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyStaticScalar</span>: <span class=\"title class_\">ExpressibleByUnicodeScalarLiteral</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">UnicodeScalarLiteralType</span> <span class=\"operator\">=</span> <span class=\"type\">StaticString</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value: <span class=\"type\">StaticString</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">unicodeScalarLiteral</span> <span class=\"params\">value</span>: <span class=\"type\">StaticString</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.value <span class=\"operator\">=</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> emoji: <span class=\"type\">StaticString</span> <span class=\"operator\">=</span> <span class=\"type\">MyStaticScalar</span>(<span class=\"string\">&quot;<span class=\"subst\">\\u&#123;1F600&#125;</span>&quot;</span>).value</span><br><span class=\"line\">emoji.hasPointerRepresentation <span class=\"comment\">// -&gt; false</span></span><br><span class=\"line\">emoji.isASCII <span class=\"comment\">// -&gt; false</span></span><br><span class=\"line\">emoji.unicodeScalar.value <span class=\"comment\">// -&gt; 0x1F600</span></span><br><span class=\"line\">emoji.utf8CodeUnitCount <span class=\"comment\">// -&gt; Fatal error!</span></span><br><span class=\"line\">emoji.utf8Start <span class=\"comment\">// -&gt; Fatal error!</span></span><br></pre></td></tr></table></figure>\n\n<p><code>hasPointerRepresentation</code> 一个布尔值，表示静态字符串是否存储指向以 null 结尾的 UTF-8代码单元序列的指针。</p>\n<ul>\n<li>true：这时访问<code>unicodeScalar</code>会触发运行时错误；</li>\n<li>false：静态字符串存储单个 Unicode 标量值。这时访问<code>utf8</code>开头的属性会触发运行时错误；</li>\n</ul>\n"},{"title":"Use gitcafe pages","url":"/2015/05/10/use-gitcafe-pages/","content":"<p>Github pages is too slowly, today I use gitcafe host my website by default. And resolve github to overseas users. </p>\n<span id=\"more\"></span>\n<p>DNS setting<br><img src=\"http://i.imgur.com/AkEBeDI.png\" alt=\"Imgur\"><br>gitcafe setting<br><img src=\"http://i.imgur.com/stVzwwf.png\" alt=\"Imgur\"><br>github add CNAME in <code>your Hexo folder/source</code><br><img src=\"http://i.imgur.com/3R9IiOx.png\" alt=\"Imgur\"></p>\n<p>在国内访问国外的网站服务器速度慢，延迟高，实在是不爽。使用国内的 gitcafe 托管我的网站, 海外 IP 访问继续使用 github。</p>\n"}]